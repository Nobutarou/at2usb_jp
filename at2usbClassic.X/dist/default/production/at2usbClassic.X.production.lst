

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Oct 24 19:45:12 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og9 
     1                           	processor	16F1455
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    15                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    22                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    25                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    27                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    28                           	psect	text1,local,class=CODE,merge=1,delta=2
    29                           	psect	text2,local,class=CODE,merge=1,delta=2
    30                           	psect	text3,local,class=CODE,merge=1,delta=2
    31                           	psect	text4,local,class=CODE,merge=1,delta=2
    32                           	psect	text5,local,class=CODE,merge=1,delta=2
    33                           	psect	text6,local,class=CODE,merge=1,delta=2
    34                           	psect	text7,local,class=CODE,merge=1,delta=2
    35                           	psect	text8,local,class=CODE,merge=1,delta=2
    36                           	psect	text9,local,class=CODE,merge=1,delta=2
    37                           	psect	text10,local,class=CODE,merge=1,delta=2
    38                           	psect	text11,local,class=CODE,merge=1,delta=2
    39                           	psect	text12,local,class=CODE,merge=1,delta=2
    40                           	psect	text13,local,class=CODE,merge=1,delta=2
    41                           	psect	text14,local,class=CODE,merge=1,delta=2
    42                           	psect	text15,local,class=CODE,merge=1,delta=2
    43                           	psect	text16,local,class=CODE,merge=1,delta=2
    44                           	psect	text17,local,class=CODE,merge=1,delta=2
    45                           	psect	text18,local,class=CODE,merge=1,delta=2
    46                           	psect	text19,local,class=CODE,merge=1,delta=2
    47                           	psect	text20,local,class=CODE,merge=1,delta=2
    48                           	psect	text21,local,class=CODE,merge=1,delta=2
    49                           	psect	text22,local,class=CODE,merge=1,delta=2
    50                           	psect	text23,local,class=CODE,merge=1,delta=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text30,local,class=CODE,merge=1,delta=2
    58                           	psect	text31,local,class=CODE,merge=1,delta=2
    59                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text33,local,class=CODE,merge=1,delta=2
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text39,local,class=CODE,merge=1,delta=2
    67                           	psect	text40,local,class=CODE,merge=1,delta=2
    68                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    69                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text44,local,class=CODE,merge=1,delta=2
    72                           	psect	text45,local,class=CODE,merge=1,delta=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	psect	text49,local,class=CODE,merge=1,delta=2
    77                           	psect	text50,local,class=CODE,merge=1,delta=2
    78                           	psect	text51,local,class=CODE,merge=1,delta=2
    79                           	psect	text52,local,class=CODE,merge=1,delta=2
    80                           	psect	text53,local,class=CODE,merge=1,delta=2
    81                           	psect	text54,local,class=CODE,merge=1,delta=2
    82                           	psect	text55,local,class=CODE,merge=1,delta=2
    83                           	psect	text56,local,class=CODE,merge=1,delta=2
    84                           	psect	text57,local,class=CODE,merge=1,delta=2
    85                           	psect	text58,local,class=CODE,merge=1,delta=2
    86                           	psect	text59,local,class=CODE,merge=1,delta=2
    87                           	psect	text60,local,class=CODE,merge=1,delta=2
    88                           	psect	text61,local,class=CODE,merge=1,delta=2
    89                           	psect	text62,local,class=CODE,merge=1,delta=2
    90                           	psect	text63,local,class=CODE,merge=1,delta=2
    91                           	psect	text64,local,class=CODE,merge=1,delta=2
    92                           	psect	text65,local,class=CODE,merge=1,delta=2
    93                           	psect	text66,local,class=CODE,merge=1,delta=2
    94                           	psect	text67,local,class=CODE,merge=1,delta=2
    95                           	psect	text68,local,class=CODE,merge=1,delta=2
    96                           	psect	text69,local,class=CODE,merge=1,delta=2
    97                           	psect	text70,local,class=CODE,merge=1,delta=2
    98                           	psect	text71,local,class=CODE,merge=1,delta=2
    99                           	psect	text72,local,class=CODE,merge=1,delta=2
   100                           	psect	text73,local,class=CODE,merge=1,delta=2
   101                           	psect	text74,local,class=CODE,merge=1,delta=2
   102                           	psect	text75,local,class=CODE,merge=1,delta=2
   103                           	psect	text76,local,class=CODE,merge=1,delta=2
   104                           	psect	text77,local,class=CODE,merge=1,delta=2
   105                           	psect	text78,local,class=CODE,merge=1,delta=2
   106                           	psect	text79,local,class=CODE,merge=1,delta=2
   107                           	psect	text80,local,class=CODE,merge=1,delta=2
   108                           	psect	text81,local,class=CODE,merge=1,delta=2
   109                           	psect	text82,local,class=CODE,merge=1,delta=2
   110                           	psect	text83,local,class=CODE,merge=1,delta=2
   111                           	psect	text84,local,class=CODE,merge=1,delta=2
   112                           	psect	text85,local,class=CODE,merge=1,delta=2
   113                           	psect	text86,local,class=CODE,merge=1,delta=2
   114                           	psect	text87,local,class=CODE,merge=1,delta=2
   115                           	psect	text88,local,class=CODE,merge=1,delta=2
   116                           	psect	text89,local,class=CODE,merge=1,delta=2
   117                           	psect	text90,local,class=CODE,merge=1,delta=2
   118                           	psect	text91,local,class=CODE,merge=1,delta=2
   119                           	psect	text92,local,class=CODE,merge=1,delta=2
   120                           	psect	text93,local,class=CODE,merge=1,delta=2
   121                           	psect	text94,local,class=CODE,merge=1,delta=2
   122                           	psect	text95,local,class=CODE,merge=1,delta=2
   123                           	psect	text96,local,class=CODE,merge=1,delta=2
   124                           	psect	text97,local,class=CODE,merge=1,delta=2
   125                           	psect	text98,local,class=CODE,merge=1,delta=2
   126                           	psect	text99,local,class=CODE,merge=1,delta=2
   127                           	psect	text100,local,class=CODE,merge=1,delta=2
   128                           	psect	text101,local,class=CODE,merge=1,delta=2
   129                           	psect	text102,local,class=CODE,merge=1,delta=2
   130                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   131                           	dabs	1,0x620,48
   132                           	dabs	1,0x5C1,47
   133                           	dabs	1,0x5A0,33
   134                           	dabs	1,0x52C,68
   135                           	dabs	1,0x20,32,_BDT
   136                           	dabs	1,0x48,8,_CtrlTrfData
   137                           	dabs	1,0x40,8,_SetupPkt
   138                           	dabs	1,0xA0,8,_inputReport
   139                           	dabs	1,0x120,1,_outputReport
   140                           	dabs	1,0x232C,0,_keyboard
   141                           	dabs	1,0x2391,0,_keyboardScanCodeQueue
   142                           	dabs	1,0x7E,2
   143     0000                     
   144                           ; Generated 07/09/2023 GMT
   145                           ; 
   146                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   147                           ; All rights reserved.
   148                           ; 
   149                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   150                           ; 
   151                           ; Redistribution and use in source and binary forms, with or without modification, are
   152                           ; permitted provided that the following conditions are met:
   153                           ; 
   154                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   155                           ;        conditions and the following disclaimer.
   156                           ; 
   157                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   158                           ;        of conditions and the following disclaimer in the documentation and/or other
   159                           ;        materials provided with the distribution. Publication is not required when
   160                           ;        this file is used in an embedded application.
   161                           ; 
   162                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   163                           ;        software without specific prior written permission.
   164                           ; 
   165                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   166                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   167                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   168                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   169                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   170                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   171                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   172                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   173                           ; 
   174                           ; 
   175                           ; Code-generator required, PIC16F1455 Definitions
   176                           ; 
   177                           ; SFR Addresses
   178     0000                     	;# 
   179     0001                     	;# 
   180     0002                     	;# 
   181     0003                     	;# 
   182     0004                     	;# 
   183     0005                     	;# 
   184     0006                     	;# 
   185     0007                     	;# 
   186     0008                     	;# 
   187     0009                     	;# 
   188     000A                     	;# 
   189     000B                     	;# 
   190     000C                     	;# 
   191     000E                     	;# 
   192     0011                     	;# 
   193     0012                     	;# 
   194     0015                     	;# 
   195     0016                     	;# 
   196     0016                     	;# 
   197     0017                     	;# 
   198     0018                     	;# 
   199     0019                     	;# 
   200     001A                     	;# 
   201     001B                     	;# 
   202     001C                     	;# 
   203     008C                     	;# 
   204     008E                     	;# 
   205     0091                     	;# 
   206     0092                     	;# 
   207     0095                     	;# 
   208     0096                     	;# 
   209     0097                     	;# 
   210     0098                     	;# 
   211     0099                     	;# 
   212     009A                     	;# 
   213     009B                     	;# 
   214     009B                     	;# 
   215     009C                     	;# 
   216     009D                     	;# 
   217     009E                     	;# 
   218     009F                     	;# 
   219     010C                     	;# 
   220     010E                     	;# 
   221     0111                     	;# 
   222     0112                     	;# 
   223     0113                     	;# 
   224     0114                     	;# 
   225     0115                     	;# 
   226     0116                     	;# 
   227     0117                     	;# 
   228     0118                     	;# 
   229     0119                     	;# 
   230     011D                     	;# 
   231     018C                     	;# 
   232     018E                     	;# 
   233     0191                     	;# 
   234     0191                     	;# 
   235     0192                     	;# 
   236     0193                     	;# 
   237     0193                     	;# 
   238     0194                     	;# 
   239     0195                     	;# 
   240     0196                     	;# 
   241     0197                     	;# 
   242     0199                     	;# 
   243     019A                     	;# 
   244     019B                     	;# 
   245     019B                     	;# 
   246     019C                     	;# 
   247     019D                     	;# 
   248     019E                     	;# 
   249     019F                     	;# 
   250     020C                     	;# 
   251     0211                     	;# 
   252     0211                     	;# 
   253     0212                     	;# 
   254     0212                     	;# 
   255     0213                     	;# 
   256     0213                     	;# 
   257     0214                     	;# 
   258     0214                     	;# 
   259     0215                     	;# 
   260     0215                     	;# 
   261     0215                     	;# 
   262     0216                     	;# 
   263     0216                     	;# 
   264     0217                     	;# 
   265     0217                     	;# 
   266     0391                     	;# 
   267     0392                     	;# 
   268     0393                     	;# 
   269     039A                     	;# 
   270     039B                     	;# 
   271     0611                     	;# 
   272     0612                     	;# 
   273     0613                     	;# 
   274     0613                     	;# 
   275     0614                     	;# 
   276     0615                     	;# 
   277     0616                     	;# 
   278     0616                     	;# 
   279     0691                     	;# 
   280     0692                     	;# 
   281     0693                     	;# 
   282     0694                     	;# 
   283     0695                     	;# 
   284     0E8E                     	;# 
   285     0E8F                     	;# 
   286     0E90                     	;# 
   287     0E91                     	;# 
   288     0E92                     	;# 
   289     0E93                     	;# 
   290     0E94                     	;# 
   291     0E94                     	;# 
   292     0E95                     	;# 
   293     0E96                     	;# 
   294     0E97                     	;# 
   295     0E98                     	;# 
   296     0E99                     	;# 
   297     0E9A                     	;# 
   298     0E9B                     	;# 
   299     0E9C                     	;# 
   300     0E9D                     	;# 
   301     0E9E                     	;# 
   302     0E9F                     	;# 
   303     0FE4                     	;# 
   304     0FE5                     	;# 
   305     0FE6                     	;# 
   306     0FE7                     	;# 
   307     0FE8                     	;# 
   308     0FE9                     	;# 
   309     0FEA                     	;# 
   310     0FEB                     	;# 
   311     0FED                     	;# 
   312     0FEE                     	;# 
   313     0FEF                     	;# 
   314     0000                     	;# 
   315     0001                     	;# 
   316     0002                     	;# 
   317     0003                     	;# 
   318     0004                     	;# 
   319     0005                     	;# 
   320     0006                     	;# 
   321     0007                     	;# 
   322     0008                     	;# 
   323     0009                     	;# 
   324     000A                     	;# 
   325     000B                     	;# 
   326     000C                     	;# 
   327     000E                     	;# 
   328     0011                     	;# 
   329     0012                     	;# 
   330     0015                     	;# 
   331     0016                     	;# 
   332     0016                     	;# 
   333     0017                     	;# 
   334     0018                     	;# 
   335     0019                     	;# 
   336     001A                     	;# 
   337     001B                     	;# 
   338     001C                     	;# 
   339     008C                     	;# 
   340     008E                     	;# 
   341     0091                     	;# 
   342     0092                     	;# 
   343     0095                     	;# 
   344     0096                     	;# 
   345     0097                     	;# 
   346     0098                     	;# 
   347     0099                     	;# 
   348     009A                     	;# 
   349     009B                     	;# 
   350     009B                     	;# 
   351     009C                     	;# 
   352     009D                     	;# 
   353     009E                     	;# 
   354     009F                     	;# 
   355     010C                     	;# 
   356     010E                     	;# 
   357     0111                     	;# 
   358     0112                     	;# 
   359     0113                     	;# 
   360     0114                     	;# 
   361     0115                     	;# 
   362     0116                     	;# 
   363     0117                     	;# 
   364     0118                     	;# 
   365     0119                     	;# 
   366     011D                     	;# 
   367     018C                     	;# 
   368     018E                     	;# 
   369     0191                     	;# 
   370     0191                     	;# 
   371     0192                     	;# 
   372     0193                     	;# 
   373     0193                     	;# 
   374     0194                     	;# 
   375     0195                     	;# 
   376     0196                     	;# 
   377     0197                     	;# 
   378     0199                     	;# 
   379     019A                     	;# 
   380     019B                     	;# 
   381     019B                     	;# 
   382     019C                     	;# 
   383     019D                     	;# 
   384     019E                     	;# 
   385     019F                     	;# 
   386     020C                     	;# 
   387     0211                     	;# 
   388     0211                     	;# 
   389     0212                     	;# 
   390     0212                     	;# 
   391     0213                     	;# 
   392     0213                     	;# 
   393     0214                     	;# 
   394     0214                     	;# 
   395     0215                     	;# 
   396     0215                     	;# 
   397     0215                     	;# 
   398     0216                     	;# 
   399     0216                     	;# 
   400     0217                     	;# 
   401     0217                     	;# 
   402     0391                     	;# 
   403     0392                     	;# 
   404     0393                     	;# 
   405     039A                     	;# 
   406     039B                     	;# 
   407     0611                     	;# 
   408     0612                     	;# 
   409     0613                     	;# 
   410     0613                     	;# 
   411     0614                     	;# 
   412     0615                     	;# 
   413     0616                     	;# 
   414     0616                     	;# 
   415     0691                     	;# 
   416     0692                     	;# 
   417     0693                     	;# 
   418     0694                     	;# 
   419     0695                     	;# 
   420     0E8E                     	;# 
   421     0E8F                     	;# 
   422     0E90                     	;# 
   423     0E91                     	;# 
   424     0E92                     	;# 
   425     0E93                     	;# 
   426     0E94                     	;# 
   427     0E94                     	;# 
   428     0E95                     	;# 
   429     0E96                     	;# 
   430     0E97                     	;# 
   431     0E98                     	;# 
   432     0E99                     	;# 
   433     0E9A                     	;# 
   434     0E9B                     	;# 
   435     0E9C                     	;# 
   436     0E9D                     	;# 
   437     0E9E                     	;# 
   438     0E9F                     	;# 
   439     0FE4                     	;# 
   440     0FE5                     	;# 
   441     0FE6                     	;# 
   442     0FE7                     	;# 
   443     0FE8                     	;# 
   444     0FE9                     	;# 
   445     0FEA                     	;# 
   446     0FEB                     	;# 
   447     0FED                     	;# 
   448     0FEE                     	;# 
   449     0FEF                     	;# 
   450     0000                     	;# 
   451     0001                     	;# 
   452     0002                     	;# 
   453     0003                     	;# 
   454     0004                     	;# 
   455     0005                     	;# 
   456     0006                     	;# 
   457     0007                     	;# 
   458     0008                     	;# 
   459     0009                     	;# 
   460     000A                     	;# 
   461     000B                     	;# 
   462     000C                     	;# 
   463     000E                     	;# 
   464     0011                     	;# 
   465     0012                     	;# 
   466     0015                     	;# 
   467     0016                     	;# 
   468     0016                     	;# 
   469     0017                     	;# 
   470     0018                     	;# 
   471     0019                     	;# 
   472     001A                     	;# 
   473     001B                     	;# 
   474     001C                     	;# 
   475     008C                     	;# 
   476     008E                     	;# 
   477     0091                     	;# 
   478     0092                     	;# 
   479     0095                     	;# 
   480     0096                     	;# 
   481     0097                     	;# 
   482     0098                     	;# 
   483     0099                     	;# 
   484     009A                     	;# 
   485     009B                     	;# 
   486     009B                     	;# 
   487     009C                     	;# 
   488     009D                     	;# 
   489     009E                     	;# 
   490     009F                     	;# 
   491     010C                     	;# 
   492     010E                     	;# 
   493     0111                     	;# 
   494     0112                     	;# 
   495     0113                     	;# 
   496     0114                     	;# 
   497     0115                     	;# 
   498     0116                     	;# 
   499     0117                     	;# 
   500     0118                     	;# 
   501     0119                     	;# 
   502     011D                     	;# 
   503     018C                     	;# 
   504     018E                     	;# 
   505     0191                     	;# 
   506     0191                     	;# 
   507     0192                     	;# 
   508     0193                     	;# 
   509     0193                     	;# 
   510     0194                     	;# 
   511     0195                     	;# 
   512     0196                     	;# 
   513     0197                     	;# 
   514     0199                     	;# 
   515     019A                     	;# 
   516     019B                     	;# 
   517     019B                     	;# 
   518     019C                     	;# 
   519     019D                     	;# 
   520     019E                     	;# 
   521     019F                     	;# 
   522     020C                     	;# 
   523     0211                     	;# 
   524     0211                     	;# 
   525     0212                     	;# 
   526     0212                     	;# 
   527     0213                     	;# 
   528     0213                     	;# 
   529     0214                     	;# 
   530     0214                     	;# 
   531     0215                     	;# 
   532     0215                     	;# 
   533     0215                     	;# 
   534     0216                     	;# 
   535     0216                     	;# 
   536     0217                     	;# 
   537     0217                     	;# 
   538     0391                     	;# 
   539     0392                     	;# 
   540     0393                     	;# 
   541     039A                     	;# 
   542     039B                     	;# 
   543     0611                     	;# 
   544     0612                     	;# 
   545     0613                     	;# 
   546     0613                     	;# 
   547     0614                     	;# 
   548     0615                     	;# 
   549     0616                     	;# 
   550     0616                     	;# 
   551     0691                     	;# 
   552     0692                     	;# 
   553     0693                     	;# 
   554     0694                     	;# 
   555     0695                     	;# 
   556     0E8E                     	;# 
   557     0E8F                     	;# 
   558     0E90                     	;# 
   559     0E91                     	;# 
   560     0E92                     	;# 
   561     0E93                     	;# 
   562     0E94                     	;# 
   563     0E94                     	;# 
   564     0E95                     	;# 
   565     0E96                     	;# 
   566     0E97                     	;# 
   567     0E98                     	;# 
   568     0E99                     	;# 
   569     0E9A                     	;# 
   570     0E9B                     	;# 
   571     0E9C                     	;# 
   572     0E9D                     	;# 
   573     0E9E                     	;# 
   574     0E9F                     	;# 
   575     0FE4                     	;# 
   576     0FE5                     	;# 
   577     0FE6                     	;# 
   578     0FE7                     	;# 
   579     0FE8                     	;# 
   580     0FE9                     	;# 
   581     0FEA                     	;# 
   582     0FEB                     	;# 
   583     0FED                     	;# 
   584     0FEE                     	;# 
   585     0FEF                     	;# 
   586     0000                     	;# 
   587     0001                     	;# 
   588     0002                     	;# 
   589     0003                     	;# 
   590     0004                     	;# 
   591     0005                     	;# 
   592     0006                     	;# 
   593     0007                     	;# 
   594     0008                     	;# 
   595     0009                     	;# 
   596     000A                     	;# 
   597     000B                     	;# 
   598     000C                     	;# 
   599     000E                     	;# 
   600     0011                     	;# 
   601     0012                     	;# 
   602     0015                     	;# 
   603     0016                     	;# 
   604     0016                     	;# 
   605     0017                     	;# 
   606     0018                     	;# 
   607     0019                     	;# 
   608     001A                     	;# 
   609     001B                     	;# 
   610     001C                     	;# 
   611     008C                     	;# 
   612     008E                     	;# 
   613     0091                     	;# 
   614     0092                     	;# 
   615     0095                     	;# 
   616     0096                     	;# 
   617     0097                     	;# 
   618     0098                     	;# 
   619     0099                     	;# 
   620     009A                     	;# 
   621     009B                     	;# 
   622     009B                     	;# 
   623     009C                     	;# 
   624     009D                     	;# 
   625     009E                     	;# 
   626     009F                     	;# 
   627     010C                     	;# 
   628     010E                     	;# 
   629     0111                     	;# 
   630     0112                     	;# 
   631     0113                     	;# 
   632     0114                     	;# 
   633     0115                     	;# 
   634     0116                     	;# 
   635     0117                     	;# 
   636     0118                     	;# 
   637     0119                     	;# 
   638     011D                     	;# 
   639     018C                     	;# 
   640     018E                     	;# 
   641     0191                     	;# 
   642     0191                     	;# 
   643     0192                     	;# 
   644     0193                     	;# 
   645     0193                     	;# 
   646     0194                     	;# 
   647     0195                     	;# 
   648     0196                     	;# 
   649     0197                     	;# 
   650     0199                     	;# 
   651     019A                     	;# 
   652     019B                     	;# 
   653     019B                     	;# 
   654     019C                     	;# 
   655     019D                     	;# 
   656     019E                     	;# 
   657     019F                     	;# 
   658     020C                     	;# 
   659     0211                     	;# 
   660     0211                     	;# 
   661     0212                     	;# 
   662     0212                     	;# 
   663     0213                     	;# 
   664     0213                     	;# 
   665     0214                     	;# 
   666     0214                     	;# 
   667     0215                     	;# 
   668     0215                     	;# 
   669     0215                     	;# 
   670     0216                     	;# 
   671     0216                     	;# 
   672     0217                     	;# 
   673     0217                     	;# 
   674     0391                     	;# 
   675     0392                     	;# 
   676     0393                     	;# 
   677     039A                     	;# 
   678     039B                     	;# 
   679     0611                     	;# 
   680     0612                     	;# 
   681     0613                     	;# 
   682     0613                     	;# 
   683     0614                     	;# 
   684     0615                     	;# 
   685     0616                     	;# 
   686     0616                     	;# 
   687     0691                     	;# 
   688     0692                     	;# 
   689     0693                     	;# 
   690     0694                     	;# 
   691     0695                     	;# 
   692     0E8E                     	;# 
   693     0E8F                     	;# 
   694     0E90                     	;# 
   695     0E91                     	;# 
   696     0E92                     	;# 
   697     0E93                     	;# 
   698     0E94                     	;# 
   699     0E94                     	;# 
   700     0E95                     	;# 
   701     0E96                     	;# 
   702     0E97                     	;# 
   703     0E98                     	;# 
   704     0E99                     	;# 
   705     0E9A                     	;# 
   706     0E9B                     	;# 
   707     0E9C                     	;# 
   708     0E9D                     	;# 
   709     0E9E                     	;# 
   710     0E9F                     	;# 
   711     0FE4                     	;# 
   712     0FE5                     	;# 
   713     0FE6                     	;# 
   714     0FE7                     	;# 
   715     0FE8                     	;# 
   716     0FE9                     	;# 
   717     0FEA                     	;# 
   718     0FEB                     	;# 
   719     0FED                     	;# 
   720     0FEE                     	;# 
   721     0FEF                     	;# 
   722     0000                     	;# 
   723     0001                     	;# 
   724     0002                     	;# 
   725     0003                     	;# 
   726     0004                     	;# 
   727     0005                     	;# 
   728     0006                     	;# 
   729     0007                     	;# 
   730     0008                     	;# 
   731     0009                     	;# 
   732     000A                     	;# 
   733     000B                     	;# 
   734     000C                     	;# 
   735     000E                     	;# 
   736     0011                     	;# 
   737     0012                     	;# 
   738     0015                     	;# 
   739     0016                     	;# 
   740     0016                     	;# 
   741     0017                     	;# 
   742     0018                     	;# 
   743     0019                     	;# 
   744     001A                     	;# 
   745     001B                     	;# 
   746     001C                     	;# 
   747     008C                     	;# 
   748     008E                     	;# 
   749     0091                     	;# 
   750     0092                     	;# 
   751     0095                     	;# 
   752     0096                     	;# 
   753     0097                     	;# 
   754     0098                     	;# 
   755     0099                     	;# 
   756     009A                     	;# 
   757     009B                     	;# 
   758     009B                     	;# 
   759     009C                     	;# 
   760     009D                     	;# 
   761     009E                     	;# 
   762     009F                     	;# 
   763     010C                     	;# 
   764     010E                     	;# 
   765     0111                     	;# 
   766     0112                     	;# 
   767     0113                     	;# 
   768     0114                     	;# 
   769     0115                     	;# 
   770     0116                     	;# 
   771     0117                     	;# 
   772     0118                     	;# 
   773     0119                     	;# 
   774     011D                     	;# 
   775     018C                     	;# 
   776     018E                     	;# 
   777     0191                     	;# 
   778     0191                     	;# 
   779     0192                     	;# 
   780     0193                     	;# 
   781     0193                     	;# 
   782     0194                     	;# 
   783     0195                     	;# 
   784     0196                     	;# 
   785     0197                     	;# 
   786     0199                     	;# 
   787     019A                     	;# 
   788     019B                     	;# 
   789     019B                     	;# 
   790     019C                     	;# 
   791     019D                     	;# 
   792     019E                     	;# 
   793     019F                     	;# 
   794     020C                     	;# 
   795     0211                     	;# 
   796     0211                     	;# 
   797     0212                     	;# 
   798     0212                     	;# 
   799     0213                     	;# 
   800     0213                     	;# 
   801     0214                     	;# 
   802     0214                     	;# 
   803     0215                     	;# 
   804     0215                     	;# 
   805     0215                     	;# 
   806     0216                     	;# 
   807     0216                     	;# 
   808     0217                     	;# 
   809     0217                     	;# 
   810     0391                     	;# 
   811     0392                     	;# 
   812     0393                     	;# 
   813     039A                     	;# 
   814     039B                     	;# 
   815     0611                     	;# 
   816     0612                     	;# 
   817     0613                     	;# 
   818     0613                     	;# 
   819     0614                     	;# 
   820     0615                     	;# 
   821     0616                     	;# 
   822     0616                     	;# 
   823     0691                     	;# 
   824     0692                     	;# 
   825     0693                     	;# 
   826     0694                     	;# 
   827     0695                     	;# 
   828     0E8E                     	;# 
   829     0E8F                     	;# 
   830     0E90                     	;# 
   831     0E91                     	;# 
   832     0E92                     	;# 
   833     0E93                     	;# 
   834     0E94                     	;# 
   835     0E94                     	;# 
   836     0E95                     	;# 
   837     0E96                     	;# 
   838     0E97                     	;# 
   839     0E98                     	;# 
   840     0E99                     	;# 
   841     0E9A                     	;# 
   842     0E9B                     	;# 
   843     0E9C                     	;# 
   844     0E9D                     	;# 
   845     0E9E                     	;# 
   846     0E9F                     	;# 
   847     0FE4                     	;# 
   848     0FE5                     	;# 
   849     0FE6                     	;# 
   850     0FE7                     	;# 
   851     0FE8                     	;# 
   852     0FE9                     	;# 
   853     0FEA                     	;# 
   854     0FEB                     	;# 
   855     0FED                     	;# 
   856     0FEE                     	;# 
   857     0FEF                     	;# 
   858     0000                     	;# 
   859     0001                     	;# 
   860     0002                     	;# 
   861     0003                     	;# 
   862     0004                     	;# 
   863     0005                     	;# 
   864     0006                     	;# 
   865     0007                     	;# 
   866     0008                     	;# 
   867     0009                     	;# 
   868     000A                     	;# 
   869     000B                     	;# 
   870     000C                     	;# 
   871     000E                     	;# 
   872     0011                     	;# 
   873     0012                     	;# 
   874     0015                     	;# 
   875     0016                     	;# 
   876     0016                     	;# 
   877     0017                     	;# 
   878     0018                     	;# 
   879     0019                     	;# 
   880     001A                     	;# 
   881     001B                     	;# 
   882     001C                     	;# 
   883     008C                     	;# 
   884     008E                     	;# 
   885     0091                     	;# 
   886     0092                     	;# 
   887     0095                     	;# 
   888     0096                     	;# 
   889     0097                     	;# 
   890     0098                     	;# 
   891     0099                     	;# 
   892     009A                     	;# 
   893     009B                     	;# 
   894     009B                     	;# 
   895     009C                     	;# 
   896     009D                     	;# 
   897     009E                     	;# 
   898     009F                     	;# 
   899     010C                     	;# 
   900     010E                     	;# 
   901     0111                     	;# 
   902     0112                     	;# 
   903     0113                     	;# 
   904     0114                     	;# 
   905     0115                     	;# 
   906     0116                     	;# 
   907     0117                     	;# 
   908     0118                     	;# 
   909     0119                     	;# 
   910     011D                     	;# 
   911     018C                     	;# 
   912     018E                     	;# 
   913     0191                     	;# 
   914     0191                     	;# 
   915     0192                     	;# 
   916     0193                     	;# 
   917     0193                     	;# 
   918     0194                     	;# 
   919     0195                     	;# 
   920     0196                     	;# 
   921     0197                     	;# 
   922     0199                     	;# 
   923     019A                     	;# 
   924     019B                     	;# 
   925     019B                     	;# 
   926     019C                     	;# 
   927     019D                     	;# 
   928     019E                     	;# 
   929     019F                     	;# 
   930     020C                     	;# 
   931     0211                     	;# 
   932     0211                     	;# 
   933     0212                     	;# 
   934     0212                     	;# 
   935     0213                     	;# 
   936     0213                     	;# 
   937     0214                     	;# 
   938     0214                     	;# 
   939     0215                     	;# 
   940     0215                     	;# 
   941     0215                     	;# 
   942     0216                     	;# 
   943     0216                     	;# 
   944     0217                     	;# 
   945     0217                     	;# 
   946     0391                     	;# 
   947     0392                     	;# 
   948     0393                     	;# 
   949     039A                     	;# 
   950     039B                     	;# 
   951     0611                     	;# 
   952     0612                     	;# 
   953     0613                     	;# 
   954     0613                     	;# 
   955     0614                     	;# 
   956     0615                     	;# 
   957     0616                     	;# 
   958     0616                     	;# 
   959     0691                     	;# 
   960     0692                     	;# 
   961     0693                     	;# 
   962     0694                     	;# 
   963     0695                     	;# 
   964     0E8E                     	;# 
   965     0E8F                     	;# 
   966     0E90                     	;# 
   967     0E91                     	;# 
   968     0E92                     	;# 
   969     0E93                     	;# 
   970     0E94                     	;# 
   971     0E94                     	;# 
   972     0E95                     	;# 
   973     0E96                     	;# 
   974     0E97                     	;# 
   975     0E98                     	;# 
   976     0E99                     	;# 
   977     0E9A                     	;# 
   978     0E9B                     	;# 
   979     0E9C                     	;# 
   980     0E9D                     	;# 
   981     0E9E                     	;# 
   982     0E9F                     	;# 
   983     0FE4                     	;# 
   984     0FE5                     	;# 
   985     0FE6                     	;# 
   986     0FE7                     	;# 
   987     0FE8                     	;# 
   988     0FE9                     	;# 
   989     0FEA                     	;# 
   990     0FEB                     	;# 
   991     0FED                     	;# 
   992     0FEE                     	;# 
   993     0FEF                     	;# 
   994     0000                     	;# 
   995     0001                     	;# 
   996     0002                     	;# 
   997     0003                     	;# 
   998     0004                     	;# 
   999     0005                     	;# 
  1000     0006                     	;# 
  1001     0007                     	;# 
  1002     0008                     	;# 
  1003     0009                     	;# 
  1004     000A                     	;# 
  1005     000B                     	;# 
  1006     000C                     	;# 
  1007     000E                     	;# 
  1008     0011                     	;# 
  1009     0012                     	;# 
  1010     0015                     	;# 
  1011     0016                     	;# 
  1012     0016                     	;# 
  1013     0017                     	;# 
  1014     0018                     	;# 
  1015     0019                     	;# 
  1016     001A                     	;# 
  1017     001B                     	;# 
  1018     001C                     	;# 
  1019     008C                     	;# 
  1020     008E                     	;# 
  1021     0091                     	;# 
  1022     0092                     	;# 
  1023     0095                     	;# 
  1024     0096                     	;# 
  1025     0097                     	;# 
  1026     0098                     	;# 
  1027     0099                     	;# 
  1028     009A                     	;# 
  1029     009B                     	;# 
  1030     009B                     	;# 
  1031     009C                     	;# 
  1032     009D                     	;# 
  1033     009E                     	;# 
  1034     009F                     	;# 
  1035     010C                     	;# 
  1036     010E                     	;# 
  1037     0111                     	;# 
  1038     0112                     	;# 
  1039     0113                     	;# 
  1040     0114                     	;# 
  1041     0115                     	;# 
  1042     0116                     	;# 
  1043     0117                     	;# 
  1044     0118                     	;# 
  1045     0119                     	;# 
  1046     011D                     	;# 
  1047     018C                     	;# 
  1048     018E                     	;# 
  1049     0191                     	;# 
  1050     0191                     	;# 
  1051     0192                     	;# 
  1052     0193                     	;# 
  1053     0193                     	;# 
  1054     0194                     	;# 
  1055     0195                     	;# 
  1056     0196                     	;# 
  1057     0197                     	;# 
  1058     0199                     	;# 
  1059     019A                     	;# 
  1060     019B                     	;# 
  1061     019B                     	;# 
  1062     019C                     	;# 
  1063     019D                     	;# 
  1064     019E                     	;# 
  1065     019F                     	;# 
  1066     020C                     	;# 
  1067     0211                     	;# 
  1068     0211                     	;# 
  1069     0212                     	;# 
  1070     0212                     	;# 
  1071     0213                     	;# 
  1072     0213                     	;# 
  1073     0214                     	;# 
  1074     0214                     	;# 
  1075     0215                     	;# 
  1076     0215                     	;# 
  1077     0215                     	;# 
  1078     0216                     	;# 
  1079     0216                     	;# 
  1080     0217                     	;# 
  1081     0217                     	;# 
  1082     0391                     	;# 
  1083     0392                     	;# 
  1084     0393                     	;# 
  1085     039A                     	;# 
  1086     039B                     	;# 
  1087     0611                     	;# 
  1088     0612                     	;# 
  1089     0613                     	;# 
  1090     0613                     	;# 
  1091     0614                     	;# 
  1092     0615                     	;# 
  1093     0616                     	;# 
  1094     0616                     	;# 
  1095     0691                     	;# 
  1096     0692                     	;# 
  1097     0693                     	;# 
  1098     0694                     	;# 
  1099     0695                     	;# 
  1100     0E8E                     	;# 
  1101     0E8F                     	;# 
  1102     0E90                     	;# 
  1103     0E91                     	;# 
  1104     0E92                     	;# 
  1105     0E93                     	;# 
  1106     0E94                     	;# 
  1107     0E94                     	;# 
  1108     0E95                     	;# 
  1109     0E96                     	;# 
  1110     0E97                     	;# 
  1111     0E98                     	;# 
  1112     0E99                     	;# 
  1113     0E9A                     	;# 
  1114     0E9B                     	;# 
  1115     0E9C                     	;# 
  1116     0E9D                     	;# 
  1117     0E9E                     	;# 
  1118     0E9F                     	;# 
  1119     0FE4                     	;# 
  1120     0FE5                     	;# 
  1121     0FE6                     	;# 
  1122     0FE7                     	;# 
  1123     0FE8                     	;# 
  1124     0FE9                     	;# 
  1125     0FEA                     	;# 
  1126     0FEB                     	;# 
  1127     0FED                     	;# 
  1128     0FEE                     	;# 
  1129     0FEF                     	;# 
  1130     0000                     	;# 
  1131     0001                     	;# 
  1132     0002                     	;# 
  1133     0003                     	;# 
  1134     0004                     	;# 
  1135     0005                     	;# 
  1136     0006                     	;# 
  1137     0007                     	;# 
  1138     0008                     	;# 
  1139     0009                     	;# 
  1140     000A                     	;# 
  1141     000B                     	;# 
  1142     000C                     	;# 
  1143     000E                     	;# 
  1144     0011                     	;# 
  1145     0012                     	;# 
  1146     0015                     	;# 
  1147     0016                     	;# 
  1148     0016                     	;# 
  1149     0017                     	;# 
  1150     0018                     	;# 
  1151     0019                     	;# 
  1152     001A                     	;# 
  1153     001B                     	;# 
  1154     001C                     	;# 
  1155     008C                     	;# 
  1156     008E                     	;# 
  1157     0091                     	;# 
  1158     0092                     	;# 
  1159     0095                     	;# 
  1160     0096                     	;# 
  1161     0097                     	;# 
  1162     0098                     	;# 
  1163     0099                     	;# 
  1164     009A                     	;# 
  1165     009B                     	;# 
  1166     009B                     	;# 
  1167     009C                     	;# 
  1168     009D                     	;# 
  1169     009E                     	;# 
  1170     009F                     	;# 
  1171     010C                     	;# 
  1172     010E                     	;# 
  1173     0111                     	;# 
  1174     0112                     	;# 
  1175     0113                     	;# 
  1176     0114                     	;# 
  1177     0115                     	;# 
  1178     0116                     	;# 
  1179     0117                     	;# 
  1180     0118                     	;# 
  1181     0119                     	;# 
  1182     011D                     	;# 
  1183     018C                     	;# 
  1184     018E                     	;# 
  1185     0191                     	;# 
  1186     0191                     	;# 
  1187     0192                     	;# 
  1188     0193                     	;# 
  1189     0193                     	;# 
  1190     0194                     	;# 
  1191     0195                     	;# 
  1192     0196                     	;# 
  1193     0197                     	;# 
  1194     0199                     	;# 
  1195     019A                     	;# 
  1196     019B                     	;# 
  1197     019B                     	;# 
  1198     019C                     	;# 
  1199     019D                     	;# 
  1200     019E                     	;# 
  1201     019F                     	;# 
  1202     020C                     	;# 
  1203     0211                     	;# 
  1204     0211                     	;# 
  1205     0212                     	;# 
  1206     0212                     	;# 
  1207     0213                     	;# 
  1208     0213                     	;# 
  1209     0214                     	;# 
  1210     0214                     	;# 
  1211     0215                     	;# 
  1212     0215                     	;# 
  1213     0215                     	;# 
  1214     0216                     	;# 
  1215     0216                     	;# 
  1216     0217                     	;# 
  1217     0217                     	;# 
  1218     0391                     	;# 
  1219     0392                     	;# 
  1220     0393                     	;# 
  1221     039A                     	;# 
  1222     039B                     	;# 
  1223     0611                     	;# 
  1224     0612                     	;# 
  1225     0613                     	;# 
  1226     0613                     	;# 
  1227     0614                     	;# 
  1228     0615                     	;# 
  1229     0616                     	;# 
  1230     0616                     	;# 
  1231     0691                     	;# 
  1232     0692                     	;# 
  1233     0693                     	;# 
  1234     0694                     	;# 
  1235     0695                     	;# 
  1236     0E8E                     	;# 
  1237     0E8F                     	;# 
  1238     0E90                     	;# 
  1239     0E91                     	;# 
  1240     0E92                     	;# 
  1241     0E93                     	;# 
  1242     0E94                     	;# 
  1243     0E94                     	;# 
  1244     0E95                     	;# 
  1245     0E96                     	;# 
  1246     0E97                     	;# 
  1247     0E98                     	;# 
  1248     0E99                     	;# 
  1249     0E9A                     	;# 
  1250     0E9B                     	;# 
  1251     0E9C                     	;# 
  1252     0E9D                     	;# 
  1253     0E9E                     	;# 
  1254     0E9F                     	;# 
  1255     0FE4                     	;# 
  1256     0FE5                     	;# 
  1257     0FE6                     	;# 
  1258     0FE7                     	;# 
  1259     0FE8                     	;# 
  1260     0FE9                     	;# 
  1261     0FEA                     	;# 
  1262     0FEB                     	;# 
  1263     0FED                     	;# 
  1264     0FEE                     	;# 
  1265     0FEF                     	;# 
  1266     0000                     	;# 
  1267     0001                     	;# 
  1268     0002                     	;# 
  1269     0003                     	;# 
  1270     0004                     	;# 
  1271     0005                     	;# 
  1272     0006                     	;# 
  1273     0007                     	;# 
  1274     0008                     	;# 
  1275     0009                     	;# 
  1276     000A                     	;# 
  1277     000B                     	;# 
  1278     000C                     	;# 
  1279     000E                     	;# 
  1280     0011                     	;# 
  1281     0012                     	;# 
  1282     0015                     	;# 
  1283     0016                     	;# 
  1284     0016                     	;# 
  1285     0017                     	;# 
  1286     0018                     	;# 
  1287     0019                     	;# 
  1288     001A                     	;# 
  1289     001B                     	;# 
  1290     001C                     	;# 
  1291     008C                     	;# 
  1292     008E                     	;# 
  1293     0091                     	;# 
  1294     0092                     	;# 
  1295     0095                     	;# 
  1296     0096                     	;# 
  1297     0097                     	;# 
  1298     0098                     	;# 
  1299     0099                     	;# 
  1300     009A                     	;# 
  1301     009B                     	;# 
  1302     009B                     	;# 
  1303     009C                     	;# 
  1304     009D                     	;# 
  1305     009E                     	;# 
  1306     009F                     	;# 
  1307     010C                     	;# 
  1308     010E                     	;# 
  1309     0111                     	;# 
  1310     0112                     	;# 
  1311     0113                     	;# 
  1312     0114                     	;# 
  1313     0115                     	;# 
  1314     0116                     	;# 
  1315     0117                     	;# 
  1316     0118                     	;# 
  1317     0119                     	;# 
  1318     011D                     	;# 
  1319     018C                     	;# 
  1320     018E                     	;# 
  1321     0191                     	;# 
  1322     0191                     	;# 
  1323     0192                     	;# 
  1324     0193                     	;# 
  1325     0193                     	;# 
  1326     0194                     	;# 
  1327     0195                     	;# 
  1328     0196                     	;# 
  1329     0197                     	;# 
  1330     0199                     	;# 
  1331     019A                     	;# 
  1332     019B                     	;# 
  1333     019B                     	;# 
  1334     019C                     	;# 
  1335     019D                     	;# 
  1336     019E                     	;# 
  1337     019F                     	;# 
  1338     020C                     	;# 
  1339     0211                     	;# 
  1340     0211                     	;# 
  1341     0212                     	;# 
  1342     0212                     	;# 
  1343     0213                     	;# 
  1344     0213                     	;# 
  1345     0214                     	;# 
  1346     0214                     	;# 
  1347     0215                     	;# 
  1348     0215                     	;# 
  1349     0215                     	;# 
  1350     0216                     	;# 
  1351     0216                     	;# 
  1352     0217                     	;# 
  1353     0217                     	;# 
  1354     0391                     	;# 
  1355     0392                     	;# 
  1356     0393                     	;# 
  1357     039A                     	;# 
  1358     039B                     	;# 
  1359     0611                     	;# 
  1360     0612                     	;# 
  1361     0613                     	;# 
  1362     0613                     	;# 
  1363     0614                     	;# 
  1364     0615                     	;# 
  1365     0616                     	;# 
  1366     0616                     	;# 
  1367     0691                     	;# 
  1368     0692                     	;# 
  1369     0693                     	;# 
  1370     0694                     	;# 
  1371     0695                     	;# 
  1372     0E8E                     	;# 
  1373     0E8F                     	;# 
  1374     0E90                     	;# 
  1375     0E91                     	;# 
  1376     0E92                     	;# 
  1377     0E93                     	;# 
  1378     0E94                     	;# 
  1379     0E94                     	;# 
  1380     0E95                     	;# 
  1381     0E96                     	;# 
  1382     0E97                     	;# 
  1383     0E98                     	;# 
  1384     0E99                     	;# 
  1385     0E9A                     	;# 
  1386     0E9B                     	;# 
  1387     0E9C                     	;# 
  1388     0E9D                     	;# 
  1389     0E9E                     	;# 
  1390     0E9F                     	;# 
  1391     0FE4                     	;# 
  1392     0FE5                     	;# 
  1393     0FE6                     	;# 
  1394     0FE7                     	;# 
  1395     0FE8                     	;# 
  1396     0FE9                     	;# 
  1397     0FEA                     	;# 
  1398     0FEB                     	;# 
  1399     0FED                     	;# 
  1400     0FEE                     	;# 
  1401     0FEF                     	;# 
  1402     0000                     	;# 
  1403     0001                     	;# 
  1404     0002                     	;# 
  1405     0003                     	;# 
  1406     0004                     	;# 
  1407     0005                     	;# 
  1408     0006                     	;# 
  1409     0007                     	;# 
  1410     0008                     	;# 
  1411     0009                     	;# 
  1412     000A                     	;# 
  1413     000B                     	;# 
  1414     000C                     	;# 
  1415     000E                     	;# 
  1416     0011                     	;# 
  1417     0012                     	;# 
  1418     0015                     	;# 
  1419     0016                     	;# 
  1420     0016                     	;# 
  1421     0017                     	;# 
  1422     0018                     	;# 
  1423     0019                     	;# 
  1424     001A                     	;# 
  1425     001B                     	;# 
  1426     001C                     	;# 
  1427     008C                     	;# 
  1428     008E                     	;# 
  1429     0091                     	;# 
  1430     0092                     	;# 
  1431     0095                     	;# 
  1432     0096                     	;# 
  1433     0097                     	;# 
  1434     0098                     	;# 
  1435     0099                     	;# 
  1436     009A                     	;# 
  1437     009B                     	;# 
  1438     009B                     	;# 
  1439     009C                     	;# 
  1440     009D                     	;# 
  1441     009E                     	;# 
  1442     009F                     	;# 
  1443     010C                     	;# 
  1444     010E                     	;# 
  1445     0111                     	;# 
  1446     0112                     	;# 
  1447     0113                     	;# 
  1448     0114                     	;# 
  1449     0115                     	;# 
  1450     0116                     	;# 
  1451     0117                     	;# 
  1452     0118                     	;# 
  1453     0119                     	;# 
  1454     011D                     	;# 
  1455     018C                     	;# 
  1456     018E                     	;# 
  1457     0191                     	;# 
  1458     0191                     	;# 
  1459     0192                     	;# 
  1460     0193                     	;# 
  1461     0193                     	;# 
  1462     0194                     	;# 
  1463     0195                     	;# 
  1464     0196                     	;# 
  1465     0197                     	;# 
  1466     0199                     	;# 
  1467     019A                     	;# 
  1468     019B                     	;# 
  1469     019B                     	;# 
  1470     019C                     	;# 
  1471     019D                     	;# 
  1472     019E                     	;# 
  1473     019F                     	;# 
  1474     020C                     	;# 
  1475     0211                     	;# 
  1476     0211                     	;# 
  1477     0212                     	;# 
  1478     0212                     	;# 
  1479     0213                     	;# 
  1480     0213                     	;# 
  1481     0214                     	;# 
  1482     0214                     	;# 
  1483     0215                     	;# 
  1484     0215                     	;# 
  1485     0215                     	;# 
  1486     0216                     	;# 
  1487     0216                     	;# 
  1488     0217                     	;# 
  1489     0217                     	;# 
  1490     0391                     	;# 
  1491     0392                     	;# 
  1492     0393                     	;# 
  1493     039A                     	;# 
  1494     039B                     	;# 
  1495     0611                     	;# 
  1496     0612                     	;# 
  1497     0613                     	;# 
  1498     0613                     	;# 
  1499     0614                     	;# 
  1500     0615                     	;# 
  1501     0616                     	;# 
  1502     0616                     	;# 
  1503     0691                     	;# 
  1504     0692                     	;# 
  1505     0693                     	;# 
  1506     0694                     	;# 
  1507     0695                     	;# 
  1508     0E8E                     	;# 
  1509     0E8F                     	;# 
  1510     0E90                     	;# 
  1511     0E91                     	;# 
  1512     0E92                     	;# 
  1513     0E93                     	;# 
  1514     0E94                     	;# 
  1515     0E94                     	;# 
  1516     0E95                     	;# 
  1517     0E96                     	;# 
  1518     0E97                     	;# 
  1519     0E98                     	;# 
  1520     0E99                     	;# 
  1521     0E9A                     	;# 
  1522     0E9B                     	;# 
  1523     0E9C                     	;# 
  1524     0E9D                     	;# 
  1525     0E9E                     	;# 
  1526     0E9F                     	;# 
  1527     0FE4                     	;# 
  1528     0FE5                     	;# 
  1529     0FE6                     	;# 
  1530     0FE7                     	;# 
  1531     0FE8                     	;# 
  1532     0FE9                     	;# 
  1533     0FEA                     	;# 
  1534     0FEB                     	;# 
  1535     0FED                     	;# 
  1536     0FEE                     	;# 
  1537     0FEF                     	;# 
  1538     0000                     	;# 
  1539     0001                     	;# 
  1540     0002                     	;# 
  1541     0003                     	;# 
  1542     0004                     	;# 
  1543     0005                     	;# 
  1544     0006                     	;# 
  1545     0007                     	;# 
  1546     0008                     	;# 
  1547     0009                     	;# 
  1548     000A                     	;# 
  1549     000B                     	;# 
  1550     000C                     	;# 
  1551     000E                     	;# 
  1552     0011                     	;# 
  1553     0012                     	;# 
  1554     0015                     	;# 
  1555     0016                     	;# 
  1556     0016                     	;# 
  1557     0017                     	;# 
  1558     0018                     	;# 
  1559     0019                     	;# 
  1560     001A                     	;# 
  1561     001B                     	;# 
  1562     001C                     	;# 
  1563     008C                     	;# 
  1564     008E                     	;# 
  1565     0091                     	;# 
  1566     0092                     	;# 
  1567     0095                     	;# 
  1568     0096                     	;# 
  1569     0097                     	;# 
  1570     0098                     	;# 
  1571     0099                     	;# 
  1572     009A                     	;# 
  1573     009B                     	;# 
  1574     009B                     	;# 
  1575     009C                     	;# 
  1576     009D                     	;# 
  1577     009E                     	;# 
  1578     009F                     	;# 
  1579     010C                     	;# 
  1580     010E                     	;# 
  1581     0111                     	;# 
  1582     0112                     	;# 
  1583     0113                     	;# 
  1584     0114                     	;# 
  1585     0115                     	;# 
  1586     0116                     	;# 
  1587     0117                     	;# 
  1588     0118                     	;# 
  1589     0119                     	;# 
  1590     011D                     	;# 
  1591     018C                     	;# 
  1592     018E                     	;# 
  1593     0191                     	;# 
  1594     0191                     	;# 
  1595     0192                     	;# 
  1596     0193                     	;# 
  1597     0193                     	;# 
  1598     0194                     	;# 
  1599     0195                     	;# 
  1600     0196                     	;# 
  1601     0197                     	;# 
  1602     0199                     	;# 
  1603     019A                     	;# 
  1604     019B                     	;# 
  1605     019B                     	;# 
  1606     019C                     	;# 
  1607     019D                     	;# 
  1608     019E                     	;# 
  1609     019F                     	;# 
  1610     020C                     	;# 
  1611     0211                     	;# 
  1612     0211                     	;# 
  1613     0212                     	;# 
  1614     0212                     	;# 
  1615     0213                     	;# 
  1616     0213                     	;# 
  1617     0214                     	;# 
  1618     0214                     	;# 
  1619     0215                     	;# 
  1620     0215                     	;# 
  1621     0215                     	;# 
  1622     0216                     	;# 
  1623     0216                     	;# 
  1624     0217                     	;# 
  1625     0217                     	;# 
  1626     0391                     	;# 
  1627     0392                     	;# 
  1628     0393                     	;# 
  1629     039A                     	;# 
  1630     039B                     	;# 
  1631     0611                     	;# 
  1632     0612                     	;# 
  1633     0613                     	;# 
  1634     0613                     	;# 
  1635     0614                     	;# 
  1636     0615                     	;# 
  1637     0616                     	;# 
  1638     0616                     	;# 
  1639     0691                     	;# 
  1640     0692                     	;# 
  1641     0693                     	;# 
  1642     0694                     	;# 
  1643     0695                     	;# 
  1644     0E8E                     	;# 
  1645     0E8F                     	;# 
  1646     0E90                     	;# 
  1647     0E91                     	;# 
  1648     0E92                     	;# 
  1649     0E93                     	;# 
  1650     0E94                     	;# 
  1651     0E94                     	;# 
  1652     0E95                     	;# 
  1653     0E96                     	;# 
  1654     0E97                     	;# 
  1655     0E98                     	;# 
  1656     0E99                     	;# 
  1657     0E9A                     	;# 
  1658     0E9B                     	;# 
  1659     0E9C                     	;# 
  1660     0E9D                     	;# 
  1661     0E9E                     	;# 
  1662     0E9F                     	;# 
  1663     0FE4                     	;# 
  1664     0FE5                     	;# 
  1665     0FE6                     	;# 
  1666     0FE7                     	;# 
  1667     0FE8                     	;# 
  1668     0FE9                     	;# 
  1669     0FEA                     	;# 
  1670     0FEB                     	;# 
  1671     0FED                     	;# 
  1672     0FEE                     	;# 
  1673     0FEF                     	;# 
  1674     0000                     	;# 
  1675     0001                     	;# 
  1676     0002                     	;# 
  1677     0003                     	;# 
  1678     0004                     	;# 
  1679     0005                     	;# 
  1680     0006                     	;# 
  1681     0007                     	;# 
  1682     0008                     	;# 
  1683     0009                     	;# 
  1684     000A                     	;# 
  1685     000B                     	;# 
  1686     000C                     	;# 
  1687     000E                     	;# 
  1688     0011                     	;# 
  1689     0012                     	;# 
  1690     0015                     	;# 
  1691     0016                     	;# 
  1692     0016                     	;# 
  1693     0017                     	;# 
  1694     0018                     	;# 
  1695     0019                     	;# 
  1696     001A                     	;# 
  1697     001B                     	;# 
  1698     001C                     	;# 
  1699     008C                     	;# 
  1700     008E                     	;# 
  1701     0091                     	;# 
  1702     0092                     	;# 
  1703     0095                     	;# 
  1704     0096                     	;# 
  1705     0097                     	;# 
  1706     0098                     	;# 
  1707     0099                     	;# 
  1708     009A                     	;# 
  1709     009B                     	;# 
  1710     009B                     	;# 
  1711     009C                     	;# 
  1712     009D                     	;# 
  1713     009E                     	;# 
  1714     009F                     	;# 
  1715     010C                     	;# 
  1716     010E                     	;# 
  1717     0111                     	;# 
  1718     0112                     	;# 
  1719     0113                     	;# 
  1720     0114                     	;# 
  1721     0115                     	;# 
  1722     0116                     	;# 
  1723     0117                     	;# 
  1724     0118                     	;# 
  1725     0119                     	;# 
  1726     011D                     	;# 
  1727     018C                     	;# 
  1728     018E                     	;# 
  1729     0191                     	;# 
  1730     0191                     	;# 
  1731     0192                     	;# 
  1732     0193                     	;# 
  1733     0193                     	;# 
  1734     0194                     	;# 
  1735     0195                     	;# 
  1736     0196                     	;# 
  1737     0197                     	;# 
  1738     0199                     	;# 
  1739     019A                     	;# 
  1740     019B                     	;# 
  1741     019B                     	;# 
  1742     019C                     	;# 
  1743     019D                     	;# 
  1744     019E                     	;# 
  1745     019F                     	;# 
  1746     020C                     	;# 
  1747     0211                     	;# 
  1748     0211                     	;# 
  1749     0212                     	;# 
  1750     0212                     	;# 
  1751     0213                     	;# 
  1752     0213                     	;# 
  1753     0214                     	;# 
  1754     0214                     	;# 
  1755     0215                     	;# 
  1756     0215                     	;# 
  1757     0215                     	;# 
  1758     0216                     	;# 
  1759     0216                     	;# 
  1760     0217                     	;# 
  1761     0217                     	;# 
  1762     0391                     	;# 
  1763     0392                     	;# 
  1764     0393                     	;# 
  1765     039A                     	;# 
  1766     039B                     	;# 
  1767     0611                     	;# 
  1768     0612                     	;# 
  1769     0613                     	;# 
  1770     0613                     	;# 
  1771     0614                     	;# 
  1772     0615                     	;# 
  1773     0616                     	;# 
  1774     0616                     	;# 
  1775     0691                     	;# 
  1776     0692                     	;# 
  1777     0693                     	;# 
  1778     0694                     	;# 
  1779     0695                     	;# 
  1780     0E8E                     	;# 
  1781     0E8F                     	;# 
  1782     0E90                     	;# 
  1783     0E91                     	;# 
  1784     0E92                     	;# 
  1785     0E93                     	;# 
  1786     0E94                     	;# 
  1787     0E94                     	;# 
  1788     0E95                     	;# 
  1789     0E96                     	;# 
  1790     0E97                     	;# 
  1791     0E98                     	;# 
  1792     0E99                     	;# 
  1793     0E9A                     	;# 
  1794     0E9B                     	;# 
  1795     0E9C                     	;# 
  1796     0E9D                     	;# 
  1797     0E9E                     	;# 
  1798     0E9F                     	;# 
  1799     0FE4                     	;# 
  1800     0FE5                     	;# 
  1801     0FE6                     	;# 
  1802     0FE7                     	;# 
  1803     0FE8                     	;# 
  1804     0FE9                     	;# 
  1805     0FEA                     	;# 
  1806     0FEB                     	;# 
  1807     0FED                     	;# 
  1808     0FEE                     	;# 
  1809     0FEF                     	;# 
  1810     0000                     	;# 
  1811     0001                     	;# 
  1812     0002                     	;# 
  1813     0003                     	;# 
  1814     0004                     	;# 
  1815     0005                     	;# 
  1816     0006                     	;# 
  1817     0007                     	;# 
  1818     0008                     	;# 
  1819     0009                     	;# 
  1820     000A                     	;# 
  1821     000B                     	;# 
  1822     000C                     	;# 
  1823     000E                     	;# 
  1824     0011                     	;# 
  1825     0012                     	;# 
  1826     0015                     	;# 
  1827     0016                     	;# 
  1828     0016                     	;# 
  1829     0017                     	;# 
  1830     0018                     	;# 
  1831     0019                     	;# 
  1832     001A                     	;# 
  1833     001B                     	;# 
  1834     001C                     	;# 
  1835     008C                     	;# 
  1836     008E                     	;# 
  1837     0091                     	;# 
  1838     0092                     	;# 
  1839     0095                     	;# 
  1840     0096                     	;# 
  1841     0097                     	;# 
  1842     0098                     	;# 
  1843     0099                     	;# 
  1844     009A                     	;# 
  1845     009B                     	;# 
  1846     009B                     	;# 
  1847     009C                     	;# 
  1848     009D                     	;# 
  1849     009E                     	;# 
  1850     009F                     	;# 
  1851     010C                     	;# 
  1852     010E                     	;# 
  1853     0111                     	;# 
  1854     0112                     	;# 
  1855     0113                     	;# 
  1856     0114                     	;# 
  1857     0115                     	;# 
  1858     0116                     	;# 
  1859     0117                     	;# 
  1860     0118                     	;# 
  1861     0119                     	;# 
  1862     011D                     	;# 
  1863     018C                     	;# 
  1864     018E                     	;# 
  1865     0191                     	;# 
  1866     0191                     	;# 
  1867     0192                     	;# 
  1868     0193                     	;# 
  1869     0193                     	;# 
  1870     0194                     	;# 
  1871     0195                     	;# 
  1872     0196                     	;# 
  1873     0197                     	;# 
  1874     0199                     	;# 
  1875     019A                     	;# 
  1876     019B                     	;# 
  1877     019B                     	;# 
  1878     019C                     	;# 
  1879     019D                     	;# 
  1880     019E                     	;# 
  1881     019F                     	;# 
  1882     020C                     	;# 
  1883     0211                     	;# 
  1884     0211                     	;# 
  1885     0212                     	;# 
  1886     0212                     	;# 
  1887     0213                     	;# 
  1888     0213                     	;# 
  1889     0214                     	;# 
  1890     0214                     	;# 
  1891     0215                     	;# 
  1892     0215                     	;# 
  1893     0215                     	;# 
  1894     0216                     	;# 
  1895     0216                     	;# 
  1896     0217                     	;# 
  1897     0217                     	;# 
  1898     0391                     	;# 
  1899     0392                     	;# 
  1900     0393                     	;# 
  1901     039A                     	;# 
  1902     039B                     	;# 
  1903     0611                     	;# 
  1904     0612                     	;# 
  1905     0613                     	;# 
  1906     0613                     	;# 
  1907     0614                     	;# 
  1908     0615                     	;# 
  1909     0616                     	;# 
  1910     0616                     	;# 
  1911     0691                     	;# 
  1912     0692                     	;# 
  1913     0693                     	;# 
  1914     0694                     	;# 
  1915     0695                     	;# 
  1916     0E8E                     	;# 
  1917     0E8F                     	;# 
  1918     0E90                     	;# 
  1919     0E91                     	;# 
  1920     0E92                     	;# 
  1921     0E93                     	;# 
  1922     0E94                     	;# 
  1923     0E94                     	;# 
  1924     0E95                     	;# 
  1925     0E96                     	;# 
  1926     0E97                     	;# 
  1927     0E98                     	;# 
  1928     0E99                     	;# 
  1929     0E9A                     	;# 
  1930     0E9B                     	;# 
  1931     0E9C                     	;# 
  1932     0E9D                     	;# 
  1933     0E9E                     	;# 
  1934     0E9F                     	;# 
  1935     0FE4                     	;# 
  1936     0FE5                     	;# 
  1937     0FE6                     	;# 
  1938     0FE7                     	;# 
  1939     0FE8                     	;# 
  1940     0FE9                     	;# 
  1941     0FEA                     	;# 
  1942     0FEB                     	;# 
  1943     0FED                     	;# 
  1944     0FEE                     	;# 
  1945     0FEF                     	;# 
  1946     0000                     	;# 
  1947     0001                     	;# 
  1948     0002                     	;# 
  1949     0003                     	;# 
  1950     0004                     	;# 
  1951     0005                     	;# 
  1952     0006                     	;# 
  1953     0007                     	;# 
  1954     0008                     	;# 
  1955     0009                     	;# 
  1956     000A                     	;# 
  1957     000B                     	;# 
  1958     000C                     	;# 
  1959     000E                     	;# 
  1960     0011                     	;# 
  1961     0012                     	;# 
  1962     0015                     	;# 
  1963     0016                     	;# 
  1964     0016                     	;# 
  1965     0017                     	;# 
  1966     0018                     	;# 
  1967     0019                     	;# 
  1968     001A                     	;# 
  1969     001B                     	;# 
  1970     001C                     	;# 
  1971     008C                     	;# 
  1972     008E                     	;# 
  1973     0091                     	;# 
  1974     0092                     	;# 
  1975     0095                     	;# 
  1976     0096                     	;# 
  1977     0097                     	;# 
  1978     0098                     	;# 
  1979     0099                     	;# 
  1980     009A                     	;# 
  1981     009B                     	;# 
  1982     009B                     	;# 
  1983     009C                     	;# 
  1984     009D                     	;# 
  1985     009E                     	;# 
  1986     009F                     	;# 
  1987     010C                     	;# 
  1988     010E                     	;# 
  1989     0111                     	;# 
  1990     0112                     	;# 
  1991     0113                     	;# 
  1992     0114                     	;# 
  1993     0115                     	;# 
  1994     0116                     	;# 
  1995     0117                     	;# 
  1996     0118                     	;# 
  1997     0119                     	;# 
  1998     011D                     	;# 
  1999     018C                     	;# 
  2000     018E                     	;# 
  2001     0191                     	;# 
  2002     0191                     	;# 
  2003     0192                     	;# 
  2004     0193                     	;# 
  2005     0193                     	;# 
  2006     0194                     	;# 
  2007     0195                     	;# 
  2008     0196                     	;# 
  2009     0197                     	;# 
  2010     0199                     	;# 
  2011     019A                     	;# 
  2012     019B                     	;# 
  2013     019B                     	;# 
  2014     019C                     	;# 
  2015     019D                     	;# 
  2016     019E                     	;# 
  2017     019F                     	;# 
  2018     020C                     	;# 
  2019     0211                     	;# 
  2020     0211                     	;# 
  2021     0212                     	;# 
  2022     0212                     	;# 
  2023     0213                     	;# 
  2024     0213                     	;# 
  2025     0214                     	;# 
  2026     0214                     	;# 
  2027     0215                     	;# 
  2028     0215                     	;# 
  2029     0215                     	;# 
  2030     0216                     	;# 
  2031     0216                     	;# 
  2032     0217                     	;# 
  2033     0217                     	;# 
  2034     0391                     	;# 
  2035     0392                     	;# 
  2036     0393                     	;# 
  2037     039A                     	;# 
  2038     039B                     	;# 
  2039     0611                     	;# 
  2040     0612                     	;# 
  2041     0613                     	;# 
  2042     0613                     	;# 
  2043     0614                     	;# 
  2044     0615                     	;# 
  2045     0616                     	;# 
  2046     0616                     	;# 
  2047     0691                     	;# 
  2048     0692                     	;# 
  2049     0693                     	;# 
  2050     0694                     	;# 
  2051     0695                     	;# 
  2052     0E8E                     	;# 
  2053     0E8F                     	;# 
  2054     0E90                     	;# 
  2055     0E91                     	;# 
  2056     0E92                     	;# 
  2057     0E93                     	;# 
  2058     0E94                     	;# 
  2059     0E94                     	;# 
  2060     0E95                     	;# 
  2061     0E96                     	;# 
  2062     0E97                     	;# 
  2063     0E98                     	;# 
  2064     0E99                     	;# 
  2065     0E9A                     	;# 
  2066     0E9B                     	;# 
  2067     0E9C                     	;# 
  2068     0E9D                     	;# 
  2069     0E9E                     	;# 
  2070     0E9F                     	;# 
  2071     0FE4                     	;# 
  2072     0FE5                     	;# 
  2073     0FE6                     	;# 
  2074     0FE7                     	;# 
  2075     0FE8                     	;# 
  2076     0FE9                     	;# 
  2077     0FEA                     	;# 
  2078     0FEB                     	;# 
  2079     0FED                     	;# 
  2080     0FEE                     	;# 
  2081     0FEF                     	;_keyboard
  2082                           
  2083                           	psect	idataBANK3
  2084     1E44                     __pidataBANK3:
  2085                           
  2086                           ;initializer for main@F3304
  2087     1E44  3420               	retlw	32
  2088     1E45  3420               	retlw	32
  2089     1E46  3420               	retlw	32
  2090     1E47  3420               	retlw	32
  2091     1E48  340D               	retlw	13
  2092     1E49  340A               	retlw	10
  2093                           
  2094                           	psect	stringtext1
  2095     044A                     __pstringtext1:
  2096     044A                     _ps2ExtUsbMap:
  2097     044A  3400               	retlw	0
  2098     044B  3400               	retlw	0
  2099     044C  3400               	retlw	0
  2100     044D  3400               	retlw	0
  2101     044E  3400               	retlw	0
  2102     044F  3400               	retlw	0
  2103     0450  3400               	retlw	0
  2104     0451  3400               	retlw	0
  2105     0452  3400               	retlw	0
  2106     0453  3400               	retlw	0
  2107     0454  3400               	retlw	0
  2108     0455  3400               	retlw	0
  2109     0456  3400               	retlw	0
  2110     0457  3400               	retlw	0
  2111     0458  3400               	retlw	0
  2112     0459  3400               	retlw	0
  2113     045A  3400               	retlw	0
  2114     045B  34E6               	retlw	230
  2115     045C  3400               	retlw	0
  2116     045D  3400               	retlw	0
  2117     045E  34E4               	retlw	228
  2118     045F  3400               	retlw	0
  2119     0460  3400               	retlw	0
  2120     0461  3400               	retlw	0
  2121     0462  3400               	retlw	0
  2122     0463  3400               	retlw	0
  2123     0464  3400               	retlw	0
  2124     0465  3400               	retlw	0
  2125     0466  3400               	retlw	0
  2126     0467  3400               	retlw	0
  2127     0468  3400               	retlw	0
  2128     0469  34E3               	retlw	227
  2129     046A  3400               	retlw	0
  2130     046B  3400               	retlw	0
  2131     046C  3400               	retlw	0
  2132     046D  3400               	retlw	0
  2133     046E  3400               	retlw	0
  2134     046F  3400               	retlw	0
  2135     0470  3400               	retlw	0
  2136     0471  34E7               	retlw	231
  2137     0472  3400               	retlw	0
  2138     0473  3400               	retlw	0
  2139     0474  3400               	retlw	0
  2140     0475  3400               	retlw	0
  2141     0476  3400               	retlw	0
  2142     0477  3400               	retlw	0
  2143     0478  3400               	retlw	0
  2144     0479  3465               	retlw	101
  2145     047A  3400               	retlw	0
  2146     047B  3400               	retlw	0
  2147     047C  3400               	retlw	0
  2148     047D  3400               	retlw	0
  2149     047E  3400               	retlw	0
  2150     047F  3400               	retlw	0
  2151     0480  3400               	retlw	0
  2152     0481  3400               	retlw	0
  2153     0482  3400               	retlw	0
  2154     0483  3400               	retlw	0
  2155     0484  3400               	retlw	0
  2156     0485  3400               	retlw	0
  2157     0486  3400               	retlw	0
  2158     0487  3400               	retlw	0
  2159     0488  3400               	retlw	0
  2160     0489  3400               	retlw	0
  2161     048A  3400               	retlw	0
  2162     048B  3400               	retlw	0
  2163     048C  3400               	retlw	0
  2164     048D  3400               	retlw	0
  2165     048E  3400               	retlw	0
  2166     048F  3400               	retlw	0
  2167     0490  3400               	retlw	0
  2168     0491  3400               	retlw	0
  2169     0492  3400               	retlw	0
  2170     0493  3400               	retlw	0
  2171     0494  3454               	retlw	84
  2172     0495  3400               	retlw	0
  2173     0496  3400               	retlw	0
  2174     0497  3400               	retlw	0
  2175     0498  3400               	retlw	0
  2176     0499  3400               	retlw	0
  2177     049A  3400               	retlw	0
  2178     049B  3400               	retlw	0
  2179     049C  3400               	retlw	0
  2180     049D  3400               	retlw	0
  2181     049E  3400               	retlw	0
  2182     049F  3400               	retlw	0
  2183     04A0  3400               	retlw	0
  2184     04A1  3400               	retlw	0
  2185     04A2  3400               	retlw	0
  2186     04A3  3400               	retlw	0
  2187     04A4  3458               	retlw	88
  2188     04A5  3400               	retlw	0
  2189     04A6  3400               	retlw	0
  2190     04A7  3400               	retlw	0
  2191     04A8  3400               	retlw	0
  2192     04A9  3400               	retlw	0
  2193     04AA  3400               	retlw	0
  2194     04AB  3400               	retlw	0
  2195     04AC  3400               	retlw	0
  2196     04AD  3400               	retlw	0
  2197     04AE  3400               	retlw	0
  2198     04AF  3400               	retlw	0
  2199     04B0  3400               	retlw	0
  2200     04B1  3400               	retlw	0
  2201     04B2  3400               	retlw	0
  2202     04B3  344D               	retlw	77
  2203     04B4  3400               	retlw	0
  2204     04B5  3450               	retlw	80
  2205     04B6  344A               	retlw	74
  2206     04B7  3400               	retlw	0
  2207     04B8  3400               	retlw	0
  2208     04B9  3400               	retlw	0
  2209     04BA  3449               	retlw	73
  2210     04BB  344C               	retlw	76
  2211     04BC  3451               	retlw	81
  2212     04BD  3400               	retlw	0
  2213     04BE  344F               	retlw	79
  2214     04BF  3452               	retlw	82
  2215     04C0  3400               	retlw	0
  2216     04C1  3400               	retlw	0
  2217     04C2  3400               	retlw	0
  2218     04C3  3400               	retlw	0
  2219     04C4  344E               	retlw	78
  2220     04C5  3400               	retlw	0
  2221     04C6  3446               	retlw	70
  2222     04C7  344B               	retlw	75
  2223     04C8  3400               	retlw	0
  2224     04C9  3400               	retlw	0
  2225     04CA  3400               	retlw	0
  2226     04CB  3400               	retlw	0
  2227     04CC  3400               	retlw	0
  2228     04CD  3400               	retlw	0
  2229     04CE  3400               	retlw	0
  2230     04CF  3400               	retlw	0
  2231     04D0  3400               	retlw	0
  2232     04D1  3400               	retlw	0
  2233     04D2  3400               	retlw	0
  2234     04D3  3400               	retlw	0
  2235     04D4  3400               	retlw	0
  2236     04D5  3400               	retlw	0
  2237     04D6  3400               	retlw	0
  2238     04D7  3400               	retlw	0
  2239     04D8  3400               	retlw	0
  2240     04D9  3400               	retlw	0
  2241     04DA  3400               	retlw	0
  2242     04DB  3400               	retlw	0
  2243     04DC  3400               	retlw	0
  2244     04DD  3400               	retlw	0
  2245     04DE  3400               	retlw	0
  2246     04DF  3400               	retlw	0
  2247     04E0  3400               	retlw	0
  2248     04E1  3400               	retlw	0
  2249     04E2  3400               	retlw	0
  2250     04E3  3400               	retlw	0
  2251     04E4  3400               	retlw	0
  2252     04E5  3400               	retlw	0
  2253     04E6  3400               	retlw	0
  2254     04E7  3400               	retlw	0
  2255     04E8  3400               	retlw	0
  2256     04E9  3400               	retlw	0
  2257     04EA  3400               	retlw	0
  2258     04EB  3400               	retlw	0
  2259     04EC  3400               	retlw	0
  2260     04ED  3400               	retlw	0
  2261     04EE  3400               	retlw	0
  2262     04EF  3400               	retlw	0
  2263     04F0  3400               	retlw	0
  2264     04F1  3400               	retlw	0
  2265     04F2  3400               	retlw	0
  2266     04F3  3400               	retlw	0
  2267     04F4  3400               	retlw	0
  2268     04F5  3400               	retlw	0
  2269     04F6  3400               	retlw	0
  2270     04F7  3400               	retlw	0
  2271     04F8  3400               	retlw	0
  2272     04F9  3400               	retlw	0
  2273     04FA  3400               	retlw	0
  2274     04FB  3400               	retlw	0
  2275     04FC  3400               	retlw	0
  2276     04FD  3400               	retlw	0
  2277     04FE  3400               	retlw	0
  2278     04FF  3400               	retlw	0
  2279     0500  3400               	retlw	0
  2280     0501  3400               	retlw	0
  2281     0502  3400               	retlw	0
  2282     0503  3400               	retlw	0
  2283     0504  3400               	retlw	0
  2284     0505  3400               	retlw	0
  2285     0506  3400               	retlw	0
  2286     0507  3400               	retlw	0
  2287     0508  3400               	retlw	0
  2288     0509  3400               	retlw	0
  2289     050A  3400               	retlw	0
  2290     050B  3400               	retlw	0
  2291     050C  3400               	retlw	0
  2292     050D  3400               	retlw	0
  2293     050E  3400               	retlw	0
  2294     050F  3400               	retlw	0
  2295     0510  3400               	retlw	0
  2296     0511  3400               	retlw	0
  2297     0512  3400               	retlw	0
  2298     0513  3400               	retlw	0
  2299     0514  3400               	retlw	0
  2300     0515  3400               	retlw	0
  2301     0516  3400               	retlw	0
  2302     0517  3400               	retlw	0
  2303     0518  3400               	retlw	0
  2304     0519  3400               	retlw	0
  2305     051A  3400               	retlw	0
  2306     051B  3400               	retlw	0
  2307     051C  3400               	retlw	0
  2308     051D  3400               	retlw	0
  2309     051E  3400               	retlw	0
  2310     051F  3400               	retlw	0
  2311     0520  3400               	retlw	0
  2312     0521  3400               	retlw	0
  2313     0522  3400               	retlw	0
  2314     0523  3400               	retlw	0
  2315     0524  3400               	retlw	0
  2316     0525  3400               	retlw	0
  2317     0526  3400               	retlw	0
  2318     0527  3400               	retlw	0
  2319     0528  3400               	retlw	0
  2320     0529  3400               	retlw	0
  2321     052A  3400               	retlw	0
  2322     052B  3400               	retlw	0
  2323     052C  3400               	retlw	0
  2324     052D  3400               	retlw	0
  2325     052E  3400               	retlw	0
  2326     052F  3400               	retlw	0
  2327     0530  3400               	retlw	0
  2328     0531  3400               	retlw	0
  2329     0532  3400               	retlw	0
  2330     0533  3400               	retlw	0
  2331     0534  3400               	retlw	0
  2332     0535  3400               	retlw	0
  2333     0536  3400               	retlw	0
  2334     0537  3400               	retlw	0
  2335     0538  3400               	retlw	0
  2336     0539  3400               	retlw	0
  2337     053A  3400               	retlw	0
  2338     053B  3400               	retlw	0
  2339     053C  3400               	retlw	0
  2340     053D  3400               	retlw	0
  2341     053E  3400               	retlw	0
  2342     053F  3400               	retlw	0
  2343     0540  3400               	retlw	0
  2344     0541  3400               	retlw	0
  2345     0542  3400               	retlw	0
  2346     0543  3400               	retlw	0
  2347     0544  3400               	retlw	0
  2348     0545  3400               	retlw	0
  2349     0546  3400               	retlw	0
  2350     0547  3400               	retlw	0
  2351     0548  3400               	retlw	0
  2352     0549                     __end_of_ps2ExtUsbMap:
  2353                           
  2354                           	psect	stringtext2
  2355     1000                     __pstringtext2:
  2356     1000                     _ps2UsbMap:
  2357     1000  3400               	retlw	0
  2358     1001  3442               	retlw	66
  2359     1002  3400               	retlw	0
  2360     1003  343E               	retlw	62
  2361     1004  343C               	retlw	60
  2362     1005  343A               	retlw	58
  2363     1006  343B               	retlw	59
  2364     1007  3445               	retlw	69
  2365     1008  3400               	retlw	0
  2366     1009  3443               	retlw	67
  2367     100A  3441               	retlw	65
  2368     100B  343F               	retlw	63
  2369     100C  343D               	retlw	61
  2370     100D  342B               	retlw	43
  2371     100E  3435               	retlw	53
  2372     100F  3400               	retlw	0
  2373     1010  3400               	retlw	0
  2374     1011  34E2               	retlw	226
  2375     1012  34E1               	retlw	225
  2376     1013  3488               	retlw	136
  2377     1014  34E0               	retlw	224
  2378     1015  3414               	retlw	20
  2379     1016  341E               	retlw	30
  2380     1017  3400               	retlw	0
  2381     1018  3400               	retlw	0
  2382     1019  3400               	retlw	0
  2383     101A  341D               	retlw	29
  2384     101B  3416               	retlw	22
  2385     101C  3404               	retlw	4
  2386     101D  341A               	retlw	26
  2387     101E  341F               	retlw	31
  2388     101F  3400               	retlw	0
  2389     1020  3400               	retlw	0
  2390     1021  3406               	retlw	6
  2391     1022  341B               	retlw	27
  2392     1023  3407               	retlw	7
  2393     1024  3408               	retlw	8
  2394     1025  3421               	retlw	33
  2395     1026  3420               	retlw	32
  2396     1027  3400               	retlw	0
  2397     1028  3400               	retlw	0
  2398     1029  342C               	retlw	44
  2399     102A  3419               	retlw	25
  2400     102B  3409               	retlw	9
  2401     102C  3417               	retlw	23
  2402     102D  3415               	retlw	21
  2403     102E  3422               	retlw	34
  2404     102F  3400               	retlw	0
  2405     1030  3400               	retlw	0
  2406     1031  3411               	retlw	17
  2407     1032  3405               	retlw	5
  2408     1033  340B               	retlw	11
  2409     1034  340A               	retlw	10
  2410     1035  341C               	retlw	28
  2411     1036  3423               	retlw	35
  2412     1037  3400               	retlw	0
  2413     1038  3400               	retlw	0
  2414     1039  3400               	retlw	0
  2415     103A  3410               	retlw	16
  2416     103B  340D               	retlw	13
  2417     103C  3418               	retlw	24
  2418     103D  3424               	retlw	36
  2419     103E  3425               	retlw	37
  2420     103F  3400               	retlw	0
  2421     1040  3400               	retlw	0
  2422     1041  3436               	retlw	54
  2423     1042  340E               	retlw	14
  2424     1043  340C               	retlw	12
  2425     1044  3412               	retlw	18
  2426     1045  3427               	retlw	39
  2427     1046  3426               	retlw	38
  2428     1047  3400               	retlw	0
  2429     1048  3400               	retlw	0
  2430     1049  3437               	retlw	55
  2431     104A  3438               	retlw	56
  2432     104B  340F               	retlw	15
  2433     104C  3433               	retlw	51
  2434     104D  3413               	retlw	19
  2435     104E  342D               	retlw	45
  2436     104F  3400               	retlw	0
  2437     1050  3400               	retlw	0
  2438     1051  3487               	retlw	135
  2439     1052  3434               	retlw	52
  2440     1053  3400               	retlw	0
  2441     1054  342F               	retlw	47
  2442     1055  342E               	retlw	46
  2443     1056  3400               	retlw	0
  2444     1057  3400               	retlw	0
  2445     1058  34E3               	retlw	227
  2446     1059  34E5               	retlw	229
  2447     105A  3428               	retlw	40
  2448     105B  3430               	retlw	48
  2449     105C  3400               	retlw	0
  2450     105D  3432               	retlw	50
  2451     105E  3400               	retlw	0
  2452     105F  3400               	retlw	0
  2453     1060  3400               	retlw	0
  2454     1061  3400               	retlw	0
  2455     1062  3400               	retlw	0
  2456     1063  3400               	retlw	0
  2457     1064  348A               	retlw	138
  2458     1065  3400               	retlw	0
  2459     1066  342A               	retlw	42
  2460     1067  348B               	retlw	139
  2461     1068  3400               	retlw	0
  2462     1069  3459               	retlw	89
  2463     106A  3489               	retlw	137
  2464     106B  345C               	retlw	92
  2465     106C  345F               	retlw	95
  2466     106D  3400               	retlw	0
  2467     106E  3400               	retlw	0
  2468     106F  3400               	retlw	0
  2469     1070  3462               	retlw	98
  2470     1071  3463               	retlw	99
  2471     1072  345A               	retlw	90
  2472     1073  345D               	retlw	93
  2473     1074  345E               	retlw	94
  2474     1075  3460               	retlw	96
  2475     1076  3429               	retlw	41
  2476     1077  3453               	retlw	83
  2477     1078  3444               	retlw	68
  2478     1079  3457               	retlw	87
  2479     107A  345B               	retlw	91
  2480     107B  3454               	retlw	84
  2481     107C  3455               	retlw	85
  2482     107D  3461               	retlw	97
  2483     107E  3447               	retlw	71
  2484     107F  3400               	retlw	0
  2485     1080  3400               	retlw	0
  2486     1081  3400               	retlw	0
  2487     1082  3400               	retlw	0
  2488     1083  3440               	retlw	64
  2489     1084                     __end_of_ps2UsbMap:
  2490                           
  2491                           	psect	stringtext3
  2492     18BC                     __pstringtext3:
  2493     18BC                     _USB_SD_Ptr:
  2494     18BC  34C2               	retlw	low (_sd000| (0+32768))
  2495     18BD  3498               	retlw	high (_sd000| (0+32768))
  2496     18BE  343F               	retlw	low (_sd001| (0+32768))
  2497     18BF  3498               	retlw	high (_sd001| (0+32768))
  2498     18C0  34AE               	retlw	low (_sd002| (0+32768))
  2499     18C1  3498               	retlw	high (_sd002| (0+32768))
  2500     18C2                     __end_of_USB_SD_Ptr:
  2501                           
  2502                           	psect	stringtext4
  2503     18C6                     __pstringtext4:
  2504     18C6                     _USB_CD_Ptr:
  2505     18C6  3473               	retlw	low (_configDescriptor1| (0+32768))
  2506     18C7  3498               	retlw	high (_configDescriptor1| (0+32768))
  2507     18C8                     __end_of_USB_CD_Ptr:
  2508                           
  2509                           	psect	stringtext5
  2510     1800                     __pstringtext5:
  2511     1800                     _hid_rpt01:
  2512     1800  3405               	retlw	5
  2513     1801  3401               	retlw	1
  2514     1802  3409               	retlw	9
  2515     1803  3406               	retlw	6
  2516     1804  34A1               	retlw	161
  2517     1805  3401               	retlw	1
  2518     1806  3405               	retlw	5
  2519     1807  3407               	retlw	7
  2520     1808  3419               	retlw	25
  2521     1809  34E0               	retlw	224
  2522     180A  3429               	retlw	41
  2523     180B  34E7               	retlw	231
  2524     180C  3415               	retlw	21
  2525     180D  3400               	retlw	0
  2526     180E  3425               	retlw	37
  2527     180F  3401               	retlw	1
  2528     1810  3475               	retlw	117
  2529     1811  3401               	retlw	1
  2530     1812  3495               	retlw	149
  2531     1813  3408               	retlw	8
  2532     1814  3481               	retlw	129
  2533     1815  3402               	retlw	2
  2534     1816  3495               	retlw	149
  2535     1817  3401               	retlw	1
  2536     1818  3475               	retlw	117
  2537     1819  3408               	retlw	8
  2538     181A  3481               	retlw	129
  2539     181B  3403               	retlw	3
  2540     181C  3495               	retlw	149
  2541     181D  3405               	retlw	5
  2542     181E  3475               	retlw	117
  2543     181F  3401               	retlw	1
  2544     1820  3405               	retlw	5
  2545     1821  3408               	retlw	8
  2546     1822  3419               	retlw	25
  2547     1823  3401               	retlw	1
  2548     1824  3429               	retlw	41
  2549     1825  3405               	retlw	5
  2550     1826  3491               	retlw	145
  2551     1827  3402               	retlw	2
  2552     1828  3495               	retlw	149
  2553     1829  3401               	retlw	1
  2554     182A  3475               	retlw	117
  2555     182B  3403               	retlw	3
  2556     182C  3491               	retlw	145
  2557     182D  3403               	retlw	3
  2558     182E  3495               	retlw	149
  2559     182F  3406               	retlw	6
  2560     1830  3475               	retlw	117
  2561     1831  3408               	retlw	8
  2562     1832  3415               	retlw	21
  2563     1833  3400               	retlw	0
  2564     1834  3425               	retlw	37
  2565     1835  348B               	retlw	139
  2566     1836  3405               	retlw	5
  2567     1837  3407               	retlw	7
  2568     1838  3419               	retlw	25
  2569     1839  3400               	retlw	0
  2570     183A  3429               	retlw	41
  2571     183B  348B               	retlw	139
  2572     183C  3481               	retlw	129
  2573     183D  3400               	retlw	0
  2574     183E  34C0               	retlw	192
  2575     183F                     __end_of_hid_rpt01:
  2576                           
  2577                           	psect	stringtext6
  2578     183F                     __pstringtext6:
  2579     183F                     _sd001:
  2580     183F  3434               	retlw	52
  2581     1840  3403               	retlw	3
  2582     1841  344D               	retlw	77
  2583     1842  3400               	retlw	0
  2584     1843  3469               	retlw	105
  2585     1844  3400               	retlw	0
  2586     1845  3463               	retlw	99
  2587     1846  3400               	retlw	0
  2588     1847  3472               	retlw	114
  2589     1848  3400               	retlw	0
  2590     1849  346F               	retlw	111
  2591     184A  3400               	retlw	0
  2592     184B  3463               	retlw	99
  2593     184C  3400               	retlw	0
  2594     184D  3468               	retlw	104
  2595     184E  3400               	retlw	0
  2596     184F  3469               	retlw	105
  2597     1850  3400               	retlw	0
  2598     1851  3470               	retlw	112
  2599     1852  3400               	retlw	0
  2600     1853  3420               	retlw	32
  2601     1854  3400               	retlw	0
  2602     1855  3454               	retlw	84
  2603     1856  3400               	retlw	0
  2604     1857  3465               	retlw	101
  2605     1858  3400               	retlw	0
  2606     1859  3463               	retlw	99
  2607     185A  3400               	retlw	0
  2608     185B  3468               	retlw	104
  2609     185C  3400               	retlw	0
  2610     185D  346E               	retlw	110
  2611     185E  3400               	retlw	0
  2612     185F  346F               	retlw	111
  2613     1860  3400               	retlw	0
  2614     1861  346C               	retlw	108
  2615     1862  3400               	retlw	0
  2616     1863  346F               	retlw	111
  2617     1864  3400               	retlw	0
  2618     1865  3467               	retlw	103
  2619     1866  3400               	retlw	0
  2620     1867  3479               	retlw	121
  2621     1868  3400               	retlw	0
  2622     1869  3420               	retlw	32
  2623     186A  3400               	retlw	0
  2624     186B  3449               	retlw	73
  2625     186C  3400               	retlw	0
  2626     186D  346E               	retlw	110
  2627     186E  3400               	retlw	0
  2628     186F  3463               	retlw	99
  2629     1870  3400               	retlw	0
  2630     1871  342E               	retlw	46
  2631     1872  3400               	retlw	0
  2632     1873                     __end_of_sd001:
  2633                           
  2634                           	psect	stringtext7
  2635     1873                     __pstringtext7:
  2636     1873                     _configDescriptor1:
  2637     1873  3409               	retlw	9
  2638     1874  3402               	retlw	2
  2639     1875  3429               	retlw	41
  2640     1876  3400               	retlw	0
  2641     1877  3401               	retlw	1
  2642     1878  3401               	retlw	1
  2643     1879  3400               	retlw	0
  2644     187A  34C0               	retlw	192
  2645     187B  3432               	retlw	50
  2646     187C  3409               	retlw	9
  2647     187D  3404               	retlw	4
  2648     187E  3400               	retlw	0
  2649     187F  3400               	retlw	0
  2650     1880  3402               	retlw	2
  2651     1881  3403               	retlw	3
  2652     1882  3401               	retlw	1
  2653     1883  3401               	retlw	1
  2654     1884  3400               	retlw	0
  2655     1885  3409               	retlw	9
  2656     1886  3421               	retlw	33
  2657     1887  3411               	retlw	17
  2658     1888  3401               	retlw	1
  2659     1889  3400               	retlw	0
  2660     188A  3401               	retlw	1
  2661     188B  3422               	retlw	34
  2662     188C  343F               	retlw	63
  2663     188D  3400               	retlw	0
  2664     188E  3407               	retlw	7
  2665     188F  3405               	retlw	5
  2666     1890  3481               	retlw	129
  2667     1891  3403               	retlw	3
  2668     1892  3408               	retlw	8
  2669     1893  3400               	retlw	0
  2670     1894  3401               	retlw	1
  2671     1895  3407               	retlw	7
  2672     1896  3405               	retlw	5
  2673     1897  3401               	retlw	1
  2674     1898  3403               	retlw	3
  2675     1899  3408               	retlw	8
  2676     189A  3400               	retlw	0
  2677     189B  3401               	retlw	1
  2678     189C                     __end_of_configDescriptor1:
  2679                           
  2680                           	psect	stringtext8
  2681     189C                     __pstringtext8:
  2682     189C                     _device_dsc:
  2683     189C  3412               	retlw	18
  2684     189D  3401               	retlw	1
  2685     189E  3400               	retlw	0
  2686     189F  3402               	retlw	2
  2687     18A0  3400               	retlw	0
  2688     18A1  3400               	retlw	0
  2689     18A2  3400               	retlw	0
  2690     18A3  3408               	retlw	8
  2691     18A4  34D8               	retlw	216
  2692     18A5  3404               	retlw	4
  2693     18A6  3455               	retlw	85
  2694     18A7  3400               	retlw	0
  2695     18A8  3401               	retlw	1
  2696     18A9  3400               	retlw	0
  2697     18AA  3401               	retlw	1
  2698     18AB  3402               	retlw	2
  2699     18AC  3400               	retlw	0
  2700     18AD  3401               	retlw	1
  2701     18AE                     __end_of_device_dsc:
  2702                           
  2703                           	psect	stringtext9
  2704     18AE                     __pstringtext9:
  2705     18AE                     _sd002:
  2706     18AE  340E               	retlw	14
  2707     18AF  3403               	retlw	3
  2708     18B0  3441               	retlw	65
  2709     18B1  3400               	retlw	0
  2710     18B2  3454               	retlw	84
  2711     18B3  3400               	retlw	0
  2712     18B4  3432               	retlw	50
  2713     18B5  3400               	retlw	0
  2714     18B6  3455               	retlw	85
  2715     18B7  3400               	retlw	0
  2716     18B8  3453               	retlw	83
  2717     18B9  3400               	retlw	0
  2718     18BA  3442               	retlw	66
  2719     18BB  3400               	retlw	0
  2720     18BC                     __end_of_sd002:
  2721                           
  2722                           	psect	stringtext10
  2723     18C2                     __pstringtext10:
  2724     18C2                     _sd000:
  2725     18C2  3404               	retlw	4
  2726     18C3  3403               	retlw	3
  2727     18C4  3409               	retlw	9
  2728     18C5  3404               	retlw	4
  2729     18C6                     __end_of_sd000:
  2730                           
  2731                           	psect	nvBANK2
  2732     016E                     __pnvBANK2:
  2733     016E                     _IOCAF4_InterruptHandler:
  2734     016E                     	ds	2
  2735                           
  2736                           	psect	nvBANK3
  2737     01CD                     __pnvBANK3:
  2738     01CD                     _IOCAF5_InterruptHandler:
  2739     01CD                     	ds	2
  2740     000C                     _PORTAbits	set	12
  2741     001C                     _T2CONbits	set	28
  2742     001C                     _T2CON	set	28
  2743     001A                     _TMR2	set	26
  2744     001B                     _PR2	set	27
  2745     0011                     _PIR1bits	set	17
  2746     0012                     _PIR2bits	set	18
  2747     000B                     _INTCONbits	set	11
  2748     008C                     _TRISAbits	set	140
  2749     0091                     _PIE1bits	set	145
  2750     0092                     _PIE2bits	set	146
  2751     0097                     _WDTCON	set	151
  2752     0098                     _OSCTUNE	set	152
  2753     0099                     _OSCCON	set	153
  2754     0095                     _OPTION_REGbits	set	149
  2755     008E                     _TRISC	set	142
  2756     008C                     _TRISA	set	140
  2757     04D6                     _PLLRDY	set	1238
  2758     010C                     _LATAbits	set	268
  2759     0116                     _BORCON	set	278
  2760     011D                     _APFCON	set	285
  2761     010E                     _LATC	set	270
  2762     010C                     _LATA	set	268
  2763     0199                     _RCREG	set	409
  2764     019D                     _RCSTAbits	set	413
  2765     019A                     _TXREG	set	410
  2766     019C                     _SPBRGH	set	412
  2767     019B                     _SPBRGL	set	411
  2768     019E                     _TXSTA	set	414
  2769     019D                     _RCSTA	set	413
  2770     019F                     _BAUDCON	set	415
  2771     018C                     _ANSELA	set	396
  2772     018E                     _ANSELC	set	398
  2773     020C                     _WPUA	set	524
  2774     039B                     _ACTCON	set	923
  2775     0391                     _IOCAPbits	set	913
  2776     0392                     _IOCANbits	set	914
  2777     0393                     _IOCAFbits	set	915
  2778     0E98                     _UEP0bits	set	3736
  2779     0E8E                     _UCON	set	3726
  2780     0E8F                     _USTAT	set	3727
  2781     0E92                     _UIEbits	set	3730
  2782     0E90                     _UIRbits	set	3728
  2783     0E96                     _UADDR	set	3734
  2784     0E8E                     _UCONbits	set	3726
  2785     0E92                     _UIE	set	3730
  2786     0E97                     _UEIE	set	3735
  2787     0E91                     _UCFG	set	3729
  2788     0E90                     _UIR	set	3728
  2789     0E93                     _UEIR	set	3731
  2790     0E99                     _UEP1	set	3737
  2791     0E98                     _UEP0	set	3736
  2792                           
  2793                           	psect	cinit
  2794     003F                     start_initialization:	
  2795                           ; #config settings
  2796                           
  2797     003F                     __initialization:	;BIGRAM
  2798                           
  2799                           ; Initialize objects allocated to BANK3
  2800     003F  3044               	movlw	low __pidataBANK3
  2801     0040  0084               	movwf	4
  2802     0041  309E               	movlw	(high __pidataBANK3)| (0+128)
  2803     0042  0085               	movwf	5
  2804     0043  0023               	movlb	3	; select bank3
  2805     0044  0012               	moviw fsr0++
  2806     0045  00C7               	movwf	__pdataBANK3& (0+127)
  2807     0046  0012               	moviw fsr0++
  2808     0047  00C8               	movwf	(__pdataBANK3+1)& (0+127)
  2809     0048  0012               	moviw fsr0++
  2810     0049  00C9               	movwf	(__pdataBANK3+2)& (0+127)
  2811     004A  0012               	moviw fsr0++
  2812     004B  00CA               	movwf	(__pdataBANK3+3)& (0+127)
  2813     004C  0012               	moviw fsr0++
  2814     004D  00CB               	movwf	(__pdataBANK3+4)& (0+127)
  2815     004E  0012               	moviw fsr0++
  2816     004F  00CC               	movwf	(__pdataBANK3+5)& (0+127)
  2817                           
  2818                           ; Clear objects allocated to BIGRAM
  2819     0050  302C               	movlw	low (0+9004)
  2820     0051  0084               	movwf	4
  2821     0052  3023               	movlw	high (0+9004)
  2822     0053  0085               	movwf	5
  2823     0054  30C4               	movlw	196
  2824     0055  00FE               	movwf	btemp
  2825     0056  3000               	movlw	0
  2826     0057  00FF               	movwf	btemp+1
  2827     0058  319E  26DA  3180   	fcall	clear_ram0
  2828                           
  2829                           ; Clear objects allocated to BANK0
  2830     005B  3063               	movlw	low __pbssBANK0
  2831     005C  0084               	movwf	4
  2832     005D  3000               	movlw	high __pbssBANK0
  2833     005E  0085               	movwf	5
  2834     005F  300D               	movlw	13
  2835     0060  00FE               	movwf	btemp
  2836     0061  3000               	movlw	0
  2837     0062  00FF               	movwf	btemp+1
  2838     0063  319E  26DA  3180   	fcall	clear_ram0
  2839                           
  2840                           ; Clear objects allocated to BANK1
  2841     0066  0021               	movlb	1	; select bank1
  2842     0067  01E9               	clrf	__pbssBANK1& (0+127)
  2843     0068  01EA               	clrf	(__pbssBANK1+1)& (0+127)
  2844     0069  01EB               	clrf	(__pbssBANK1+2)& (0+127)
  2845     006A  01EC               	clrf	(__pbssBANK1+3)& (0+127)
  2846     006B  01ED               	clrf	(__pbssBANK1+4)& (0+127)
  2847     006C  01EE               	clrf	(__pbssBANK1+5)& (0+127)
  2848     006D  01EF               	clrf	(__pbssBANK1+6)& (0+127)
  2849                           
  2850                           ; Clear objects allocated to BANK2
  2851     006E  3021               	movlw	low __pbssBANK2
  2852     006F  0084               	movwf	4
  2853     0070  3001               	movlw	high __pbssBANK2
  2854     0071  0085               	movwf	5
  2855     0072  304D               	movlw	77
  2856     0073  00FE               	movwf	btemp
  2857     0074  3000               	movlw	0
  2858     0075  00FF               	movwf	btemp+1
  2859     0076  319E  26DA  3180   	fcall	clear_ram0
  2860                           
  2861                           ; Clear objects allocated to BANK3
  2862     0079  30A0               	movlw	low __pbssBANK3
  2863     007A  0084               	movwf	4
  2864     007B  3001               	movlw	high __pbssBANK3
  2865     007C  0085               	movwf	5
  2866     007D  3027               	movlw	39
  2867     007E  00FE               	movwf	btemp
  2868     007F  3000               	movlw	0
  2869     0080  00FF               	movwf	btemp+1
  2870     0081  319E  26DA         	fcall	clear_ram0
  2871     0083                     end_of_initialization:	
  2872                           ;End of C runtime variable initialization code
  2873                           
  2874     0083                     __end_of__initialization:
  2875     0083  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2876     0084  0020               	movlb	0
  2877     0085  318A  2A52         	ljmp	_main	;jump to C main() function
  2878                           
  2879                           	psect	bssBANK0
  2880     0063                     __pbssBANK0:
  2881     0063                     _pBDTEntryIn:
  2882     0063                     	ds	4
  2883     0067                     _pBDTEntryEP0OutNext:
  2884     0067                     	ds	2
  2885     0069                     _keyboardCommandCount:
  2886     0069                     	ds	1
  2887     006A                     _controlTransferState:
  2888     006A                     	ds	1
  2889     006B                     _pBDTEntryEP0OutCurrent:
  2890     006B                     	ds	1
  2891     006C                     _USBDeviceState:
  2892     006C                     	ds	1
  2893     006D                     _USTATcopy:
  2894     006D                     	ds	1
  2895     006E                     _USBAlternateInterface:
  2896     006E                     	ds	1
  2897     006F                     _USBActiveConfiguration:
  2898     006F                     	ds	1
  2899                           
  2900                           	psect	bssBANK1
  2901     00E9                     __pbssBANK1:
  2902     00E9                     _inPipes:
  2903     00E9                     	ds	5
  2904     00EE                     _eusartRxHead:
  2905     00EE                     	ds	1
  2906     00EF                     _eusartTxBufferRemaining:
  2907     00EF                     	ds	1
  2908                           
  2909                           	psect	bssBANK2
  2910     0121                     __pbssBANK2:
  2911     0121                     _outPipes:
  2912     0121                     	ds	7
  2913     0128                     _timeMs:
  2914     0128                     	ds	4
  2915     012C                     _prevTimeMs:
  2916     012C                     	ds	4
  2917     0130                     _pBDTEntryOut:
  2918     0130                     	ds	4
  2919     0134                     _OldSOFCount:
  2920     0134                     	ds	2
  2921     0136                     _LocalSOFCount:
  2922     0136                     	ds	2
  2923     0138                     _keyboardIdleRate:
  2924     0138                     	ds	2
  2925     013A                     _SOFCounter:
  2926     013A                     	ds	2
  2927     013C                     _ep_data_out:
  2928     013C                     	ds	2
  2929     013E                     _ep_data_in:
  2930     013E                     	ds	2
  2931     0140                     _EUSART_ErrorHandler:
  2932     0140                     	ds	2
  2933     0142                     _EUSART_OverrunErrorHandler:
  2934     0142                     	ds	2
  2935     0144                     _EUSART_FramingErrorHandler:
  2936     0144                     	ds	2
  2937     0146                     _TMR2_InterruptHandler:
  2938     0146                     	ds	2
  2939     0148                     _EUSART_RxDefaultInterruptHandler:
  2940     0148                     	ds	2
  2941     014A                     _EUSART_TxDefaultInterruptHandler:
  2942     014A                     	ds	2
  2943     014C                     _keyboardCommandOnes:
  2944     014C                     	ds	1
  2945     014D                     _keyboardCommandBits:
  2946     014D                     	ds	1
  2947     014E                     _keyboardCommand:
  2948     014E                     	ds	1
  2949     014F                     _keyboardIsBreak:
  2950     014F                     	ds	1
  2951     0150                     _keyboardIsExtend:
  2952     0150                     	ds	1
  2953     0151                     _keyboardData:
  2954     0151                     	ds	1
  2955     0152                     _keyboardScanCodeValid:
  2956     0152                     	ds	1
  2957     0153                     _keyboardOnesCount:
  2958     0153                     	ds	1
  2959     0154                     _keyboardIndexData:
  2960     0154                     	ds	1
  2961     0155                     _keyboardState:
  2962     0155                     	ds	1
  2963     0156                     _oreflag:
  2964     0156                     	ds	1
  2965     0157                     _USBTicksSinceSuspendEnd:
  2966     0157                     	ds	1
  2967     0158                     _USBDeferOUTDataStagePackets:
  2968     0158                     	ds	1
  2969     0159                     _USBDeferINDataStagePackets:
  2970     0159                     	ds	1
  2971     015A                     _USBStatusStageEnabledFlag2:
  2972     015A                     	ds	1
  2973     015B                     _USBStatusStageEnabledFlag1:
  2974     015B                     	ds	1
  2975     015C                     _USBDeferStatusStagePacket:
  2976     015C                     	ds	1
  2977     015D                     _USBStatusStageTimeoutCounter:
  2978     015D                     	ds	1
  2979     015E                     _BothEP0OutUOWNsSet:
  2980     015E                     	ds	1
  2981     015F                     _endpoint_number:
  2982     015F                     	ds	1
  2983     0160                     _USBBusIsSuspended:
  2984     0160                     	ds	1
  2985     0161                     _RemoteWakeup:
  2986     0161                     	ds	1
  2987     0162                     _pDst:
  2988     0162                     	ds	1
  2989     0163                     _shortPacketStatus:
  2990     0163                     	ds	1
  2991     0164                     _eusartRxLastError:
  2992     0164                     	ds	1
  2993     0165                     _eusartRxCount:
  2994     0165                     	ds	1
  2995     0166                     _eusartRxTail:
  2996     0166                     	ds	1
  2997     0167                     _eusartTxTail:
  2998     0167                     	ds	1
  2999     0168                     _eusartTxHead:
  3000     0168                     	ds	1
  3001     0169                     _keyboardScanCode:
  3002     0169                     	ds	3
  3003     016C                     _active_protocol:
  3004     016C                     	ds	1
  3005     016D                     _idle_rate:
  3006     016D                     	ds	1
  3007                           
  3008                           	psect	bssBANK3
  3009     01A0                     __pbssBANK3:
  3010     01A0                     _oldInputReport:
  3011     01A0                     	ds	8
  3012     01A8                     _eusartRxStatusBuffer:
  3013     01A8                     	ds	8
  3014     01B0                     _eusartRxBuffer:
  3015     01B0                     	ds	8
  3016     01B8                     _eusartTxBuffer:
  3017     01B8                     	ds	8
  3018     01C0                     _USB1msTickCount:
  3019     01C0                     	ds	4
  3020     01C4                     main@F3300:
  3021     01C4                     	ds	3
  3022                           
  3023                           	psect	dataBANK3
  3024     01C7                     __pdataBANK3:
  3025     01C7                     main@F3304:
  3026     01C7                     	ds	6
  3027                           
  3028                           	psect	clrtext
  3029     1EDA                     clear_ram0:	
  3030                           ;	Called with FSR0 containing the base address, and
  3031                           ;	btemp/btemp+1 has the size to clear
  3032                           
  3033     1EDA  0064               	clrwdt	;clear the watchdog before getting into this loop
  3034     1EDB                     clrloop0:
  3035     1EDB  0180               	clrf	0	;clear RAM location pointed to by FSR
  3036     1EDC  3101               	addfsr 0,1
  3037     1EDD  3001               	movlw	1
  3038     1EDE  02FE               	subwf	126,f
  3039     1EDF  3000               	movlw	0
  3040     1EE0  3BFF               	subwfb	127,f
  3041     1EE1  087F               	movf	127,w
  3042     1EE2  047E               	iorwf	126,w
  3043     1EE3  1903               	btfsc	3,2
  3044     1EE4  3400               	retlw	0	;all done for this memory range, return
  3045     1EE5  2EDB               	goto	clrloop0	;have we reached the end yet?
  3046                           
  3047                           	psect	cstackBANK1
  3048     00A8                     __pcstackBANK1:
  3049     00A8                     ?_IOCAF4_SetInterruptHandler:
  3050     00A8                     ?_IOCAF5_SetInterruptHandler:	
  3051                           ; 1 bytes @ 0x0
  3052                           
  3053     00A8                     ??_OSCILLATOR_Initialize:	
  3054                           ; 1 bytes @ 0x0
  3055                           
  3056     00A8                     ??_WDT_Initialize:	
  3057                           ; 1 bytes @ 0x0
  3058                           
  3059     00A8                     ??_USBDeviceInit:	
  3060                           ; 1 bytes @ 0x0
  3061                           
  3062     00A8                     ??_USBDeviceAttach:	
  3063                           ; 1 bytes @ 0x0
  3064                           
  3065     00A8                     ?_TMR2_SetInterruptHandler:	
  3066                           ; 1 bytes @ 0x0
  3067                           
  3068     00A8                     ?_EUSART_SetRxInterruptHandler:	
  3069                           ; 1 bytes @ 0x0
  3070                           
  3071     00A8                     ?_EUSART_SetTxInterruptHandler:	
  3072                           ; 1 bytes @ 0x0
  3073                           
  3074     00A8                     ?_EUSART_SetFramingErrorHandler:	
  3075                           ; 1 bytes @ 0x0
  3076                           
  3077     00A8                     ?_EUSART_SetOverrunErrorHandler:	
  3078                           ; 1 bytes @ 0x0
  3079                           
  3080     00A8                     ?_EUSART_SetErrorHandler:	
  3081                           ; 1 bytes @ 0x0
  3082                           
  3083     00A8                     ?_memset:	
  3084                           ; 1 bytes @ 0x0
  3085                           
  3086     00A8                     ?_GenericQueue_Init:	
  3087                           ; 1 bytes @ 0x0
  3088                           
  3089     00A8                     ??_PS2USB_ScanCodeToUSBHID:	
  3090                           ; 1 bytes @ 0x0
  3091                           
  3092     00A8                     ??_PS2Keyboard_GetLastCommand:	
  3093                           ; 1 bytes @ 0x0
  3094                           
  3095     00A8                     ??_PS2Keyboard_SendCommand:	
  3096                           ; 1 bytes @ 0x0
  3097                           
  3098     00A8                     ??_TMR2_StartTimer:	
  3099                           ; 1 bytes @ 0x0
  3100                           
  3101     00A8                     ??_EUSART_is_tx_ready:	
  3102                           ; 1 bytes @ 0x0
  3103                           
  3104     00A8                     ??_EUSART_Write:	
  3105                           ; 1 bytes @ 0x0
  3106                           
  3107     00A8                     ??_hex2str:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110     00A8                     ?___bmul:	
  3111                           ; 1 bytes @ 0x0
  3112                           
  3113     00A8                     ?_USBTransferOnePacket:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116     00A8                     ?_GenericQueue_IsEmpty:	
  3117                           ; 2 bytes @ 0x0
  3118                           
  3119     00A8                     ?_GenericQueue_IsFull:	
  3120                           ; 2 bytes @ 0x0
  3121                           
  3122     00A8                     ?___awmod:	
  3123                           ; 2 bytes @ 0x0
  3124                           
  3125     00A8                     USBTransferOnePacket@dir:	
  3126                           ; 2 bytes @ 0x0
  3127                           
  3128     00A8                     PS2Keyboard_SendCommand@cmd:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131     00A8                     PS2USB_ScanCodeToUSBHID@scanCode:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134     00A8                     hex2str@val:	
  3135                           ; 1 bytes @ 0x0
  3136                           
  3137     00A8                     ___bmul@multiplicand:	
  3138                           ; 1 bytes @ 0x0
  3139                           
  3140     00A8                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  3141                           ; 1 bytes @ 0x0
  3142                           
  3143     00A8                     IOCAF5_SetInterruptHandler@InterruptHandler:	
  3144                           ; 2 bytes @ 0x0
  3145                           
  3146     00A8                     TMR2_SetInterruptHandler@InterruptHandler:	
  3147                           ; 2 bytes @ 0x0
  3148                           
  3149     00A8                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3150                           ; 2 bytes @ 0x0
  3151                           
  3152     00A8                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3153                           ; 2 bytes @ 0x0
  3154                           
  3155     00A8                     EUSART_SetErrorHandler@interruptHandler:	
  3156                           ; 2 bytes @ 0x0
  3157                           
  3158     00A8                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3159                           ; 2 bytes @ 0x0
  3160                           
  3161     00A8                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3162                           ; 2 bytes @ 0x0
  3163                           
  3164     00A8                     GenericQueue_Init@q:	
  3165                           ; 2 bytes @ 0x0
  3166                           
  3167     00A8                     GenericQueue_IsEmpty@q:	
  3168                           ; 2 bytes @ 0x0
  3169                           
  3170     00A8                     GenericQueue_IsFull@q:	
  3171                           ; 2 bytes @ 0x0
  3172                           
  3173     00A8                     ___awmod@divisor:	
  3174                           ; 2 bytes @ 0x0
  3175                           
  3176     00A8                     memset@c:	
  3177                           ; 2 bytes @ 0x0
  3178                           
  3179                           
  3180                           ; 2 bytes @ 0x0
  3181     00A8                     	ds	1
  3182     00A9                     ??_APP_KeyboardProcessOutputReport:
  3183     00A9                     ??___bmul:	
  3184                           ; 1 bytes @ 0x1
  3185                           
  3186     00A9                     EUSART_Write@txData:	
  3187                           ; 1 bytes @ 0x1
  3188                           
  3189     00A9                     USBTransferOnePacket@data:	
  3190                           ; 1 bytes @ 0x1
  3191                           
  3192                           
  3193                           ; 2 bytes @ 0x1
  3194     00A9                     	ds	1
  3195     00AA                     ??_IOCAF4_SetInterruptHandler:
  3196     00AA                     ??_IOCAF5_SetInterruptHandler:	
  3197                           ; 1 bytes @ 0x2
  3198                           
  3199     00AA                     ??_TMR2_Initialize:	
  3200                           ; 1 bytes @ 0x2
  3201                           
  3202     00AA                     ??_EUSART_Initialize:	
  3203                           ; 1 bytes @ 0x2
  3204                           
  3205     00AA                     ??_TMR2_SetInterruptHandler:	
  3206                           ; 1 bytes @ 0x2
  3207                           
  3208     00AA                     ??_EUSART_SetRxInterruptHandler:	
  3209                           ; 1 bytes @ 0x2
  3210                           
  3211     00AA                     ??_EUSART_SetTxInterruptHandler:	
  3212                           ; 1 bytes @ 0x2
  3213                           
  3214     00AA                     ??_EUSART_SetFramingErrorHandler:	
  3215                           ; 1 bytes @ 0x2
  3216                           
  3217     00AA                     ??_EUSART_SetOverrunErrorHandler:	
  3218                           ; 1 bytes @ 0x2
  3219                           
  3220     00AA                     ??_EUSART_SetErrorHandler:	
  3221                           ; 1 bytes @ 0x2
  3222                           
  3223     00AA                     ??_SysTime_Init:	
  3224                           ; 1 bytes @ 0x2
  3225                           
  3226     00AA                     ?_Log_Message:	
  3227                           ; 1 bytes @ 0x2
  3228                           
  3229     00AA                     ??_GenericQueue_IsEmpty:	
  3230                           ; 1 bytes @ 0x2
  3231                           
  3232     00AA                     ??_PIN_MANAGER_Initialize:	
  3233                           ; 1 bytes @ 0x2
  3234                           
  3235     00AA                     ??_GenericQueue_IsFull:	
  3236                           ; 1 bytes @ 0x2
  3237                           
  3238     00AA                     Log_Message@bufSize:	
  3239                           ; 1 bytes @ 0x2
  3240                           
  3241     00AA                     ___bmul@product:	
  3242                           ; 1 bytes @ 0x2
  3243                           
  3244     00AA                     GenericQueue_Init@element_size:	
  3245                           ; 1 bytes @ 0x2
  3246                           
  3247     00AA                     ___awmod@dividend:	
  3248                           ; 2 bytes @ 0x2
  3249                           
  3250     00AA                     memset@n:	
  3251                           ; 2 bytes @ 0x2
  3252                           
  3253                           
  3254                           ; 2 bytes @ 0x2
  3255     00AA                     	ds	1
  3256     00AB                     ??_Log_Message:
  3257     00AB                     USBTransferOnePacket@len:	
  3258                           ; 1 bytes @ 0x3
  3259                           
  3260     00AB                     ___bmul@multiplier:	
  3261                           ; 1 bytes @ 0x3
  3262                           
  3263                           
  3264                           ; 1 bytes @ 0x3
  3265     00AB                     	ds	1
  3266     00AC                     ??_memset:
  3267     00AC                     ??_USBTransferOnePacket:	
  3268                           ; 1 bytes @ 0x4
  3269                           
  3270     00AC                     ??_PS2Keyboard_Init:	
  3271                           ; 1 bytes @ 0x4
  3272                           
  3273     00AC                     ?_Log_UtilityConvertByteToHex:	
  3274                           ; 1 bytes @ 0x4
  3275                           
  3276     00AC                     ??_GenericQueue_Init:	
  3277                           ; 1 bytes @ 0x4
  3278                           
  3279     00AC                     ??___awmod:	
  3280                           ; 1 bytes @ 0x4
  3281                           
  3282     00AC                     Log_UtilityConvertByteToHex@buf:	
  3283                           ; 1 bytes @ 0x4
  3284                           
  3285     00AC                     Log_Message@buf:	
  3286                           ; 1 bytes @ 0x4
  3287                           
  3288     00AC                     USBDeviceInit@p:	
  3289                           ; 1 bytes @ 0x4
  3290                           
  3291                           
  3292                           ; 2 bytes @ 0x4
  3293     00AC                     	ds	1
  3294     00AD                     Log_UtilityConvertByteToHex@bufSize:
  3295     00AD                     Log_Message@i:	
  3296                           ; 1 bytes @ 0x5
  3297                           
  3298     00AD                     ___awmod@counter:	
  3299                           ; 1 bytes @ 0x5
  3300                           
  3301     00AD                     memset@p:	
  3302                           ; 1 bytes @ 0x5
  3303                           
  3304                           
  3305                           ; 1 bytes @ 0x5
  3306     00AD                     	ds	1
  3307     00AE                     ??_Log_UtilityConvertByteToHex:
  3308     00AE                     USBDeviceInit@i_1324:	
  3309                           ; 1 bytes @ 0x6
  3310                           
  3311     00AE                     ___awmod@sign:	
  3312                           ; 1 bytes @ 0x6
  3313                           
  3314     00AE                     memset@dest:	
  3315                           ; 1 bytes @ 0x6
  3316                           
  3317                           
  3318                           ; 1 bytes @ 0x6
  3319     00AE                     	ds	1
  3320     00AF                     ?___wmul:
  3321     00AF                     USBDeviceInit@i:	
  3322                           ; 2 bytes @ 0x7
  3323                           
  3324     00AF                     Log_UtilityConvertByteToHex@d0:	
  3325                           ; 1 bytes @ 0x7
  3326                           
  3327     00AF                     ___wmul@multiplier:	
  3328                           ; 1 bytes @ 0x7
  3329                           
  3330                           
  3331                           ; 2 bytes @ 0x7
  3332     00AF                     	ds	1
  3333     00B0                     ??_SYSTEM_Initialize:
  3334     00B0                     USBTransferOnePacket@ep:	
  3335                           ; 1 bytes @ 0x8
  3336                           
  3337     00B0                     Log_UtilityConvertByteToHex@byte:	
  3338                           ; 1 bytes @ 0x8
  3339                           
  3340                           
  3341                           ; 1 bytes @ 0x8
  3342     00B0                     	ds	1
  3343     00B1                     Log_UtilityConvertByteToHex@d1:
  3344     00B1                     USBTransferOnePacket@handle:	
  3345                           ; 1 bytes @ 0x9
  3346                           
  3347     00B1                     ___wmul@multiplicand:	
  3348                           ; 2 bytes @ 0x9
  3349                           
  3350                           
  3351                           ; 2 bytes @ 0x9
  3352     00B1                     	ds	2
  3353     00B3                     ??___wmul:
  3354     00B3                     ___wmul@product:	
  3355                           ; 1 bytes @ 0xB
  3356                           
  3357                           
  3358                           ; 2 bytes @ 0xB
  3359     00B3                     	ds	2
  3360     00B5                     ?_memcpy:
  3361     00B5                     ?_memcmp:	
  3362                           ; 2 bytes @ 0xD
  3363                           
  3364     00B5                     memcmp@vl:	
  3365                           ; 2 bytes @ 0xD
  3366                           
  3367     00B5                     memcpy@d1:	
  3368                           ; 2 bytes @ 0xD
  3369                           
  3370                           
  3371                           ; 2 bytes @ 0xD
  3372     00B5                     	ds	2
  3373     00B7                     memcmp@vr:
  3374     00B7                     memcpy@s1:	
  3375                           ; 1 bytes @ 0xF
  3376                           
  3377                           
  3378                           ; 2 bytes @ 0xF
  3379     00B7                     	ds	1
  3380     00B8                     memcmp@n:
  3381                           
  3382                           ; 2 bytes @ 0x10
  3383     00B8                     	ds	1
  3384     00B9                     memcpy@n:
  3385                           
  3386                           ; 2 bytes @ 0x11
  3387     00B9                     	ds	1
  3388     00BA                     ??_memcmp:
  3389                           
  3390                           ; 1 bytes @ 0x12
  3391     00BA                     	ds	1
  3392     00BB                     ??_memcpy:
  3393     00BB                     memcmp@l:	
  3394                           ; 1 bytes @ 0x13
  3395                           
  3396     00BB                     memcpy@d:	
  3397                           ; 2 bytes @ 0x13
  3398                           
  3399                           
  3400                           ; 2 bytes @ 0x13
  3401     00BB                     	ds	2
  3402     00BD                     memcmp@r:
  3403     00BD                     memcpy@s:	
  3404                           ; 1 bytes @ 0x15
  3405                           
  3406                           
  3407                           ; 2 bytes @ 0x15
  3408     00BD                     	ds	1
  3409     00BE                     ?_GenericQueue_Contains:
  3410     00BE                     GenericQueue_Contains@q:	
  3411                           ; 1 bytes @ 0x16
  3412                           
  3413                           
  3414                           ; 2 bytes @ 0x16
  3415     00BE                     	ds	1
  3416     00BF                     memcpy@tmp:
  3417                           
  3418                           ; 1 bytes @ 0x17
  3419     00BF                     	ds	1
  3420     00C0                     ?_GenericQueue_CopyToArray:
  3421     00C0                     ?_GenericQueue_Remove:	
  3422                           ; 1 bytes @ 0x18
  3423                           
  3424     00C0                     ?_GenericQueue_Enqueue:	
  3425                           ; 1 bytes @ 0x18
  3426                           
  3427     00C0                     ?_GenericQueue_Dequeue:	
  3428                           ; 1 bytes @ 0x18
  3429                           
  3430     00C0                     GenericQueue_Contains@item:	
  3431                           ; 1 bytes @ 0x18
  3432                           
  3433     00C0                     GenericQueue_Enqueue@q:	
  3434                           ; 1 bytes @ 0x18
  3435                           
  3436     00C0                     GenericQueue_Dequeue@q:	
  3437                           ; 2 bytes @ 0x18
  3438                           
  3439     00C0                     GenericQueue_Remove@q:	
  3440                           ; 2 bytes @ 0x18
  3441                           
  3442     00C0                     GenericQueue_CopyToArray@q:	
  3443                           ; 2 bytes @ 0x18
  3444                           
  3445                           
  3446                           ; 2 bytes @ 0x18
  3447     00C0                     	ds	1
  3448     00C1                     ??_GenericQueue_Contains:
  3449                           
  3450                           ; 1 bytes @ 0x19
  3451     00C1                     	ds	1
  3452     00C2                     GenericQueue_Dequeue@item:
  3453     00C2                     GenericQueue_Remove@item:	
  3454                           ; 1 bytes @ 0x1A
  3455                           
  3456     00C2                     GenericQueue_CopyToArray@array:	
  3457                           ; 1 bytes @ 0x1A
  3458                           
  3459     00C2                     GenericQueue_Enqueue@item:	
  3460                           ; 1 bytes @ 0x1A
  3461                           
  3462                           
  3463                           ; 2 bytes @ 0x1A
  3464     00C2                     	ds	1
  3465     00C3                     ??_GenericQueue_CopyToArray:
  3466     00C3                     ??_GenericQueue_Remove:	
  3467                           ; 1 bytes @ 0x1B
  3468                           
  3469     00C3                     ??_GenericQueue_Dequeue:	
  3470                           ; 1 bytes @ 0x1B
  3471                           
  3472                           
  3473                           ; 1 bytes @ 0x1B
  3474     00C3                     	ds	1
  3475     00C4                     ??_GenericQueue_Enqueue:
  3476                           
  3477                           ; 1 bytes @ 0x1C
  3478     00C4                     	ds	1
  3479     00C5                     GenericQueue_Contains@i:
  3480                           
  3481                           ; 1 bytes @ 0x1D
  3482     00C5                     	ds	2
  3483     00C7                     ??_PS2Keyboard_GetScanCode:
  3484     00C7                     PS2Keyboard_GetScanCode@scanCode:	
  3485                           ; 1 bytes @ 0x1F
  3486                           
  3487     00C7                     GenericQueue_Remove@i:	
  3488                           ; 1 bytes @ 0x1F
  3489                           
  3490     00C7                     GenericQueue_CopyToArray@index:	
  3491                           ; 1 bytes @ 0x1F
  3492                           
  3493                           
  3494                           ; 1 bytes @ 0x1F
  3495     00C7                     	ds	1
  3496     00C8                     PS2Keyboard_GetScanCode@ret:
  3497     00C8                     GenericQueue_Remove@j:	
  3498                           ; 1 bytes @ 0x20
  3499                           
  3500     00C8                     GenericQueue_CopyToArray@count:	
  3501                           ; 1 bytes @ 0x20
  3502                           
  3503                           
  3504                           ; 1 bytes @ 0x20
  3505     00C8                     	ds	1
  3506     00C9                     ??_APP_KeyboardUpdateState:
  3507                           
  3508                           ; 1 bytes @ 0x21
  3509     00C9                     	ds	2
  3510     00CB                     APP_KeyboardUpdateState@leds:
  3511                           
  3512                           ; 1 bytes @ 0x23
  3513     00CB                     	ds	1
  3514     00CC                     APP_KeyboardUpdateState@usbHidCode:
  3515                           
  3516                           ; 1 bytes @ 0x24
  3517     00CC                     	ds	1
  3518     00CD                     APP_KeyboardUpdateState@usbHidCode_2857:
  3519                           
  3520                           ; 1 bytes @ 0x25
  3521     00CD                     	ds	1
  3522     00CE                     APP_KeyboardUpdateState@usbHidCode_2856:
  3523                           
  3524                           ; 1 bytes @ 0x26
  3525     00CE                     	ds	1
  3526     00CF                     APP_KeyboardUpdateState@usbHidCode_2865:
  3527                           
  3528                           ; 1 bytes @ 0x27
  3529     00CF                     	ds	1
  3530     00D0                     APP_KeyboardUpdateState@scanCode:
  3531                           
  3532                           ; 1 bytes @ 0x28
  3533     00D0                     	ds	1
  3534     00D1                     ??_APP_KeyboardTasks:
  3535                           
  3536                           ; 1 bytes @ 0x29
  3537     00D1                     	ds	2
  3538     00D3                     APP_KeyboardTasks@scanCode:
  3539                           
  3540                           ; 1 bytes @ 0x2B
  3541     00D3                     	ds	1
  3542     00D4                     APP_KeyboardTasks@needToSendNewReportPacket:
  3543                           
  3544                           ; 1 bytes @ 0x2C
  3545     00D4                     	ds	1
  3546     00D5                     APP_KeyboardTasks@TimeDeltaMilliseconds:
  3547                           
  3548                           ; 2 bytes @ 0x2D
  3549     00D5                     	ds	2
  3550     00D7                     APP_KeyboardTasks@i:
  3551                           
  3552                           ; 1 bytes @ 0x2F
  3553     00D7                     	ds	1
  3554     00D8                     ??_main:
  3555                           
  3556                           ; 1 bytes @ 0x30
  3557     00D8                     	ds	2
  3558     00DA                     main@scanCodeStr:
  3559                           
  3560                           ; 6 bytes @ 0x32
  3561     00DA                     	ds	6
  3562     00E0                     _main$2579:
  3563                           
  3564                           ; 2 bytes @ 0x38
  3565     00E0                     	ds	2
  3566     00E2                     _main$2580:
  3567                           
  3568                           ; 2 bytes @ 0x3A
  3569     00E2                     	ds	2
  3570     00E4                     main@scanCodeValid:
  3571                           
  3572                           ; 1 bytes @ 0x3C
  3573     00E4                     	ds	1
  3574     00E5                     main@hndlScanCode:
  3575                           
  3576                           ; 1 bytes @ 0x3D
  3577     00E5                     	ds	1
  3578     00E6                     main@scanCode:
  3579                           
  3580                           ; 3 bytes @ 0x3E
  3581     00E6                     	ds	3
  3582                           
  3583                           	psect	cstackCOMMON
  3584     0070                     __pcstackCOMMON:
  3585     0070                     ?_IOCAF4_DefaultInterruptHandler:
  3586     0070                     ??_IOCAF4_DefaultInterruptHandler:	
  3587                           ; 1 bytes @ 0x0
  3588                           
  3589     0070                     ?_IOCAF5_DefaultInterruptHandler:	
  3590                           ; 1 bytes @ 0x0
  3591                           
  3592     0070                     ??_IOCAF5_DefaultInterruptHandler:	
  3593                           ; 1 bytes @ 0x0
  3594                           
  3595     0070                     ?_IOCAF4_ISR:	
  3596                           ; 1 bytes @ 0x0
  3597                           
  3598     0070                     ?_IOCAF5_ISR:	
  3599                           ; 1 bytes @ 0x0
  3600                           
  3601     0070                     ?_OSCILLATOR_Initialize:	
  3602                           ; 1 bytes @ 0x0
  3603                           
  3604     0070                     ?_WDT_Initialize:	
  3605                           ; 1 bytes @ 0x0
  3606                           
  3607     0070                     ?_TMR2_Initialize:	
  3608                           ; 1 bytes @ 0x0
  3609                           
  3610     0070                     ?_EUSART_Initialize:	
  3611                           ; 1 bytes @ 0x0
  3612                           
  3613     0070                     ?_USBDeviceInit:	
  3614                           ; 1 bytes @ 0x0
  3615                           
  3616     0070                     ?_USBDeviceAttach:	
  3617                           ; 1 bytes @ 0x0
  3618                           
  3619     0070                     ?_USBDeviceTasks:	
  3620                           ; 1 bytes @ 0x0
  3621                           
  3622     0070                     ?_TMR2_ISR:	
  3623                           ; 1 bytes @ 0x0
  3624                           
  3625     0070                     ??_TMR2_ISR:	
  3626                           ; 1 bytes @ 0x0
  3627                           
  3628     0070                     ?_TMR2_DefaultInterruptHandler:	
  3629                           ; 1 bytes @ 0x0
  3630                           
  3631     0070                     ??_TMR2_DefaultInterruptHandler:	
  3632                           ; 1 bytes @ 0x0
  3633                           
  3634     0070                     ?_EUSART_Receive_ISR:	
  3635                           ; 1 bytes @ 0x0
  3636                           
  3637     0070                     ?_EUSART_Transmit_ISR:	
  3638                           ; 1 bytes @ 0x0
  3639                           
  3640     0070                     ??_EUSART_Transmit_ISR:	
  3641                           ; 1 bytes @ 0x0
  3642                           
  3643     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3644                           ; 1 bytes @ 0x0
  3645                           
  3646     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3647                           ; 1 bytes @ 0x0
  3648                           
  3649     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3650                           ; 1 bytes @ 0x0
  3651                           
  3652     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3653                           ; 1 bytes @ 0x0
  3654                           
  3655     0070                     ?_EUSART_DefaultErrorHandler:	
  3656                           ; 1 bytes @ 0x0
  3657                           
  3658     0070                     ?_EUSART_RxDataHandler:	
  3659                           ; 1 bytes @ 0x0
  3660                           
  3661     0070                     ??_EUSART_RxDataHandler:	
  3662                           ; 1 bytes @ 0x0
  3663                           
  3664     0070                     ?_USBWakeFromSuspend:	
  3665                           ; 1 bytes @ 0x0
  3666                           
  3667     0070                     ?_USBSuspend:	
  3668                           ; 1 bytes @ 0x0
  3669                           
  3670     0070                     ?_USBIncrement1msInternalTimers:	
  3671                           ; 1 bytes @ 0x0
  3672                           
  3673     0070                     ??_USBIncrement1msInternalTimers:	
  3674                           ; 1 bytes @ 0x0
  3675                           
  3676     0070                     ?_USBCtrlEPAllowStatusStage:	
  3677                           ; 1 bytes @ 0x0
  3678                           
  3679     0070                     ??_USBCtrlEPAllowStatusStage:	
  3680                           ; 1 bytes @ 0x0
  3681                           
  3682     0070                     ?_USBStallHandler:	
  3683                           ; 1 bytes @ 0x0
  3684                           
  3685     0070                     ??_USBStallHandler:	
  3686                           ; 1 bytes @ 0x0
  3687                           
  3688     0070                     ?_USBCtrlEPService:	
  3689                           ; 1 bytes @ 0x0
  3690                           
  3691     0070                     ?_USBConfigureEndpoint:	
  3692                           ; 1 bytes @ 0x0
  3693                           
  3694     0070                     ?_USBCtrlTrfTxService:	
  3695                           ; 1 bytes @ 0x0
  3696                           
  3697     0070                     ??_USBCtrlTrfTxService:	
  3698                           ; 1 bytes @ 0x0
  3699                           
  3700     0070                     ?_USBCtrlTrfSetupHandler:	
  3701                           ; 1 bytes @ 0x0
  3702                           
  3703     0070                     ?_USBCtrlTrfOutHandler:	
  3704                           ; 1 bytes @ 0x0
  3705                           
  3706     0070                     ?_USBCtrlTrfInHandler:	
  3707                           ; 1 bytes @ 0x0
  3708                           
  3709     0070                     ?_USBCheckStdRequest:	
  3710                           ; 1 bytes @ 0x0
  3711                           
  3712     0070                     ?_USBStdFeatureReqHandler:	
  3713                           ; 1 bytes @ 0x0
  3714                           
  3715     0070                     ?_USBHIDCBSetReportHandler:	
  3716                           ; 1 bytes @ 0x0
  3717                           
  3718     0070                     ??_USBHIDCBSetReportHandler:	
  3719                           ; 1 bytes @ 0x0
  3720                           
  3721     0070                     ?_USBHIDCBSetIdleRateHandler:	
  3722                           ; 1 bytes @ 0x0
  3723                           
  3724     0070                     ?_APP_KeyboardInit:	
  3725                           ; 1 bytes @ 0x0
  3726                           
  3727     0070                     ?_SysTime_Init:	
  3728                           ; 1 bytes @ 0x0
  3729                           
  3730     0070                     ?_PS2Keyboard_Init:	
  3731                           ; 1 bytes @ 0x0
  3732                           
  3733     0070                     ?_PS2Keyboard_GetScanCode:	
  3734                           ; 1 bytes @ 0x0
  3735                           
  3736     0070                     ?_APP_KeyboardTasks:	
  3737                           ; 1 bytes @ 0x0
  3738                           
  3739     0070                     ?_APP_KeyboardUpdateState:	
  3740                           ; 1 bytes @ 0x0
  3741                           
  3742     0070                     ?_APP_KeyboardProcessOutputReport:	
  3743                           ; 1 bytes @ 0x0
  3744                           
  3745     0070                     ?_PS2USB_ScanCodeToUSBHID:	
  3746                           ; 1 bytes @ 0x0
  3747                           
  3748     0070                     ?_PS2Keyboard_GetLastCommand:	
  3749                           ; 1 bytes @ 0x0
  3750                           
  3751     0070                     ?_PS2Keyboard_SendCommand:	
  3752                           ; 1 bytes @ 0x0
  3753                           
  3754     0070                     ?_PS2Keyboard_ClockInterrupt:	
  3755                           ; 1 bytes @ 0x0
  3756                           
  3757     0070                     ?_PS2Keyboard_DataInterrupt:	
  3758                           ; 1 bytes @ 0x0
  3759                           
  3760     0070                     ?_SysTimeInterrupt:	
  3761                           ; 1 bytes @ 0x0
  3762                           
  3763     0070                     ??_SysTimeInterrupt:	
  3764                           ; 1 bytes @ 0x0
  3765                           
  3766     0070                     ?_PIN_MANAGER_Initialize:	
  3767                           ; 1 bytes @ 0x0
  3768                           
  3769     0070                     ?_PIN_MANAGER_IOC:	
  3770                           ; 1 bytes @ 0x0
  3771                           
  3772     0070                     ?_SYSTEM_Initialize:	
  3773                           ; 1 bytes @ 0x0
  3774                           
  3775     0070                     ?_INTERRUPT_InterruptManager:	
  3776                           ; 1 bytes @ 0x0
  3777                           
  3778     0070                     ?_TMR2_StartTimer:	
  3779                           ; 1 bytes @ 0x0
  3780                           
  3781     0070                     ?_EUSART_is_tx_ready:	
  3782                           ; 1 bytes @ 0x0
  3783                           
  3784     0070                     ?_EUSART_Write:	
  3785                           ; 1 bytes @ 0x0
  3786                           
  3787     0070                     ?_USBCtrlEPAllowDataStage:	
  3788                           ; 1 bytes @ 0x0
  3789                           
  3790     0070                     ?_USBCtrlEPServiceComplete:	
  3791                           ; 1 bytes @ 0x0
  3792                           
  3793     0070                     ?_USBCtrlTrfRxService:	
  3794                           ; 1 bytes @ 0x0
  3795                           
  3796     0070                     ?_USBStdSetCfgHandler:	
  3797                           ; 1 bytes @ 0x0
  3798                           
  3799     0070                     ?_USBStdGetDscHandler:	
  3800                           ; 1 bytes @ 0x0
  3801                           
  3802     0070                     ??_USBStdGetDscHandler:	
  3803                           ; 1 bytes @ 0x0
  3804                           
  3805     0070                     ?_USBStdGetStatusHandler:	
  3806                           ; 1 bytes @ 0x0
  3807                           
  3808     0070                     ??_USBStdGetStatusHandler:	
  3809                           ; 1 bytes @ 0x0
  3810                           
  3811     0070                     ?_USBCheckHIDRequest:	
  3812                           ; 1 bytes @ 0x0
  3813                           
  3814     0070                     ?_USBHIDCBSetReportComplete:	
  3815                           ; 1 bytes @ 0x0
  3816                           
  3817     0070                     ?_hex2str:	
  3818                           ; 1 bytes @ 0x0
  3819                           
  3820     0070                     ?i1_USBDeviceInit:	
  3821                           ; 1 bytes @ 0x0
  3822                           
  3823     0070                     ??i1_USBDeviceInit:	
  3824                           ; 1 bytes @ 0x0
  3825                           
  3826     0070                     ?i1_APP_KeyboardProcessOutputReport:	
  3827                           ; 1 bytes @ 0x0
  3828                           
  3829     0070                     ?i1_PS2Keyboard_SendCommand:	
  3830                           ; 1 bytes @ 0x0
  3831                           
  3832     0070                     ??i1_PS2Keyboard_SendCommand:	
  3833                           ; 1 bytes @ 0x0
  3834                           
  3835     0070                     ?i1_GenericQueue_Init:	
  3836                           ; 1 bytes @ 0x0
  3837                           
  3838     0070                     ?_main:	
  3839                           ; 1 bytes @ 0x0
  3840                           
  3841     0070                     ?i1_USBTransferOnePacket:	
  3842                           ; 2 bytes @ 0x0
  3843                           
  3844     0070                     ?i1_GenericQueue_IsFull:	
  3845                           ; 2 bytes @ 0x0
  3846                           
  3847     0070                     ?i1___wmul:	
  3848                           ; 2 bytes @ 0x0
  3849                           
  3850     0070                     ?i1___awmod:	
  3851                           ; 2 bytes @ 0x0
  3852                           
  3853     0070                     ?i1_memset:	
  3854                           ; 2 bytes @ 0x0
  3855                           
  3856     0070                     ?_SysTime_GetCurrentTimeMs:	
  3857                           ; 2 bytes @ 0x0
  3858                           
  3859     0070                     USBConfigureEndpoint@direction:	
  3860                           ; 4 bytes @ 0x0
  3861                           
  3862     0070                     USBHIDCBSetIdleRateHandler@newIdleRate:	
  3863                           ; 1 bytes @ 0x0
  3864                           
  3865     0070                     i1USBTransferOnePacket@dir:	
  3866                           ; 1 bytes @ 0x0
  3867                           
  3868     0070                     i1PS2Keyboard_SendCommand@cmd:	
  3869                           ; 1 bytes @ 0x0
  3870                           
  3871     0070                     i1GenericQueue_Init@q:	
  3872                           ; 1 bytes @ 0x0
  3873                           
  3874     0070                     i1GenericQueue_IsFull@q:	
  3875                           ; 2 bytes @ 0x0
  3876                           
  3877     0070                     i1___wmul@multiplier:	
  3878                           ; 2 bytes @ 0x0
  3879                           
  3880     0070                     i1___awmod@divisor:	
  3881                           ; 2 bytes @ 0x0
  3882                           
  3883     0070                     i1memset@c:	
  3884                           ; 2 bytes @ 0x0
  3885                           
  3886                           
  3887                           ; 2 bytes @ 0x0
  3888     0070                     	ds	1
  3889     0071                     ??_EUSART_Receive_ISR:
  3890     0071                     ??_EUSART_DefaultErrorHandler:	
  3891                           ; 1 bytes @ 0x1
  3892                           
  3893     0071                     ??_USBConfigureEndpoint:	
  3894                           ; 1 bytes @ 0x1
  3895                           
  3896     0071                     ??_USBHIDCBSetIdleRateHandler:	
  3897                           ; 1 bytes @ 0x1
  3898                           
  3899     0071                     ??_USBHIDCBSetReportComplete:	
  3900                           ; 1 bytes @ 0x1
  3901                           
  3902     0071                     ??i1_APP_KeyboardProcessOutputReport:	
  3903                           ; 1 bytes @ 0x1
  3904                           
  3905     0071                     i1USBTransferOnePacket@data:	
  3906                           ; 1 bytes @ 0x1
  3907                           
  3908                           
  3909                           ; 2 bytes @ 0x1
  3910     0071                     	ds	1
  3911     0072                     ??i1_GenericQueue_IsFull:
  3912     0072                     USBCtrlTrfTxService@byteToSend:	
  3913                           ; 1 bytes @ 0x2
  3914                           
  3915     0072                     USBStdGetStatusHandler@p:	
  3916                           ; 1 bytes @ 0x2
  3917                           
  3918     0072                     i1GenericQueue_Init@element_size:	
  3919                           ; 2 bytes @ 0x2
  3920                           
  3921     0072                     i1___wmul@multiplicand:	
  3922                           ; 2 bytes @ 0x2
  3923                           
  3924     0072                     i1___awmod@dividend:	
  3925                           ; 2 bytes @ 0x2
  3926                           
  3927     0072                     i1memset@n:	
  3928                           ; 2 bytes @ 0x2
  3929                           
  3930                           
  3931                           ; 2 bytes @ 0x2
  3932     0072                     	ds	1
  3933     0073                     ??_USBCtrlTrfInHandler:
  3934     0073                     ??_USBCtrlEPAllowDataStage:	
  3935                           ; 1 bytes @ 0x3
  3936                           
  3937     0073                     USBHIDCBSetIdleRateHandler@reportID:	
  3938                           ; 1 bytes @ 0x3
  3939                           
  3940     0073                     i1USBTransferOnePacket@len:	
  3941                           ; 1 bytes @ 0x3
  3942                           
  3943                           
  3944                           ; 1 bytes @ 0x3
  3945     0073                     	ds	1
  3946     0074                     ??_IOCAF5_ISR:
  3947     0074                     ??_PS2Keyboard_DataInterrupt:	
  3948                           ; 1 bytes @ 0x4
  3949                           
  3950     0074                     ??_SysTime_GetCurrentTimeMs:	
  3951                           ; 1 bytes @ 0x4
  3952                           
  3953     0074                     ??_USBCtrlTrfRxService:	
  3954                           ; 1 bytes @ 0x4
  3955                           
  3956     0074                     ??_USBCheckHIDRequest:	
  3957                           ; 1 bytes @ 0x4
  3958                           
  3959     0074                     ??i1_USBTransferOnePacket:	
  3960                           ; 1 bytes @ 0x4
  3961                           
  3962     0074                     ??i1_GenericQueue_Init:	
  3963                           ; 1 bytes @ 0x4
  3964                           
  3965     0074                     ??i1___wmul:	
  3966                           ; 1 bytes @ 0x4
  3967                           
  3968     0074                     ??i1___awmod:	
  3969                           ; 1 bytes @ 0x4
  3970                           
  3971     0074                     ??i1_memset:	
  3972                           ; 1 bytes @ 0x4
  3973                           
  3974     0074                     i1USBDeviceInit@p:	
  3975                           ; 1 bytes @ 0x4
  3976                           
  3977     0074                     i1___wmul@product:	
  3978                           ; 2 bytes @ 0x4
  3979                           
  3980                           
  3981                           ; 2 bytes @ 0x4
  3982     0074                     	ds	1
  3983     0075                     USBConfigureEndpoint@EPNum:
  3984     0075                     i1___awmod@counter:	
  3985                           ; 1 bytes @ 0x5
  3986                           
  3987     0075                     i1memset@dest:	
  3988                           ; 1 bytes @ 0x5
  3989                           
  3990                           
  3991                           ; 1 bytes @ 0x5
  3992     0075                     	ds	1
  3993     0076                     ?i1_memcpy:
  3994     0076                     USBConfigureEndpoint@handle:	
  3995                           ; 2 bytes @ 0x6
  3996                           
  3997     0076                     i1USBDeviceInit@i_1324:	
  3998                           ; 1 bytes @ 0x6
  3999                           
  4000     0076                     i1___awmod@sign:	
  4001                           ; 1 bytes @ 0x6
  4002                           
  4003     0076                     i1memset@p:	
  4004                           ; 1 bytes @ 0x6
  4005                           
  4006     0076                     i1memcpy@d1:	
  4007                           ; 1 bytes @ 0x6
  4008                           
  4009                           
  4010                           ; 2 bytes @ 0x6
  4011     0076                     	ds	1
  4012     0077                     ?_USBEnableEndpoint:
  4013     0077                     ??_USBCtrlEPServiceComplete:	
  4014                           ; 1 bytes @ 0x7
  4015                           
  4016     0077                     USBEnableEndpoint@options:	
  4017                           ; 1 bytes @ 0x7
  4018                           
  4019     0077                     USBCtrlTrfInHandler@lastDTS:	
  4020                           ; 1 bytes @ 0x7
  4021                           
  4022     0077                     i1USBDeviceInit@i:	
  4023                           ; 1 bytes @ 0x7
  4024                           
  4025                           
  4026                           ; 1 bytes @ 0x7
  4027     0077                     	ds	1
  4028     0078                     ??_USBEnableEndpoint:
  4029     0078                     USBCtrlTrfRxService@i:	
  4030                           ; 1 bytes @ 0x8
  4031                           
  4032     0078                     i1USBTransferOnePacket@ep:	
  4033                           ; 1 bytes @ 0x8
  4034                           
  4035     0078                     i1memcpy@s1:	
  4036                           ; 1 bytes @ 0x8
  4037                           
  4038                           
  4039                           ; 2 bytes @ 0x8
  4040     0078                     	ds	1
  4041     0079                     USBCtrlTrfRxService@byteToRead:
  4042     0079                     i1USBTransferOnePacket@handle:	
  4043                           ; 1 bytes @ 0x9
  4044                           
  4045                           
  4046                           ; 2 bytes @ 0x9
  4047     0079                     	ds	1
  4048     007A                     ??_USBCtrlTrfOutHandler:
  4049     007A                     USBEnableEndpoint@p:	
  4050                           ; 1 bytes @ 0xA
  4051                           
  4052     007A                     i1memcpy@n:	
  4053                           ; 2 bytes @ 0xA
  4054                           
  4055                           
  4056                           ; 2 bytes @ 0xA
  4057     007A                     	ds	2
  4058     007C                     ??i1_memcpy:
  4059     007C                     USBEnableEndpoint@ep:	
  4060                           ; 1 bytes @ 0xC
  4061                           
  4062     007C                     PS2Keyboard_ClockInterrupt@bitPos:	
  4063                           ; 1 bytes @ 0xC
  4064                           
  4065                           
  4066                           ; 1 bytes @ 0xC
  4067     007C                     	ds	1
  4068     007D                     ??_USBWakeFromSuspend:
  4069     007D                     ??_USBSuspend:	
  4070                           ; 1 bytes @ 0xD
  4071                           
  4072     007D                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  4073                           ; 1 bytes @ 0xD
  4074                           
  4075     007D                     ??_APP_KeyboardInit:	
  4076                           ; 1 bytes @ 0xD
  4077                           
  4078     007D                     ??_USBStdSetCfgHandler:	
  4079                           ; 1 bytes @ 0xD
  4080                           
  4081     007D                     PS2Keyboard_ClockInterrupt@bit:	
  4082                           ; 1 bytes @ 0xD
  4083                           
  4084                           
  4085                           ; 1 bytes @ 0xD
  4086     007D                     	ds	1
  4087     007E                     ??_IOCAF4_ISR:
  4088     007E                     ??_PIN_MANAGER_IOC:	
  4089                           ; 1 bytes @ 0xE
  4090                           
  4091     007E                     ??_INTERRUPT_InterruptManager:	
  4092                           ; 1 bytes @ 0xE
  4093                           
  4094                           
  4095                           	psect	cstackBANK0
  4096     0050                     __pcstackBANK0:	
  4097                           ; 1 bytes @ 0xE
  4098                           
  4099     0050                     ?_USER_USB_CALLBACK_EVENT_HANDLER:
  4100     0050                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  4101                           ; 1 bytes @ 0x0
  4102                           
  4103     0050                     i1memcpy@d:	
  4104                           ; 2 bytes @ 0x0
  4105                           
  4106                           
  4107                           ; 2 bytes @ 0x0
  4108     0050                     	ds	2
  4109     0052                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:
  4110     0052                     i1memcpy@s:	
  4111                           ; 2 bytes @ 0x2
  4112                           
  4113                           
  4114                           ; 2 bytes @ 0x2
  4115     0052                     	ds	2
  4116     0054                     i1memcpy@tmp:
  4117     0054                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  4118                           ; 1 bytes @ 0x4
  4119                           
  4120                           
  4121                           ; 2 bytes @ 0x4
  4122     0054                     	ds	1
  4123     0055                     ?i1_GenericQueue_Enqueue:
  4124     0055                     i1GenericQueue_Enqueue@q:	
  4125                           ; 1 bytes @ 0x5
  4126                           
  4127                           
  4128                           ; 2 bytes @ 0x5
  4129     0055                     	ds	1
  4130     0056                     ??_USBStdFeatureReqHandler:
  4131     0056                     USBStdSetCfgHandler@p:	
  4132                           ; 1 bytes @ 0x6
  4133                           
  4134                           
  4135                           ; 2 bytes @ 0x6
  4136     0056                     	ds	1
  4137     0057                     i1GenericQueue_Enqueue@item:
  4138                           
  4139                           ; 2 bytes @ 0x7
  4140     0057                     	ds	1
  4141     0058                     USBStdSetCfgHandler@i_2020:
  4142     0058                     USBStdFeatureReqHandler@pUEP:	
  4143                           ; 1 bytes @ 0x8
  4144                           
  4145                           
  4146                           ; 2 bytes @ 0x8
  4147     0058                     	ds	1
  4148     0059                     ??i1_GenericQueue_Enqueue:
  4149     0059                     USBStdSetCfgHandler@i:	
  4150                           ; 1 bytes @ 0x9
  4151                           
  4152                           
  4153                           ; 1 bytes @ 0x9
  4154     0059                     	ds	1
  4155     005A                     USBStdFeatureReqHandler@current_ep_data:
  4156                           
  4157                           ; 1 bytes @ 0xA
  4158     005A                     	ds	1
  4159     005B                     USBStdFeatureReqHandler@p:
  4160                           
  4161                           ; 2 bytes @ 0xB
  4162     005B                     	ds	1
  4163     005C                     ??_PS2Keyboard_ClockInterrupt:
  4164                           
  4165                           ; 1 bytes @ 0xC
  4166     005C                     	ds	1
  4167     005D                     ??_USBCheckStdRequest:
  4168                           
  4169                           ; 1 bytes @ 0xD
  4170     005D                     	ds	2
  4171     005F                     ??_USBCtrlTrfSetupHandler:
  4172                           
  4173                           ; 1 bytes @ 0xF
  4174     005F                     	ds	1
  4175     0060                     ??_USBCtrlEPService:
  4176                           
  4177                           ; 1 bytes @ 0x10
  4178     0060                     	ds	1
  4179     0061                     ??_USBDeviceTasks:
  4180                           
  4181                           ; 1 bytes @ 0x11
  4182     0061                     	ds	1
  4183     0062                     USBDeviceTasks@i:
  4184                           
  4185                           ; 1 bytes @ 0x12
  4186     0062                     	ds	1
  4187                           
  4188                           	psect	maintext
  4189     0A52                     __pmaintext:	
  4190 ;;
  4191 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4192 ;;
  4193 ;; *************** function _main *****************
  4194 ;; Defined at:
  4195 ;;		line 11 in file "main.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;		None
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  scanCodeStr     6   50[BANK1 ] unsigned char [6]
  4200 ;;  scanCode        3   62[BANK1 ] struct PS2ScanCode
  4201 ;;  hndlScanCode    1   61[BANK1 ] PTR struct PS2ScanCode
  4202 ;;		 -> main@scanCode(3), NULL(0), 
  4203 ;;  scanCodeVali    1   60[BANK1 ] _Bool 
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  2  785[None  ] int 
  4206 ;; Registers used:
  4207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4208 ;; Tracked objects:
  4209 ;;		On entry : B1F/0
  4210 ;;		On exit  : 2/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;      Totals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;Total ram usage:       17 bytes
  4218 ;; Hardware stack levels required when called: 14
  4219 ;; This function calls:
  4220 ;;		_APP_KeyboardTasks
  4221 ;;		_Log_Message
  4222 ;;		_Log_UtilityConvertByteToHex
  4223 ;;		_PS2Keyboard_GetScanCode
  4224 ;;		_PS2Keyboard_Init
  4225 ;;		_SYSTEM_Initialize
  4226 ;;		_SysTime_Init
  4227 ;; This function is called by:
  4228 ;;		Startup code after reset
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232     0A52                     _main:	
  4233                           ;psect for function _main
  4234                           
  4235                           
  4236                           ;main.c: 12:     SYSTEM_Initialize();
  4237                           
  4238                           ;incstack = 0
  4239                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4240     0A52  319F  27A6  318A   	fcall	_SYSTEM_Initialize
  4241                           
  4242                           ;main.c: 13:     SysTime_Init();
  4243     0A55  319E  26C3  318A   	fcall	_SysTime_Init
  4244                           
  4245                           ;main.c: 14:     PS2Keyboard_Init();
  4246     0A58  3187  27E5  318A   	fcall	_PS2Keyboard_Init
  4247                           
  4248                           ;main.c: 16:     _delay((unsigned long)((1000)*(48000000/4000.0)));
  4249     0A5B  303D               	movlw	61
  4250     0A5C  0021               	movlb	1	; select bank1
  4251     0A5D  00D9               	movwf	(??_main^(0+128)+1)
  4252     0A5E  30E1               	movlw	225
  4253     0A5F  00D8               	movwf	??_main^(0+128)
  4254     0A60  303F               	movlw	63
  4255     0A61                     u6717:
  4256     0A61  0B89               	decfsz	9,f
  4257     0A62  2A61               	goto	u6717
  4258     0A63  0BD8               	decfsz	??_main^(0+128),f
  4259     0A64  2A61               	goto	u6717
  4260     0A65  0BD9               	decfsz	(??_main^(0+128)+1),f
  4261     0A66  2A61               	goto	u6717
  4262     0A67  3200               	nop2
  4263                           
  4264                           ;main.c: 23:     (INTCONbits.GIE = 1);
  4265     0A68  178B               	bsf	11,7	;volatile
  4266                           
  4267                           ;main.c: 26:     (INTCONbits.PEIE = 1);
  4268     0A69  170B               	bsf	11,6	;volatile
  4269                           
  4270                           ;main.c: 31:     PS2ScanCode scanCode = {0};
  4271     0A6A  0023               	movlb	3	; select bank3
  4272     0A6B  0844               	movf	main@F3300^(0+384),w
  4273     0A6C  0021               	movlb	1	; select bank1
  4274     0A6D  00E6               	movwf	main@scanCode^(0+128)
  4275     0A6E  0023               	movlb	3	; select bank3
  4276     0A6F  0845               	movf	(main@F3300+1)^(0+384),w
  4277     0A70  0021               	movlb	1	; select bank1
  4278     0A71  00E7               	movwf	(main@scanCode+1)^(0+128)
  4279     0A72  0023               	movlb	3	; select bank3
  4280     0A73  0846               	movf	(main@F3300+2)^(0+384),w
  4281     0A74  0021               	movlb	1	; select bank1
  4282     0A75  00E8               	movwf	(main@scanCode+2)^(0+128)
  4283                           
  4284                           ;main.c: 34:     char scanCodeStr[6] = {' ', ' ', ' ', ' ', '\r', '\n'};
  4285     0A76  30C7               	movlw	low main@F3304
  4286     0A77  0086               	movwf	6
  4287     0A78  3001               	movlw	high main@F3304
  4288     0A79  0087               	movwf	7
  4289     0A7A  30DA               	movlw	low main@scanCodeStr
  4290     0A7B  0084               	movwf	4
  4291     0A7C  3000               	movlw	high main@scanCodeStr
  4292     0A7D  0085               	movwf	5
  4293     0A7E  3006               	movlw	6
  4294     0A7F  00D8               	movwf	??_main^(0+128)
  4295     0A80                     u6660:
  4296     0A80  0016               	moviw fsr1++
  4297     0A81  001A               	movwi fsr0++
  4298     0A82  0BD8               	decfsz	??_main^(0+128),f
  4299     0A83  2A80               	goto	u6660
  4300     0A84                     l6486:
  4301                           
  4302                           ;main.c: 37:         scanCodeValid = PS2Keyboard_GetScanCode(&scanCode);
  4303     0A84  30E6               	movlw	(low (main@scanCode| 0))& (0+255)
  4304     0A85  3191  2152  318A   	fcall	_PS2Keyboard_GetScanCode
  4305     0A88  00E4               	movwf	main@scanCodeValid^(0+128)
  4306                           
  4307                           ;main.c: 38:         if(scanCodeValid) {
  4308     0A89  0864               	movf	main@scanCodeValid^(0+128),w
  4309     0A8A  1903               	btfsc	3,2
  4310     0A8B  2A8F               	goto	l6492
  4311                           
  4312                           ;main.c: 39:             hndlScanCode = &scanCode;
  4313     0A8C  30E6               	movlw	(low (main@scanCode| 0))& (0+255)
  4314     0A8D  00E5               	movwf	main@hndlScanCode^(0+128)
  4315                           
  4316                           ;main.c: 40:         } else {
  4317     0A8E  2A90               	goto	l6494
  4318     0A8F                     l6492:
  4319                           
  4320                           ;main.c: 41:             hndlScanCode = ((void*)0);
  4321     0A8F  01E5               	clrf	main@hndlScanCode^(0+128)
  4322     0A90                     l6494:
  4323                           
  4324                           ;main.c: 43:         if(hndlScanCode != ((void*)0)) {
  4325     0A90  0865               	movf	main@hndlScanCode^(0+128),w
  4326     0A91  1903               	btfsc	3,2
  4327     0A92  2AC1               	goto	l6512
  4328                           
  4329                           ;main.c: 44:             scanCodeStr[0] = hndlScanCode->isExtend ? 'e' : ' ';
  4330     0A93  0A65               	incf	main@hndlScanCode^(0+128),w
  4331     0A94  0086               	movwf	6
  4332     0A95  0187               	clrf	7
  4333     0A96  0801               	movf	1,w
  4334     0A97  1D03               	btfss	3,2
  4335     0A98  2A9B               	goto	l6500
  4336     0A99  3020               	movlw	32
  4337     0A9A  2A9C               	goto	L1
  4338     0A9B                     l6500:
  4339     0A9B  3065               	movlw	101
  4340     0A9C                     L1:
  4341     0A9C  00E0               	movwf	_main$2579^(0+128)
  4342     0A9D  3000               	movlw	0
  4343     0A9E  00E1               	movwf	(_main$2579^(0+128)+1)
  4344     0A9F  0860               	movf	_main$2579^(0+128),w
  4345     0AA0  00DA               	movwf	main@scanCodeStr^(0+128)
  4346                           
  4347                           ;main.c: 45:             scanCodeStr[1] = hndlScanCode->isBreak ? 'b' : ' ';
  4348     0AA1  0865               	movf	main@hndlScanCode^(0+128),w
  4349     0AA2  3E02               	addlw	2
  4350     0AA3  0086               	movwf	6
  4351     0AA4  0187               	clrf	7
  4352     0AA5  0801               	movf	1,w
  4353     0AA6  1D03               	btfss	3,2
  4354     0AA7  2AAA               	goto	l6506
  4355     0AA8  3020               	movlw	32
  4356     0AA9  2AAB               	goto	L2
  4357     0AAA                     l6506:
  4358     0AAA  3062               	movlw	98
  4359     0AAB                     L2:
  4360     0AAB  00E2               	movwf	_main$2580^(0+128)
  4361     0AAC  3000               	movlw	0
  4362     0AAD  00E3               	movwf	(_main$2580^(0+128)+1)
  4363     0AAE  0862               	movf	_main$2580^(0+128),w
  4364     0AAF  00DB               	movwf	(main@scanCodeStr^(0+128)+1)
  4365                           
  4366                           ;main.c: 46:             Log_UtilityConvertByteToHex(hndlScanCode->value, &scanCodeStr[2
      +                          ], 2);
  4367     0AB0  30DC               	movlw	(low ((main@scanCodeStr| 0+2)))& (0+255)
  4368     0AB1  00AC               	movwf	Log_UtilityConvertByteToHex@buf^(0+128)
  4369     0AB2  3002               	movlw	2
  4370     0AB3  00AD               	movwf	Log_UtilityConvertByteToHex@bufSize^(0+128)
  4371     0AB4  0865               	movf	main@hndlScanCode^(0+128),w
  4372     0AB5  0086               	movwf	6
  4373     0AB6  0187               	clrf	7
  4374     0AB7  0801               	movf	1,w
  4375     0AB8  3192  226E  318A   	fcall	_Log_UtilityConvertByteToHex
  4376                           
  4377                           ;main.c: 47:             Log_Message((const uint8_t*)scanCodeStr, sizeof(scanCodeStr));
  4378     0ABB  3006               	movlw	6
  4379     0ABC  00AA               	movwf	Log_Message@bufSize^(0+128)
  4380     0ABD  30DA               	movlw	(low (main@scanCodeStr| 0))& (0+255)
  4381     0ABE  3191  211B  318A   	fcall	_Log_Message
  4382     0AC1                     l6512:
  4383                           
  4384                           ;main.c: 49:         APP_KeyboardTasks(hndlScanCode);
  4385     0AC1  0865               	movf	main@hndlScanCode^(0+128),w
  4386     0AC2  3183  2341  318A   	fcall	_APP_KeyboardTasks
  4387     0AC5  2A84               	goto	l6486
  4388     0AC6                     __end_of_main:
  4389                           
  4390                           	psect	text1
  4391     1EC3                     __ptext1:	
  4392 ;; *************** function _SysTime_Init *****************
  4393 ;; Defined at:
  4394 ;;		line 12 in file "systime.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;		None
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;		None
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  1    wreg      void 
  4401 ;; Registers used:
  4402 ;;		wreg, status,2, status,0, pclath, cstack
  4403 ;; Tracked objects:
  4404 ;;		On entry : 1F/0
  4405 ;;		On exit  : 1F/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;Total ram usage:        0 bytes
  4413 ;; Hardware stack levels used: 1
  4414 ;; Hardware stack levels required when called: 11
  4415 ;; This function calls:
  4416 ;;		_TMR2_SetInterruptHandler
  4417 ;;		_TMR2_StartTimer
  4418 ;; This function is called by:
  4419 ;;		_main
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423     1EC3                     _SysTime_Init:	
  4424                           ;psect for function _SysTime_Init
  4425                           
  4426                           
  4427                           ;systime.c: 14:     TMR2_SetInterruptHandler(SysTimeInterrupt);
  4428                           
  4429                           ;incstack = 0
  4430                           ; Regs used in _SysTime_Init: [wreg+status,2+status,0+pclath+cstack]
  4431     1EC3  309A               	movlw	low _SysTimeInterrupt
  4432     1EC4  0021               	movlb	1	; select bank1
  4433     1EC5  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4434     1EC6  301E               	movlw	high _SysTimeInterrupt
  4435     1EC7  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4436     1EC8  319E  2689  319E   	fcall	_TMR2_SetInterruptHandler
  4437                           
  4438                           ;systime.c: 15:     TMR2_StartTimer();
  4439     1ECB  319E  263D         	fcall	_TMR2_StartTimer
  4440     1ECD  0008               	return
  4441     1ECE                     __end_of_SysTime_Init:
  4442                           
  4443                           	psect	text2
  4444     1E3D                     __ptext2:	
  4445 ;; *************** function _TMR2_StartTimer *****************
  4446 ;; Defined at:
  4447 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;		None
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      void 
  4454 ;; Registers used:
  4455 ;;		None
  4456 ;; Tracked objects:
  4457 ;;		On entry : 1F/2
  4458 ;;		On exit  : 1F/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;Total ram usage:        0 bytes
  4466 ;; Hardware stack levels used: 1
  4467 ;; Hardware stack levels required when called: 10
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_SysTime_Init
  4472 ;; This function uses a non-reentrant model
  4473 ;;
  4474                           
  4475     1E3D                     _TMR2_StartTimer:	
  4476                           ;psect for function _TMR2_StartTimer
  4477                           
  4478                           
  4479                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  4480                           
  4481                           ;incstack = 0
  4482                           ; Regs used in _TMR2_StartTimer: []
  4483     1E3D  0020               	movlb	0	; select bank0
  4484     1E3E  151C               	bsf	28,2	;volatile
  4485     1E3F  0008               	return
  4486     1E40                     __end_of_TMR2_StartTimer:
  4487                           
  4488                           	psect	text3
  4489     1FA6                     __ptext3:	
  4490 ;; *************** function _SYSTEM_Initialize *****************
  4491 ;; Defined at:
  4492 ;;		line 49 in file "mcc_generated_files/mcc.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;		None
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;		None
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  1    wreg      void 
  4499 ;; Registers used:
  4500 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4501 ;; Tracked objects:
  4502 ;;		On entry : B1F/0
  4503 ;;		On exit  : 1F/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;Total ram usage:        0 bytes
  4511 ;; Hardware stack levels used: 1
  4512 ;; Hardware stack levels required when called: 12
  4513 ;; This function calls:
  4514 ;;		_EUSART_Initialize
  4515 ;;		_OSCILLATOR_Initialize
  4516 ;;		_PIN_MANAGER_Initialize
  4517 ;;		_TMR2_Initialize
  4518 ;;		_USBDeviceAttach
  4519 ;;		_USBDeviceInit
  4520 ;;		_WDT_Initialize
  4521 ;; This function is called by:
  4522 ;;		_main
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526     1FA6                     _SYSTEM_Initialize:	
  4527                           ;psect for function _SYSTEM_Initialize
  4528                           
  4529                           
  4530                           ;mcc_generated_files/mcc.c: 51:     PIN_MANAGER_Initialize();
  4531                           
  4532                           ;incstack = 0
  4533                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4534     1FA6  3188  2007  319F   	fcall	_PIN_MANAGER_Initialize
  4535                           
  4536                           ;mcc_generated_files/mcc.c: 52:     OSCILLATOR_Initialize();
  4537     1FA9  319F  271A  319F   	fcall	_OSCILLATOR_Initialize
  4538                           
  4539                           ;mcc_generated_files/mcc.c: 53:     WDT_Initialize();
  4540     1FAC  319E  263A  319F   	fcall	_WDT_Initialize
  4541                           
  4542                           ;mcc_generated_files/mcc.c: 54:     TMR2_Initialize();
  4543     1FAF  319F  275A  319F   	fcall	_TMR2_Initialize
  4544                           
  4545                           ;mcc_generated_files/mcc.c: 55:     EUSART_Initialize();
  4546     1FB2  3194  2407  319F   	fcall	_EUSART_Initialize
  4547                           
  4548                           ;mcc_generated_files/mcc.c: 56:     USBDeviceInit();
  4549     1FB5  318E  2681  319F   	fcall	_USBDeviceInit
  4550                           
  4551                           ;mcc_generated_files/mcc.c: 57:     USBDeviceAttach();
  4552     1FB8  3190  20B2         	fcall	_USBDeviceAttach
  4553     1FBA  0008               	return
  4554     1FBB                     __end_of_SYSTEM_Initialize:
  4555                           
  4556                           	psect	text4
  4557     1E3A                     __ptext4:	
  4558 ;; *************** function _WDT_Initialize *****************
  4559 ;; Defined at:
  4560 ;;		line 76 in file "mcc_generated_files/mcc.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;		None
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;		None
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      void 
  4567 ;; Registers used:
  4568 ;;		wreg
  4569 ;; Tracked objects:
  4570 ;;		On entry : 1F/1
  4571 ;;		On exit  : 1F/1
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;Total ram usage:        0 bytes
  4579 ;; Hardware stack levels used: 1
  4580 ;; Hardware stack levels required when called: 10
  4581 ;; This function calls:
  4582 ;;		Nothing
  4583 ;; This function is called by:
  4584 ;;		_SYSTEM_Initialize
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588     1E3A                     _WDT_Initialize:	
  4589                           ;psect for function _WDT_Initialize
  4590                           
  4591                           
  4592                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  4593                           
  4594                           ;incstack = 0
  4595                           ; Regs used in _WDT_Initialize: [wreg]
  4596     1E3A  3016               	movlw	22
  4597     1E3B  0097               	movwf	23	;volatile
  4598     1E3C  0008               	return
  4599     1E3D                     __end_of_WDT_Initialize:
  4600                           
  4601                           	psect	text5
  4602     0E81                     __ptext5:	
  4603 ;; *************** function _USBDeviceInit *****************
  4604 ;; Defined at:
  4605 ;;		line 281 in file "usb/usb_device.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;		None
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;  p               2    4[BANK1 ] PTR unsigned char 
  4610 ;;		 -> UEP1(1), 
  4611 ;;  i               1    6[BANK1 ] unsigned char 
  4612 ;;  i               1    7[BANK1 ] unsigned char 
  4613 ;; Return value:  Size  Location     Type
  4614 ;;                  1    wreg      void 
  4615 ;; Registers used:
  4616 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4617 ;; Tracked objects:
  4618 ;;		On entry : 1F/1
  4619 ;;		On exit  : 1F/0
  4620 ;;		Unchanged: 0/0
  4621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4623 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4624 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;Total ram usage:        8 bytes
  4627 ;; Hardware stack levels used: 1
  4628 ;; Hardware stack levels required when called: 10
  4629 ;; This function calls:
  4630 ;;		Nothing
  4631 ;; This function is called by:
  4632 ;;		_SYSTEM_Initialize
  4633 ;; This function uses a non-reentrant model
  4634 ;;
  4635                           
  4636     0E81                     _USBDeviceInit:	
  4637                           ;psect for function _USBDeviceInit
  4638                           
  4639                           
  4640                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  4641                           
  4642                           ;incstack = 0
  4643                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  4644     0E81  1112               	bcf	18,2	;volatile
  4645                           
  4646                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  4647     0E82  003D               	movlb	29	; select bank29
  4648     0E83  0193               	clrf	19	;volatile
  4649                           
  4650                           ;usb/usb_device.c: 295:     {UIR = 0;};
  4651     0E84  0190               	clrf	16	;volatile
  4652                           
  4653                           ;usb/usb_device.c: 298:     UEP0 = 0;
  4654     0E85  0198               	clrf	24	;volatile
  4655                           
  4656                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  4657     0E86  300E               	movlw	14
  4658     0E87  0021               	movlb	1	; select bank1
  4659     0E88  00AD               	movwf	(USBDeviceInit@p+1)^(0+128)
  4660     0E89  3099               	movlw	153
  4661     0E8A  00AC               	movwf	USBDeviceInit@p^(0+128)
  4662     0E8B  01AE               	clrf	USBDeviceInit@i_1324^(0+128)
  4663     0E8C                     l5172:
  4664     0E8C  082C               	movf	USBDeviceInit@p^(0+128),w
  4665     0E8D  0086               	movwf	6
  4666     0E8E  082D               	movf	(USBDeviceInit@p+1)^(0+128),w
  4667     0E8F  0087               	movwf	7
  4668     0E90  0181               	clrf	1
  4669     0E91  3001               	movlw	1
  4670     0E92  07AC               	addwf	USBDeviceInit@p^(0+128),f
  4671     0E93  3000               	movlw	0
  4672     0E94  3DAD               	addwfc	(USBDeviceInit@p+1)^(0+128),f
  4673     0E95  3001               	movlw	1
  4674     0E96  00A8               	movwf	??_USBDeviceInit^(0+128)
  4675     0E97  0828               	movf	??_USBDeviceInit^(0+128),w
  4676     0E98  07AE               	addwf	USBDeviceInit@i_1324^(0+128),f
  4677     0E99  082E               	movf	USBDeviceInit@i_1324^(0+128),w
  4678     0E9A  1903               	btfsc	3,2
  4679     0E9B  2E8C               	goto	l5172
  4680                           
  4681                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  4682     0E9C  3016               	movlw	22
  4683     0E9D  003D               	movlb	29	; select bank29
  4684     0E9E  0091               	movwf	17	;volatile
  4685     0E9F  309F               	movlw	159
  4686     0EA0  0097               	movwf	23	;volatile
  4687     0EA1  307B               	movlw	123
  4688     0EA2  0092               	movwf	18	;volatile
  4689                           
  4690                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  4691     0EA3  0021               	movlb	1	; select bank1
  4692     0EA4  01AF               	clrf	USBDeviceInit@i^(0+128)
  4693     0EA5                     l5188:
  4694                           
  4695                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
  4696     0EA5  082F               	movf	USBDeviceInit@i^(0+128),w
  4697     0EA6  00A8               	movwf	??_USBDeviceInit^(0+128)
  4698     0EA7  3001               	movlw	1
  4699     0EA8                     u4485:
  4700     0EA8  35A8               	lslf	??_USBDeviceInit^(0+128),f
  4701     0EA9  3EFF               	addlw	-1
  4702     0EAA  1D03               	skipz
  4703     0EAB  2EA8               	goto	u4485
  4704     0EAC  3528               	lslf	??_USBDeviceInit^(0+128),w
  4705     0EAD  3E20               	addlw	32
  4706     0EAE  0086               	movwf	6
  4707     0EAF  0187               	clrf	7
  4708     0EB0  3000               	movlw	0
  4709     0EB1  3FC0               	movwi [0]fsr1
  4710     0EB2  3000               	movlw	0
  4711     0EB3  3FC1               	movwi [1]fsr1
  4712     0EB4  3FC2               	movwi [2]fsr1
  4713     0EB5  3FC3               	movwi [3]fsr1
  4714                           
  4715                           ;usb/usb_device.c: 314:     }
  4716     0EB6  3001               	movlw	1
  4717     0EB7  00A8               	movwf	??_USBDeviceInit^(0+128)
  4718     0EB8  0828               	movf	??_USBDeviceInit^(0+128),w
  4719     0EB9  07AF               	addwf	USBDeviceInit@i^(0+128),f
  4720     0EBA  3008               	movlw	8
  4721     0EBB  022F               	subwf	USBDeviceInit@i^(0+128),w
  4722     0EBC  1C03               	skipc
  4723     0EBD  2EA5               	goto	l5188
  4724                           
  4725                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
  4726     0EBE  003D               	movlb	29	; select bank29
  4727     0EBF  170E               	bsf	14,6	;volatile
  4728                           
  4729                           ;usb/usb_device.c: 320:     UADDR = 0x00;
  4730     0EC0  0196               	clrf	22	;volatile
  4731                           
  4732                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
  4733     0EC1  120E               	bcf	14,4	;volatile
  4734                           
  4735                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
  4736     0EC2  130E               	bcf	14,6	;volatile
  4737     0EC3                     l5200:
  4738                           
  4739                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
  4740     0EC3  30F7               	movlw	247
  4741     0EC4  0021               	movlb	1	; select bank1
  4742     0EC5  00A8               	movwf	??_USBDeviceInit^(0+128)
  4743     0EC6  0828               	movf	??_USBDeviceInit^(0+128),w
  4744     0EC7  003D               	movlb	29	; select bank29
  4745     0EC8  0590               	andwf	16,f	;volatile
  4746                           
  4747                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
  4748     0EC9  0021               	movlb	1	; select bank1
  4749     0ECA  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
  4750                           
  4751                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
  4752     0ECB  0022               	movlb	2	; select bank2
  4753     0ECC  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
  4754                           
  4755                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
  4756     0ECD  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
  4757     0ECE  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  4758                           
  4759                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
  4760     0ECF  003D               	movlb	29	; select bank29
  4761     0ED0  1990               	btfsc	16,3	;volatile
  4762     0ED1  2EC3               	goto	l5200
  4763                           
  4764                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
  4765     0ED2  3001               	movlw	1
  4766     0ED3  0022               	movlb	2	; select bank2
  4767     0ED4  00DB               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  4768                           
  4769                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
  4770     0ED5  3001               	movlw	1
  4771     0ED6  00DA               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  4772                           
  4773                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
  4774     0ED7  01D9               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  4775                           
  4776                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
  4777     0ED8  01D8               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  4778                           
  4779                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
  4780     0ED9  01E0               	clrf	_USBBusIsSuspended^(0+256)	;volatile
  4781                           
  4782                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
  4783     0EDA  0021               	movlb	1	; select bank1
  4784     0EDB  01AF               	clrf	USBDeviceInit@i^(0+128)
  4785     0EDC                     l5222:
  4786                           
  4787                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
  4788     0EDC  352F               	lslf	USBDeviceInit@i^(0+128),w
  4789     0EDD  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  4790     0EDE  0086               	movwf	6
  4791     0EDF  0187               	clrf	7
  4792     0EE0  3000               	movlw	0
  4793     0EE1  3FC0               	movwi [0]fsr1
  4794     0EE2  3FC1               	movwi [1]fsr1
  4795                           
  4796                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
  4797     0EE3  352F               	lslf	USBDeviceInit@i^(0+128),w
  4798     0EE4  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  4799     0EE5  0086               	movwf	6
  4800     0EE6  3001               	movlw	1	; select bank2/3
  4801     0EE7  0087               	movwf	7
  4802     0EE8  3000               	movlw	0
  4803     0EE9  3FC0               	movwi [0]fsr1
  4804     0EEA  3FC1               	movwi [1]fsr1
  4805                           
  4806                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
  4807     0EEB  082F               	movf	USBDeviceInit@i^(0+128),w
  4808     0EEC  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  4809     0EED  0086               	movwf	6
  4810     0EEE  3001               	movlw	1	; select bank2/3
  4811     0EEF  0087               	movwf	7
  4812     0EF0  0181               	clrf	1
  4813                           
  4814                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
  4815     0EF1  082F               	movf	USBDeviceInit@i^(0+128),w
  4816     0EF2  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  4817     0EF3  0086               	movwf	6
  4818     0EF4  3001               	movlw	1	; select bank2/3
  4819     0EF5  0087               	movwf	7
  4820     0EF6  0181               	clrf	1
  4821                           
  4822                           ;usb/usb_device.c: 355:     }
  4823     0EF7  3001               	movlw	1
  4824     0EF8  00A8               	movwf	??_USBDeviceInit^(0+128)
  4825     0EF9  0828               	movf	??_USBDeviceInit^(0+128),w
  4826     0EFA  07AF               	addwf	USBDeviceInit@i^(0+128),f
  4827     0EFB  3002               	movlw	2
  4828     0EFC  022F               	subwf	USBDeviceInit@i^(0+128),w
  4829     0EFD  1C03               	skipc
  4830     0EFE  2EDC               	goto	l5222
  4831                           
  4832                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  4833     0EFF  3028               	movlw	40
  4834     0F00  0020               	movlb	0	; select bank0
  4835     0F01  00E3               	movwf	_pBDTEntryIn
  4836     0F02  3000               	movlw	0
  4837     0F03  00E4               	movwf	_pBDTEntryIn+1
  4838                           
  4839                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
  4840     0F04  3016               	movlw	22
  4841     0F05  003D               	movlb	29	; select bank29
  4842     0F06  0098               	movwf	24	;volatile
  4843                           
  4844                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
  4845     0F07  3040               	movlw	64
  4846     0F08  0021               	movlb	1	; select bank1
  4847     0F09  00A8               	movwf	??_USBDeviceInit^(0+128)
  4848     0F0A  3000               	movlw	0
  4849     0F0B  00A9               	movwf	(??_USBDeviceInit^(0+128)+1)
  4850     0F0C  30FF               	movlw	255
  4851     0F0D  0528               	andwf	??_USBDeviceInit^(0+128),w
  4852     0F0E  00AA               	movwf	(??_USBDeviceInit+2)^(0+128)
  4853     0F0F  307F               	movlw	127
  4854     0F10  0529               	andwf	(??_USBDeviceInit+1)^(0+128),w
  4855     0F11  00AB               	movwf	(??_USBDeviceInit+3)^(0+128)
  4856     0F12  082A               	movf	(??_USBDeviceInit+2)^(0+128),w
  4857     0F13  0020               	movlb	0	; select bank0
  4858     0F14  00A2               	movwf	34	;volatile
  4859     0F15  0021               	movlb	1	; select bank1
  4860     0F16  082B               	movf	(??_USBDeviceInit+3)^(0+128),w
  4861     0F17  0020               	movlb	0	; select bank0
  4862     0F18  00A3               	movwf	35	;volatile
  4863                           
  4864                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
  4865     0F19  3008               	movlw	8
  4866     0F1A  00A1               	movwf	33	;volatile
  4867                           
  4868                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
  4869     0F1B  3004               	movlw	4
  4870     0F1C  00A0               	movwf	32	;volatile
  4871                           
  4872                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
  4873     0F1D  17A0               	bsf	32,7	;volatile
  4874                           
  4875                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
  4876     0F1E  01EF               	clrf	_USBActiveConfiguration	;volatile
  4877                           
  4878                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
  4879     0F1F  3000               	movlw	0
  4880     0F20  0023               	movlb	3	; select bank3
  4881     0F21  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
  4882     0F22  3000               	movlw	0
  4883     0F23  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
  4884     0F24  3000               	movlw	0
  4885     0F25  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
  4886     0F26  3000               	movlw	0
  4887     0F27  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
  4888                           
  4889                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
  4890     0F28  0022               	movlb	2	; select bank2
  4891     0F29  01D7               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  4892                           
  4893                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
  4894     0F2A  0020               	movlb	0	; select bank0
  4895     0F2B  01EC               	clrf	_USBDeviceState	;volatile
  4896     0F2C  0008               	return
  4897     0F2D                     __end_of_USBDeviceInit:
  4898                           
  4899                           	psect	text6
  4900     10B2                     __ptext6:	
  4901 ;; *************** function _USBDeviceAttach *****************
  4902 ;; Defined at:
  4903 ;;		line 1356 in file "usb/usb_device.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;		None
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;		None
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  1    wreg      void 
  4910 ;; Registers used:
  4911 ;;		wreg, status,2, status,0
  4912 ;; Tracked objects:
  4913 ;;		On entry : 1F/0
  4914 ;;		On exit  : 1F/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4921 ;;Total ram usage:        0 bytes
  4922 ;; Hardware stack levels used: 1
  4923 ;; Hardware stack levels required when called: 10
  4924 ;; This function calls:
  4925 ;;		Nothing
  4926 ;; This function is called by:
  4927 ;;		_SYSTEM_Initialize
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931     10B2                     _USBDeviceAttach:	
  4932                           ;psect for function _USBDeviceAttach
  4933                           
  4934                           
  4935                           ;usb/usb_device.c: 1360:     {;usb/usb_device.c: 1361:         if(1 == 1)
  4936                           
  4937                           ;incstack = 0
  4938                           ; Regs used in _USBDeviceAttach: [wreg+status,2+status,0]
  4939     10B2  086C               	movf	_USBDeviceState,w
  4940     10B3  1D03               	btfss	3,2
  4941     10B4  0008               	return
  4942                           
  4943                           ;usb/usb_device.c: 1362:         {;usb/usb_device.c: 1364:             UCON = 0;
  4944     10B5  003D               	movlb	29	; select bank29
  4945     10B6  018E               	clrf	14	;volatile
  4946                           
  4947                           ;usb/usb_device.c: 1367:             UIE = 0;
  4948     10B7  0192               	clrf	18	;volatile
  4949                           
  4950                           ;usb/usb_device.c: 1371:             { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UI
      +                          E = 0x39 | 0x40 | 0x02; };
  4951     10B8  3016               	movlw	22
  4952     10B9  0091               	movwf	17	;volatile
  4953     10BA  309F               	movlw	159
  4954     10BB  0097               	movwf	23	;volatile
  4955     10BC  307B               	movlw	123
  4956     10BD  0092               	movwf	18	;volatile
  4957                           
  4958                           ;usb/usb_device.c: 1373:             {PIE2bits.USBIE = 1;INTCONbits.PEIE = 1; INTCONbits
      +                          .GIE = 1;};
  4959     10BE  0021               	movlb	1	; select bank1
  4960     10BF  1512               	bsf	18,2	;volatile
  4961     10C0  170B               	bsf	11,6	;volatile
  4962     10C1  178B               	bsf	11,7	;volatile
  4963     10C2                     l491:	
  4964                           ;usb/usb_device.c: 1376:             while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  4965                           
  4966     10C2  003D               	movlb	29	; select bank29
  4967     10C3  198E               	btfsc	14,3	;volatile
  4968     10C4  28C7               	goto	l5264
  4969     10C5  158E               	bsf	14,3	;volatile
  4970     10C6  28C2               	goto	l491
  4971     10C7                     l5264:
  4972                           
  4973                           ;usb/usb_device.c: 1379:             USBDeviceState = ATTACHED_STATE;
  4974     10C7  3001               	movlw	1
  4975     10C8  0020               	movlb	0	; select bank0
  4976     10C9  00EC               	movwf	_USBDeviceState	;volatile
  4977     10CA  0008               	return
  4978     10CB                     __end_of_USBDeviceAttach:
  4979                           
  4980                           	psect	text7
  4981     1F5A                     __ptext7:	
  4982 ;; *************** function _TMR2_Initialize *****************
  4983 ;; Defined at:
  4984 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;		None
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;		None
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  1    wreg      void 
  4991 ;; Registers used:
  4992 ;;		wreg, status,2, status,0, pclath, cstack
  4993 ;; Tracked objects:
  4994 ;;		On entry : 1F/1
  4995 ;;		On exit  : 1F/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5002 ;;Total ram usage:        0 bytes
  5003 ;; Hardware stack levels used: 1
  5004 ;; Hardware stack levels required when called: 11
  5005 ;; This function calls:
  5006 ;;		_TMR2_SetInterruptHandler
  5007 ;; This function is called by:
  5008 ;;		_SYSTEM_Initialize
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012     1F5A                     _TMR2_Initialize:	
  5013                           ;psect for function _TMR2_Initialize
  5014                           
  5015                           
  5016                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x5D;
  5017                           
  5018                           ;incstack = 0
  5019                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5020     1F5A  305D               	movlw	93
  5021     1F5B  0020               	movlb	0	; select bank0
  5022     1F5C  009B               	movwf	27	;volatile
  5023                           
  5024                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  5025     1F5D  019A               	clrf	26	;volatile
  5026                           
  5027                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  5028     1F5E  1091               	bcf	17,1	;volatile
  5029                           
  5030                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  5031     1F5F  0021               	movlb	1	; select bank1
  5032     1F60  1491               	bsf	17,1	;volatile
  5033                           
  5034                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  5035     1F61  3003               	movlw	low _TMR2_DefaultInterruptHandler
  5036     1F62  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  5037     1F63  3000               	movlw	high _TMR2_DefaultInterruptHandler
  5038     1F64  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5039     1F65  319E  2689         	fcall	_TMR2_SetInterruptHandler
  5040                           
  5041                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x0F;
  5042     1F67  300F               	movlw	15
  5043     1F68  0020               	movlb	0	; select bank0
  5044     1F69  009C               	movwf	28	;volatile
  5045     1F6A  0008               	return
  5046     1F6B                     __end_of_TMR2_Initialize:
  5047                           
  5048                           	psect	text8
  5049     1E89                     __ptext8:	
  5050 ;; *************** function _TMR2_SetInterruptHandler *****************
  5051 ;; Defined at:
  5052 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5055 ;;		 -> SysTimeInterrupt(1), TMR2_DefaultInterruptHandler(1), 
  5056 ;; Auto vars:     Size  Location     Type
  5057 ;;		None
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  1    wreg      void 
  5060 ;; Registers used:
  5061 ;;		wreg
  5062 ;; Tracked objects:
  5063 ;;		On entry : 1F/1
  5064 ;;		On exit  : 1F/2
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5067 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5070 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;Total ram usage:        2 bytes
  5072 ;; Hardware stack levels used: 1
  5073 ;; Hardware stack levels required when called: 10
  5074 ;; This function calls:
  5075 ;;		Nothing
  5076 ;; This function is called by:
  5077 ;;		_TMR2_Initialize
  5078 ;;		_SysTime_Init
  5079 ;; This function uses a non-reentrant model
  5080 ;;
  5081                           
  5082     1E89                     _TMR2_SetInterruptHandler:	
  5083                           ;psect for function _TMR2_SetInterruptHandler
  5084                           
  5085                           
  5086                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  5087                           
  5088                           ;incstack = 0
  5089                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5090     1E89  0829               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5091     1E8A  0022               	movlb	2	; select bank2
  5092     1E8B  00C7               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
  5093     1E8C  0021               	movlb	1	; select bank1
  5094     1E8D  0828               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  5095     1E8E  0022               	movlb	2	; select bank2
  5096     1E8F  00C6               	movwf	_TMR2_InterruptHandler^(0+256)
  5097     1E90  0008               	return
  5098     1E91                     __end_of_TMR2_SetInterruptHandler:
  5099                           
  5100                           	psect	text9
  5101     0807                     __ptext9:	
  5102 ;; *************** function _PIN_MANAGER_Initialize *****************
  5103 ;; Defined at:
  5104 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;		None
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;		None
  5109 ;; Return value:  Size  Location     Type
  5110 ;;                  1    wreg      void 
  5111 ;; Registers used:
  5112 ;;		wreg, status,2, status,0, pclath, cstack
  5113 ;; Tracked objects:
  5114 ;;		On entry : B1F/0
  5115 ;;		On exit  : 1F/3
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5122 ;;Total ram usage:        0 bytes
  5123 ;; Hardware stack levels used: 1
  5124 ;; Hardware stack levels required when called: 11
  5125 ;; This function calls:
  5126 ;;		_IOCAF4_SetInterruptHandler
  5127 ;;		_IOCAF5_SetInterruptHandler
  5128 ;; This function is called by:
  5129 ;;		_SYSTEM_Initialize
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133     0807                     _PIN_MANAGER_Initialize:	
  5134                           ;psect for function _PIN_MANAGER_Initialize
  5135                           
  5136                           
  5137                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  5138                           
  5139                           ;incstack = 0
  5140                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5141     0807  0022               	movlb	2	; select bank2
  5142     0808  018C               	clrf	12	;volatile
  5143                           
  5144                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  5145     0809  018E               	clrf	14	;volatile
  5146                           
  5147                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x30;
  5148     080A  3030               	movlw	48
  5149     080B  0021               	movlb	1	; select bank1
  5150     080C  008C               	movwf	12	;volatile
  5151                           
  5152                           ;mcc_generated_files/pin_manager.c: 72:     TRISC = 0xFF;
  5153     080D  30FF               	movlw	255
  5154     080E  008E               	movwf	14	;volatile
  5155                           
  5156                           ;mcc_generated_files/pin_manager.c: 77:     ANSELC = 0xCF;
  5157     080F  30CF               	movlw	207
  5158     0810  0023               	movlb	3	; select bank3
  5159     0811  008E               	movwf	14	;volatile
  5160                           
  5161                           ;mcc_generated_files/pin_manager.c: 79:     ANSELA = 0x00;
  5162     0812  018C               	clrf	12	;volatile
  5163                           
  5164                           ;mcc_generated_files/pin_manager.c: 85:     WPUA = 0x30;
  5165     0813  3030               	movlw	48
  5166     0814  0024               	movlb	4	; select bank4
  5167     0815  008C               	movwf	12	;volatile
  5168                           
  5169                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 0;
  5170     0816  0021               	movlb	1	; select bank1
  5171     0817  1395               	bcf	21,7	;volatile
  5172                           
  5173                           ;mcc_generated_files/pin_manager.c: 92:     APFCON = 0x00;
  5174     0818  0022               	movlb	2	; select bank2
  5175     0819  019D               	clrf	29	;volatile
  5176                           
  5177                           ;mcc_generated_files/pin_manager.c: 98:     IOCAFbits.IOCAF4 = 0;
  5178     081A  0027               	movlb	7	; select bank7
  5179     081B  1213               	bcf	19,4	;volatile
  5180                           
  5181                           ;mcc_generated_files/pin_manager.c: 100:     IOCAFbits.IOCAF5 = 0;
  5182     081C  1293               	bcf	19,5	;volatile
  5183                           
  5184                           ;mcc_generated_files/pin_manager.c: 102:     IOCANbits.IOCAN4 = 1;
  5185     081D  1612               	bsf	18,4	;volatile
  5186                           
  5187                           ;mcc_generated_files/pin_manager.c: 104:     IOCANbits.IOCAN5 = 1;
  5188     081E  1692               	bsf	18,5	;volatile
  5189                           
  5190                           ;mcc_generated_files/pin_manager.c: 106:     IOCAPbits.IOCAP4 = 0;
  5191     081F  1211               	bcf	17,4	;volatile
  5192                           
  5193                           ;mcc_generated_files/pin_manager.c: 108:     IOCAPbits.IOCAP5 = 0;
  5194     0820  1291               	bcf	17,5	;volatile
  5195                           
  5196                           ;mcc_generated_files/pin_manager.c: 113:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  5197     0821  3033               	movlw	low _IOCAF4_DefaultInterruptHandler
  5198     0822  0021               	movlb	1	; select bank1
  5199     0823  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  5200     0824  301E               	movlw	high _IOCAF4_DefaultInterruptHandler
  5201     0825  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5202     0826  319E  2651  3188   	fcall	_IOCAF4_SetInterruptHandler
  5203                           
  5204                           ;mcc_generated_files/pin_manager.c: 114:     IOCAF5_SetInterruptHandler(IOCAF5_DefaultIn
      +                          terruptHandler);
  5205     0829  3002               	movlw	low _IOCAF5_DefaultInterruptHandler
  5206     082A  0021               	movlb	1	; select bank1
  5207     082B  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  5208     082C  3000               	movlw	high _IOCAF5_DefaultInterruptHandler
  5209     082D  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5210     082E  319E  2659         	fcall	_IOCAF5_SetInterruptHandler
  5211                           
  5212                           ;mcc_generated_files/pin_manager.c: 117:     INTCONbits.IOCIE = 1;
  5213     0830  158B               	bsf	11,3	;volatile
  5214     0831  0008               	return
  5215     0832                     __end_of_PIN_MANAGER_Initialize:
  5216                           
  5217                           	psect	text10
  5218     1F1A                     __ptext10:	
  5219 ;; *************** function _OSCILLATOR_Initialize *****************
  5220 ;; Defined at:
  5221 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;		None
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;		None
  5226 ;; Return value:  Size  Location     Type
  5227 ;;                  1    wreg      void 
  5228 ;; Registers used:
  5229 ;;		wreg, status,2
  5230 ;; Tracked objects:
  5231 ;;		On entry : 1F/3
  5232 ;;		On exit  : 1F/1
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5239 ;;Total ram usage:        0 bytes
  5240 ;; Hardware stack levels used: 1
  5241 ;; Hardware stack levels required when called: 10
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_SYSTEM_Initialize
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249     1F1A                     _OSCILLATOR_Initialize:	
  5250                           ;psect for function _OSCILLATOR_Initialize
  5251                           
  5252                           
  5253                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0xFC;
  5254                           
  5255                           ;incstack = 0
  5256                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5257     1F1A  30FC               	movlw	252
  5258     1F1B  0021               	movlb	1	; select bank1
  5259     1F1C  0099               	movwf	25	;volatile
  5260                           
  5261                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;
  5262     1F1D  0198               	clrf	24	;volatile
  5263                           
  5264                           ;mcc_generated_files/mcc.c: 67:     ACTCON = 0x90;
  5265     1F1E  3090               	movlw	144
  5266     1F1F  0027               	movlb	7	; select bank7
  5267     1F20  009B               	movwf	27	;volatile
  5268                           
  5269                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  5270     1F21  0022               	movlb	2	; select bank2
  5271     1F22  0196               	clrf	22	;volatile
  5272     1F23                     l102:	
  5273                           ;mcc_generated_files/mcc.c: 72:     {;mcc_generated_files/mcc.c: 73:     }
  5274                           
  5275                           
  5276                           ;mcc_generated_files/mcc.c: 71:     while(PLLRDY == 0)
  5277     1F23  0021               	movlb	1	; select bank1
  5278     1F24  1B1A               	btfsc	26,6	;volatile
  5279     1F25  0008               	return
  5280     1F26  2F23               	goto	l102
  5281     1F27                     __end_of_OSCILLATOR_Initialize:
  5282                           
  5283                           	psect	text11
  5284     1407                     __ptext11:	
  5285 ;; *************** function _EUSART_Initialize *****************
  5286 ;; Defined at:
  5287 ;;		line 88 in file "mcc_generated_files/eusart.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;		None
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;		None
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  1    wreg      void 
  5294 ;; Registers used:
  5295 ;;		wreg, status,2, status,0, pclath, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 1F/0
  5298 ;;		On exit  : 1F/1
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;Total ram usage:        0 bytes
  5306 ;; Hardware stack levels used: 1
  5307 ;; Hardware stack levels required when called: 11
  5308 ;; This function calls:
  5309 ;;		_EUSART_SetErrorHandler
  5310 ;;		_EUSART_SetFramingErrorHandler
  5311 ;;		_EUSART_SetOverrunErrorHandler
  5312 ;;		_EUSART_SetRxInterruptHandler
  5313 ;;		_EUSART_SetTxInterruptHandler
  5314 ;; This function is called by:
  5315 ;;		_SYSTEM_Initialize
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319     1407                     _EUSART_Initialize:	
  5320                           ;psect for function _EUSART_Initialize
  5321                           
  5322                           
  5323                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  5324                           
  5325                           ;incstack = 0
  5326                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5327     1407  0021               	movlb	1	; select bank1
  5328     1408  1291               	bcf	17,5	;volatile
  5329                           
  5330                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5331     1409  3016               	movlw	low _EUSART_Receive_ISR
  5332     140A  00A8               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5333     140B  3013               	movlw	high _EUSART_Receive_ISR
  5334     140C  00A9               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5335     140D  319E  2679  3194   	fcall	_EUSART_SetRxInterruptHandler
  5336                           
  5337                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  5338     1410  0021               	movlb	1	; select bank1
  5339     1411  1211               	bcf	17,4	;volatile
  5340                           
  5341                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  5342     1412  308B               	movlw	low _EUSART_Transmit_ISR
  5343     1413  00A8               	movwf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128)
  5344     1414  3011               	movlw	high _EUSART_Transmit_ISR
  5345     1415  00A9               	movwf	(EUSART_SetTxInterruptHandler@interruptHandler^(0+128)+1)
  5346     1416  319E  2681  3194   	fcall	_EUSART_SetTxInterruptHandler
  5347                           
  5348                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  5349     1419  3008               	movlw	8
  5350     141A  0023               	movlb	3	; select bank3
  5351     141B  009F               	movwf	31	;volatile
  5352                           
  5353                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x80;
  5354     141C  3080               	movlw	128
  5355     141D  009D               	movwf	29	;volatile
  5356                           
  5357                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  5358     141E  3024               	movlw	36
  5359     141F  009E               	movwf	30	;volatile
  5360                           
  5361                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xE1;
  5362     1420  30E1               	movlw	225
  5363     1421  009B               	movwf	27	;volatile
  5364                           
  5365                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x04;
  5366     1422  3004               	movlw	4
  5367     1423  009C               	movwf	28	;volatile
  5368                           
  5369                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5370     1424  3032               	movlw	low _EUSART_DefaultFramingErrorHandler
  5371     1425  0021               	movlb	1	; select bank1
  5372     1426  00A8               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5373     1427  301E               	movlw	high _EUSART_DefaultFramingErrorHandler
  5374     1428  00A9               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5375     1429  319E  2669  3194   	fcall	_EUSART_SetFramingErrorHandler
  5376                           
  5377                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5378     142C  3040               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5379     142D  0021               	movlb	1	; select bank1
  5380     142E  00A8               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5381     142F  301E               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5382     1430  00A9               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5383     1431  319E  2671  3194   	fcall	_EUSART_SetOverrunErrorHandler
  5384                           
  5385                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5386     1434  3034               	movlw	low _EUSART_DefaultErrorHandler
  5387     1435  0021               	movlb	1	; select bank1
  5388     1436  00A8               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5389     1437  301E               	movlw	high _EUSART_DefaultErrorHandler
  5390     1438  00A9               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5391     1439  319E  2661         	fcall	_EUSART_SetErrorHandler
  5392                           
  5393                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  5394     143B  01E4               	clrf	_eusartRxLastError^(0+256)	;volatile
  5395                           
  5396                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  5397     143C  01E8               	clrf	_eusartTxHead^(0+256)	;volatile
  5398                           
  5399                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  5400     143D  01E7               	clrf	_eusartTxTail^(0+256)	;volatile
  5401                           
  5402                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  5403     143E  3008               	movlw	8
  5404     143F  0021               	movlb	1	; select bank1
  5405     1440  00EF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  5406                           
  5407                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  5408     1441  01EE               	clrf	_eusartRxHead^(0+128)	;volatile
  5409                           
  5410                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  5411     1442  0022               	movlb	2	; select bank2
  5412     1443  01E6               	clrf	_eusartRxTail^(0+256)	;volatile
  5413                           
  5414                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  5415     1444  01E5               	clrf	_eusartRxCount^(0+256)	;volatile
  5416                           
  5417                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  5418     1445  0021               	movlb	1	; select bank1
  5419     1446  1691               	bsf	17,5	;volatile
  5420     1447  0008               	return
  5421     1448                     __end_of_EUSART_Initialize:
  5422                           
  5423                           	psect	text12
  5424     1E81                     __ptext12:	
  5425 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  5426 ;; Defined at:
  5427 ;;		line 276 in file "mcc_generated_files/eusart.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5430 ;;		 -> EUSART_Transmit_ISR(1), 
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;		None
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  1    wreg      void 
  5435 ;; Registers used:
  5436 ;;		wreg
  5437 ;; Tracked objects:
  5438 ;;		On entry : 1F/1
  5439 ;;		On exit  : 1F/2
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5442 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;Total ram usage:        2 bytes
  5447 ;; Hardware stack levels used: 1
  5448 ;; Hardware stack levels required when called: 10
  5449 ;; This function calls:
  5450 ;;		Nothing
  5451 ;; This function is called by:
  5452 ;;		_EUSART_Initialize
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456     1E81                     _EUSART_SetTxInterruptHandler:	
  5457                           ;psect for function _EUSART_SetTxInterruptHandler
  5458                           
  5459                           
  5460                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  5461                           
  5462                           ;incstack = 0
  5463                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  5464     1E81  0829               	movf	(EUSART_SetTxInterruptHandler@interruptHandler+1)^(0+128),w
  5465     1E82  0022               	movlb	2	; select bank2
  5466     1E83  00CB               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
  5467     1E84  0021               	movlb	1	; select bank1
  5468     1E85  0828               	movf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128),w
  5469     1E86  0022               	movlb	2	; select bank2
  5470     1E87  00CA               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
  5471     1E88  0008               	return
  5472     1E89                     __end_of_EUSART_SetTxInterruptHandler:
  5473                           
  5474                           	psect	text13
  5475     1E79                     __ptext13:	
  5476 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5477 ;; Defined at:
  5478 ;;		line 280 in file "mcc_generated_files/eusart.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5481 ;;		 -> EUSART_Receive_ISR(1), 
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;		None
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  1    wreg      void 
  5486 ;; Registers used:
  5487 ;;		wreg
  5488 ;; Tracked objects:
  5489 ;;		On entry : 1F/1
  5490 ;;		On exit  : 1F/2
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5493 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;Total ram usage:        2 bytes
  5498 ;; Hardware stack levels used: 1
  5499 ;; Hardware stack levels required when called: 10
  5500 ;; This function calls:
  5501 ;;		Nothing
  5502 ;; This function is called by:
  5503 ;;		_EUSART_Initialize
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507     1E79                     _EUSART_SetRxInterruptHandler:	
  5508                           ;psect for function _EUSART_SetRxInterruptHandler
  5509                           
  5510                           
  5511                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5512                           
  5513                           ;incstack = 0
  5514                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5515     1E79  0829               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5516     1E7A  0022               	movlb	2	; select bank2
  5517     1E7B  00C9               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
  5518     1E7C  0021               	movlb	1	; select bank1
  5519     1E7D  0828               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5520     1E7E  0022               	movlb	2	; select bank2
  5521     1E7F  00C8               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
  5522     1E80  0008               	return
  5523     1E81                     __end_of_EUSART_SetRxInterruptHandler:
  5524                           
  5525                           	psect	text14
  5526     1E71                     __ptext14:	
  5527 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5528 ;; Defined at:
  5529 ;;		line 268 in file "mcc_generated_files/eusart.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5532 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      void 
  5537 ;; Registers used:
  5538 ;;		wreg
  5539 ;; Tracked objects:
  5540 ;;		On entry : 1F/1
  5541 ;;		On exit  : 1F/2
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5544 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;Total ram usage:        2 bytes
  5549 ;; Hardware stack levels used: 1
  5550 ;; Hardware stack levels required when called: 10
  5551 ;; This function calls:
  5552 ;;		Nothing
  5553 ;; This function is called by:
  5554 ;;		_EUSART_Initialize
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558     1E71                     _EUSART_SetOverrunErrorHandler:	
  5559                           ;psect for function _EUSART_SetOverrunErrorHandler
  5560                           
  5561                           
  5562                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  5563                           
  5564                           ;incstack = 0
  5565                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5566     1E71  0829               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5567     1E72  0022               	movlb	2	; select bank2
  5568     1E73  00C3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  5569     1E74  0021               	movlb	1	; select bank1
  5570     1E75  0828               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5571     1E76  0022               	movlb	2	; select bank2
  5572     1E77  00C2               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  5573     1E78  0008               	return
  5574     1E79                     __end_of_EUSART_SetOverrunErrorHandler:
  5575                           
  5576                           	psect	text15
  5577     1E69                     __ptext15:	
  5578 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5579 ;; Defined at:
  5580 ;;		line 264 in file "mcc_generated_files/eusart.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5583 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;		None
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  1    wreg      void 
  5588 ;; Registers used:
  5589 ;;		wreg
  5590 ;; Tracked objects:
  5591 ;;		On entry : 1F/1
  5592 ;;		On exit  : 1F/2
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5595 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5598 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5599 ;;Total ram usage:        2 bytes
  5600 ;; Hardware stack levels used: 1
  5601 ;; Hardware stack levels required when called: 10
  5602 ;; This function calls:
  5603 ;;		Nothing
  5604 ;; This function is called by:
  5605 ;;		_EUSART_Initialize
  5606 ;; This function uses a non-reentrant model
  5607 ;;
  5608                           
  5609     1E69                     _EUSART_SetFramingErrorHandler:	
  5610                           ;psect for function _EUSART_SetFramingErrorHandler
  5611                           
  5612                           
  5613                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  5614                           
  5615                           ;incstack = 0
  5616                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5617     1E69  0829               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5618     1E6A  0022               	movlb	2	; select bank2
  5619     1E6B  00C5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
  5620     1E6C  0021               	movlb	1	; select bank1
  5621     1E6D  0828               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5622     1E6E  0022               	movlb	2	; select bank2
  5623     1E6F  00C4               	movwf	_EUSART_FramingErrorHandler^(0+256)
  5624     1E70  0008               	return
  5625     1E71                     __end_of_EUSART_SetFramingErrorHandler:
  5626                           
  5627                           	psect	text16
  5628     1E61                     __ptext16:	
  5629 ;; *************** function _EUSART_SetErrorHandler *****************
  5630 ;; Defined at:
  5631 ;;		line 272 in file "mcc_generated_files/eusart.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5634 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5635 ;; Auto vars:     Size  Location     Type
  5636 ;;		None
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		wreg
  5641 ;; Tracked objects:
  5642 ;;		On entry : 1F/1
  5643 ;;		On exit  : 1F/2
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5646 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5649 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5650 ;;Total ram usage:        2 bytes
  5651 ;; Hardware stack levels used: 1
  5652 ;; Hardware stack levels required when called: 10
  5653 ;; This function calls:
  5654 ;;		Nothing
  5655 ;; This function is called by:
  5656 ;;		_EUSART_Initialize
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660     1E61                     _EUSART_SetErrorHandler:	
  5661                           ;psect for function _EUSART_SetErrorHandler
  5662                           
  5663                           
  5664                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  5665                           
  5666                           ;incstack = 0
  5667                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5668     1E61  0829               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5669     1E62  0022               	movlb	2	; select bank2
  5670     1E63  00C1               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  5671     1E64  0021               	movlb	1	; select bank1
  5672     1E65  0828               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5673     1E66  0022               	movlb	2	; select bank2
  5674     1E67  00C0               	movwf	_EUSART_ErrorHandler^(0+256)
  5675     1E68  0008               	return
  5676     1E69                     __end_of_EUSART_SetErrorHandler:
  5677                           
  5678                           	psect	text17
  5679     07E5                     __ptext17:	
  5680 ;; *************** function _PS2Keyboard_Init *****************
  5681 ;; Defined at:
  5682 ;;		line 43 in file "ps2_keyboard.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;		None
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;		None
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  1    wreg      void 
  5689 ;; Registers used:
  5690 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5691 ;; Tracked objects:
  5692 ;;		On entry : 1F/0
  5693 ;;		On exit  : 1F/3
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5700 ;;Total ram usage:        0 bytes
  5701 ;; Hardware stack levels used: 1
  5702 ;; Hardware stack levels required when called: 11
  5703 ;; This function calls:
  5704 ;;		_GenericQueue_Init
  5705 ;;		_IOCAF4_SetInterruptHandler
  5706 ;;		_IOCAF5_SetInterruptHandler
  5707 ;; This function is called by:
  5708 ;;		_main
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712     07E5                     _PS2Keyboard_Init:	
  5713                           ;psect for function _PS2Keyboard_Init
  5714                           
  5715                           
  5716                           ;ps2_keyboard.c: 44:     GenericQueue_Init(&keyboardScanCodeQueue, sizeof (PS2ScanCode))
      +                          ;
  5717                           
  5718                           ;incstack = 0
  5719                           ; Regs used in _PS2Keyboard_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5720     07E5  3091               	movlw	145
  5721     07E6  0021               	movlb	1	; select bank1
  5722     07E7  00A8               	movwf	GenericQueue_Init@q^(0+128)
  5723     07E8  3023               	movlw	35
  5724     07E9  00A9               	movwf	(GenericQueue_Init@q^(0+128)+1)
  5725     07EA  3003               	movlw	3
  5726     07EB  00AA               	movwf	GenericQueue_Init@element_size^(0+128)
  5727     07EC  3000               	movlw	0
  5728     07ED  00AB               	movwf	(GenericQueue_Init@element_size^(0+128)+1)
  5729     07EE  3192  2209  3187   	fcall	_GenericQueue_Init
  5730                           
  5731                           ;ps2_keyboard.c: 45:     IOCAF4_SetInterruptHandler(PS2Keyboard_ClockInterrupt);
  5732     07F1  3049               	movlw	low _PS2Keyboard_ClockInterrupt
  5733     07F2  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  5734     07F3  3005               	movlw	high _PS2Keyboard_ClockInterrupt
  5735     07F4  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5736     07F5  319E  2651  3187   	fcall	_IOCAF4_SetInterruptHandler
  5737                           
  5738                           ;ps2_keyboard.c: 46:     IOCAF5_SetInterruptHandler(PS2Keyboard_DataInterrupt);
  5739     07F8  3027               	movlw	low _PS2Keyboard_DataInterrupt
  5740     07F9  0021               	movlb	1	; select bank1
  5741     07FA  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  5742     07FB  301F               	movlw	high _PS2Keyboard_DataInterrupt
  5743     07FC  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5744     07FD  319E  2659         	fcall	_IOCAF5_SetInterruptHandler
  5745     07FF  0008               	return
  5746     0800                     __end_of_PS2Keyboard_Init:
  5747                           
  5748                           	psect	text18
  5749     1E59                     __ptext18:	
  5750 ;; *************** function _IOCAF5_SetInterruptHandler *****************
  5751 ;; Defined at:
  5752 ;;		line 183 in file "mcc_generated_files/pin_manager.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5755 ;;		 -> PS2Keyboard_DataInterrupt(1), IOCAF5_DefaultInterruptHandler(1), 
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;		None
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  1    wreg      void 
  5760 ;; Registers used:
  5761 ;;		wreg
  5762 ;; Tracked objects:
  5763 ;;		On entry : 1F/1
  5764 ;;		On exit  : 1F/3
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5767 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;Total ram usage:        2 bytes
  5772 ;; Hardware stack levels used: 1
  5773 ;; Hardware stack levels required when called: 10
  5774 ;; This function calls:
  5775 ;;		Nothing
  5776 ;; This function is called by:
  5777 ;;		_PIN_MANAGER_Initialize
  5778 ;;		_PS2Keyboard_Init
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782     1E59                     _IOCAF5_SetInterruptHandler:	
  5783                           ;psect for function _IOCAF5_SetInterruptHandler
  5784                           
  5785                           
  5786                           ;mcc_generated_files/pin_manager.c: 184:     IOCAF5_InterruptHandler = InterruptHandler;
  5787                           
  5788                           ;incstack = 0
  5789                           ; Regs used in _IOCAF5_SetInterruptHandler: [wreg]
  5790     1E59  0829               	movf	(IOCAF5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5791     1E5A  0023               	movlb	3	; select bank3
  5792     1E5B  00CE               	movwf	(_IOCAF5_InterruptHandler+1)^(0+384)
  5793     1E5C  0021               	movlb	1	; select bank1
  5794     1E5D  0828               	movf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128),w
  5795     1E5E  0023               	movlb	3	; select bank3
  5796     1E5F  00CD               	movwf	_IOCAF5_InterruptHandler^(0+384)
  5797     1E60  0008               	return
  5798     1E61                     __end_of_IOCAF5_SetInterruptHandler:
  5799                           
  5800                           	psect	text19
  5801     1E51                     __ptext19:	
  5802 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  5803 ;; Defined at:
  5804 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5807 ;;		 -> PS2Keyboard_ClockInterrupt(1), IOCAF4_DefaultInterruptHandler(1), 
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;		None
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  1    wreg      void 
  5812 ;; Registers used:
  5813 ;;		wreg
  5814 ;; Tracked objects:
  5815 ;;		On entry : 1F/1
  5816 ;;		On exit  : 1F/2
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5819 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5822 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5823 ;;Total ram usage:        2 bytes
  5824 ;; Hardware stack levels used: 1
  5825 ;; Hardware stack levels required when called: 10
  5826 ;; This function calls:
  5827 ;;		Nothing
  5828 ;; This function is called by:
  5829 ;;		_PIN_MANAGER_Initialize
  5830 ;;		_PS2Keyboard_Init
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834     1E51                     _IOCAF4_SetInterruptHandler:	
  5835                           ;psect for function _IOCAF4_SetInterruptHandler
  5836                           
  5837                           
  5838                           ;mcc_generated_files/pin_manager.c: 154:     IOCAF4_InterruptHandler = InterruptHandler;
  5839                           
  5840                           ;incstack = 0
  5841                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  5842     1E51  0829               	movf	(IOCAF4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5843     1E52  0022               	movlb	2	; select bank2
  5844     1E53  00EF               	movwf	(_IOCAF4_InterruptHandler+1)^(0+256)
  5845     1E54  0021               	movlb	1	; select bank1
  5846     1E55  0828               	movf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128),w
  5847     1E56  0022               	movlb	2	; select bank2
  5848     1E57  00EE               	movwf	_IOCAF4_InterruptHandler^(0+256)
  5849     1E58  0008               	return
  5850     1E59                     __end_of_IOCAF4_SetInterruptHandler:
  5851                           
  5852                           	psect	text20
  5853     1209                     __ptext20:	
  5854 ;; *************** function _GenericQueue_Init *****************
  5855 ;; Defined at:
  5856 ;;		line 4 in file "generic_queue.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  q               2    0[BANK1 ] PTR struct .
  5859 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  5860 ;;  element_size    2    2[BANK1 ] unsigned int 
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;		None
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  1    wreg      void 
  5865 ;; Registers used:
  5866 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5867 ;; Tracked objects:
  5868 ;;		On entry : 1F/1
  5869 ;;		On exit  : 1F/1
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5872 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5876 ;;Total ram usage:        4 bytes
  5877 ;; Hardware stack levels used: 1
  5878 ;; Hardware stack levels required when called: 10
  5879 ;; This function calls:
  5880 ;;		Nothing
  5881 ;; This function is called by:
  5882 ;;		_PS2Keyboard_Init
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886     1209                     _GenericQueue_Init:	
  5887                           ;psect for function _GenericQueue_Init
  5888                           
  5889                           
  5890                           ;generic_queue.c: 5:     q->element_size = element_size;
  5891                           
  5892                           ;incstack = 0
  5893                           ; Regs used in _GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  5894     1209  0828               	movf	GenericQueue_Init@q^(0+128),w
  5895     120A  3E5A               	addlw	90
  5896     120B  0086               	movwf	6
  5897     120C  3000               	movlw	0
  5898     120D  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5899     120E  0087               	movwf	7
  5900     120F  082A               	movf	GenericQueue_Init@element_size^(0+128),w
  5901     1210  3FC0               	movwi [0]fsr1
  5902     1211  082B               	movf	(GenericQueue_Init@element_size+1)^(0+128),w
  5903     1212  3FC1               	movwi [1]fsr1
  5904                           
  5905                           ;generic_queue.c: 6:     q->front = 0;
  5906     1213  0828               	movf	GenericQueue_Init@q^(0+128),w
  5907     1214  3E5C               	addlw	92
  5908     1215  0086               	movwf	6
  5909     1216  3000               	movlw	0
  5910     1217  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5911     1218  0087               	movwf	7
  5912     1219  0181               	clrf	1
  5913                           
  5914                           ;generic_queue.c: 7:     q->rear = 0;
  5915     121A  0828               	movf	GenericQueue_Init@q^(0+128),w
  5916     121B  3E5D               	addlw	93
  5917     121C  0086               	movwf	6
  5918     121D  3000               	movlw	0
  5919     121E  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5920     121F  0087               	movwf	7
  5921     1220  0181               	clrf	1
  5922                           
  5923                           ;generic_queue.c: 8:     q->size = 0;
  5924     1221  0828               	movf	GenericQueue_Init@q^(0+128),w
  5925     1222  3E5E               	addlw	94
  5926     1223  0086               	movwf	6
  5927     1224  3000               	movlw	0
  5928     1225  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5929     1226  0087               	movwf	7
  5930     1227  0181               	clrf	1
  5931     1228  0008               	return
  5932     1229                     __end_of_GenericQueue_Init:
  5933                           
  5934                           	psect	text21
  5935     1152                     __ptext21:	
  5936 ;; *************** function _PS2Keyboard_GetScanCode *****************
  5937 ;; Defined at:
  5938 ;;		line 49 in file "ps2_keyboard.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;  scanCode        1    wreg     PTR struct PS2ScanCode
  5941 ;;		 -> main@scanCode(3), 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  scanCode        1   31[BANK1 ] PTR struct PS2ScanCode
  5944 ;;		 -> main@scanCode(3), 
  5945 ;;  ret             1   32[BANK1 ] _Bool 
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  1    wreg      _Bool 
  5948 ;; Registers used:
  5949 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5950 ;; Tracked objects:
  5951 ;;		On entry : 2/1
  5952 ;;		On exit  : 1F/1
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;Total ram usage:        2 bytes
  5960 ;; Hardware stack levels used: 1
  5961 ;; Hardware stack levels required when called: 12
  5962 ;; This function calls:
  5963 ;;		_GenericQueue_Dequeue
  5964 ;;		_GenericQueue_IsEmpty
  5965 ;; This function is called by:
  5966 ;;		_main
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970     1152                     _PS2Keyboard_GetScanCode:	
  5971                           ;psect for function _PS2Keyboard_GetScanCode
  5972                           
  5973                           
  5974                           ;incstack = 0
  5975                           ; Regs used in _PS2Keyboard_GetScanCode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5976                           ;PS2Keyboard_GetScanCode@scanCode stored from wreg
  5977     1152  0021               	movlb	1	; select bank1
  5978     1153  00C7               	movwf	PS2Keyboard_GetScanCode@scanCode^(0+128)
  5979                           
  5980                           ;ps2_keyboard.c: 51:     if (!GenericQueue_IsEmpty(&keyboardScanCodeQueue)) {
  5981     1154  3091               	movlw	145
  5982     1155  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  5983     1156  3023               	movlw	35
  5984     1157  00A9               	movwf	(GenericQueue_IsEmpty@q^(0+128)+1)
  5985     1158  319F  276B  3191   	fcall	_GenericQueue_IsEmpty
  5986     115B  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  5987     115C  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  5988     115D  1D03               	btfss	3,2
  5989     115E  296B               	goto	l5814
  5990                           
  5991                           ;ps2_keyboard.c: 52:         GenericQueue_Dequeue(&keyboardScanCodeQueue, scanCode);
  5992     115F  3091               	movlw	145
  5993     1160  00C0               	movwf	GenericQueue_Dequeue@q^(0+128)
  5994     1161  3023               	movlw	35
  5995     1162  00C1               	movwf	(GenericQueue_Dequeue@q^(0+128)+1)
  5996     1163  0847               	movf	PS2Keyboard_GetScanCode@scanCode^(0+128),w
  5997     1164  00C2               	movwf	GenericQueue_Dequeue@item^(0+128)
  5998     1165  3188  209A  3191   	fcall	_GenericQueue_Dequeue
  5999                           
  6000                           ;ps2_keyboard.c: 53:         ret = 1;
  6001     1168  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  6002     1169  0AC8               	incf	PS2Keyboard_GetScanCode@ret^(0+128),f
  6003                           
  6004                           ;ps2_keyboard.c: 54:     } else {
  6005     116A  296C               	goto	l5816
  6006     116B                     l5814:
  6007                           
  6008                           ;ps2_keyboard.c: 55:         ret = 0;
  6009     116B  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  6010     116C                     l5816:
  6011                           
  6012                           ;ps2_keyboard.c: 57:     return ret;
  6013     116C  0848               	movf	PS2Keyboard_GetScanCode@ret^(0+128),w
  6014     116D  0008               	return
  6015     116E                     __end_of_PS2Keyboard_GetScanCode:
  6016                           
  6017                           	psect	text22
  6018     089A                     __ptext22:	
  6019 ;; *************** function _GenericQueue_Dequeue *****************
  6020 ;; Defined at:
  6021 ;;		line 27 in file "generic_queue.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;  q               2   24[BANK1 ] PTR struct .
  6024 ;;		 -> keyboardScanCodeQueue(95), 
  6025 ;;  item            1   26[BANK1 ] PTR void 
  6026 ;;		 -> main@scanCode(3), 
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;		None
  6029 ;; Return value:  Size  Location     Type
  6030 ;;                  1    wreg      void 
  6031 ;; Registers used:
  6032 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6033 ;; Tracked objects:
  6034 ;;		On entry : 1F/1
  6035 ;;		On exit  : 1F/1
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6038 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6042 ;;Total ram usage:        7 bytes
  6043 ;; Hardware stack levels used: 1
  6044 ;; Hardware stack levels required when called: 11
  6045 ;; This function calls:
  6046 ;;		_GenericQueue_IsEmpty
  6047 ;;		___awmod
  6048 ;;		___wmul
  6049 ;;		_memcpy
  6050 ;; This function is called by:
  6051 ;;		_PS2Keyboard_GetScanCode
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055     089A                     _GenericQueue_Dequeue:	
  6056                           ;psect for function _GenericQueue_Dequeue
  6057                           
  6058                           
  6059                           ;generic_queue.c: 28:     if (!GenericQueue_IsEmpty(q)) {
  6060                           
  6061                           ;incstack = 0
  6062                           ; Regs used in _GenericQueue_Dequeue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6063     089A  0841               	movf	(GenericQueue_Dequeue@q+1)^(0+128),w
  6064     089B  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  6065     089C  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6066     089D  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  6067     089E  319F  276B  3188   	fcall	_GenericQueue_IsEmpty
  6068     08A1  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  6069     08A2  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  6070     08A3  1D03               	btfss	3,2
  6071     08A4  0008               	return
  6072                           
  6073                           ;generic_queue.c: 29:         memcpy(item, &q->buffer[q->front * q->element_size], q->el
      +                          ement_size);
  6074     08A5  0842               	movf	GenericQueue_Dequeue@item^(0+128),w
  6075     08A6  00B5               	movwf	memcpy@d1^(0+128)
  6076     08A7  01B6               	clrf	(memcpy@d1+1)^(0+128)
  6077     08A8  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6078     08A9  3E5C               	addlw	92
  6079     08AA  0086               	movwf	6
  6080     08AB  3000               	movlw	0
  6081     08AC  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6082     08AD  0087               	movwf	7
  6083     08AE  0801               	movf	1,w
  6084     08AF  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  6085     08B0  01C4               	clrf	(??_GenericQueue_Dequeue^(0+128)+1)
  6086     08B1  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  6087     08B2  00AF               	movwf	___wmul@multiplier^(0+128)
  6088     08B3  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  6089     08B4  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  6090     08B5  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6091     08B6  3E5A               	addlw	90
  6092     08B7  0086               	movwf	6
  6093     08B8  3000               	movlw	0
  6094     08B9  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6095     08BA  0087               	movwf	7
  6096     08BB  3F40               	moviw [0]fsr1
  6097     08BC  00B1               	movwf	___wmul@multiplicand^(0+128)
  6098     08BD  3F41               	moviw [1]fsr1
  6099     08BE  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  6100     08BF  3191  2100  3188   	fcall	___wmul
  6101     08C2  082F               	movf	?___wmul^(0+128),w
  6102     08C3  0740               	addwf	GenericQueue_Dequeue@q^(0+128),w
  6103     08C4  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  6104     08C5  0830               	movf	(?___wmul+1)^(0+128),w
  6105     08C6  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6106     08C7  00C6               	movwf	(??_GenericQueue_Dequeue+3)^(0+128)
  6107     08C8  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  6108     08C9  00B7               	movwf	memcpy@s1^(0+128)
  6109     08CA  0846               	movf	(??_GenericQueue_Dequeue+3)^(0+128),w
  6110     08CB  00B8               	movwf	(memcpy@s1+1)^(0+128)
  6111     08CC  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6112     08CD  3E5A               	addlw	90
  6113     08CE  0086               	movwf	6
  6114     08CF  3000               	movlw	0
  6115     08D0  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6116     08D1  0087               	movwf	7
  6117     08D2  3F40               	moviw [0]fsr1
  6118     08D3  00B9               	movwf	memcpy@n^(0+128)
  6119     08D4  3F41               	moviw [1]fsr1
  6120     08D5  00BA               	movwf	(memcpy@n+1)^(0+128)
  6121     08D6  3192  22B9  3188   	fcall	_memcpy
  6122                           
  6123                           ;generic_queue.c: 30:         q->front = (q->front + 1) % 15;
  6124     08D9  300F               	movlw	15
  6125     08DA  00A8               	movwf	___awmod@divisor^(0+128)
  6126     08DB  3000               	movlw	0
  6127     08DC  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  6128     08DD  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6129     08DE  3E5C               	addlw	92
  6130     08DF  0086               	movwf	6
  6131     08E0  3000               	movlw	0
  6132     08E1  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6133     08E2  0087               	movwf	7
  6134     08E3  0801               	movf	1,w
  6135     08E4  3E01               	addlw	1
  6136     08E5  00AA               	movwf	___awmod@dividend^(0+128)
  6137     08E6  3000               	movlw	0
  6138     08E7  1803               	skipnc
  6139     08E8  3001               	movlw	1
  6140     08E9  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  6141     08EA  3194  248D         	fcall	___awmod
  6142     08EC  0828               	movf	?___awmod^(0+128),w
  6143     08ED  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  6144     08EE  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6145     08EF  3E5C               	addlw	92
  6146     08F0  00C4               	movwf	(??_GenericQueue_Dequeue+1)^(0+128)
  6147     08F1  3000               	movlw	0
  6148     08F2  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6149     08F3  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  6150     08F4  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  6151     08F5  0086               	movwf	6
  6152     08F6  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  6153     08F7  0087               	movwf	7
  6154     08F8  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  6155     08F9  0081               	movwf	1
  6156                           
  6157                           ;generic_queue.c: 31:         q->size--;
  6158     08FA  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6159     08FB  3E5E               	addlw	94
  6160     08FC  0086               	movwf	6
  6161     08FD  3000               	movlw	0
  6162     08FE  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6163     08FF  0087               	movwf	7
  6164     0900  3001               	movlw	1
  6165     0901  0281               	subwf	1,f
  6166     0902  0008               	return
  6167     0903                     __end_of_GenericQueue_Dequeue:
  6168                           
  6169                           	psect	text23
  6170     126E                     __ptext23:	
  6171 ;; *************** function _Log_UtilityConvertByteToHex *****************
  6172 ;; Defined at:
  6173 ;;		line 14 in file "log.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;  byte            1    wreg     unsigned char 
  6176 ;;  buf             1    4[BANK1 ] PTR unsigned char 
  6177 ;;		 -> main@scanCodeStr(6), 
  6178 ;;  bufSize         1    5[BANK1 ] unsigned char 
  6179 ;; Auto vars:     Size  Location     Type
  6180 ;;  byte            1    8[BANK1 ] unsigned char 
  6181 ;;  d1              1    9[BANK1 ] unsigned char 
  6182 ;;  d0              1    7[BANK1 ] unsigned char 
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      void 
  6185 ;; Registers used:
  6186 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6187 ;; Tracked objects:
  6188 ;;		On entry : 1F/1
  6189 ;;		On exit  : 1F/1
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6192 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;Total ram usage:        6 bytes
  6197 ;; Hardware stack levels used: 1
  6198 ;; Hardware stack levels required when called: 11
  6199 ;; This function calls:
  6200 ;;		___bmul
  6201 ;;		_hex2str
  6202 ;; This function is called by:
  6203 ;;		_main
  6204 ;; This function uses a non-reentrant model
  6205 ;;
  6206                           
  6207     126E                     _Log_UtilityConvertByteToHex:	
  6208                           ;psect for function _Log_UtilityConvertByteToHex
  6209                           
  6210                           
  6211                           ;incstack = 0
  6212                           ; Regs used in _Log_UtilityConvertByteToHex: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6213                           ;Log_UtilityConvertByteToHex@byte stored from wreg
  6214     126E  00B0               	movwf	Log_UtilityConvertByteToHex@byte^(0+128)
  6215                           
  6216                           ;log.c: 15:     if (bufSize < 2) {
  6217     126F  3002               	movlw	2
  6218     1270  022D               	subwf	Log_UtilityConvertByteToHex@bufSize^(0+128),w
  6219     1271  1C03               	btfss	3,0
  6220     1272  0008               	return
  6221                           
  6222                           ;log.c: 18:     uint8_t d1 = byte / 16;
  6223     1273  0830               	movf	Log_UtilityConvertByteToHex@byte^(0+128),w
  6224     1274  00AE               	movwf	??_Log_UtilityConvertByteToHex^(0+128)
  6225     1275  3004               	movlw	4
  6226     1276                     u5495:
  6227     1276  36AE               	lsrf	??_Log_UtilityConvertByteToHex^(0+128),f
  6228     1277  0B89               	decfsz	9,f
  6229     1278  2A76               	goto	u5495
  6230     1279  082E               	movf	??_Log_UtilityConvertByteToHex^(0+128),w
  6231     127A  00B1               	movwf	Log_UtilityConvertByteToHex@d1^(0+128)
  6232                           
  6233                           ;log.c: 19:     uint8_t d0 = byte - d1 * 16;
  6234     127B  30F0               	movlw	240
  6235     127C  00A8               	movwf	___bmul@multiplicand^(0+128)
  6236     127D  0831               	movf	Log_UtilityConvertByteToHex@d1^(0+128),w
  6237     127E  319F  2738  3192   	fcall	___bmul
  6238     1281  0730               	addwf	Log_UtilityConvertByteToHex@byte^(0+128),w
  6239     1282  00AF               	movwf	Log_UtilityConvertByteToHex@d0^(0+128)
  6240                           
  6241                           ;log.c: 20:     buf[0] = hex2str(d1);
  6242     1283  082C               	movf	Log_UtilityConvertByteToHex@buf^(0+128),w
  6243     1284  0086               	movwf	6
  6244     1285  0187               	clrf	7
  6245     1286  0831               	movf	Log_UtilityConvertByteToHex@d1^(0+128),w
  6246     1287  319F  2749  3192   	fcall	_hex2str
  6247     128A  0081               	movwf	1
  6248                           
  6249                           ;log.c: 21:     buf[1] = hex2str(d0);
  6250     128B  0A2C               	incf	Log_UtilityConvertByteToHex@buf^(0+128),w
  6251     128C  0086               	movwf	6
  6252     128D  0187               	clrf	7
  6253     128E  082F               	movf	Log_UtilityConvertByteToHex@d0^(0+128),w
  6254     128F  319F  2749         	fcall	_hex2str
  6255     1291  0081               	movwf	1
  6256     1292  0008               	return
  6257     1293                     __end_of_Log_UtilityConvertByteToHex:
  6258                           
  6259                           	psect	text24
  6260     1F49                     __ptext24:	
  6261 ;; *************** function _hex2str *****************
  6262 ;; Defined at:
  6263 ;;		line 4 in file "log.c"
  6264 ;; Parameters:    Size  Location     Type
  6265 ;;  val             1    wreg     unsigned char 
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;  val             1    0[BANK1 ] unsigned char 
  6268 ;; Return value:  Size  Location     Type
  6269 ;;                  1    wreg      unsigned char 
  6270 ;; Registers used:
  6271 ;;		wreg, status,2, status,0
  6272 ;; Tracked objects:
  6273 ;;		On entry : 1F/1
  6274 ;;		On exit  : 1F/1
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;Total ram usage:        1 bytes
  6282 ;; Hardware stack levels used: 1
  6283 ;; Hardware stack levels required when called: 10
  6284 ;; This function calls:
  6285 ;;		Nothing
  6286 ;; This function is called by:
  6287 ;;		_Log_UtilityConvertByteToHex
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291     1F49                     _hex2str:	
  6292                           ;psect for function _hex2str
  6293                           
  6294                           
  6295                           ;incstack = 0
  6296                           ; Regs used in _hex2str: [wreg+status,2+status,0]
  6297                           ;hex2str@val stored from wreg
  6298     1F49  00A8               	movwf	hex2str@val^(0+128)
  6299                           
  6300                           ;log.c: 5:     if (val < 10) {
  6301     1F4A  300A               	movlw	10
  6302     1F4B  0228               	subwf	hex2str@val^(0+128),w
  6303     1F4C  1803               	skipnc
  6304     1F4D  2F51               	goto	l5544
  6305                           
  6306                           ;log.c: 6:         return val + '0';
  6307     1F4E  0828               	movf	hex2str@val^(0+128),w
  6308     1F4F  3E30               	addlw	48
  6309     1F50  0008               	return
  6310     1F51                     l5544:
  6311     1F51  3010               	movlw	16
  6312     1F52  0228               	subwf	hex2str@val^(0+128),w
  6313     1F53  1803               	skipnc
  6314     1F54  2F58               	goto	l5552
  6315                           
  6316                           ;log.c: 8:         return val - 10 + 'A';
  6317     1F55  0828               	movf	hex2str@val^(0+128),w
  6318     1F56  3E37               	addlw	55
  6319     1F57  0008               	return
  6320     1F58                     l5552:
  6321                           
  6322                           ;log.c: 10:         return 'X';
  6323     1F58  3058               	movlw	88
  6324     1F59  0008               	return
  6325     1F5A                     __end_of_hex2str:
  6326                           
  6327                           	psect	text25
  6328     111B                     __ptext25:	
  6329 ;; *************** function _Log_Message *****************
  6330 ;; Defined at:
  6331 ;;		line 24 in file "log.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  buf             1    wreg     PTR const unsigned char 
  6334 ;;		 -> main@scanCodeStr(6), 
  6335 ;;  bufSize         1    2[BANK1 ] unsigned char 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  buf             1    4[BANK1 ] PTR const unsigned char 
  6338 ;;		 -> main@scanCodeStr(6), 
  6339 ;;  i               1    5[BANK1 ] unsigned char 
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      void 
  6342 ;; Registers used:
  6343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : 1F/1
  6346 ;;		On exit  : 1F/1
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6349 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;Total ram usage:        4 bytes
  6354 ;; Hardware stack levels used: 1
  6355 ;; Hardware stack levels required when called: 11
  6356 ;; This function calls:
  6357 ;;		_EUSART_Write
  6358 ;;		_EUSART_is_tx_ready
  6359 ;; This function is called by:
  6360 ;;		_main
  6361 ;; This function uses a non-reentrant model
  6362 ;;
  6363                           
  6364     111B                     _Log_Message:	
  6365                           ;psect for function _Log_Message
  6366                           
  6367                           
  6368                           ;incstack = 0
  6369                           ; Regs used in _Log_Message: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6370                           ;Log_Message@buf stored from wreg
  6371     111B  00AC               	movwf	Log_Message@buf^(0+128)
  6372                           
  6373                           ;log.c: 25:     for (uint8_t i = 0; i < bufSize; i++) {
  6374     111C  01AD               	clrf	Log_Message@i^(0+128)
  6375     111D                     l5840:
  6376     111D  082A               	movf	Log_Message@bufSize^(0+128),w
  6377     111E  022D               	subwf	Log_Message@i^(0+128),w
  6378     111F  1803               	btfsc	3,0
  6379     1120  0008               	return
  6380     1121                     l5834:
  6381     1121  3188  2000  3191   	fcall	_EUSART_is_tx_ready
  6382     1124  3A00               	xorlw	0
  6383     1125  1903               	skipnz
  6384     1126  2921               	goto	l5834
  6385                           
  6386                           ;log.c: 27:         EUSART_Write(buf[i]);
  6387     1127  082D               	movf	Log_Message@i^(0+128),w
  6388     1128  072C               	addwf	Log_Message@buf^(0+128),w
  6389     1129  00AB               	movwf	??_Log_Message^(0+128)
  6390     112A  082B               	movf	??_Log_Message^(0+128),w
  6391     112B  0086               	movwf	6
  6392     112C  0187               	clrf	7
  6393     112D  0801               	movf	1,w
  6394     112E  3192  224B  3191   	fcall	_EUSART_Write
  6395                           
  6396                           ;log.c: 28:     }
  6397     1131  3001               	movlw	1
  6398     1132  00AB               	movwf	??_Log_Message^(0+128)
  6399     1133  082B               	movf	??_Log_Message^(0+128),w
  6400     1134  07AD               	addwf	Log_Message@i^(0+128),f
  6401     1135  291D               	goto	l5840
  6402     1136                     __end_of_Log_Message:
  6403                           
  6404                           	psect	text26
  6405     0800                     __ptext26:	
  6406 ;; *************** function _EUSART_is_tx_ready *****************
  6407 ;; Defined at:
  6408 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;		None
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;		None
  6413 ;; Return value:  Size  Location     Type
  6414 ;;                  1    wreg      _Bool 
  6415 ;; Registers used:
  6416 ;;		wreg, status,2, status,0
  6417 ;; Tracked objects:
  6418 ;;		On entry : 1F/1
  6419 ;;		On exit  : 1F/1
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;Total ram usage:        0 bytes
  6427 ;; Hardware stack levels used: 1
  6428 ;; Hardware stack levels required when called: 10
  6429 ;; This function calls:
  6430 ;;		Nothing
  6431 ;; This function is called by:
  6432 ;;		_Log_Message
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436     0800                     _EUSART_is_tx_ready:	
  6437                           ;psect for function _EUSART_is_tx_ready
  6438                           
  6439                           
  6440                           ;mcc_generated_files/eusart.c: 134:     return (eusartTxBufferRemaining ? 1 : 0);
  6441                           
  6442                           ;incstack = 0
  6443                           ; Regs used in _EUSART_is_tx_ready: [wreg+status,2+status,0]
  6444     0800  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6445     0801  1903               	btfsc	3,2
  6446     0802  2805               	goto	u4540
  6447     0803  3001               	movlw	1
  6448     0804  0008               	return
  6449     0805                     u4540:
  6450     0805  3000               	movlw	0
  6451     0806  0008               	return
  6452     0807                     __end_of_EUSART_is_tx_ready:
  6453                           
  6454                           	psect	text27
  6455     124B                     __ptext27:	
  6456 ;; *************** function _EUSART_Write *****************
  6457 ;; Defined at:
  6458 ;;		line 173 in file "mcc_generated_files/eusart.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;  txData          1    wreg     unsigned char 
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;  txData          1    1[BANK1 ] unsigned char 
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  1    wreg      void 
  6465 ;; Registers used:
  6466 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6467 ;; Tracked objects:
  6468 ;;		On entry : 1F/1
  6469 ;;		On exit  : 1F/1
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;Total ram usage:        2 bytes
  6477 ;; Hardware stack levels used: 1
  6478 ;; Hardware stack levels required when called: 10
  6479 ;; This function calls:
  6480 ;;		Nothing
  6481 ;; This function is called by:
  6482 ;;		_Log_Message
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486     124B                     _EUSART_Write:	
  6487                           ;psect for function _EUSART_Write
  6488                           
  6489                           
  6490                           ;incstack = 0
  6491                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6492                           ;EUSART_Write@txData stored from wreg
  6493     124B  00A9               	movwf	EUSART_Write@txData^(0+128)
  6494     124C                     l5274:	
  6495                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  6496                           
  6497                           
  6498                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  6499     124C  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6500     124D  1903               	btfsc	3,2
  6501     124E  2A4C               	goto	l5274
  6502                           
  6503                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  6504     124F  1A11               	btfsc	17,4	;volatile
  6505     1250  2A55               	goto	l261
  6506                           
  6507                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  6508     1251  0829               	movf	EUSART_Write@txData^(0+128),w
  6509     1252  0023               	movlb	3	; select bank3
  6510     1253  009A               	movwf	26	;volatile
  6511                           
  6512                           ;mcc_generated_files/eusart.c: 182:     }
  6513     1254  2A6B               	goto	l5288
  6514     1255                     l261:	
  6515                           ;mcc_generated_files/eusart.c: 183:     else
  6516                           
  6517                           
  6518                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  6519     1255  1211               	bcf	17,4	;volatile
  6520                           
  6521                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  6522     1256  0022               	movlb	2	; select bank2
  6523     1257  0868               	movf	_eusartTxHead^(0+256),w
  6524     1258  3EB8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  6525     1259  0086               	movwf	6
  6526     125A  3001               	movlw	1	; select bank3/4
  6527     125B  0087               	movwf	7
  6528     125C  0021               	movlb	1	; select bank1
  6529     125D  0829               	movf	EUSART_Write@txData^(0+128),w
  6530     125E  0081               	movwf	1
  6531     125F  3001               	movlw	1
  6532     1260  00A8               	movwf	??_EUSART_Write^(0+128)
  6533     1261  0828               	movf	??_EUSART_Write^(0+128),w
  6534     1262  0022               	movlb	2	; select bank2
  6535     1263  07E8               	addwf	_eusartTxHead^(0+256),f	;volatile
  6536                           
  6537                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6538     1264  3008               	movlw	8
  6539     1265  0268               	subwf	_eusartTxHead^(0+256),w
  6540     1266  1803               	btfsc	3,0
  6541                           
  6542                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  6543     1267  01E8               	clrf	_eusartTxHead^(0+256)	;volatile
  6544                           
  6545                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  6546     1268  3001               	movlw	1
  6547     1269  0021               	movlb	1	; select bank1
  6548     126A  02EF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  6549     126B                     l5288:
  6550                           
  6551                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  6552     126B  0021               	movlb	1	; select bank1
  6553     126C  1611               	bsf	17,4	;volatile
  6554     126D  0008               	return
  6555     126E                     __end_of_EUSART_Write:
  6556                           
  6557                           	psect	text28
  6558     0341                     __ptext28:	
  6559 ;; *************** function _APP_KeyboardTasks *****************
  6560 ;; Defined at:
  6561 ;;		line 336 in file "app_device_keyboard.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  6564 ;;		 -> main@scanCode(3), NULL(0), 
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;  scanCode        1   43[BANK1 ] PTR const struct PS2Scan
  6567 ;;		 -> main@scanCode(3), NULL(0), 
  6568 ;;  TimeDeltaMil    2   45[BANK1 ] int 
  6569 ;;  i               1   47[BANK1 ] unsigned char 
  6570 ;;  needToSendNe    1   44[BANK1 ] _Bool 
  6571 ;; Return value:  Size  Location     Type
  6572 ;;                  1    wreg      void 
  6573 ;; Registers used:
  6574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6575 ;; Tracked objects:
  6576 ;;		On entry : 1F/1
  6577 ;;		On exit  : 2/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;Total ram usage:        7 bytes
  6585 ;; Hardware stack levels used: 1
  6586 ;; Hardware stack levels required when called: 13
  6587 ;; This function calls:
  6588 ;;		_APP_KeyboardProcessOutputReport
  6589 ;;		_APP_KeyboardUpdateState
  6590 ;;		_GenericQueue_CopyToArray
  6591 ;;		_USBTransferOnePacket
  6592 ;;		_memset
  6593 ;; This function is called by:
  6594 ;;		_main
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598     0341                     _APP_KeyboardTasks:	
  6599                           ;psect for function _APP_KeyboardTasks
  6600                           
  6601                           
  6602                           ;incstack = 0
  6603                           ; Regs used in _APP_KeyboardTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6604                           ;APP_KeyboardTasks@scanCode stored from wreg
  6605     0341  00D3               	movwf	APP_KeyboardTasks@scanCode^(0+128)
  6606                           
  6607                           ;app_device_keyboard.c: 337:     signed int TimeDeltaMilliseconds;;app_device_keyboard.c
      +                          : 338:     unsigned char i;;app_device_keyboard.c: 339:     _Bool needToSendNewReportPac
      +                          ket;;app_device_keyboard.c: 342:     APP_KeyboardUpdateState(scanCode);
  6608     0342  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  6609     0343  3180  2087  3183   	fcall	_APP_KeyboardUpdateState
  6610                           
  6611                           ;app_device_keyboard.c: 347:     if (USBDeviceState < CONFIGURED_STATE) {
  6612     0346  3020               	movlw	32
  6613     0347  0020               	movlb	0	; select bank0
  6614     0348  026C               	subwf	_USBDeviceState,w
  6615     0349  1C03               	btfss	3,0
  6616     034A  0008               	return
  6617                           
  6618                           ;app_device_keyboard.c: 355:     if (UCONbits.SUSPND == 1) {
  6619                           
  6620                           ;app_device_keyboard.c: 349:     }
  6621     034B  003D               	movlb	29	; select bank29
  6622     034C  188E               	btfsc	14,1	;volatile
  6623     034D  0008               	return
  6624     034E                     l868:	
  6625                           ;app_device_keyboard.c: 371:     }
  6626                           
  6627                           
  6628                           ;app_device_keyboard.c: 369:     while (LocalSOFCount != SOFCounter) {
  6629     034E  0022               	movlb	2	; select bank2
  6630     034F  083B               	movf	(_SOFCounter+1)^(0+256),w	;volatile
  6631     0350  0637               	xorwf	(_LocalSOFCount+1)^(0+256),w
  6632     0351  1D03               	skipz
  6633     0352  2B55               	goto	u6425
  6634     0353  083A               	movf	_SOFCounter^(0+256),w	;volatile
  6635     0354  0636               	xorwf	_LocalSOFCount^(0+256),w
  6636     0355                     u6425:
  6637     0355  1903               	btfsc	3,2
  6638     0356  2B5C               	goto	l6386
  6639                           
  6640                           ;app_device_keyboard.c: 370:         LocalSOFCount = SOFCounter;
  6641     0357  083B               	movf	(_SOFCounter+1)^(0+256),w	;volatile
  6642     0358  00B7               	movwf	(_LocalSOFCount+1)^(0+256)
  6643     0359  083A               	movf	_SOFCounter^(0+256),w	;volatile
  6644     035A  00B6               	movwf	_LocalSOFCount^(0+256)
  6645     035B  2B4E               	goto	l868
  6646     035C                     l6386:
  6647                           
  6648                           ;app_device_keyboard.c: 375:     TimeDeltaMilliseconds = LocalSOFCount - OldSOFCount;
  6649     035C  0834               	movf	_OldSOFCount^(0+256),w
  6650     035D  0236               	subwf	_LocalSOFCount^(0+256),w
  6651     035E  0021               	movlb	1	; select bank1
  6652     035F  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  6653     0360  0022               	movlb	2	; select bank2
  6654     0361  0835               	movf	(_OldSOFCount+1)^(0+256),w
  6655     0362  3B37               	subwfb	(_LocalSOFCount+1)^(0+256),w
  6656     0363  0021               	movlb	1	; select bank1
  6657     0364  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  6658                           
  6659                           ;app_device_keyboard.c: 377:     if (TimeDeltaMilliseconds < 0) {
  6660     0365  1FD6               	btfss	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),7
  6661     0366  2B77               	goto	l6392
  6662                           
  6663                           ;app_device_keyboard.c: 378:         TimeDeltaMilliseconds = (32767 - OldSOFCount) + Loc
      +                          alSOFCount;
  6664     0367  0022               	movlb	2	; select bank2
  6665     0368  0834               	movf	_OldSOFCount^(0+256),w
  6666     0369  0236               	subwf	_LocalSOFCount^(0+256),w
  6667     036A  0021               	movlb	1	; select bank1
  6668     036B  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6669     036C  0022               	movlb	2	; select bank2
  6670     036D  0835               	movf	(_OldSOFCount+1)^(0+256),w
  6671     036E  3B37               	subwfb	(_LocalSOFCount+1)^(0+256),w
  6672     036F  0021               	movlb	1	; select bank1
  6673     0370  00D2               	movwf	(??_APP_KeyboardTasks+1)^(0+128)
  6674     0371  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6675     0372  3EFF               	addlw	255
  6676     0373  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  6677     0374  307F               	movlw	127
  6678     0375  3D52               	addwfc	(??_APP_KeyboardTasks+1)^(0+128),w
  6679     0376  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  6680     0377                     l6392:
  6681                           
  6682                           ;app_device_keyboard.c: 385:     if (TimeDeltaMilliseconds > 5000) {
  6683     0377  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  6684     0378  3A80               	xorlw	128
  6685     0379  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6686     037A  3093               	movlw	147
  6687     037B  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  6688     037C  1D03               	skipz
  6689     037D  2B80               	goto	u6445
  6690     037E  3089               	movlw	137
  6691     037F  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  6692     0380                     u6445:
  6693     0380  1C03               	skipc
  6694     0381  2B89               	goto	l6396
  6695                           
  6696                           ;app_device_keyboard.c: 386:         OldSOFCount = LocalSOFCount - 5000;
  6697     0382  0022               	movlb	2	; select bank2
  6698     0383  0836               	movf	_LocalSOFCount^(0+256),w
  6699     0384  3E78               	addlw	120
  6700     0385  00B4               	movwf	_OldSOFCount^(0+256)
  6701     0386  30EC               	movlw	236
  6702     0387  3D37               	addwfc	(_LocalSOFCount+1)^(0+256),w
  6703     0388  00B5               	movwf	(_OldSOFCount+1)^(0+256)
  6704     0389                     l6396:
  6705                           
  6706                           ;app_device_keyboard.c: 392:     if (((keyboard.lastINTransmission != 0x0000) && ((*(vol
      +                          atile uint8_t*)keyboard.lastINTransmission & 0x80) != 0x00)) == 0) {
  6707     0389  302C               	movlw	44
  6708     038A  0086               	movwf	6
  6709     038B  3023               	movlw	35
  6710     038C  0087               	movwf	7
  6711     038D  0016               	moviw fsr1++
  6712     038E  0401               	iorwf	1,w
  6713     038F  1903               	btfsc	3,2
  6714     0390  2BA0               	goto	l6400
  6715     0391  302C               	movlw	44
  6716     0392  0086               	movwf	6
  6717     0393  3023               	movlw	35
  6718     0394  0087               	movwf	7
  6719     0395  3F40               	moviw [0]fsr1
  6720     0396  0021               	movlb	1	; select bank1
  6721     0397  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6722     0398  3F41               	moviw [1]fsr1
  6723     0399  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  6724     039A  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6725     039B  0086               	movwf	6
  6726     039C  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  6727     039D  0087               	movwf	7
  6728     039E  1B81               	btfsc	1,7
  6729     039F  2C19               	goto	l6434
  6730     03A0                     l6400:
  6731                           
  6732                           ;app_device_keyboard.c: 394:         memset(&inputReport, 0, sizeof (inputReport));
  6733     03A0  3000               	movlw	0
  6734     03A1  0021               	movlb	1	; select bank1
  6735     03A2  00A8               	movwf	memset@c^(0+128)
  6736     03A3  00A9               	movwf	(memset@c+1)^(0+128)
  6737     03A4  3008               	movlw	8
  6738     03A5  00AA               	movwf	memset@n^(0+128)
  6739     03A6  3000               	movlw	0
  6740     03A7  00AB               	movwf	(memset@n^(0+128)+1)
  6741     03A8  30A0               	movlw	160
  6742     03A9  3190  2084  3183   	fcall	_memset
  6743                           
  6744                           ;app_device_keyboard.c: 396:         GenericQueue_CopyToArray(&keyboard.keys, inputRepor
      +                          t.keys);
  6745     03AC  3030               	movlw	48
  6746     03AD  00C0               	movwf	GenericQueue_CopyToArray@q^(0+128)
  6747     03AE  3023               	movlw	35
  6748     03AF  00C1               	movwf	(GenericQueue_CopyToArray@q^(0+128)+1)
  6749     03B0  30A2               	movlw	162
  6750     03B1  00C2               	movwf	GenericQueue_CopyToArray@array^(0+128)
  6751     03B2  3196  2668  3183   	fcall	_GenericQueue_CopyToArray
  6752                           
  6753                           ;app_device_keyboard.c: 397:         inputReport.modifiers.value = keyboard.modifiers.va
      +                          lue;
  6754     03B5  308F               	movlw	143
  6755     03B6  0086               	movwf	6
  6756     03B7  3023               	movlw	35
  6757     03B8  0087               	movwf	7
  6758     03B9  0801               	movf	1,w
  6759     03BA  00A0               	movwf	32
  6760                           
  6761                           ;app_device_keyboard.c: 400:         needToSendNewReportPacket = 0;
  6762     03BB  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6763                           
  6764                           ;app_device_keyboard.c: 401:         for (i = 0; i < sizeof (inputReport); i++) {
  6765     03BC  01D7               	clrf	APP_KeyboardTasks@i^(0+128)
  6766     03BD                     l6412:
  6767                           
  6768                           ;app_device_keyboard.c: 402:             if (*((uint8_t*) & oldInputReport + i) != *((ui
      +                          nt8_t*) & inputReport + i)) {
  6769     03BD  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  6770     03BE  3EA0               	addlw	160
  6771     03BF  0086               	movwf	6
  6772     03C0  0187               	clrf	7
  6773     03C1  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  6774     03C2  3EA0               	addlw	(low (_oldInputReport| (0+256)))& (0+255)
  6775     03C3  0084               	movwf	4
  6776     03C4  3001               	movlw	1	; select bank3/4
  6777     03C5  0085               	movwf	5
  6778     03C6  0800               	movf	0,w
  6779     03C7  0601               	xorwf	1,w
  6780     03C8  1903               	skipnz
  6781     03C9  2BCD               	goto	l6416
  6782                           
  6783                           ;app_device_keyboard.c: 403:                 needToSendNewReportPacket = 1;
  6784     03CA  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6785     03CB  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  6786                           
  6787                           ;app_device_keyboard.c: 404:                 break;
  6788     03CC  2BD5               	goto	l6420
  6789     03CD                     l6416:
  6790                           
  6791                           ;app_device_keyboard.c: 406:         }
  6792     03CD  3001               	movlw	1
  6793     03CE  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6794     03CF  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6795     03D0  07D7               	addwf	APP_KeyboardTasks@i^(0+128),f
  6796     03D1  3008               	movlw	8
  6797     03D2  0257               	subwf	APP_KeyboardTasks@i^(0+128),w
  6798     03D3  1C03               	skipc
  6799     03D4  2BBD               	goto	l6412
  6800     03D5                     l6420:
  6801                           
  6802                           ;app_device_keyboard.c: 411:         if (keyboardIdleRate != 0) {
  6803     03D5  0022               	movlb	2	; select bank2
  6804     03D6  0838               	movf	_keyboardIdleRate^(0+256),w
  6805     03D7  0439               	iorwf	(_keyboardIdleRate+1)^(0+256),w
  6806     03D8  1903               	btfsc	3,2
  6807     03D9  2BEE               	goto	l6426
  6808                           
  6809                           ;app_device_keyboard.c: 413:             if (TimeDeltaMilliseconds >= keyboardIdleRate) 
      +                          {
  6810     03DA  0021               	movlb	1	; select bank1
  6811     03DB  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  6812     03DC  3A80               	xorlw	128
  6813     03DD  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6814     03DE  0022               	movlb	2	; select bank2
  6815     03DF  0839               	movf	(_keyboardIdleRate+1)^(0+256),w
  6816     03E0  3A80               	xorlw	128
  6817     03E1  0021               	movlb	1	; select bank1
  6818     03E2  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  6819     03E3  1D03               	skipz
  6820     03E4  2BE9               	goto	u6505
  6821     03E5  0022               	movlb	2	; select bank2
  6822     03E6  0838               	movf	_keyboardIdleRate^(0+256),w
  6823     03E7  0021               	movlb	1	; select bank1
  6824     03E8  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  6825     03E9                     u6505:
  6826     03E9  1C03               	skipc
  6827     03EA  2BEE               	goto	l6426
  6828                           
  6829                           ;app_device_keyboard.c: 414:                 needToSendNewReportPacket = 1;
  6830     03EB  0021               	movlb	1	; select bank1
  6831     03EC  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6832     03ED  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  6833     03EE                     l6426:
  6834                           
  6835                           ;app_device_keyboard.c: 420:         if (needToSendNewReportPacket == 1) {
  6836     03EE  0021               	movlb	1	; select bank1
  6837     03EF  0354               	decf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),w
  6838     03F0  1D03               	btfss	3,2
  6839     03F1  2C19               	goto	l6434
  6840                           
  6841                           ;app_device_keyboard.c: 424:             oldInputReport = inputReport;
  6842     03F2  30A0               	movlw	160
  6843     03F3  0086               	movwf	6
  6844     03F4  3000               	movlw	0
  6845     03F5  0087               	movwf	7
  6846     03F6  30A0               	movlw	low _oldInputReport
  6847     03F7  0084               	movwf	4
  6848     03F8  3001               	movlw	high _oldInputReport
  6849     03F9  0085               	movwf	5
  6850     03FA  3008               	movlw	8
  6851     03FB  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6852     03FC                     u6520:
  6853     03FC  0016               	moviw fsr1++
  6854     03FD  001A               	movwi fsr0++
  6855     03FE  0BD1               	decfsz	??_APP_KeyboardTasks^(0+128),f
  6856     03FF  2BFC               	goto	u6520
  6857                           
  6858                           ;app_device_keyboard.c: 427:             keyboard.lastINTransmission = USBTransferOnePac
      +                          ket(1,1,(uint8_t*) & inputReport,sizeof (inputReport));
  6859     0400  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  6860     0401  0AA8               	incf	USBTransferOnePacket@dir^(0+128),f
  6861     0402  30A0               	movlw	160
  6862     0403  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  6863     0404  3000               	movlw	0
  6864     0405  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  6865     0406  3008               	movlw	8
  6866     0407  00AB               	movwf	USBTransferOnePacket@len^(0+128)
  6867     0408  3001               	movlw	1
  6868     0409  318B  23C1  3183   	fcall	_USBTransferOnePacket
  6869     040C  302C               	movlw	44
  6870     040D  0086               	movwf	6
  6871     040E  3023               	movlw	35
  6872     040F  0087               	movwf	7
  6873     0410  0828               	movf	?_USBTransferOnePacket^(0+128),w
  6874     0411  3FC0               	movwi [0]fsr1
  6875     0412  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  6876     0413  3FC1               	movwi [1]fsr1
  6877                           
  6878                           ;app_device_keyboard.c: 428:             OldSOFCount = LocalSOFCount;
  6879     0414  0022               	movlb	2	; select bank2
  6880     0415  0837               	movf	(_LocalSOFCount+1)^(0+256),w
  6881     0416  00B5               	movwf	(_OldSOFCount+1)^(0+256)
  6882     0417  0836               	movf	_LocalSOFCount^(0+256),w
  6883     0418  00B4               	movwf	_OldSOFCount^(0+256)
  6884     0419                     l6434:
  6885                           
  6886                           ;app_device_keyboard.c: 440:     if (((keyboard.lastOUTTransmission != 0x0000) && ((*(vo
      +                          latile uint8_t*)keyboard.lastOUTTransmission & 0x80) != 0x00)) == 0) {
  6887     0419  302C               	movlw	44
  6888     041A  0086               	movwf	6
  6889     041B  3023               	movlw	35
  6890     041C  0087               	movwf	7
  6891     041D  3142               	addfsr 1,2
  6892     041E  0016               	moviw fsr1++
  6893     041F  0401               	iorwf	1,w
  6894     0420  1903               	btfsc	3,2
  6895     0421  2C32               	goto	l6438
  6896     0422  302C               	movlw	44
  6897     0423  0086               	movwf	6
  6898     0424  3023               	movlw	35
  6899     0425  0087               	movwf	7
  6900     0426  3142               	addfsr 1,2
  6901     0427  3F40               	moviw [0]fsr1
  6902     0428  0021               	movlb	1	; select bank1
  6903     0429  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6904     042A  3F41               	moviw [1]fsr1
  6905     042B  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  6906     042C  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6907     042D  0086               	movwf	6
  6908     042E  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  6909     042F  0087               	movwf	7
  6910     0430  1B81               	btfsc	1,7
  6911     0431  0008               	return
  6912     0432                     l6438:
  6913                           
  6914                           ;app_device_keyboard.c: 441:         APP_KeyboardProcessOutputReport();
  6915     0432  319E  26B8  3183   	fcall	_APP_KeyboardProcessOutputReport
  6916                           
  6917                           ;app_device_keyboard.c: 442:         keyboard.lastOUTTransmission = USBTransferOnePacket
      +                          (1,0,(uint8_t*) & outputReport,sizeof (outputReport));
  6918     0435  0021               	movlb	1	; select bank1
  6919     0436  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  6920     0437  3020               	movlw	32
  6921     0438  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  6922     0439  3001               	movlw	1
  6923     043A  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  6924     043B  01AB               	clrf	USBTransferOnePacket@len^(0+128)
  6925     043C  0AAB               	incf	USBTransferOnePacket@len^(0+128),f
  6926     043D  3001               	movlw	1
  6927     043E  318B  23C1         	fcall	_USBTransferOnePacket
  6928     0440  302C               	movlw	44
  6929     0441  0086               	movwf	6
  6930     0442  3023               	movlw	35
  6931     0443  0087               	movwf	7
  6932     0444  3142               	addfsr 1,2
  6933     0445  0828               	movf	?_USBTransferOnePacket^(0+128),w
  6934     0446  3FC0               	movwi [0]fsr1
  6935     0447  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  6936     0448  3FC1               	movwi [1]fsr1
  6937     0449  0008               	return
  6938     044A                     __end_of_APP_KeyboardTasks:
  6939                           
  6940                           	psect	text29
  6941     1084                     __ptext29:	
  6942 ;; *************** function _memset *****************
  6943 ;; Defined at:
  6944 ;;		line 3 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memset.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;  dest            1    wreg     PTR void 
  6947 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  6948 ;;  c               2    0[BANK1 ] int 
  6949 ;;  n               2    2[BANK1 ] unsigned int 
  6950 ;; Auto vars:     Size  Location     Type
  6951 ;;  dest            1    6[BANK1 ] PTR void 
  6952 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  6953 ;;  p               1    5[BANK1 ] PTR unsigned char 
  6954 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  6955 ;; Return value:  Size  Location     Type
  6956 ;;                  1    wreg      PTR void 
  6957 ;; Registers used:
  6958 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6959 ;; Tracked objects:
  6960 ;;		On entry : 1F/1
  6961 ;;		On exit  : 1F/1
  6962 ;;		Unchanged: 0/0
  6963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6964 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6965 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6966 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6967 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6968 ;;Total ram usage:        7 bytes
  6969 ;; Hardware stack levels used: 1
  6970 ;; Hardware stack levels required when called: 10
  6971 ;; This function calls:
  6972 ;;		Nothing
  6973 ;; This function is called by:
  6974 ;;		_APP_KeyboardTasks
  6975 ;; This function uses a non-reentrant model
  6976 ;;
  6977                           
  6978     1084                     _memset:	
  6979                           ;psect for function _memset
  6980                           
  6981                           
  6982                           ;incstack = 0
  6983                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6984                           ;memset@dest stored from wreg
  6985     1084  00AE               	movwf	memset@dest^(0+128)
  6986     1085  082E               	movf	memset@dest^(0+128),w
  6987     1086  00AD               	movwf	memset@p^(0+128)
  6988     1087                     l5396:
  6989     1087  3001               	movlw	1
  6990     1088  02AA               	subwf	memset@n^(0+128),f
  6991     1089  3000               	movlw	0
  6992     108A  3BAB               	subwfb	(memset@n+1)^(0+128),f
  6993     108B  0A2A               	incf	memset@n^(0+128),w
  6994     108C  1903               	btfsc	3,2
  6995     108D  0A2B               	incf	(memset@n+1)^(0+128),w
  6996     108E  1903               	btfsc	3,2
  6997     108F  0008               	return
  6998     1090  082D               	movf	memset@p^(0+128),w
  6999     1091  0086               	movwf	6
  7000     1092  0187               	clrf	7
  7001     1093  0828               	movf	memset@c^(0+128),w
  7002     1094  0081               	movwf	1
  7003     1095  3001               	movlw	1
  7004     1096  00AC               	movwf	??_memset^(0+128)
  7005     1097  082C               	movf	??_memset^(0+128),w
  7006     1098  07AD               	addwf	memset@p^(0+128),f
  7007     1099  2887               	goto	l5396
  7008     109A                     __end_of_memset:
  7009                           
  7010                           	psect	text30
  7011     0BC1                     __ptext30:	
  7012 ;; *************** function _USBTransferOnePacket *****************
  7013 ;; Defined at:
  7014 ;;		line 999 in file "usb/usb_device.c"
  7015 ;; Parameters:    Size  Location     Type
  7016 ;;  ep              1    wreg     unsigned char 
  7017 ;;  dir             1    0[BANK1 ] unsigned char 
  7018 ;;  data            2    1[BANK1 ] PTR unsigned char 
  7019 ;;		 -> inputReport(8), outputReport(1), 
  7020 ;;  len             1    3[BANK1 ] unsigned char 
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;  ep              1    8[BANK1 ] unsigned char 
  7023 ;;  handle          2    9[BANK1 ] PTR volatile struct __BD
  7024 ;;		 -> RAM(4096), NULL(0), BDT(32), 
  7025 ;; Return value:  Size  Location     Type
  7026 ;;                  2    0[BANK1 ] PTR void 
  7027 ;; Registers used:
  7028 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7029 ;; Tracked objects:
  7030 ;;		On entry : 1F/1
  7031 ;;		On exit  : 1F/1
  7032 ;;		Unchanged: 0/0
  7033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7034 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;Total ram usage:       11 bytes
  7039 ;; Hardware stack levels used: 1
  7040 ;; Hardware stack levels required when called: 10
  7041 ;; This function calls:
  7042 ;;		Nothing
  7043 ;; This function is called by:
  7044 ;;		_APP_KeyboardTasks
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048     0BC1                     _USBTransferOnePacket:	
  7049                           ;psect for function _USBTransferOnePacket
  7050                           
  7051                           
  7052                           ;incstack = 0
  7053                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  7054                           ;USBTransferOnePacket@ep stored from wreg
  7055     0BC1  00B0               	movwf	USBTransferOnePacket@ep^(0+128)
  7056                           
  7057                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
  7058     0BC2  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  7059     0BC3  1903               	btfsc	3,2
  7060     0BC4  2BCD               	goto	l5366
  7061                           
  7062                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
  7063     0BC5  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7064     0BC6  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7065     0BC7  0086               	movwf	6
  7066     0BC8  0187               	clrf	7
  7067     0BC9  3F40               	moviw [0]fsr1
  7068     0BCA  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  7069     0BCB  3F41               	moviw [1]fsr1
  7070     0BCC  2BD5               	goto	L3
  7071     0BCD                     l5366:	
  7072                           ;usb/usb_device.c: 1008:     }
  7073                           
  7074                           
  7075                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
  7076     0BCD  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7077     0BCE  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7078     0BCF  0086               	movwf	6
  7079     0BD0  3001               	movlw	1	; select bank2/3
  7080     0BD1  0087               	movwf	7
  7081     0BD2  3F40               	moviw [0]fsr1
  7082     0BD3  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  7083     0BD4  3F41               	moviw [1]fsr1
  7084     0BD5                     L3:
  7085     0BD5  00B2               	movwf	(USBTransferOnePacket@handle+1)^(0+128)
  7086                           
  7087                           ;usb/usb_device.c: 1017:     if(handle == 0)
  7088     0BD6  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7089     0BD7  0432               	iorwf	(USBTransferOnePacket@handle+1)^(0+128),w
  7090     0BD8  1D03               	btfss	3,2
  7091     0BD9  2BDD               	goto	l5374
  7092                           
  7093                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
  7094     0BDA  01A8               	clrf	?_USBTransferOnePacket^(0+128)
  7095     0BDB  01A9               	clrf	(?_USBTransferOnePacket+1)^(0+128)
  7096     0BDC  0008               	return
  7097     0BDD                     l5374:
  7098                           
  7099                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
  7100     0BDD  30FF               	movlw	255
  7101     0BDE  0529               	andwf	USBTransferOnePacket@data^(0+128),w
  7102     0BDF  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7103     0BE0  307F               	movlw	127
  7104     0BE1  052A               	andwf	(USBTransferOnePacket@data+1)^(0+128),w
  7105     0BE2  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  7106     0BE3  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7107     0BE4  0086               	movwf	6
  7108     0BE5  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7109     0BE6  0087               	movwf	7
  7110     0BE7  3142               	addfsr 1,2
  7111     0BE8  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7112     0BE9  3FC0               	movwi [0]fsr1
  7113     0BEA  082D               	movf	(??_USBTransferOnePacket^(0+128)+1),w
  7114     0BEB  3FC1               	movwi [1]fsr1
  7115                           
  7116                           ;usb/usb_device.c: 1034:     handle->CNT = len;
  7117     0BEC  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7118     0BED  3E01               	addlw	1
  7119     0BEE  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7120     0BEF  3000               	movlw	0
  7121     0BF0  3D32               	addwfc	(USBTransferOnePacket@handle+1)^(0+128),w
  7122     0BF1  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  7123     0BF2  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7124     0BF3  0086               	movwf	6
  7125     0BF4  082D               	movf	(??_USBTransferOnePacket+1)^(0+128),w
  7126     0BF5  0087               	movwf	7
  7127     0BF6  082B               	movf	USBTransferOnePacket@len^(0+128),w
  7128     0BF7  0081               	movwf	1
  7129                           
  7130                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
  7131     0BF8  3040               	movlw	64
  7132     0BF9  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7133     0BFA  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7134     0BFB  0086               	movwf	6
  7135     0BFC  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7136     0BFD  0087               	movwf	7
  7137     0BFE  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7138     0BFF  0581               	andwf	1,f
  7139                           
  7140                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
  7141     0C00  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7142     0C01  0086               	movwf	6
  7143     0C02  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7144     0C03  0087               	movwf	7
  7145     0C04  1581               	bsf	1,3
  7146                           
  7147                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
  7148     0C05  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7149     0C06  0086               	movwf	6
  7150     0C07  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7151     0C08  0087               	movwf	7
  7152     0C09  1781               	bsf	1,7
  7153                           
  7154                           ;usb/usb_device.c: 1040:     if(dir != 0)
  7155     0C0A  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  7156     0C0B  1903               	btfsc	3,2
  7157     0C0C  2C24               	goto	l5384
  7158                           
  7159                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
  7160     0C0D  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7161     0C0E  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7162     0C0F  0086               	movwf	6
  7163     0C10  0187               	clrf	7
  7164     0C11  3F40               	moviw [0]fsr1
  7165     0C12  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7166     0C13  3F41               	moviw [1]fsr1
  7167     0C14  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  7168     0C15  3004               	movlw	4
  7169     0C16  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  7170     0C17  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  7171     0C18  3000               	movlw	0
  7172     0C19  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  7173     0C1A  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  7174     0C1B  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7175     0C1C  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7176     0C1D  0086               	movwf	6
  7177     0C1E  0187               	clrf	7
  7178     0C1F  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  7179     0C20  3FC0               	movwi [0]fsr1
  7180     0C21  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  7181     0C22  3FC1               	movwi [1]fsr1
  7182                           
  7183                           ;usb/usb_device.c: 1044:     }
  7184     0C23  2C3C               	goto	l5386
  7185     0C24                     l5384:
  7186                           
  7187                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
  7188     0C24  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7189     0C25  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7190     0C26  0086               	movwf	6
  7191     0C27  3001               	movlw	1	; select bank2/3
  7192     0C28  0087               	movwf	7
  7193     0C29  3F40               	moviw [0]fsr1
  7194     0C2A  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7195     0C2B  3F41               	moviw [1]fsr1
  7196     0C2C  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  7197     0C2D  3004               	movlw	4
  7198     0C2E  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  7199     0C2F  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  7200     0C30  3000               	movlw	0
  7201     0C31  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  7202     0C32  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  7203     0C33  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7204     0C34  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7205     0C35  0086               	movwf	6
  7206     0C36  3001               	movlw	1	; select bank2/3
  7207     0C37  0087               	movwf	7
  7208     0C38  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  7209     0C39  3FC0               	movwi [0]fsr1
  7210     0C3A  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  7211     0C3B  3FC1               	movwi [1]fsr1
  7212     0C3C                     l5386:
  7213                           
  7214                           ;usb/usb_device.c: 1050:     return (void*)handle;
  7215     0C3C  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7216     0C3D  00A9               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  7217     0C3E  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7218     0C3F  00A8               	movwf	?_USBTransferOnePacket^(0+128)
  7219     0C40  0008               	return
  7220     0C41                     __end_of_USBTransferOnePacket:
  7221                           
  7222                           	psect	text31
  7223     1668                     __ptext31:	
  7224 ;; *************** function _GenericQueue_CopyToArray *****************
  7225 ;; Defined at:
  7226 ;;		line 63 in file "generic_queue.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;  q               2   24[BANK1 ] PTR struct .
  7229 ;;		 -> keyboard(101), 
  7230 ;;  array           1   26[BANK1 ] PTR void 
  7231 ;;		 -> inputReport(8), 
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;  count           1   32[BANK1 ] unsigned char 
  7234 ;;  index           1   31[BANK1 ] unsigned char 
  7235 ;; Return value:  Size  Location     Type
  7236 ;;                  1    wreg      void 
  7237 ;; Registers used:
  7238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7239 ;; Tracked objects:
  7240 ;;		On entry : 1F/1
  7241 ;;		On exit  : 1F/1
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7244 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;Total ram usage:        9 bytes
  7249 ;; Hardware stack levels used: 1
  7250 ;; Hardware stack levels required when called: 11
  7251 ;; This function calls:
  7252 ;;		___awmod
  7253 ;;		___bmul
  7254 ;;		___wmul
  7255 ;;		_memcpy
  7256 ;; This function is called by:
  7257 ;;		_APP_KeyboardTasks
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261     1668                     _GenericQueue_CopyToArray:	
  7262                           ;psect for function _GenericQueue_CopyToArray
  7263                           
  7264                           
  7265                           ;generic_queue.c: 64:     uint8_t index = q->front;
  7266                           
  7267                           ;incstack = 0
  7268                           ; Regs used in _GenericQueue_CopyToArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7269     1668  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7270     1669  3E5C               	addlw	92
  7271     166A  0086               	movwf	6
  7272     166B  3000               	movlw	0
  7273     166C  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7274     166D  0087               	movwf	7
  7275     166E  0801               	movf	1,w
  7276     166F  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  7277                           
  7278                           ;generic_queue.c: 65:     uint8_t count = 0;
  7279     1670  01C8               	clrf	GenericQueue_CopyToArray@count^(0+128)
  7280     1671                     l1147:	
  7281                           ;generic_queue.c: 72:     }
  7282                           
  7283                           ;generic_queue.c: 66:     while (count < q->size) {
  7284                           
  7285                           
  7286                           ;generic_queue.c: 66:     while (count < q->size) {
  7287     1671  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7288     1672  3E5E               	addlw	94
  7289     1673  0086               	movwf	6
  7290     1674  3000               	movlw	0
  7291     1675  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7292     1676  0087               	movwf	7
  7293     1677  0801               	movf	1,w
  7294     1678  0248               	subwf	GenericQueue_CopyToArray@count^(0+128),w
  7295     1679  1803               	btfsc	3,0
  7296     167A  0008               	return
  7297                           
  7298                           ;generic_queue.c: 67:         memcpy((char*)array + (count * q->element_size),
  7299     167B  0848               	movf	GenericQueue_CopyToArray@count^(0+128),w
  7300     167C  00A8               	movwf	___bmul@multiplicand^(0+128)
  7301     167D  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7302     167E  3E5A               	addlw	90
  7303     167F  0086               	movwf	6
  7304     1680  3000               	movlw	0
  7305     1681  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7306     1682  0087               	movwf	7
  7307     1683  0801               	movf	1,w
  7308     1684  319F  2738  3196   	fcall	___bmul
  7309     1687  0742               	addwf	GenericQueue_CopyToArray@array^(0+128),w
  7310     1688  00B5               	movwf	memcpy@d1^(0+128)
  7311     1689  01B6               	clrf	(memcpy@d1+1)^(0+128)
  7312     168A  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  7313     168B  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  7314     168C  01C4               	clrf	(??_GenericQueue_CopyToArray^(0+128)+1)
  7315     168D  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  7316     168E  00AF               	movwf	___wmul@multiplier^(0+128)
  7317     168F  0844               	movf	(??_GenericQueue_CopyToArray+1)^(0+128),w
  7318     1690  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  7319     1691  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7320     1692  3E5A               	addlw	90
  7321     1693  0086               	movwf	6
  7322     1694  3000               	movlw	0
  7323     1695  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7324     1696  0087               	movwf	7
  7325     1697  3F40               	moviw [0]fsr1
  7326     1698  00B1               	movwf	___wmul@multiplicand^(0+128)
  7327     1699  3F41               	moviw [1]fsr1
  7328     169A  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  7329     169B  3191  2100  3196   	fcall	___wmul
  7330     169E  082F               	movf	?___wmul^(0+128),w
  7331     169F  0740               	addwf	GenericQueue_CopyToArray@q^(0+128),w
  7332     16A0  00C5               	movwf	(??_GenericQueue_CopyToArray+2)^(0+128)
  7333     16A1  0830               	movf	(?___wmul+1)^(0+128),w
  7334     16A2  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7335     16A3  00C6               	movwf	(??_GenericQueue_CopyToArray+3)^(0+128)
  7336     16A4  0845               	movf	(??_GenericQueue_CopyToArray+2)^(0+128),w
  7337     16A5  00B7               	movwf	memcpy@s1^(0+128)
  7338     16A6  0846               	movf	(??_GenericQueue_CopyToArray+3)^(0+128),w
  7339     16A7  00B8               	movwf	(memcpy@s1+1)^(0+128)
  7340     16A8  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7341     16A9  3E5A               	addlw	90
  7342     16AA  0086               	movwf	6
  7343     16AB  3000               	movlw	0
  7344     16AC  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7345     16AD  0087               	movwf	7
  7346     16AE  3F40               	moviw [0]fsr1
  7347     16AF  00B9               	movwf	memcpy@n^(0+128)
  7348     16B0  3F41               	moviw [1]fsr1
  7349     16B1  00BA               	movwf	(memcpy@n+1)^(0+128)
  7350     16B2  3192  22B9  3196   	fcall	_memcpy
  7351                           
  7352                           ;generic_queue.c: 70:         index = (index + 1) % 15;
  7353     16B5  300F               	movlw	15
  7354     16B6  00A8               	movwf	___awmod@divisor^(0+128)
  7355     16B7  3000               	movlw	0
  7356     16B8  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  7357     16B9  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  7358     16BA  3E01               	addlw	1
  7359     16BB  00AA               	movwf	___awmod@dividend^(0+128)
  7360     16BC  3000               	movlw	0
  7361     16BD  1803               	skipnc
  7362     16BE  3001               	movlw	1
  7363     16BF  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  7364     16C0  3194  248D  3196   	fcall	___awmod
  7365     16C3  0828               	movf	?___awmod^(0+128),w
  7366     16C4  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  7367                           
  7368                           ;generic_queue.c: 71:         count++;
  7369     16C5  3001               	movlw	1
  7370     16C6  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  7371     16C7  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  7372     16C8  07C8               	addwf	GenericQueue_CopyToArray@count^(0+128),f
  7373     16C9  2E71               	goto	l1147
  7374     16CA                     __end_of_GenericQueue_CopyToArray:
  7375                           
  7376                           	psect	text32
  7377     1F38                     __ptext32:	
  7378 ;; *************** function ___bmul *****************
  7379 ;; Defined at:
  7380 ;;		line 4 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/Umul8.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;  multiplier      1    wreg     unsigned char 
  7383 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;  multiplier      1    3[BANK1 ] unsigned char 
  7386 ;;  product         1    2[BANK1 ] unsigned char 
  7387 ;; Return value:  Size  Location     Type
  7388 ;;                  1    wreg      unsigned char 
  7389 ;; Registers used:
  7390 ;;		wreg, status,2, status,0
  7391 ;; Tracked objects:
  7392 ;;		On entry : 1F/1
  7393 ;;		On exit  : 1F/1
  7394 ;;		Unchanged: 0/0
  7395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7396 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7397 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7398 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7399 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;Total ram usage:        4 bytes
  7401 ;; Hardware stack levels used: 1
  7402 ;; Hardware stack levels required when called: 10
  7403 ;; This function calls:
  7404 ;;		Nothing
  7405 ;; This function is called by:
  7406 ;;		_GenericQueue_CopyToArray
  7407 ;;		_Log_UtilityConvertByteToHex
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411     1F38                     ___bmul:	
  7412                           ;psect for function ___bmul
  7413                           
  7414                           
  7415                           ;incstack = 0
  7416                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7417                           ;___bmul@multiplier stored from wreg
  7418     1F38  00AB               	movwf	___bmul@multiplier^(0+128)
  7419     1F39  01AA               	clrf	___bmul@product^(0+128)
  7420     1F3A                     l5054:
  7421     1F3A  1C2B               	btfss	___bmul@multiplier^(0+128),0
  7422     1F3B  2F40               	goto	l5058
  7423     1F3C  0828               	movf	___bmul@multiplicand^(0+128),w
  7424     1F3D  00A9               	movwf	??___bmul^(0+128)
  7425     1F3E  0829               	movf	??___bmul^(0+128),w
  7426     1F3F  07AA               	addwf	___bmul@product^(0+128),f
  7427     1F40                     l5058:
  7428     1F40  1003               	clrc
  7429     1F41  0DA8               	rlf	___bmul@multiplicand^(0+128),f
  7430     1F42  1003               	clrc
  7431     1F43  0CAB               	rrf	___bmul@multiplier^(0+128),f
  7432     1F44  082B               	movf	___bmul@multiplier^(0+128),w
  7433     1F45  1D03               	btfss	3,2
  7434     1F46  2F3A               	goto	l5054
  7435     1F47  082A               	movf	___bmul@product^(0+128),w
  7436     1F48  0008               	return
  7437     1F49                     __end_of___bmul:
  7438                           
  7439                           	psect	text33
  7440     0087                     __ptext33:	
  7441 ;; *************** function _APP_KeyboardUpdateState *****************
  7442 ;; Defined at:
  7443 ;;		line 453 in file "app_device_keyboard.c"
  7444 ;; Parameters:    Size  Location     Type
  7445 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  7446 ;;		 -> main@scanCode(3), NULL(0), 
  7447 ;; Auto vars:     Size  Location     Type
  7448 ;;  scanCode        1   40[BANK1 ] PTR const struct PS2Scan
  7449 ;;		 -> main@scanCode(3), NULL(0), 
  7450 ;;  usbHidCode      1   39[BANK1 ] unsigned char 
  7451 ;;  leds            1   35[BANK1 ] unsigned char 
  7452 ;;  usbHidCode      1   37[BANK1 ] unsigned char 
  7453 ;;  usbHidCode      1   38[BANK1 ] unsigned char 
  7454 ;;  usbHidCode      1   36[BANK1 ] unsigned char 
  7455 ;; Return value:  Size  Location     Type
  7456 ;;                  1    wreg      void 
  7457 ;; Registers used:
  7458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7459 ;; Tracked objects:
  7460 ;;		On entry : 1F/1
  7461 ;;		On exit  : 1C/0
  7462 ;;		Unchanged: 0/0
  7463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;Total ram usage:        8 bytes
  7469 ;; Hardware stack levels used: 1
  7470 ;; Hardware stack levels required when called: 12
  7471 ;; This function calls:
  7472 ;;		_GenericQueue_Contains
  7473 ;;		_GenericQueue_Enqueue
  7474 ;;		_GenericQueue_Remove
  7475 ;;		_PS2Keyboard_GetLastCommand
  7476 ;;		_PS2Keyboard_SendCommand
  7477 ;;		_PS2USB_ScanCodeToUSBHID
  7478 ;; This function is called by:
  7479 ;;		_APP_KeyboardTasks
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483     0087                     _APP_KeyboardUpdateState:	
  7484                           ;psect for function _APP_KeyboardUpdateState
  7485                           
  7486                           
  7487                           ;incstack = 0
  7488                           ; Regs used in _APP_KeyboardUpdateState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7489                           ;APP_KeyboardUpdateState@scanCode stored from wreg
  7490     0087  00D0               	movwf	APP_KeyboardUpdateState@scanCode^(0+128)
  7491                           
  7492                           ;app_device_keyboard.c: 454:     if (scanCode != ((void*)0)) {
  7493     0088  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7494     0089  1903               	btfsc	3,2
  7495     008A  0008               	return
  7496                           
  7497                           ;app_device_keyboard.c: 455:         if (scanCode->isExtend) {
  7498     008B  0A50               	incf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7499     008C  0086               	movwf	6
  7500     008D  0187               	clrf	7
  7501     008E  0801               	movf	1,w
  7502     008F  1903               	btfsc	3,2
  7503     0090  28F6               	goto	l6276
  7504                           
  7505                           ;app_device_keyboard.c: 456:             if (scanCode->isBreak) {
  7506     0091  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7507     0092  3E02               	addlw	2
  7508     0093  0086               	movwf	6
  7509     0094  0187               	clrf	7
  7510     0095  0801               	movf	1,w
  7511     0096  1903               	btfsc	3,2
  7512     0097  28C0               	goto	l6264
  7513                           
  7514                           ;app_device_keyboard.c: 457:                 if (scanCode->value == 0X14) {
  7515     0098  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7516     0099  0086               	movwf	6
  7517     009A  0187               	clrf	7
  7518     009B  3014               	movlw	20
  7519     009C  0601               	xorwf	1,w
  7520     009D  1D03               	btfss	3,2
  7521     009E  28A5               	goto	l6258
  7522                           
  7523                           ;app_device_keyboard.c: 458:                     keyboard.modifiers.bits.rightControl = 
      +                          0;
  7524     009F  308F               	movlw	143
  7525     00A0  0086               	movwf	6
  7526     00A1  3023               	movlw	35
  7527     00A2  0087               	movwf	7
  7528     00A3  1201               	bcf	1,4
  7529                           
  7530                           ;app_device_keyboard.c: 459:                 } else if (scanCode->value == 0x11) {
  7531     00A4  0008               	return
  7532     00A5                     l6258:
  7533     00A5  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7534     00A6  0086               	movwf	6
  7535     00A7  0187               	clrf	7
  7536     00A8  3011               	movlw	17
  7537     00A9  0601               	xorwf	1,w
  7538     00AA  1D03               	btfss	3,2
  7539     00AB  28B2               	goto	l6262
  7540                           
  7541                           ;app_device_keyboard.c: 460:                     keyboard.modifiers.bits.rightAlt = 0;
  7542     00AC  308F               	movlw	143
  7543     00AD  0086               	movwf	6
  7544     00AE  3023               	movlw	35
  7545     00AF  0087               	movwf	7
  7546     00B0  1301               	bcf	1,6
  7547                           
  7548                           ;app_device_keyboard.c: 461:                 } else {
  7549     00B1  0008               	return
  7550     00B2                     l6262:
  7551                           
  7552                           ;app_device_keyboard.c: 462:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7553     00B2  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7554     00B3  3191  21AA  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7555     00B6  00CC               	movwf	APP_KeyboardUpdateState@usbHidCode^(0+128)
  7556                           
  7557                           ;app_device_keyboard.c: 463:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  7558     00B7  3030               	movlw	48
  7559     00B8  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  7560     00B9  3023               	movlw	35
  7561     00BA  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  7562     00BB  30CC               	movlw	(low (APP_KeyboardUpdateState@usbHidCode| 0))& (0+255)
  7563     00BC  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  7564     00BD  3186  263E         	fcall	_GenericQueue_Remove
  7565                           
  7566                           ;app_device_keyboard.c: 465:             } else {
  7567     00BF  0008               	return
  7568     00C0                     l6264:
  7569                           
  7570                           ;app_device_keyboard.c: 466:                 if (scanCode->value == 0X14) {
  7571     00C0  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7572     00C1  0086               	movwf	6
  7573     00C2  0187               	clrf	7
  7574     00C3  3014               	movlw	20
  7575     00C4  0601               	xorwf	1,w
  7576     00C5  1D03               	btfss	3,2
  7577     00C6  28CD               	goto	l6268
  7578                           
  7579                           ;app_device_keyboard.c: 467:                     keyboard.modifiers.bits.rightControl = 
      +                          1;
  7580     00C7  308F               	movlw	143
  7581     00C8  0086               	movwf	6
  7582     00C9  3023               	movlw	35
  7583     00CA  0087               	movwf	7
  7584     00CB  1601               	bsf	1,4
  7585                           
  7586                           ;app_device_keyboard.c: 468:                 } else if (scanCode->value == 0x11) {
  7587     00CC  0008               	return
  7588     00CD                     l6268:
  7589     00CD  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7590     00CE  0086               	movwf	6
  7591     00CF  0187               	clrf	7
  7592     00D0  3011               	movlw	17
  7593     00D1  0601               	xorwf	1,w
  7594     00D2  1D03               	btfss	3,2
  7595     00D3  28DA               	goto	l6272
  7596                           
  7597                           ;app_device_keyboard.c: 469:                     keyboard.modifiers.bits.rightAlt = 1;
  7598     00D4  308F               	movlw	143
  7599     00D5  0086               	movwf	6
  7600     00D6  3023               	movlw	35
  7601     00D7  0087               	movwf	7
  7602     00D8  1701               	bsf	1,6
  7603                           
  7604                           ;app_device_keyboard.c: 470:                 } else {
  7605     00D9  0008               	return
  7606     00DA                     l6272:
  7607                           
  7608                           ;app_device_keyboard.c: 471:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7609     00DA  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7610     00DB  3191  21AA  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7611     00DE  00CE               	movwf	APP_KeyboardUpdateState@usbHidCode_2856^(0+128)
  7612                           
  7613                           ;app_device_keyboard.c: 472:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  7614     00DF  3030               	movlw	48
  7615     00E0  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  7616     00E1  3023               	movlw	35
  7617     00E2  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  7618     00E3  30CE               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2856| 0))& (0+255)
  7619     00E4  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  7620     00E5  3196  2606  3180   	fcall	_GenericQueue_Contains
  7621     00E8  3A00               	xorlw	0
  7622     00E9  1D03               	skipz
  7623     00EA  0008               	return
  7624                           
  7625                           ;app_device_keyboard.c: 473:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  7626     00EB  3030               	movlw	48
  7627     00EC  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  7628     00ED  3023               	movlw	35
  7629     00EE  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  7630     00EF  30CE               	movlw	low APP_KeyboardUpdateState@usbHidCode_2856
  7631     00F0  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  7632     00F1  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2856
  7633     00F2  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  7634     00F3  3188  2032         	fcall	_GenericQueue_Enqueue
  7635     00F5  0008               	return
  7636     00F6                     l6276:
  7637                           
  7638                           ;app_device_keyboard.c: 478:             if (scanCode->isBreak) {
  7639     00F6  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7640     00F7  3E02               	addlw	2
  7641     00F8  0086               	movwf	6
  7642     00F9  0187               	clrf	7
  7643     00FA  0801               	movf	1,w
  7644     00FB  1903               	btfsc	3,2
  7645     00FC  295E               	goto	l6308
  7646                           
  7647                           ;app_device_keyboard.c: 480:                 if (scanCode->value == 0x12) {
  7648     00FD  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7649     00FE  0086               	movwf	6
  7650     00FF  0187               	clrf	7
  7651     0100  3012               	movlw	18
  7652     0101  0601               	xorwf	1,w
  7653     0102  1D03               	btfss	3,2
  7654     0103  290A               	goto	l6282
  7655                           
  7656                           ;app_device_keyboard.c: 481:                     keyboard.modifiers.bits.leftShift = 0;
  7657     0104  308F               	movlw	143
  7658     0105  0086               	movwf	6
  7659     0106  3023               	movlw	35
  7660     0107  0087               	movwf	7
  7661     0108  1081               	bcf	1,1
  7662                           
  7663                           ;app_device_keyboard.c: 482:                 } else if (scanCode->value == 0X14) {
  7664     0109  0008               	return
  7665     010A                     l6282:
  7666     010A  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7667     010B  0086               	movwf	6
  7668     010C  0187               	clrf	7
  7669     010D  3014               	movlw	20
  7670     010E  0601               	xorwf	1,w
  7671     010F  1D03               	btfss	3,2
  7672     0110  291B               	goto	l6288
  7673                           
  7674                           ;app_device_keyboard.c: 483:                     if (oreflag == 0) {
  7675     0111  0022               	movlb	2	; select bank2
  7676     0112  0856               	movf	_oreflag^(0+256),w
  7677     0113  1D03               	btfss	3,2
  7678     0114  0008               	return
  7679                           
  7680                           ;app_device_keyboard.c: 485:                       keyboard.modifiers.bits.leftControl =
      +                           0;
  7681     0115  308F               	movlw	143
  7682     0116  0086               	movwf	6
  7683     0117  3023               	movlw	35
  7684     0118  0087               	movwf	7
  7685     0119  1001               	bcf	1,0
  7686     011A  0008               	return
  7687     011B                     l6288:
  7688     011B  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7689     011C  0086               	movwf	6
  7690     011D  0187               	clrf	7
  7691     011E  3011               	movlw	17
  7692     011F  0601               	xorwf	1,w
  7693     0120  1D03               	btfss	3,2
  7694     0121  2928               	goto	l6292
  7695                           
  7696                           ;app_device_keyboard.c: 488:                     keyboard.modifiers.bits.leftAlt = 0;
  7697     0122  308F               	movlw	143
  7698     0123  0086               	movwf	6
  7699     0124  3023               	movlw	35
  7700     0125  0087               	movwf	7
  7701     0126  1101               	bcf	1,2
  7702                           
  7703                           ;app_device_keyboard.c: 489:                 } else if (scanCode->value == 0x59) {
  7704     0127  0008               	return
  7705     0128                     l6292:
  7706     0128  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7707     0129  0086               	movwf	6
  7708     012A  0187               	clrf	7
  7709     012B  3059               	movlw	89
  7710     012C  0601               	xorwf	1,w
  7711     012D  1D03               	btfss	3,2
  7712     012E  2935               	goto	l6296
  7713                           
  7714                           ;app_device_keyboard.c: 490:                     keyboard.modifiers.bits.rightShift = 0;
  7715     012F  308F               	movlw	143
  7716     0130  0086               	movwf	6
  7717     0131  3023               	movlw	35
  7718     0132  0087               	movwf	7
  7719     0133  1281               	bcf	1,5
  7720                           
  7721                           ;app_device_keyboard.c: 491:                 } else if (scanCode->value == 0x58) {
  7722     0134  0008               	return
  7723     0135                     l6296:
  7724     0135  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7725     0136  0086               	movwf	6
  7726     0137  0187               	clrf	7
  7727     0138  3058               	movlw	88
  7728     0139  0601               	xorwf	1,w
  7729     013A  1D03               	btfss	3,2
  7730     013B  2942               	goto	l6300
  7731                           
  7732                           ;app_device_keyboard.c: 492:                     keyboard.modifiers.bits.leftGUI = 0;
  7733     013C  308F               	movlw	143
  7734     013D  0086               	movwf	6
  7735     013E  3023               	movlw	35
  7736     013F  0087               	movwf	7
  7737     0140  1181               	bcf	1,3
  7738                           
  7739                           ;app_device_keyboard.c: 493:                 } else if (scanCode->value == 0x77 && orefl
      +                          ag == 1) {
  7740     0141  0008               	return
  7741     0142                     l6300:
  7742     0142  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7743     0143  0086               	movwf	6
  7744     0144  0187               	clrf	7
  7745     0145  3077               	movlw	119
  7746     0146  0601               	xorwf	1,w
  7747     0147  1D03               	btfss	3,2
  7748     0148  294F               	goto	l6306
  7749     0149  0022               	movlb	2	; select bank2
  7750     014A  0356               	decf	_oreflag^(0+256),w
  7751     014B  1D03               	btfss	3,2
  7752     014C  294F               	goto	l6306
  7753                           
  7754                           ;app_device_keyboard.c: 495:                   oreflag=0;
  7755     014D  01D6               	clrf	_oreflag^(0+256)
  7756                           
  7757                           ;app_device_keyboard.c: 496:                 } else {
  7758     014E  0008               	return
  7759     014F                     l6306:
  7760                           
  7761                           ;app_device_keyboard.c: 497:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7762     014F  0021               	movlb	1	; select bank1
  7763     0150  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7764     0151  3191  21AA  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7765     0154  00CD               	movwf	APP_KeyboardUpdateState@usbHidCode_2857^(0+128)
  7766                           
  7767                           ;app_device_keyboard.c: 498:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  7768     0155  3030               	movlw	48
  7769     0156  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  7770     0157  3023               	movlw	35
  7771     0158  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  7772     0159  30CD               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2857| 0))& (0+255)
  7773     015A  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  7774     015B  3186  263E         	fcall	_GenericQueue_Remove
  7775     015D  0008               	return
  7776     015E                     l6308:
  7777     015E  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7778     015F  0086               	movwf	6
  7779     0160  0187               	clrf	7
  7780     0161  30E1               	movlw	225
  7781     0162  0601               	xorwf	1,w
  7782     0163  1D03               	btfss	3,2
  7783     0164  2969               	goto	l6312
  7784                           
  7785                           ;app_device_keyboard.c: 502:                   oreflag = 1;
  7786     0165  0022               	movlb	2	; select bank2
  7787     0166  01D6               	clrf	_oreflag^(0+256)
  7788     0167  0AD6               	incf	_oreflag^(0+256),f
  7789                           
  7790                           ;app_device_keyboard.c: 503:             } else if (scanCode->value == 0x14 && oreflag =
      +                          = 1) {
  7791     0168  0008               	return
  7792     0169                     l6312:
  7793     0169  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7794     016A  0086               	movwf	6
  7795     016B  0187               	clrf	7
  7796     016C  3014               	movlw	20
  7797     016D  0601               	xorwf	1,w
  7798     016E  1D03               	btfss	3,2
  7799     016F  2974               	goto	l6318
  7800     0170  0022               	movlb	2	; select bank2
  7801     0171  0356               	decf	_oreflag^(0+256),w
  7802     0172  1903               	btfsc	3,2
  7803     0173  0008               	return
  7804     0174                     l6318:
  7805     0174  0021               	movlb	1	; select bank1
  7806     0175  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7807     0176  0086               	movwf	6
  7808     0177  0187               	clrf	7
  7809     0178  3077               	movlw	119
  7810     0179  0601               	xorwf	1,w
  7811     017A  1D03               	btfss	3,2
  7812     017B  2980               	goto	l6324
  7813     017C  0022               	movlb	2	; select bank2
  7814     017D  0356               	decf	_oreflag^(0+256),w
  7815     017E  1903               	btfsc	3,2
  7816     017F  0008               	return
  7817     0180                     l6324:
  7818     0180  0021               	movlb	1	; select bank1
  7819     0181  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7820     0182  0086               	movwf	6
  7821     0183  0187               	clrf	7
  7822     0184  30FA               	movlw	250
  7823     0185  0601               	xorwf	1,w
  7824     0186  1D03               	btfss	3,2
  7825     0187  29B0               	goto	l6332
  7826                           
  7827                           ;app_device_keyboard.c: 508:                 if (PS2Keyboard_GetLastCommand() == 0xED) {
  7828     0188  319E  2637  3180   	fcall	_PS2Keyboard_GetLastCommand
  7829     018B  3AED               	xorlw	237
  7830     018C  1D03               	skipz
  7831     018D  0008               	return
  7832                           
  7833                           ;app_device_keyboard.c: 509:                     uint8_t leds = (uint8_t)(keyboard.leds.
      +                          bits.numLock << 1)
  7834     018E  3090               	movlw	144
  7835     018F  0086               	movwf	6
  7836     0190  3023               	movlw	35
  7837     0191  0087               	movwf	7
  7838     0192  0C01               	rrf	1,w
  7839     0193  0C89               	rrf	9,f
  7840     0194  3901               	andlw	1
  7841     0195  0021               	movlb	1	; select bank1
  7842     0196  00C9               	movwf	??_APP_KeyboardUpdateState^(0+128)
  7843     0197  3090               	movlw	144
  7844     0198  0086               	movwf	6
  7845     0199  3023               	movlw	35
  7846     019A  0087               	movwf	7
  7847     019B  0C01               	rrf	1,w
  7848     019C  3901               	andlw	1
  7849     019D  00CA               	movwf	(??_APP_KeyboardUpdateState+1)^(0+128)
  7850     019E  3002               	movlw	2
  7851     019F                     u6285:
  7852     019F  35CA               	lslf	(??_APP_KeyboardUpdateState+1)^(0+128),f
  7853     01A0  0B89               	decfsz	9,f
  7854     01A1  299F               	goto	u6285
  7855     01A2  3090               	movlw	144
  7856     01A3  0086               	movwf	6
  7857     01A4  3023               	movlw	35
  7858     01A5  0087               	movwf	7
  7859     01A6  0801               	movf	1,w
  7860     01A7  3901               	andlw	1
  7861     01A8  0709               	addwf	9,w
  7862     01A9  044A               	iorwf	(??_APP_KeyboardUpdateState+1)^(0+128),w
  7863     01AA  0449               	iorwf	??_APP_KeyboardUpdateState^(0+128),w
  7864     01AB  00CB               	movwf	APP_KeyboardUpdateState@leds^(0+128)
  7865                           
  7866                           ;app_device_keyboard.c: 512:                     PS2Keyboard_SendCommand(leds);
  7867     01AC  084B               	movf	APP_KeyboardUpdateState@leds^(0+128),w
  7868     01AD  3191  2136         	fcall	_PS2Keyboard_SendCommand
  7869     01AF  0008               	return
  7870     01B0                     l6332:
  7871     01B0  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7872     01B1  0086               	movwf	6
  7873     01B2  0187               	clrf	7
  7874     01B3  30FC               	movlw	252
  7875     01B4  0601               	xorwf	1,w
  7876     01B5  1903               	btfsc	3,2
  7877     01B6  0008               	return
  7878     01B7  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7879     01B8  0086               	movwf	6
  7880     01B9  0187               	clrf	7
  7881     01BA  0A01               	incf	1,w
  7882     01BB  1903               	btfsc	3,2
  7883     01BC  0008               	return
  7884     01BD  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7885     01BE  0086               	movwf	6
  7886     01BF  0187               	clrf	7
  7887     01C0  30AA               	movlw	170
  7888     01C1  0601               	xorwf	1,w
  7889     01C2  1903               	btfsc	3,2
  7890     01C3  0008               	return
  7891                           
  7892                           ;app_device_keyboard.c: 520:                 if (scanCode->value == 0x12) {
  7893     01C4  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7894     01C5  0086               	movwf	6
  7895     01C6  0187               	clrf	7
  7896     01C7  3012               	movlw	18
  7897     01C8  0601               	xorwf	1,w
  7898     01C9  1D03               	btfss	3,2
  7899     01CA  29D1               	goto	l6342
  7900                           
  7901                           ;app_device_keyboard.c: 521:                     keyboard.modifiers.bits.leftShift = 1;
  7902     01CB  308F               	movlw	143
  7903     01CC  0086               	movwf	6
  7904     01CD  3023               	movlw	35
  7905     01CE  0087               	movwf	7
  7906     01CF  1481               	bsf	1,1
  7907                           
  7908                           ;app_device_keyboard.c: 522:                 } else if (scanCode->value == 0X14) {
  7909     01D0  0008               	return
  7910     01D1                     l6342:
  7911     01D1  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7912     01D2  0086               	movwf	6
  7913     01D3  0187               	clrf	7
  7914     01D4  3014               	movlw	20
  7915     01D5  0601               	xorwf	1,w
  7916     01D6  1D03               	btfss	3,2
  7917     01D7  29DE               	goto	l6346
  7918                           
  7919                           ;app_device_keyboard.c: 523:                     keyboard.modifiers.bits.leftControl = 1
      +                          ;
  7920     01D8  308F               	movlw	143
  7921     01D9  0086               	movwf	6
  7922     01DA  3023               	movlw	35
  7923     01DB  0087               	movwf	7
  7924     01DC  1401               	bsf	1,0
  7925                           
  7926                           ;app_device_keyboard.c: 524:                 } else if (scanCode->value == 0x11) {
  7927     01DD  0008               	return
  7928     01DE                     l6346:
  7929     01DE  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7930     01DF  0086               	movwf	6
  7931     01E0  0187               	clrf	7
  7932     01E1  3011               	movlw	17
  7933     01E2  0601               	xorwf	1,w
  7934     01E3  1D03               	btfss	3,2
  7935     01E4  29EB               	goto	l6350
  7936                           
  7937                           ;app_device_keyboard.c: 525:                     keyboard.modifiers.bits.leftAlt = 1;
  7938     01E5  308F               	movlw	143
  7939     01E6  0086               	movwf	6
  7940     01E7  3023               	movlw	35
  7941     01E8  0087               	movwf	7
  7942     01E9  1501               	bsf	1,2
  7943                           
  7944                           ;app_device_keyboard.c: 526:                 } else if (scanCode->value == 0x59) {
  7945     01EA  0008               	return
  7946     01EB                     l6350:
  7947     01EB  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7948     01EC  0086               	movwf	6
  7949     01ED  0187               	clrf	7
  7950     01EE  3059               	movlw	89
  7951     01EF  0601               	xorwf	1,w
  7952     01F0  1D03               	btfss	3,2
  7953     01F1  29F8               	goto	l6354
  7954                           
  7955                           ;app_device_keyboard.c: 527:                     keyboard.modifiers.bits.rightShift = 1;
  7956     01F2  308F               	movlw	143
  7957     01F3  0086               	movwf	6
  7958     01F4  3023               	movlw	35
  7959     01F5  0087               	movwf	7
  7960     01F6  1681               	bsf	1,5
  7961                           
  7962                           ;app_device_keyboard.c: 528:                 } else if (scanCode->value == 0x58) {
  7963     01F7  0008               	return
  7964     01F8                     l6354:
  7965     01F8  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7966     01F9  0086               	movwf	6
  7967     01FA  0187               	clrf	7
  7968     01FB  3058               	movlw	88
  7969     01FC  0601               	xorwf	1,w
  7970     01FD  1D03               	btfss	3,2
  7971     01FE  2A05               	goto	l6358
  7972                           
  7973                           ;app_device_keyboard.c: 529:                     keyboard.modifiers.bits.leftGUI = 1;
  7974     01FF  308F               	movlw	143
  7975     0200  0086               	movwf	6
  7976     0201  3023               	movlw	35
  7977     0202  0087               	movwf	7
  7978     0203  1581               	bsf	1,3
  7979                           
  7980                           ;app_device_keyboard.c: 530:                 } else {
  7981     0204  0008               	return
  7982     0205                     l6358:
  7983                           
  7984                           ;app_device_keyboard.c: 531:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7985     0205  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7986     0206  3191  21AA  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7987     0209  00CF               	movwf	APP_KeyboardUpdateState@usbHidCode_2865^(0+128)
  7988                           
  7989                           ;app_device_keyboard.c: 532:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  7990     020A  3030               	movlw	48
  7991     020B  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  7992     020C  3023               	movlw	35
  7993     020D  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  7994     020E  30CF               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2865| 0))& (0+255)
  7995     020F  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  7996     0210  3196  2606  3180   	fcall	_GenericQueue_Contains
  7997     0213  3A00               	xorlw	0
  7998     0214  1D03               	skipz
  7999     0215  0008               	return
  8000                           
  8001                           ;app_device_keyboard.c: 533:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  8002     0216  3030               	movlw	48
  8003     0217  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  8004     0218  3023               	movlw	35
  8005     0219  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  8006     021A  30CF               	movlw	low APP_KeyboardUpdateState@usbHidCode_2865
  8007     021B  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  8008     021C  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2865
  8009     021D  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  8010     021E  3188  2032         	fcall	_GenericQueue_Enqueue
  8011     0220  0008               	return
  8012     0221                     __end_of_APP_KeyboardUpdateState:
  8013                           
  8014                           	psect	text34
  8015     11AA                     __ptext34:	
  8016 ;; *************** function _PS2USB_ScanCodeToUSBHID *****************
  8017 ;; Defined at:
  8018 ;;		line 404 in file "ps2usb.c"
  8019 ;; Parameters:    Size  Location     Type
  8020 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  8021 ;;		 -> main@scanCode(3), NULL(0), 
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;  scanCode        1    0[BANK1 ] PTR const struct PS2Scan
  8024 ;;		 -> main@scanCode(3), NULL(0), 
  8025 ;; Return value:  Size  Location     Type
  8026 ;;                  1    wreg      unsigned char 
  8027 ;; Registers used:
  8028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  8029 ;; Tracked objects:
  8030 ;;		On entry : 1F/1
  8031 ;;		On exit  : 1F/1
  8032 ;;		Unchanged: 0/0
  8033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8035 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;Total ram usage:        1 bytes
  8039 ;; Hardware stack levels used: 1
  8040 ;; Hardware stack levels required when called: 10
  8041 ;; This function calls:
  8042 ;;		Nothing
  8043 ;; This function is called by:
  8044 ;;		_APP_KeyboardUpdateState
  8045 ;; This function uses a non-reentrant model
  8046 ;;
  8047                           
  8048     11AA                     _PS2USB_ScanCodeToUSBHID:	
  8049                           ;psect for function _PS2USB_ScanCodeToUSBHID
  8050                           
  8051                           
  8052                           ;incstack = 0
  8053                           ; Regs used in _PS2USB_ScanCodeToUSBHID: [wreg-fsr1h+status,2+status,0+pclath]
  8054                           ;PS2USB_ScanCodeToUSBHID@scanCode stored from wreg
  8055     11AA  00A8               	movwf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128)
  8056                           
  8057                           ;ps2usb.c: 429:     if (scanCode->isExtend) {
  8058     11AB  0A28               	incf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  8059     11AC  0086               	movwf	6
  8060     11AD  0187               	clrf	7
  8061     11AE  0801               	movf	1,w
  8062     11AF  1903               	btfsc	3,2
  8063     11B0  29BD               	goto	l4892
  8064                           
  8065                           ;ps2usb.c: 435:         return ps2ExtUsbMap[scanCode->value];
  8066     11B1  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  8067     11B2  0086               	movwf	6
  8068     11B3  0187               	clrf	7
  8069     11B4  0801               	movf	1,w
  8070     11B5  3E4A               	addlw	low (_ps2ExtUsbMap| (0+32768))
  8071     11B6  0084               	movwf	4
  8072     11B7  3084               	movlw	high (_ps2ExtUsbMap| (0+32768))
  8073     11B8  1803               	skipnc
  8074     11B9  3E01               	addlw	1
  8075     11BA  0085               	movwf	5
  8076     11BB  0800               	movf	0,w	;code access
  8077     11BC  0008               	return
  8078     11BD                     l4892:
  8079                           
  8080                           ;ps2usb.c: 442:         return ps2UsbMap[scanCode->value];
  8081     11BD  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  8082     11BE  0086               	movwf	6
  8083     11BF  0187               	clrf	7
  8084     11C0  0801               	movf	1,w
  8085     11C1  3E00               	addlw	low (_ps2UsbMap| (0+32768))
  8086     11C2  0084               	movwf	4
  8087     11C3  3090               	movlw	high (_ps2UsbMap| (0+32768))
  8088     11C4  1803               	skipnc
  8089     11C5  3E01               	addlw	1
  8090     11C6  0085               	movwf	5
  8091     11C7  0800               	movf	0,w	;code access
  8092     11C8  0008               	return
  8093     11C9                     __end_of_PS2USB_ScanCodeToUSBHID:
  8094                           
  8095                           	psect	text35
  8096     1E37                     __ptext35:	
  8097 ;; *************** function _PS2Keyboard_GetLastCommand *****************
  8098 ;; Defined at:
  8099 ;;		line 75 in file "ps2_keyboard.c"
  8100 ;; Parameters:    Size  Location     Type
  8101 ;;		None
  8102 ;; Auto vars:     Size  Location     Type
  8103 ;;		None
  8104 ;; Return value:  Size  Location     Type
  8105 ;;                  1    wreg      unsigned char 
  8106 ;; Registers used:
  8107 ;;		wreg
  8108 ;; Tracked objects:
  8109 ;;		On entry : 1F/1
  8110 ;;		On exit  : 1F/2
  8111 ;;		Unchanged: 0/0
  8112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8117 ;;Total ram usage:        0 bytes
  8118 ;; Hardware stack levels used: 1
  8119 ;; Hardware stack levels required when called: 10
  8120 ;; This function calls:
  8121 ;;		Nothing
  8122 ;; This function is called by:
  8123 ;;		_APP_KeyboardUpdateState
  8124 ;; This function uses a non-reentrant model
  8125 ;;
  8126                           
  8127     1E37                     _PS2Keyboard_GetLastCommand:	
  8128                           ;psect for function _PS2Keyboard_GetLastCommand
  8129                           
  8130                           
  8131                           ;ps2_keyboard.c: 76:     return keyboardCommand;
  8132                           
  8133                           ;incstack = 0
  8134                           ; Regs used in _PS2Keyboard_GetLastCommand: [wreg]
  8135     1E37  0022               	movlb	2	; select bank2
  8136     1E38  084E               	movf	_keyboardCommand^(0+256),w	;volatile
  8137     1E39  0008               	return
  8138     1E3A                     __end_of_PS2Keyboard_GetLastCommand:
  8139                           
  8140                           	psect	text36
  8141     063E                     __ptext36:	
  8142 ;; *************** function _GenericQueue_Remove *****************
  8143 ;; Defined at:
  8144 ;;		line 35 in file "generic_queue.c"
  8145 ;; Parameters:    Size  Location     Type
  8146 ;;  q               2   24[BANK1 ] PTR struct .
  8147 ;;		 -> keyboard(101), 
  8148 ;;  item            1   26[BANK1 ] PTR const void 
  8149 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2857(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;  j               1   32[BANK1 ] unsigned char 
  8152 ;;  i               1   31[BANK1 ] unsigned char 
  8153 ;; Return value:  Size  Location     Type
  8154 ;;                  1    wreg      void 
  8155 ;; Registers used:
  8156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8157 ;; Tracked objects:
  8158 ;;		On entry : 1F/1
  8159 ;;		On exit  : 1F/1
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8162 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;Total ram usage:        9 bytes
  8167 ;; Hardware stack levels used: 1
  8168 ;; Hardware stack levels required when called: 11
  8169 ;; This function calls:
  8170 ;;		_GenericQueue_IsEmpty
  8171 ;;		___awmod
  8172 ;;		___wmul
  8173 ;;		_memcmp
  8174 ;;		_memcpy
  8175 ;; This function is called by:
  8176 ;;		_APP_KeyboardUpdateState
  8177 ;; This function uses a non-reentrant model
  8178 ;;
  8179                           
  8180     063E                     _GenericQueue_Remove:	
  8181                           ;psect for function _GenericQueue_Remove
  8182                           
  8183                           
  8184                           ;generic_queue.c: 36:     if (!GenericQueue_IsEmpty(q)) {
  8185                           
  8186                           ;incstack = 0
  8187                           ; Regs used in _GenericQueue_Remove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8188     063E  0841               	movf	(GenericQueue_Remove@q+1)^(0+128),w
  8189     063F  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  8190     0640  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8191     0641  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  8192     0642  319F  276B  3186   	fcall	_GenericQueue_IsEmpty
  8193     0645  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  8194     0646  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  8195     0647  1D03               	btfss	3,2
  8196     0648  0008               	return
  8197                           
  8198                           ;generic_queue.c: 37:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  8199     0649  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8200     064A  3E5C               	addlw	92
  8201     064B  0086               	movwf	6
  8202     064C  3000               	movlw	0
  8203     064D  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8204     064E  0087               	movwf	7
  8205     064F  0801               	movf	1,w
  8206     0650                     L4:
  8207     0650  00C7               	movwf	GenericQueue_Remove@i^(0+128)
  8208     0651  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8209     0652  3E5D               	addlw	93
  8210     0653  0086               	movwf	6
  8211     0654  3000               	movlw	0
  8212     0655  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8213     0656  0087               	movwf	7
  8214     0657  0801               	movf	1,w
  8215     0658  0647               	xorwf	GenericQueue_Remove@i^(0+128),w
  8216     0659  1903               	btfsc	3,2
  8217     065A  0008               	return
  8218                           
  8219                           ;generic_queue.c: 38:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  8220     065B  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8221     065C  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8222     065D  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  8223     065E  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8224     065F  00AF               	movwf	___wmul@multiplier^(0+128)
  8225     0660  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8226     0661  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8227     0662  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8228     0663  3E5A               	addlw	90
  8229     0664  0086               	movwf	6
  8230     0665  3000               	movlw	0
  8231     0666  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8232     0667  0087               	movwf	7
  8233     0668  3F40               	moviw [0]fsr1
  8234     0669  00B1               	movwf	___wmul@multiplicand^(0+128)
  8235     066A  3F41               	moviw [1]fsr1
  8236     066B  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8237     066C  3191  2100  3186   	fcall	___wmul
  8238     066F  082F               	movf	?___wmul^(0+128),w
  8239     0670  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8240     0671  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8241     0672  0830               	movf	(?___wmul+1)^(0+128),w
  8242     0673  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8243     0674  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  8244     0675  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8245     0676  00B5               	movwf	memcmp@vl^(0+128)
  8246     0677  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  8247     0678  00B6               	movwf	(memcmp@vl+1)^(0+128)
  8248     0679  0842               	movf	GenericQueue_Remove@item^(0+128),w
  8249     067A  00B7               	movwf	memcmp@vr^(0+128)
  8250     067B  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8251     067C  3E5A               	addlw	90
  8252     067D  0086               	movwf	6
  8253     067E  3000               	movlw	0
  8254     067F  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8255     0680  0087               	movwf	7
  8256     0681  3F40               	moviw [0]fsr1
  8257     0682  00B8               	movwf	memcmp@n^(0+128)
  8258     0683  3F41               	moviw [1]fsr1
  8259     0684  00B9               	movwf	(memcmp@n+1)^(0+128)
  8260     0685  3192  22DF  3186   	fcall	_memcmp
  8261     0688  0835               	movf	?_memcmp^(0+128),w
  8262     0689  0436               	iorwf	(?_memcmp+1)^(0+128),w
  8263     068A  1D03               	btfss	3,2
  8264     068B  2F22               	goto	l4914
  8265                           
  8266                           ;generic_queue.c: 39:                 for (uint8_t j = i; j != q->rear; j = (j + 1) % 15
      +                          ) {
  8267     068C  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8268     068D                     L5:
  8269     068D  00C8               	movwf	GenericQueue_Remove@j^(0+128)
  8270     068E  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8271     068F  3E5D               	addlw	93
  8272     0690  0086               	movwf	6
  8273     0691  3000               	movlw	0
  8274     0692  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8275     0693  0087               	movwf	7
  8276     0694  0801               	movf	1,w
  8277     0695  0648               	xorwf	GenericQueue_Remove@j^(0+128),w
  8278     0696  1903               	btfsc	3,2
  8279     0697  2EF8               	goto	l4910
  8280                           
  8281                           ;generic_queue.c: 40:                     memcpy(&q->buffer[j * q->element_size],
  8282     0698  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8283     0699  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8284     069A  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  8285     069B  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8286     069C  00AF               	movwf	___wmul@multiplier^(0+128)
  8287     069D  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8288     069E  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8289     069F  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8290     06A0  3E5A               	addlw	90
  8291     06A1  0086               	movwf	6
  8292     06A2  3000               	movlw	0
  8293     06A3  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8294     06A4  0087               	movwf	7
  8295     06A5  3F40               	moviw [0]fsr1
  8296     06A6  00B1               	movwf	___wmul@multiplicand^(0+128)
  8297     06A7  3F41               	moviw [1]fsr1
  8298     06A8  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8299     06A9  3191  2100  3186   	fcall	___wmul
  8300     06AC  082F               	movf	?___wmul^(0+128),w
  8301     06AD  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8302     06AE  00B5               	movwf	memcpy@d1^(0+128)
  8303     06AF  0830               	movf	(?___wmul+1)^(0+128),w
  8304     06B0  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8305     06B1  00B6               	movwf	(memcpy@d1+1)^(0+128)
  8306     06B2  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8307     06B3  3E01               	addlw	1
  8308     06B4  00AA               	movwf	___awmod@dividend^(0+128)
  8309     06B5  3000               	movlw	0
  8310     06B6  1803               	skipnc
  8311     06B7  3001               	movlw	1
  8312     06B8  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8313     06B9  300F               	movlw	15
  8314     06BA  00A8               	movwf	___awmod@divisor^(0+128)
  8315     06BB  3000               	movlw	0
  8316     06BC  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8317     06BD  3194  248D  3186   	fcall	___awmod
  8318     06C0  0829               	movf	(?___awmod+1)^(0+128),w
  8319     06C1  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8320     06C2  0828               	movf	?___awmod^(0+128),w
  8321     06C3  00AF               	movwf	___wmul@multiplier^(0+128)
  8322     06C4  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8323     06C5  3E5A               	addlw	90
  8324     06C6  0086               	movwf	6
  8325     06C7  3000               	movlw	0
  8326     06C8  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8327     06C9  0087               	movwf	7
  8328     06CA  3F40               	moviw [0]fsr1
  8329     06CB  00B1               	movwf	___wmul@multiplicand^(0+128)
  8330     06CC  3F41               	moviw [1]fsr1
  8331     06CD  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8332     06CE  3191  2100  3186   	fcall	___wmul
  8333     06D1  082F               	movf	?___wmul^(0+128),w
  8334     06D2  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8335     06D3  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8336     06D4  0830               	movf	(?___wmul+1)^(0+128),w
  8337     06D5  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8338     06D6  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  8339     06D7  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8340     06D8  00B7               	movwf	memcpy@s1^(0+128)
  8341     06D9  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  8342     06DA  00B8               	movwf	(memcpy@s1+1)^(0+128)
  8343     06DB  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8344     06DC  3E5A               	addlw	90
  8345     06DD  0086               	movwf	6
  8346     06DE  3000               	movlw	0
  8347     06DF  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8348     06E0  0087               	movwf	7
  8349     06E1  3F40               	moviw [0]fsr1
  8350     06E2  00B9               	movwf	memcpy@n^(0+128)
  8351     06E3  3F41               	moviw [1]fsr1
  8352     06E4  00BA               	movwf	(memcpy@n+1)^(0+128)
  8353     06E5  3192  22B9  3186   	fcall	_memcpy
  8354                           
  8355                           ;generic_queue.c: 43:                 }
  8356     06E8  300F               	movlw	15
  8357     06E9  00A8               	movwf	___awmod@divisor^(0+128)
  8358     06EA  3000               	movlw	0
  8359     06EB  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8360     06EC  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8361     06ED  3E01               	addlw	1
  8362     06EE  00AA               	movwf	___awmod@dividend^(0+128)
  8363     06EF  3000               	movlw	0
  8364     06F0  1803               	skipnc
  8365     06F1  3001               	movlw	1
  8366     06F2  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8367     06F3  3194  248D  3186   	fcall	___awmod
  8368     06F6  0828               	movf	?___awmod^(0+128),w
  8369     06F7  2E8D               	goto	L5
  8370     06F8                     l4910:
  8371                           
  8372                           ;generic_queue.c: 44:                 q->rear = (q->rear - 1 + 15) % 15;
  8373     06F8  300F               	movlw	15
  8374     06F9  00A8               	movwf	___awmod@divisor^(0+128)
  8375     06FA  3000               	movlw	0
  8376     06FB  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8377     06FC  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8378     06FD  3E5D               	addlw	93
  8379     06FE  0086               	movwf	6
  8380     06FF  3000               	movlw	0
  8381     0700  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8382     0701  0087               	movwf	7
  8383     0702  0801               	movf	1,w
  8384     0703  3E0E               	addlw	14
  8385     0704  00AA               	movwf	___awmod@dividend^(0+128)
  8386     0705  3000               	movlw	0
  8387     0706  1803               	skipnc
  8388     0707  3001               	movlw	1
  8389     0708  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8390     0709  3194  248D         	fcall	___awmod
  8391     070B  0828               	movf	?___awmod^(0+128),w
  8392     070C  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8393     070D  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8394     070E  3E5D               	addlw	93
  8395     070F  00C4               	movwf	(??_GenericQueue_Remove+1)^(0+128)
  8396     0710  3000               	movlw	0
  8397     0711  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8398     0712  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8399     0713  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8400     0714  0086               	movwf	6
  8401     0715  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8402     0716  0087               	movwf	7
  8403     0717  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8404     0718  0081               	movwf	1
  8405                           
  8406                           ;generic_queue.c: 45:                 q->size--;
  8407     0719  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8408     071A  3E5E               	addlw	94
  8409     071B  0086               	movwf	6
  8410     071C  3000               	movlw	0
  8411     071D  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8412     071E  0087               	movwf	7
  8413     071F  3001               	movlw	1
  8414     0720  0281               	subwf	1,f
  8415                           
  8416                           ;generic_queue.c: 46:                 break;
  8417     0721  0008               	return
  8418     0722                     l4914:
  8419                           
  8420                           ;generic_queue.c: 48:         }
  8421     0722  300F               	movlw	15
  8422     0723  00A8               	movwf	___awmod@divisor^(0+128)
  8423     0724  3000               	movlw	0
  8424     0725  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8425     0726  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8426     0727  3E01               	addlw	1
  8427     0728  00AA               	movwf	___awmod@dividend^(0+128)
  8428     0729  3000               	movlw	0
  8429     072A  1803               	skipnc
  8430     072B  3001               	movlw	1
  8431     072C  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8432     072D  3194  248D  3186   	fcall	___awmod
  8433     0730  0828               	movf	?___awmod^(0+128),w
  8434     0731  2E50               	goto	L4
  8435     0732                     __end_of_GenericQueue_Remove:
  8436                           
  8437                           	psect	text37
  8438     0832                     __ptext37:	
  8439 ;; *************** function _GenericQueue_Enqueue *****************
  8440 ;; Defined at:
  8441 ;;		line 19 in file "generic_queue.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;  q               2   24[BANK1 ] PTR struct .
  8444 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  8445 ;;  item            2   26[BANK1 ] PTR const void 
  8446 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2865(1), APP_KeyboardUpdateState@usbHidCode_2856(1), 
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;		None
  8449 ;; Return value:  Size  Location     Type
  8450 ;;                  1    wreg      void 
  8451 ;; Registers used:
  8452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8453 ;; Tracked objects:
  8454 ;;		On entry : 1F/1
  8455 ;;		On exit  : 1F/1
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8458 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8461 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;Total ram usage:        7 bytes
  8463 ;; Hardware stack levels used: 1
  8464 ;; Hardware stack levels required when called: 11
  8465 ;; This function calls:
  8466 ;;		_GenericQueue_IsFull
  8467 ;;		___awmod
  8468 ;;		___wmul
  8469 ;;		_memcpy
  8470 ;; This function is called by:
  8471 ;;		_APP_KeyboardUpdateState
  8472 ;; This function uses a non-reentrant model
  8473 ;;
  8474                           
  8475     0832                     _GenericQueue_Enqueue:	
  8476                           ;psect for function _GenericQueue_Enqueue
  8477                           
  8478                           
  8479                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
  8480                           
  8481                           ;incstack = 0
  8482                           ; Regs used in _GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8483     0832  0841               	movf	(GenericQueue_Enqueue@q+1)^(0+128),w
  8484     0833  00A9               	movwf	(GenericQueue_IsFull@q+1)^(0+128)
  8485     0834  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8486     0835  00A8               	movwf	GenericQueue_IsFull@q^(0+128)
  8487     0836  319F  2792  3188   	fcall	_GenericQueue_IsFull
  8488     0839  0828               	movf	?_GenericQueue_IsFull^(0+128),w
  8489     083A  0429               	iorwf	(?_GenericQueue_IsFull+1)^(0+128),w
  8490     083B  1D03               	btfss	3,2
  8491     083C  0008               	return
  8492                           
  8493                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
  8494     083D  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8495     083E  3E5D               	addlw	93
  8496     083F  0086               	movwf	6
  8497     0840  3000               	movlw	0
  8498     0841  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8499     0842  0087               	movwf	7
  8500     0843  0801               	movf	1,w
  8501     0844  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8502     0845  01C5               	clrf	(??_GenericQueue_Enqueue^(0+128)+1)
  8503     0846  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8504     0847  00AF               	movwf	___wmul@multiplier^(0+128)
  8505     0848  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  8506     0849  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8507     084A  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8508     084B  3E5A               	addlw	90
  8509     084C  0086               	movwf	6
  8510     084D  3000               	movlw	0
  8511     084E  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8512     084F  0087               	movwf	7
  8513     0850  3F40               	moviw [0]fsr1
  8514     0851  00B1               	movwf	___wmul@multiplicand^(0+128)
  8515     0852  3F41               	moviw [1]fsr1
  8516     0853  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8517     0854  3191  2100  3188   	fcall	___wmul
  8518     0857  082F               	movf	?___wmul^(0+128),w
  8519     0858  0740               	addwf	GenericQueue_Enqueue@q^(0+128),w
  8520     0859  00B5               	movwf	memcpy@d1^(0+128)
  8521     085A  0830               	movf	(?___wmul+1)^(0+128),w
  8522     085B  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8523     085C  00B6               	movwf	(memcpy@d1+1)^(0+128)
  8524     085D  0843               	movf	(GenericQueue_Enqueue@item+1)^(0+128),w
  8525     085E  00B8               	movwf	(memcpy@s1+1)^(0+128)
  8526     085F  0842               	movf	GenericQueue_Enqueue@item^(0+128),w
  8527     0860  00B7               	movwf	memcpy@s1^(0+128)
  8528     0861  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8529     0862  3E5A               	addlw	90
  8530     0863  0086               	movwf	6
  8531     0864  3000               	movlw	0
  8532     0865  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8533     0866  0087               	movwf	7
  8534     0867  3F40               	moviw [0]fsr1
  8535     0868  00B9               	movwf	memcpy@n^(0+128)
  8536     0869  3F41               	moviw [1]fsr1
  8537     086A  00BA               	movwf	(memcpy@n+1)^(0+128)
  8538     086B  3192  22B9  3188   	fcall	_memcpy
  8539                           
  8540                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
  8541     086E  300F               	movlw	15
  8542     086F  00A8               	movwf	___awmod@divisor^(0+128)
  8543     0870  3000               	movlw	0
  8544     0871  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8545     0872  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8546     0873  3E5D               	addlw	93
  8547     0874  0086               	movwf	6
  8548     0875  3000               	movlw	0
  8549     0876  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8550     0877  0087               	movwf	7
  8551     0878  0801               	movf	1,w
  8552     0879  3E01               	addlw	1
  8553     087A  00AA               	movwf	___awmod@dividend^(0+128)
  8554     087B  3000               	movlw	0
  8555     087C  1803               	skipnc
  8556     087D  3001               	movlw	1
  8557     087E  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8558     087F  3194  248D         	fcall	___awmod
  8559     0881  0828               	movf	?___awmod^(0+128),w
  8560     0882  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8561     0883  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8562     0884  3E5D               	addlw	93
  8563     0885  00C5               	movwf	(??_GenericQueue_Enqueue+1)^(0+128)
  8564     0886  3000               	movlw	0
  8565     0887  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8566     0888  00C6               	movwf	(??_GenericQueue_Enqueue+2)^(0+128)
  8567     0889  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  8568     088A  0086               	movwf	6
  8569     088B  0846               	movf	(??_GenericQueue_Enqueue+2)^(0+128),w
  8570     088C  0087               	movwf	7
  8571     088D  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8572     088E  0081               	movwf	1
  8573                           
  8574                           ;generic_queue.c: 23:         q->size++;
  8575     088F  3001               	movlw	1
  8576     0890  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8577     0891  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8578     0892  3E5E               	addlw	94
  8579     0893  0086               	movwf	6
  8580     0894  3000               	movlw	0
  8581     0895  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8582     0896  0087               	movwf	7
  8583     0897  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8584     0898  0781               	addwf	1,f
  8585     0899  0008               	return
  8586     089A                     __end_of_GenericQueue_Enqueue:
  8587                           
  8588                           	psect	text38
  8589     12B9                     __ptext38:	
  8590 ;; *************** function _memcpy *****************
  8591 ;; Defined at:
  8592 ;;		line 4 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memcpy.c"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;  d1              2   13[BANK1 ] PTR void 
  8595 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  8596 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
  8597 ;;  s1              2   15[BANK1 ] PTR const void 
  8598 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  8599 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2865(1), APP_KeyboardUpdateState@usbHidCode_2856(1), keyboard(101), CtrlTrfDa
      +ta(8), 
  8600 ;;		 -> SetupPkt(8), 
  8601 ;;  n               2   17[BANK1 ] unsigned int 
  8602 ;; Auto vars:     Size  Location     Type
  8603 ;;  s               2   21[BANK1 ] PTR const unsigned char 
  8604 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  8605 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2865(1), APP_KeyboardUpdateState@usbHidCode_2856(1), keyboard(101), CtrlTrfDa
      +ta(8), 
  8606 ;;		 -> SetupPkt(8), 
  8607 ;;  d               2   19[BANK1 ] PTR unsigned char 
  8608 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  8609 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
  8610 ;;  tmp             1   23[BANK1 ] unsigned char 
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  2   13[BANK1 ] PTR void 
  8613 ;; Registers used:
  8614 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8615 ;; Tracked objects:
  8616 ;;		On entry : 1F/1
  8617 ;;		On exit  : 1F/1
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8620 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;Total ram usage:       11 bytes
  8625 ;; Hardware stack levels used: 1
  8626 ;; Hardware stack levels required when called: 10
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_GenericQueue_Enqueue
  8631 ;;		_GenericQueue_Dequeue
  8632 ;;		_GenericQueue_Remove
  8633 ;;		_GenericQueue_CopyToArray
  8634 ;; This function uses a non-reentrant model
  8635 ;;
  8636                           
  8637     12B9                     _memcpy:	
  8638                           ;psect for function _memcpy
  8639                           
  8640                           
  8641                           ;incstack = 0
  8642                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  8643     12B9  0838               	movf	(memcpy@s1+1)^(0+128),w
  8644     12BA  00BE               	movwf	(memcpy@s+1)^(0+128)
  8645     12BB  0837               	movf	memcpy@s1^(0+128),w
  8646     12BC  00BD               	movwf	memcpy@s^(0+128)
  8647     12BD  0836               	movf	(memcpy@d1+1)^(0+128),w
  8648     12BE  00BC               	movwf	(memcpy@d+1)^(0+128)
  8649     12BF  0835               	movf	memcpy@d1^(0+128),w
  8650     12C0  00BB               	movwf	memcpy@d^(0+128)
  8651     12C1                     l4644:
  8652     12C1  3001               	movlw	1
  8653     12C2  02B9               	subwf	memcpy@n^(0+128),f
  8654     12C3  3000               	movlw	0
  8655     12C4  3BBA               	subwfb	(memcpy@n+1)^(0+128),f
  8656     12C5  0A39               	incf	memcpy@n^(0+128),w
  8657     12C6  1903               	btfsc	3,2
  8658     12C7  0A3A               	incf	(memcpy@n+1)^(0+128),w
  8659     12C8  1903               	btfsc	3,2
  8660     12C9  0008               	return
  8661     12CA  083D               	movf	memcpy@s^(0+128),w
  8662     12CB  0086               	movwf	6
  8663     12CC  083E               	movf	(memcpy@s+1)^(0+128),w
  8664     12CD  0087               	movwf	7
  8665     12CE  0801               	movf	1,w
  8666     12CF  00BF               	movwf	memcpy@tmp^(0+128)
  8667     12D0  3001               	movlw	1
  8668     12D1  07BD               	addwf	memcpy@s^(0+128),f
  8669     12D2  3000               	movlw	0
  8670     12D3  3DBE               	addwfc	(memcpy@s+1)^(0+128),f
  8671     12D4  083B               	movf	memcpy@d^(0+128),w
  8672     12D5  0086               	movwf	6
  8673     12D6  083C               	movf	(memcpy@d+1)^(0+128),w
  8674     12D7  0087               	movwf	7
  8675     12D8  083F               	movf	memcpy@tmp^(0+128),w
  8676     12D9  0081               	movwf	1
  8677     12DA  3001               	movlw	1
  8678     12DB  07BB               	addwf	memcpy@d^(0+128),f
  8679     12DC  3000               	movlw	0
  8680     12DD  3DBC               	addwfc	(memcpy@d+1)^(0+128),f
  8681     12DE  2AC1               	goto	l4644
  8682     12DF                     __end_of_memcpy:
  8683                           
  8684                           	psect	text39
  8685     1F92                     __ptext39:	
  8686 ;; *************** function _GenericQueue_IsFull *****************
  8687 ;; Defined at:
  8688 ;;		line 15 in file "generic_queue.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;  q               2    0[BANK1 ] PTR struct .
  8691 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;		None
  8694 ;; Return value:  Size  Location     Type
  8695 ;;                  2    0[BANK1 ] int 
  8696 ;; Registers used:
  8697 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8698 ;; Tracked objects:
  8699 ;;		On entry : 1F/1
  8700 ;;		On exit  : 1F/1
  8701 ;;		Unchanged: 0/0
  8702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8703 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;Total ram usage:        4 bytes
  8708 ;; Hardware stack levels used: 1
  8709 ;; Hardware stack levels required when called: 10
  8710 ;; This function calls:
  8711 ;;		Nothing
  8712 ;; This function is called by:
  8713 ;;		_GenericQueue_Enqueue
  8714 ;; This function uses a non-reentrant model
  8715 ;;
  8716                           
  8717     1F92                     _GenericQueue_IsFull:	
  8718                           ;psect for function _GenericQueue_IsFull
  8719                           
  8720                           
  8721                           ;generic_queue.c: 16:     return (q->size == 15);
  8722                           
  8723                           ;incstack = 0
  8724                           ; Regs used in _GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
  8725     1F92  0828               	movf	GenericQueue_IsFull@q^(0+128),w
  8726     1F93  3E5E               	addlw	94
  8727     1F94  0086               	movwf	6
  8728     1F95  3000               	movlw	0
  8729     1F96  3D29               	addwfc	(GenericQueue_IsFull@q+1)^(0+128),w
  8730     1F97  0087               	movwf	7
  8731     1F98  300F               	movlw	15
  8732     1F99  0601               	xorwf	1,w
  8733     1F9A  1D03               	btfss	3,2
  8734     1F9B  2F9E               	goto	u3850
  8735     1F9C  3001               	movlw	1
  8736     1F9D  2F9F               	goto	u3860
  8737     1F9E                     u3850:
  8738     1F9E  3000               	movlw	0
  8739     1F9F                     u3860:
  8740     1F9F  00AA               	movwf	??_GenericQueue_IsFull^(0+128)
  8741     1FA0  01AB               	clrf	(??_GenericQueue_IsFull^(0+128)+1)
  8742     1FA1  082A               	movf	??_GenericQueue_IsFull^(0+128),w
  8743     1FA2  00A8               	movwf	?_GenericQueue_IsFull^(0+128)
  8744     1FA3  082B               	movf	(??_GenericQueue_IsFull+1)^(0+128),w
  8745     1FA4  00A9               	movwf	(?_GenericQueue_IsFull+1)^(0+128)
  8746     1FA5  0008               	return
  8747     1FA6                     __end_of_GenericQueue_IsFull:
  8748                           
  8749                           	psect	text40
  8750     1606                     __ptext40:	
  8751 ;; *************** function _GenericQueue_Contains *****************
  8752 ;; Defined at:
  8753 ;;		line 52 in file "generic_queue.c"
  8754 ;; Parameters:    Size  Location     Type
  8755 ;;  q               2   22[BANK1 ] PTR struct .
  8756 ;;		 -> keyboard(101), 
  8757 ;;  item            1   24[BANK1 ] PTR const void 
  8758 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2865(1), APP_KeyboardUpdateState@usbHidCode_2856(1), 
  8759 ;; Auto vars:     Size  Location     Type
  8760 ;;  i               1   29[BANK1 ] unsigned char 
  8761 ;; Return value:  Size  Location     Type
  8762 ;;                  1    wreg      _Bool 
  8763 ;; Registers used:
  8764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8765 ;; Tracked objects:
  8766 ;;		On entry : 1F/1
  8767 ;;		On exit  : 1F/1
  8768 ;;		Unchanged: 0/0
  8769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8770 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8771 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8772 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8773 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  8774 ;;Total ram usage:        8 bytes
  8775 ;; Hardware stack levels used: 1
  8776 ;; Hardware stack levels required when called: 11
  8777 ;; This function calls:
  8778 ;;		_GenericQueue_IsEmpty
  8779 ;;		___awmod
  8780 ;;		___wmul
  8781 ;;		_memcmp
  8782 ;; This function is called by:
  8783 ;;		_APP_KeyboardUpdateState
  8784 ;; This function uses a non-reentrant model
  8785 ;;
  8786                           
  8787     1606                     _GenericQueue_Contains:	
  8788                           ;psect for function _GenericQueue_Contains
  8789                           
  8790                           
  8791                           ;generic_queue.c: 53:     if (!GenericQueue_IsEmpty(q)) {
  8792                           
  8793                           ;incstack = 0
  8794                           ; Regs used in _GenericQueue_Contains: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8795     1606  083F               	movf	(GenericQueue_Contains@q+1)^(0+128),w
  8796     1607  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  8797     1608  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8798     1609  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  8799     160A  319F  276B  3196   	fcall	_GenericQueue_IsEmpty
  8800     160D  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  8801     160E  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  8802     160F  1D03               	btfss	3,2
  8803     1610  2E66               	goto	l4932
  8804                           
  8805                           ;generic_queue.c: 54:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  8806     1611  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8807     1612  3E5C               	addlw	92
  8808     1613  0086               	movwf	6
  8809     1614  3000               	movlw	0
  8810     1615  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8811     1616  0087               	movwf	7
  8812     1617  0801               	movf	1,w
  8813     1618                     L6:
  8814     1618  00C5               	movwf	GenericQueue_Contains@i^(0+128)
  8815     1619  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8816     161A  3E5D               	addlw	93
  8817     161B  0086               	movwf	6
  8818     161C  3000               	movlw	0
  8819     161D  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8820     161E  0087               	movwf	7
  8821     161F  0801               	movf	1,w
  8822     1620  0645               	xorwf	GenericQueue_Contains@i^(0+128),w
  8823     1621  1903               	btfsc	3,2
  8824     1622  2E66               	goto	l4932
  8825                           
  8826                           ;generic_queue.c: 55:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  8827     1623  0845               	movf	GenericQueue_Contains@i^(0+128),w
  8828     1624  00C1               	movwf	??_GenericQueue_Contains^(0+128)
  8829     1625  01C2               	clrf	(??_GenericQueue_Contains^(0+128)+1)
  8830     1626  0841               	movf	??_GenericQueue_Contains^(0+128),w
  8831     1627  00AF               	movwf	___wmul@multiplier^(0+128)
  8832     1628  0842               	movf	(??_GenericQueue_Contains+1)^(0+128),w
  8833     1629  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8834     162A  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8835     162B  3E5A               	addlw	90
  8836     162C  0086               	movwf	6
  8837     162D  3000               	movlw	0
  8838     162E  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8839     162F  0087               	movwf	7
  8840     1630  3F40               	moviw [0]fsr1
  8841     1631  00B1               	movwf	___wmul@multiplicand^(0+128)
  8842     1632  3F41               	moviw [1]fsr1
  8843     1633  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8844     1634  3191  2100  3196   	fcall	___wmul
  8845     1637  082F               	movf	?___wmul^(0+128),w
  8846     1638  073E               	addwf	GenericQueue_Contains@q^(0+128),w
  8847     1639  00C3               	movwf	(??_GenericQueue_Contains+2)^(0+128)
  8848     163A  0830               	movf	(?___wmul+1)^(0+128),w
  8849     163B  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8850     163C  00C4               	movwf	(??_GenericQueue_Contains+3)^(0+128)
  8851     163D  0843               	movf	(??_GenericQueue_Contains+2)^(0+128),w
  8852     163E  00B5               	movwf	memcmp@vl^(0+128)
  8853     163F  0844               	movf	(??_GenericQueue_Contains+3)^(0+128),w
  8854     1640  00B6               	movwf	(memcmp@vl+1)^(0+128)
  8855     1641  0840               	movf	GenericQueue_Contains@item^(0+128),w
  8856     1642  00B7               	movwf	memcmp@vr^(0+128)
  8857     1643  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8858     1644  3E5A               	addlw	90
  8859     1645  0086               	movwf	6
  8860     1646  3000               	movlw	0
  8861     1647  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8862     1648  0087               	movwf	7
  8863     1649  3F40               	moviw [0]fsr1
  8864     164A  00B8               	movwf	memcmp@n^(0+128)
  8865     164B  3F41               	moviw [1]fsr1
  8866     164C  00B9               	movwf	(memcmp@n+1)^(0+128)
  8867     164D  3192  22DF  3196   	fcall	_memcmp
  8868     1650  0835               	movf	?_memcmp^(0+128),w
  8869     1651  0436               	iorwf	(?_memcmp+1)^(0+128),w
  8870     1652  1D03               	btfss	3,2
  8871     1653  2E56               	goto	l4928
  8872                           
  8873                           ;generic_queue.c: 56:                 return 1;
  8874     1654  3001               	movlw	1
  8875     1655  0008               	return
  8876     1656                     l4928:
  8877                           
  8878                           ;generic_queue.c: 58:         }
  8879     1656  300F               	movlw	15
  8880     1657  00A8               	movwf	___awmod@divisor^(0+128)
  8881     1658  3000               	movlw	0
  8882     1659  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8883     165A  0845               	movf	GenericQueue_Contains@i^(0+128),w
  8884     165B  3E01               	addlw	1
  8885     165C  00AA               	movwf	___awmod@dividend^(0+128)
  8886     165D  3000               	movlw	0
  8887     165E  1803               	skipnc
  8888     165F  3001               	movlw	1
  8889     1660  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8890     1661  3194  248D  3196   	fcall	___awmod
  8891     1664  0828               	movf	?___awmod^(0+128),w
  8892     1665  2E18               	goto	L6
  8893     1666                     l4932:
  8894                           
  8895                           ;generic_queue.c: 60:     return 0;
  8896     1666  3000               	movlw	0
  8897     1667  0008               	return
  8898     1668                     __end_of_GenericQueue_Contains:
  8899                           
  8900                           	psect	text41
  8901     12DF                     __ptext41:	
  8902 ;; *************** function _memcmp *****************
  8903 ;; Defined at:
  8904 ;;		line 3 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memcmp.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;  vl              2   13[BANK1 ] PTR const void 
  8907 ;;		 -> keyboard$buffer(90), keyboard(101), 
  8908 ;;  vr              1   15[BANK1 ] PTR const void 
  8909 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2865(1), APP_KeyboardUpdateState@usbHidCode_2857(1), APP_KeyboardUpdateState@
      +usbHidCode_2856(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8910 ;;  n               2   16[BANK1 ] unsigned int 
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;  l               2   19[BANK1 ] PTR const unsigned char 
  8913 ;;		 -> keyboard$buffer(90), keyboard(101), 
  8914 ;;  r               1   21[BANK1 ] PTR const unsigned char 
  8915 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2865(1), APP_KeyboardUpdateState@usbHidCode_2857(1), APP_KeyboardUpdateState@
      +usbHidCode_2856(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8916 ;; Return value:  Size  Location     Type
  8917 ;;                  2   13[BANK1 ] int 
  8918 ;; Registers used:
  8919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8920 ;; Tracked objects:
  8921 ;;		On entry : 1F/1
  8922 ;;		On exit  : 1F/1
  8923 ;;		Unchanged: 0/0
  8924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8925 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;Total ram usage:        9 bytes
  8930 ;; Hardware stack levels used: 1
  8931 ;; Hardware stack levels required when called: 10
  8932 ;; This function calls:
  8933 ;;		Nothing
  8934 ;; This function is called by:
  8935 ;;		_GenericQueue_Remove
  8936 ;;		_GenericQueue_Contains
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940     12DF                     _memcmp:	
  8941                           ;psect for function _memcmp
  8942                           
  8943                           
  8944                           ;incstack = 0
  8945                           ; Regs used in _memcmp: [wreg-fsr1h+status,2+status,0]
  8946     12DF  0836               	movf	(memcmp@vl+1)^(0+128),w
  8947     12E0  00BC               	movwf	(memcmp@l+1)^(0+128)
  8948     12E1  0835               	movf	memcmp@vl^(0+128),w
  8949     12E2  00BB               	movwf	memcmp@l^(0+128)
  8950     12E3  0837               	movf	memcmp@vr^(0+128),w
  8951     12E4  00BD               	movwf	memcmp@r^(0+128)
  8952     12E5  2AFD               	goto	l4706
  8953     12E6                     l4708:
  8954     12E6  083D               	movf	memcmp@r^(0+128),w
  8955     12E7  0086               	movwf	6
  8956     12E8  0187               	clrf	7
  8957     12E9  083B               	movf	memcmp@l^(0+128),w
  8958     12EA  0084               	movwf	4
  8959     12EB  083C               	movf	(memcmp@l+1)^(0+128),w
  8960     12EC  0085               	movwf	5
  8961     12ED  0800               	movf	0,w
  8962     12EE  0601               	xorwf	1,w
  8963     12EF  1D03               	btfss	3,2
  8964     12F0  2B01               	goto	l4710
  8965     12F1  3001               	movlw	1
  8966     12F2  02B8               	subwf	memcmp@n^(0+128),f
  8967     12F3  3000               	movlw	0
  8968     12F4  3BB9               	subwfb	(memcmp@n+1)^(0+128),f
  8969     12F5  3001               	movlw	1
  8970     12F6  07BB               	addwf	memcmp@l^(0+128),f
  8971     12F7  3000               	movlw	0
  8972     12F8  3DBC               	addwfc	(memcmp@l+1)^(0+128),f
  8973     12F9  3001               	movlw	1
  8974     12FA  00BA               	movwf	??_memcmp^(0+128)
  8975     12FB  083A               	movf	??_memcmp^(0+128),w
  8976     12FC  07BD               	addwf	memcmp@r^(0+128),f
  8977     12FD                     l4706:
  8978     12FD  0838               	movf	memcmp@n^(0+128),w
  8979     12FE  0439               	iorwf	(memcmp@n+1)^(0+128),w
  8980     12FF  1D03               	btfss	3,2
  8981     1300  2AE6               	goto	l4708
  8982     1301                     l4710:
  8983     1301  0838               	movf	memcmp@n^(0+128),w
  8984     1302  0439               	iorwf	(memcmp@n+1)^(0+128),w
  8985     1303  1D03               	btfss	3,2
  8986     1304  2B08               	goto	l4714
  8987     1305  01B5               	clrf	?_memcmp^(0+128)
  8988     1306  01B6               	clrf	(?_memcmp+1)^(0+128)
  8989     1307  0008               	return
  8990     1308                     l4714:
  8991     1308  083B               	movf	memcmp@l^(0+128),w
  8992     1309  0086               	movwf	6
  8993     130A  083C               	movf	(memcmp@l+1)^(0+128),w
  8994     130B  0087               	movwf	7
  8995     130C  083D               	movf	memcmp@r^(0+128),w
  8996     130D  0084               	movwf	4
  8997     130E  0185               	clrf	5
  8998     130F  0800               	movf	0,w
  8999     1310  0201               	subwf	1,w
  9000     1311  00B5               	movwf	?_memcmp^(0+128)
  9001     1312  01B6               	clrf	(?_memcmp^(0+128)+1)
  9002     1313  1C03               	skipc
  9003     1314  03B6               	decf	(?_memcmp+1)^(0+128),f
  9004     1315  0008               	return
  9005     1316                     __end_of_memcmp:
  9006                           
  9007                           	psect	text42
  9008     1100                     __ptext42:	
  9009 ;; *************** function ___wmul *****************
  9010 ;; Defined at:
  9011 ;;		line 15 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/Umul16.c"
  9012 ;; Parameters:    Size  Location     Type
  9013 ;;  multiplier      2    7[BANK1 ] unsigned int 
  9014 ;;  multiplicand    2    9[BANK1 ] unsigned int 
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;  product         2   11[BANK1 ] unsigned int 
  9017 ;; Return value:  Size  Location     Type
  9018 ;;                  2    7[BANK1 ] unsigned int 
  9019 ;; Registers used:
  9020 ;;		wreg, status,2, status,0
  9021 ;; Tracked objects:
  9022 ;;		On entry : 1F/1
  9023 ;;		On exit  : 1F/1
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9026 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9027 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9029 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;Total ram usage:        6 bytes
  9031 ;; Hardware stack levels used: 1
  9032 ;; Hardware stack levels required when called: 10
  9033 ;; This function calls:
  9034 ;;		Nothing
  9035 ;; This function is called by:
  9036 ;;		_GenericQueue_Enqueue
  9037 ;;		_GenericQueue_Dequeue
  9038 ;;		_GenericQueue_Remove
  9039 ;;		_GenericQueue_Contains
  9040 ;;		_GenericQueue_CopyToArray
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044     1100                     ___wmul:	
  9045                           ;psect for function ___wmul
  9046                           
  9047                           
  9048                           ;incstack = 0
  9049                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9050     1100  01B3               	clrf	___wmul@product^(0+128)
  9051     1101  01B4               	clrf	(___wmul@product+1)^(0+128)
  9052     1102                     l4720:
  9053     1102  1C2F               	btfss	___wmul@multiplier^(0+128),0
  9054     1103  2908               	goto	l1242
  9055     1104  0831               	movf	___wmul@multiplicand^(0+128),w
  9056     1105  07B3               	addwf	___wmul@product^(0+128),f
  9057     1106  0832               	movf	(___wmul@multiplicand+1)^(0+128),w
  9058     1107  3DB4               	addwfc	(___wmul@product+1)^(0+128),f
  9059     1108                     l1242:
  9060     1108  3001               	movlw	1
  9061     1109                     u3915:
  9062     1109  35B1               	lslf	___wmul@multiplicand^(0+128),f
  9063     110A  0DB2               	rlf	(___wmul@multiplicand+1)^(0+128),f
  9064     110B  0B89               	decfsz	9,f
  9065     110C  2909               	goto	u3915
  9066     110D  3001               	movlw	1
  9067     110E                     u3925:
  9068     110E  36B0               	lsrf	(___wmul@multiplier+1)^(0+128),f
  9069     110F  0CAF               	rrf	___wmul@multiplier^(0+128),f
  9070     1110  0B89               	decfsz	9,f
  9071     1111  290E               	goto	u3925
  9072     1112  082F               	movf	___wmul@multiplier^(0+128),w
  9073     1113  0430               	iorwf	(___wmul@multiplier+1)^(0+128),w
  9074     1114  1D03               	btfss	3,2
  9075     1115  2902               	goto	l4720
  9076     1116  0834               	movf	(___wmul@product+1)^(0+128),w
  9077     1117  00B0               	movwf	(?___wmul+1)^(0+128)
  9078     1118  0833               	movf	___wmul@product^(0+128),w
  9079     1119  00AF               	movwf	?___wmul^(0+128)
  9080     111A  0008               	return
  9081     111B                     __end_of___wmul:
  9082                           
  9083                           	psect	text43
  9084     148D                     __ptext43:	
  9085 ;; *************** function ___awmod *****************
  9086 ;; Defined at:
  9087 ;;		line 5 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/awmod.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;  divisor         2    0[BANK1 ] int 
  9090 ;;  dividend        2    2[BANK1 ] int 
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;  sign            1    6[BANK1 ] unsigned char 
  9093 ;;  counter         1    5[BANK1 ] unsigned char 
  9094 ;; Return value:  Size  Location     Type
  9095 ;;                  2    0[BANK1 ] int 
  9096 ;; Registers used:
  9097 ;;		wreg, status,2, status,0
  9098 ;; Tracked objects:
  9099 ;;		On entry : 1F/1
  9100 ;;		On exit  : 1F/1
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9103 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;Total ram usage:        7 bytes
  9108 ;; Hardware stack levels used: 1
  9109 ;; Hardware stack levels required when called: 10
  9110 ;; This function calls:
  9111 ;;		Nothing
  9112 ;; This function is called by:
  9113 ;;		_GenericQueue_Enqueue
  9114 ;;		_GenericQueue_Dequeue
  9115 ;;		_GenericQueue_Remove
  9116 ;;		_GenericQueue_Contains
  9117 ;;		_GenericQueue_CopyToArray
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121     148D                     ___awmod:	
  9122                           ;psect for function ___awmod
  9123                           
  9124                           
  9125                           ;incstack = 0
  9126                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  9127     148D  01AE               	clrf	___awmod@sign^(0+128)
  9128     148E  1FAB               	btfss	(___awmod@dividend+1)^(0+128),7
  9129     148F  2C97               	goto	l4740
  9130     1490  09AA               	comf	___awmod@dividend^(0+128),f
  9131     1491  09AB               	comf	(___awmod@dividend+1)^(0+128),f
  9132     1492  0AAA               	incf	___awmod@dividend^(0+128),f
  9133     1493  1903               	skipnz
  9134     1494  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
  9135     1495  01AE               	clrf	___awmod@sign^(0+128)
  9136     1496  0AAE               	incf	___awmod@sign^(0+128),f
  9137     1497                     l4740:
  9138     1497  1FA9               	btfss	(___awmod@divisor+1)^(0+128),7
  9139     1498  2C9E               	goto	l4744
  9140     1499  09A8               	comf	___awmod@divisor^(0+128),f
  9141     149A  09A9               	comf	(___awmod@divisor+1)^(0+128),f
  9142     149B  0AA8               	incf	___awmod@divisor^(0+128),f
  9143     149C  1903               	skipnz
  9144     149D  0AA9               	incf	(___awmod@divisor+1)^(0+128),f
  9145     149E                     l4744:
  9146     149E  0828               	movf	___awmod@divisor^(0+128),w
  9147     149F  0429               	iorwf	(___awmod@divisor+1)^(0+128),w
  9148     14A0  1903               	btfsc	3,2
  9149     14A1  2CC5               	goto	l4762
  9150     14A2  01AD               	clrf	___awmod@counter^(0+128)
  9151     14A3  0AAD               	incf	___awmod@counter^(0+128),f
  9152     14A4                     l4752:
  9153     14A4  1BA9               	btfsc	(___awmod@divisor+1)^(0+128),7
  9154     14A5  2CB0               	goto	l4754
  9155     14A6  3001               	movlw	1
  9156     14A7                     u3975:
  9157     14A7  35A8               	lslf	___awmod@divisor^(0+128),f
  9158     14A8  0DA9               	rlf	(___awmod@divisor+1)^(0+128),f
  9159     14A9  0B89               	decfsz	9,f
  9160     14AA  2CA7               	goto	u3975
  9161     14AB  3001               	movlw	1
  9162     14AC  00AC               	movwf	??___awmod^(0+128)
  9163     14AD  082C               	movf	??___awmod^(0+128),w
  9164     14AE  07AD               	addwf	___awmod@counter^(0+128),f
  9165     14AF  2CA4               	goto	l4752
  9166     14B0                     l4754:
  9167     14B0  0829               	movf	(___awmod@divisor+1)^(0+128),w
  9168     14B1  022B               	subwf	(___awmod@dividend+1)^(0+128),w
  9169     14B2  1D03               	skipz
  9170     14B3  2CB6               	goto	u3995
  9171     14B4  0828               	movf	___awmod@divisor^(0+128),w
  9172     14B5  022A               	subwf	___awmod@dividend^(0+128),w
  9173     14B6                     u3995:
  9174     14B6  1C03               	skipc
  9175     14B7  2CBC               	goto	l4758
  9176     14B8  0828               	movf	___awmod@divisor^(0+128),w
  9177     14B9  02AA               	subwf	___awmod@dividend^(0+128),f
  9178     14BA  0829               	movf	(___awmod@divisor+1)^(0+128),w
  9179     14BB  3BAB               	subwfb	(___awmod@dividend+1)^(0+128),f
  9180     14BC                     l4758:
  9181     14BC  3001               	movlw	1
  9182     14BD                     u4005:
  9183     14BD  36A9               	lsrf	(___awmod@divisor+1)^(0+128),f
  9184     14BE  0CA8               	rrf	___awmod@divisor^(0+128),f
  9185     14BF  0B89               	decfsz	9,f
  9186     14C0  2CBD               	goto	u4005
  9187     14C1  3001               	movlw	1
  9188     14C2  02AD               	subwf	___awmod@counter^(0+128),f
  9189     14C3  1D03               	btfss	3,2
  9190     14C4  2CB0               	goto	l4754
  9191     14C5                     l4762:
  9192     14C5  082E               	movf	___awmod@sign^(0+128),w
  9193     14C6  1903               	btfsc	3,2
  9194     14C7  2CCD               	goto	l4766
  9195     14C8  09AA               	comf	___awmod@dividend^(0+128),f
  9196     14C9  09AB               	comf	(___awmod@dividend+1)^(0+128),f
  9197     14CA  0AAA               	incf	___awmod@dividend^(0+128),f
  9198     14CB  1903               	skipnz
  9199     14CC  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
  9200     14CD                     l4766:
  9201     14CD  082B               	movf	(___awmod@dividend+1)^(0+128),w
  9202     14CE  00A9               	movwf	(?___awmod+1)^(0+128)
  9203     14CF  082A               	movf	___awmod@dividend^(0+128),w
  9204     14D0  00A8               	movwf	?___awmod^(0+128)
  9205     14D1  0008               	return
  9206     14D2                     __end_of___awmod:
  9207                           
  9208                           	psect	text44
  9209     1F6B                     __ptext44:	
  9210 ;; *************** function _GenericQueue_IsEmpty *****************
  9211 ;; Defined at:
  9212 ;;		line 11 in file "generic_queue.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;  q               2    0[BANK1 ] PTR struct .
  9215 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;		None
  9218 ;; Return value:  Size  Location     Type
  9219 ;;                  2    0[BANK1 ] int 
  9220 ;; Registers used:
  9221 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9222 ;; Tracked objects:
  9223 ;;		On entry : 1F/1
  9224 ;;		On exit  : 1F/1
  9225 ;;		Unchanged: 0/0
  9226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9227 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;Total ram usage:        4 bytes
  9232 ;; Hardware stack levels used: 1
  9233 ;; Hardware stack levels required when called: 10
  9234 ;; This function calls:
  9235 ;;		Nothing
  9236 ;; This function is called by:
  9237 ;;		_PS2Keyboard_GetScanCode
  9238 ;;		_GenericQueue_Dequeue
  9239 ;;		_GenericQueue_Remove
  9240 ;;		_GenericQueue_Contains
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244     1F6B                     _GenericQueue_IsEmpty:	
  9245                           ;psect for function _GenericQueue_IsEmpty
  9246                           
  9247                           
  9248                           ;generic_queue.c: 12:     return (q->size == 0);
  9249                           
  9250                           ;incstack = 0
  9251                           ; Regs used in _GenericQueue_IsEmpty: [wreg+fsr1l+fsr1h+status,2+status,0]
  9252     1F6B  0828               	movf	GenericQueue_IsEmpty@q^(0+128),w
  9253     1F6C  3E5E               	addlw	94
  9254     1F6D  0086               	movwf	6
  9255     1F6E  3000               	movlw	0
  9256     1F6F  3D29               	addwfc	(GenericQueue_IsEmpty@q+1)^(0+128),w
  9257     1F70  0087               	movwf	7
  9258     1F71  0801               	movf	1,w
  9259     1F72  1D03               	btfss	3,2
  9260     1F73  2F76               	goto	u3830
  9261     1F74  3001               	movlw	1
  9262     1F75  2F77               	goto	u3840
  9263     1F76                     u3830:
  9264     1F76  3000               	movlw	0
  9265     1F77                     u3840:
  9266     1F77  00AA               	movwf	??_GenericQueue_IsEmpty^(0+128)
  9267     1F78  01AB               	clrf	(??_GenericQueue_IsEmpty^(0+128)+1)
  9268     1F79  082A               	movf	??_GenericQueue_IsEmpty^(0+128),w
  9269     1F7A  00A8               	movwf	?_GenericQueue_IsEmpty^(0+128)
  9270     1F7B  082B               	movf	(??_GenericQueue_IsEmpty+1)^(0+128),w
  9271     1F7C  00A9               	movwf	(?_GenericQueue_IsEmpty+1)^(0+128)
  9272     1F7D  0008               	return
  9273     1F7E                     __end_of_GenericQueue_IsEmpty:
  9274                           
  9275                           	psect	text45
  9276     1EB8                     __ptext45:	
  9277 ;; *************** function _APP_KeyboardProcessOutputReport *****************
  9278 ;; Defined at:
  9279 ;;		line 541 in file "app_device_keyboard.c"
  9280 ;; Parameters:    Size  Location     Type
  9281 ;;		None
  9282 ;; Auto vars:     Size  Location     Type
  9283 ;;		None
  9284 ;; Return value:  Size  Location     Type
  9285 ;;                  1    wreg      void 
  9286 ;; Registers used:
  9287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9288 ;; Tracked objects:
  9289 ;;		On entry : 1C/1
  9290 ;;		On exit  : 1F/2
  9291 ;;		Unchanged: 0/0
  9292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;Total ram usage:        0 bytes
  9298 ;; Hardware stack levels used: 1
  9299 ;; Hardware stack levels required when called: 11
  9300 ;; This function calls:
  9301 ;;		_PS2Keyboard_SendCommand
  9302 ;; This function is called by:
  9303 ;;		_APP_KeyboardTasks
  9304 ;; This function uses a non-reentrant model
  9305 ;;
  9306                           
  9307     1EB8                     _APP_KeyboardProcessOutputReport:	
  9308                           ;psect for function _APP_KeyboardProcessOutputReport
  9309                           
  9310                           
  9311                           ;app_device_keyboard.c: 542:     keyboard.leds.value = outputReport.value;
  9312                           
  9313                           ;incstack = 0
  9314                           ; Regs used in _APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  9315     1EB8  3090               	movlw	144
  9316     1EB9  0086               	movwf	6
  9317     1EBA  3023               	movlw	35
  9318     1EBB  0087               	movwf	7
  9319     1EBC  0022               	movlb	2	; select bank2
  9320     1EBD  0820               	movf	32,w	;volatile
  9321     1EBE  0081               	movwf	1
  9322                           
  9323                           ;app_device_keyboard.c: 543:     PS2Keyboard_SendCommand(0xED);
  9324     1EBF  30ED               	movlw	237
  9325     1EC0  3191  2136         	fcall	_PS2Keyboard_SendCommand
  9326     1EC2  0008               	return
  9327     1EC3                     __end_of_APP_KeyboardProcessOutputReport:
  9328                           
  9329                           	psect	text46
  9330     1136                     __ptext46:	
  9331 ;; *************** function _PS2Keyboard_SendCommand *****************
  9332 ;; Defined at:
  9333 ;;		line 60 in file "ps2_keyboard.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;  cmd             1    wreg     unsigned char 
  9336 ;; Auto vars:     Size  Location     Type
  9337 ;;  cmd             1    0[BANK1 ] unsigned char 
  9338 ;; Return value:  Size  Location     Type
  9339 ;;                  1    wreg      void 
  9340 ;; Registers used:
  9341 ;;		wreg, status,2
  9342 ;; Tracked objects:
  9343 ;;		On entry : 1C/1
  9344 ;;		On exit  : 1F/2
  9345 ;;		Unchanged: 0/0
  9346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;Total ram usage:        1 bytes
  9352 ;; Hardware stack levels used: 1
  9353 ;; Hardware stack levels required when called: 10
  9354 ;; This function calls:
  9355 ;;		Nothing
  9356 ;; This function is called by:
  9357 ;;		_APP_KeyboardUpdateState
  9358 ;;		_APP_KeyboardProcessOutputReport
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362     1136                     _PS2Keyboard_SendCommand:	
  9363                           ;psect for function _PS2Keyboard_SendCommand
  9364                           
  9365                           
  9366                           ;incstack = 0
  9367                           ; Regs used in _PS2Keyboard_SendCommand: [wreg+status,2]
  9368                           ;PS2Keyboard_SendCommand@cmd stored from wreg
  9369     1136  0021               	movlb	1	; select bank1
  9370     1137  00A8               	movwf	PS2Keyboard_SendCommand@cmd^(0+128)
  9371                           
  9372                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
  9373     1138  0828               	movf	PS2Keyboard_SendCommand@cmd^(0+128),w
  9374     1139  0022               	movlb	2	; select bank2
  9375     113A  00CE               	movwf	_keyboardCommand^(0+256)	;volatile
  9376                           
  9377                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
  9378     113B  138B               	bcf	11,7	;volatile
  9379     113C  0021               	movlb	1	; select bank1
  9380     113D  120C               	bcf	12,4	;volatile
  9381     113E  0022               	movlb	2	; select bank2
  9382     113F  120C               	bcf	12,4	;volatile
  9383                           
  9384                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
  9385     1140  30F0               	movlw	240
  9386     1141                     u6727:
  9387     1141  3200               	nop2
  9388     1142  0B89               	decfsz	9,f
  9389     1143  2941               	goto	u6727
  9390     1144  0021               	movlb	1	; select bank1
  9391     1145  160C               	bsf	12,4	;volatile
  9392                           
  9393                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
  9394     1146  0020               	movlb	0	; select bank0
  9395     1147  01E9               	clrf	_keyboardCommandCount	;volatile
  9396                           
  9397                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
  9398     1148  300C               	movlw	12
  9399     1149  0022               	movlb	2	; select bank2
  9400     114A  00CD               	movwf	_keyboardCommandBits^(0+256)	;volatile
  9401                           
  9402                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
  9403     114B  01CC               	clrf	_keyboardCommandOnes^(0+256)	;volatile
  9404     114C  0021               	movlb	1	; select bank1
  9405     114D  128C               	bcf	12,5	;volatile
  9406     114E  0022               	movlb	2	; select bank2
  9407     114F  128C               	bcf	12,5	;volatile
  9408                           
  9409                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
  9410     1150  178B               	bsf	11,7	;volatile
  9411     1151  0008               	return
  9412     1152                     __end_of_PS2Keyboard_SendCommand:
  9413                           
  9414                           	psect	intentry
  9415     0004                     __pintentry:	
  9416 ;; *************** function _INTERRUPT_InterruptManager *****************
  9417 ;; Defined at:
  9418 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  9419 ;; Parameters:    Size  Location     Type
  9420 ;;		None
  9421 ;; Auto vars:     Size  Location     Type
  9422 ;;		None
  9423 ;; Return value:  Size  Location     Type
  9424 ;;                  1    wreg      void 
  9425 ;; Registers used:
  9426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9427 ;; Tracked objects:
  9428 ;;		On entry : 0/0
  9429 ;;		On exit  : 0/0
  9430 ;;		Unchanged: 0/0
  9431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;Total ram usage:        0 bytes
  9437 ;; Hardware stack levels used: 1
  9438 ;; Hardware stack levels required when called: 9
  9439 ;; This function calls:
  9440 ;;		NULL
  9441 ;;		_EUSART_Receive_ISR
  9442 ;;		_EUSART_Transmit_ISR
  9443 ;;		_PIN_MANAGER_IOC
  9444 ;;		_TMR2_ISR
  9445 ;;		_USBDeviceTasks
  9446 ;; This function is called by:
  9447 ;;		Interrupt level 1
  9448 ;; This function uses a non-reentrant model
  9449 ;;
  9450                           
  9451     0004                     _INTERRUPT_InterruptManager:
  9452                           
  9453                           ;incstack = 0
  9454     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9455                           
  9456                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9457     0005  3180               	pagesel	$
  9458                           
  9459                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  9460     0006  198B               	btfsc	11,3	;volatile
  9461     0007  1C0B               	btfss	11,0	;volatile
  9462     0008  280D               	goto	i1l133
  9463                           
  9464                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  9465     0009  319E  26AD  3180   	fcall	_PIN_MANAGER_IOC
  9466                           
  9467                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  9468     000C  283B               	goto	i1l145
  9469     000D                     i1l133:	
  9470                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  9471                           
  9472     000D  1F0B               	btfss	11,6	;volatile
  9473     000E  283B               	goto	i1l145
  9474                           
  9475                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.USBIE == 1 && PIR2bits.USBIF == 1)
  9476     000F  0021               	movlb	1	; select bank1
  9477     0010  1D12               	btfss	18,2	;volatile
  9478     0011  2819               	goto	i1l136
  9479     0012  0020               	movlb	0	; select bank0
  9480     0013  1D12               	btfss	18,2	;volatile
  9481     0014  2819               	goto	i1l136
  9482                           
  9483                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             USBDeviceTasks();
  9484     0015  318F  272D  3180   	fcall	_USBDeviceTasks
  9485                           
  9486                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  9487     0018  283B               	goto	i1l145
  9488     0019                     i1l136:	
  9489                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
  9490                           
  9491     0019  0021               	movlb	1	; select bank1
  9492     001A  1E11               	btfss	17,4	;volatile
  9493     001B  2826               	goto	i1l138
  9494     001C  0020               	movlb	0	; select bank0
  9495     001D  1E11               	btfss	17,4	;volatile
  9496     001E  2826               	goto	i1l138
  9497                           
  9498                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_TxDefaultInterruptHandler();
  9499     001F  0022               	movlb	2	; select bank2
  9500     0020  084B               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
  9501     0021  008A               	movwf	10
  9502     0022  084A               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
  9503     0023  000A               	callw
  9504     0024  3180               	pagesel	$
  9505                           
  9506                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  9507     0025  283B               	goto	i1l145
  9508     0026                     i1l138:	
  9509                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  9510                           
  9511     0026  0021               	movlb	1	; select bank1
  9512     0027  1E91               	btfss	17,5	;volatile
  9513     0028  2833               	goto	i1l140
  9514     0029  0020               	movlb	0	; select bank0
  9515     002A  1E91               	btfss	17,5	;volatile
  9516     002B  2833               	goto	i1l140
  9517                           
  9518                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             EUSART_RxDefaultInterruptHandler();
  9519     002C  0022               	movlb	2	; select bank2
  9520     002D  0849               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
  9521     002E  008A               	movwf	10
  9522     002F  0848               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
  9523     0030  000A               	callw
  9524     0031  3180               	pagesel	$
  9525                           
  9526                           ;mcc_generated_files/interrupt_manager.c: 72:         }
  9527     0032  283B               	goto	i1l145
  9528     0033                     i1l140:	
  9529                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
  9530                           
  9531     0033  0021               	movlb	1	; select bank1
  9532     0034  1C91               	btfss	17,1	;volatile
  9533     0035  283B               	goto	i1l145
  9534     0036  0020               	movlb	0	; select bank0
  9535     0037  1C91               	btfss	17,1	;volatile
  9536     0038  283B               	goto	i1l145
  9537                           
  9538                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR2_ISR();
  9539     0039  319E  26CE         	fcall	_TMR2_ISR
  9540     003B                     i1l145:	
  9541                           ;mcc_generated_files/interrupt_manager.c: 76:         }
  9542                           
  9543     003B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9544     003C  0009               	retfie
  9545     003D                     __end_of_INTERRUPT_InterruptManager:
  9546                           
  9547                           	psect	text48
  9548     0F2D                     __ptext48:	
  9549 ;; *************** function _USBDeviceTasks *****************
  9550 ;; Defined at:
  9551 ;;		line 481 in file "usb/usb_device.c"
  9552 ;; Parameters:    Size  Location     Type
  9553 ;;		None
  9554 ;; Auto vars:     Size  Location     Type
  9555 ;;  i               1   18[BANK0 ] unsigned char 
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  1    wreg      void 
  9558 ;; Registers used:
  9559 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9560 ;; Tracked objects:
  9561 ;;		On entry : 1F/0
  9562 ;;		On exit  : 1F/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;Total ram usage:        2 bytes
  9570 ;; Hardware stack levels used: 1
  9571 ;; Hardware stack levels required when called: 8
  9572 ;; This function calls:
  9573 ;;		_USBCtrlEPAllowStatusStage
  9574 ;;		_USBCtrlEPService
  9575 ;;		_USBIncrement1msInternalTimers
  9576 ;;		_USBStallHandler
  9577 ;;		_USBSuspend
  9578 ;;		_USBWakeFromSuspend
  9579 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9580 ;;		i1_USBDeviceInit
  9581 ;; This function is called by:
  9582 ;;		_INTERRUPT_InterruptManager
  9583 ;; This function uses a non-reentrant model
  9584 ;;
  9585                           
  9586     0F2D                     _USBDeviceTasks:	
  9587                           ;psect for function _USBDeviceTasks
  9588                           
  9589                           
  9590                           ;usb/usb_device.c: 483:     uint8_t i;;usb/usb_device.c: 594:     if(USBDeviceState == A
      +                          TTACHED_STATE)
  9591                           
  9592                           ;incstack = 0
  9593                           ; Regs used in _USBDeviceTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9594     0F2D  036C               	decf	_USBDeviceState,w
  9595     0F2E  1D03               	btfss	3,2
  9596     0F2F  2F39               	goto	i1l5668
  9597                           
  9598                           ;usb/usb_device.c: 595:     {;usb/usb_device.c: 605:         if(!UCONbits.SE0)
  9599     0F30  003D               	movlb	29	; select bank29
  9600     0F31  1A8E               	btfsc	14,5	;volatile
  9601     0F32  2F39               	goto	i1l5668
  9602                           
  9603                           ;usb/usb_device.c: 606:         {;usb/usb_device.c: 612:                 {UIR = 0;};
  9604     0F33  0190               	clrf	16	;volatile
  9605                           
  9606                           ;usb/usb_device.c: 618:             UIEbits.URSTIE = 1;
  9607     0F34  1412               	bsf	18,0	;volatile
  9608                           
  9609                           ;usb/usb_device.c: 619:             UIEbits.IDLEIE = 1;
  9610     0F35  1612               	bsf	18,4	;volatile
  9611                           
  9612                           ;usb/usb_device.c: 620:             USBDeviceState = POWERED_STATE;
  9613     0F36  3002               	movlw	2
  9614     0F37  0020               	movlb	0	; select bank0
  9615     0F38  00EC               	movwf	_USBDeviceState	;volatile
  9616     0F39                     i1l5668:
  9617                           
  9618                           ;usb/usb_device.c: 638:     if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  9619     0F39  003D               	movlb	29	; select bank29
  9620     0F3A  1910               	btfsc	16,2	;volatile
  9621     0F3B  1D12               	btfss	18,2	;volatile
  9622     0F3C  2F46               	goto	i1l5676
  9623                           
  9624                           ;usb/usb_device.c: 639:     {;usb/usb_device.c: 640:         (UIR &= 0xFB);
  9625     0F3D  30FB               	movlw	251
  9626     0F3E  0020               	movlb	0	; select bank0
  9627     0F3F  00E1               	movwf	??_USBDeviceTasks
  9628     0F40  0861               	movf	??_USBDeviceTasks,w
  9629     0F41  003D               	movlb	29	; select bank29
  9630     0F42  0590               	andwf	16,f	;volatile
  9631                           
  9632                           ;usb/usb_device.c: 644:             USBWakeFromSuspend();
  9633     0F43  3191  216E  318F   	fcall	_USBWakeFromSuspend
  9634     0F46                     i1l5676:
  9635                           
  9636                           ;usb/usb_device.c: 651:     if(UCONbits.SUSPND==1)
  9637     0F46  003D               	movlb	29	; select bank29
  9638     0F47  1C8E               	btfss	14,1	;volatile
  9639     0F48  2F4C               	goto	i1l454
  9640                           
  9641                           ;usb/usb_device.c: 652:     {;usb/usb_device.c: 653:         PIR2bits.USBIF = 0;;
  9642     0F49  0020               	movlb	0	; select bank0
  9643     0F4A  1112               	bcf	18,2	;volatile
  9644                           
  9645                           ;usb/usb_device.c: 654:         return;
  9646     0F4B  0008               	return
  9647     0F4C                     i1l454:	
  9648                           ;usb/usb_device.c: 655:     }
  9649                           
  9650                           
  9651                           ;usb/usb_device.c: 667:     if(UIRbits.URSTIF && UIEbits.URSTIE)
  9652     0F4C  1810               	btfsc	16,0	;volatile
  9653     0F4D  1C12               	btfss	18,0	;volatile
  9654     0F4E  2F5C               	goto	i1l5690
  9655                           
  9656                           ;usb/usb_device.c: 668:     {;usb/usb_device.c: 669:         USBDeviceInit();
  9657     0F4F  318D  25DE  318F   	fcall	i1_USBDeviceInit
  9658                           
  9659                           ;usb/usb_device.c: 673:         {PIE2bits.USBIE = 1;};
  9660     0F52  0021               	movlb	1	; select bank1
  9661     0F53  1512               	bsf	18,2	;volatile
  9662                           
  9663                           ;usb/usb_device.c: 675:         USBDeviceState = DEFAULT_STATE;
  9664     0F54  3004               	movlw	4
  9665     0F55  0020               	movlb	0	; select bank0
  9666     0F56  00EC               	movwf	_USBDeviceState	;volatile
  9667                           
  9668                           ;usb/usb_device.c: 685:         (UIR &= 0xFE);
  9669     0F57  30FE               	movlw	254
  9670     0F58  00E1               	movwf	??_USBDeviceTasks
  9671     0F59  0861               	movf	??_USBDeviceTasks,w
  9672     0F5A  003D               	movlb	29	; select bank29
  9673     0F5B  0590               	andwf	16,f	;volatile
  9674     0F5C                     i1l5690:
  9675                           
  9676                           ;usb/usb_device.c: 691:     if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  9677     0F5C  1A10               	btfsc	16,4	;volatile
  9678     0F5D  1E12               	btfss	18,4	;volatile
  9679     0F5E  2F62               	goto	i1l5696
  9680                           
  9681                           ;usb/usb_device.c: 692:     {;usb/usb_device.c: 698:             USBSuspend();
  9682     0F5F  3190  209A  318F   	fcall	_USBSuspend
  9683     0F62                     i1l5696:
  9684                           
  9685                           ;usb/usb_device.c: 712:     if(UIRbits.SOFIF)
  9686     0F62  003D               	movlb	29	; select bank29
  9687     0F63  1F10               	btfss	16,6	;volatile
  9688     0F64  2F8A               	goto	i1l5712
  9689                           
  9690                           ;usb/usb_device.c: 713:     {;usb/usb_device.c: 715:         if(UIEbits.SOFIE)
  9691     0F65  1F12               	btfss	18,6	;volatile
  9692     0F66  2F76               	goto	i1l5702
  9693                           
  9694                           ;usb/usb_device.c: 716:         {;usb/usb_device.c: 717:             USER_USB_CALLBACK_E
      +                          VENT_HANDLER((USB_EVENT)EVENT_SOF,0,1);
  9695     0F67  3073               	movlw	115
  9696     0F68  0020               	movlb	0	; select bank0
  9697     0F69  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9698     0F6A  3000               	movlw	0
  9699     0F6B  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9700     0F6C  3000               	movlw	0
  9701     0F6D  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9702     0F6E  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9703     0F6F  3001               	movlw	1
  9704     0F70  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9705     0F71  3000               	movlw	0
  9706     0F72  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9707     0F73  3193  238A  318F   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9708     0F76                     i1l5702:
  9709                           
  9710                           ;usb/usb_device.c: 719:         (UIR &= 0xBF);
  9711     0F76  30BF               	movlw	191
  9712     0F77  0020               	movlb	0	; select bank0
  9713     0F78  00E1               	movwf	??_USBDeviceTasks
  9714     0F79  0861               	movf	??_USBDeviceTasks,w
  9715     0F7A  003D               	movlb	29	; select bank29
  9716     0F7B  0590               	andwf	16,f	;volatile
  9717                           
  9718                           ;usb/usb_device.c: 722:             USBIncrement1msInternalTimers();
  9719     0F7C  319F  27D1  318F   	fcall	_USBIncrement1msInternalTimers
  9720                           
  9721                           ;usb/usb_device.c: 739:             if(USBStatusStageTimeoutCounter != 0u)
  9722     0F7F  085D               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  9723     0F80  1903               	btfsc	3,2
  9724     0F81  2F84               	goto	i1l460
  9725                           
  9726                           ;usb/usb_device.c: 740:             {;usb/usb_device.c: 741:                 USBStatusSt
      +                          ageTimeoutCounter--;
  9727     0F82  3001               	movlw	1
  9728     0F83  02DD               	subwf	_USBStatusStageTimeoutCounter^(0+256),f	;volatile
  9729     0F84                     i1l460:	
  9730                           ;usb/usb_device.c: 742:             }
  9731                           
  9732                           
  9733                           ;usb/usb_device.c: 748:             if(USBStatusStageTimeoutCounter == 0)
  9734     0F84  085D               	movf	_USBStatusStageTimeoutCounter^(0+256),w	;volatile
  9735     0F85  1D03               	btfss	3,2
  9736     0F86  2F8A               	goto	i1l5712
  9737                           
  9738                           ;usb/usb_device.c: 749:             {;usb/usb_device.c: 750:                 USBCtrlEPAl
      +                          lowStatusStage();
  9739     0F87  3189  21E0  318F   	fcall	_USBCtrlEPAllowStatusStage
  9740     0F8A                     i1l5712:
  9741                           
  9742                           ;usb/usb_device.c: 755:     if(UIRbits.STALLIF && UIEbits.STALLIE)
  9743     0F8A  003D               	movlb	29	; select bank29
  9744     0F8B  1A90               	btfsc	16,5	;volatile
  9745     0F8C  1E92               	btfss	18,5	;volatile
  9746     0F8D  2F91               	goto	i1l5718
  9747                           
  9748                           ;usb/usb_device.c: 756:     {;usb/usb_device.c: 757:         USBStallHandler();
  9749     0F8E  3192  2229  318F   	fcall	_USBStallHandler
  9750     0F91                     i1l5718:
  9751                           
  9752                           ;usb/usb_device.c: 760:     if(UIRbits.UERRIF && UIEbits.UERRIE)
  9753     0F91  1890               	btfsc	16,1	;volatile
  9754     0F92  1C92               	btfss	18,1	;volatile
  9755     0F93  2FA5               	goto	i1l5726
  9756                           
  9757                           ;usb/usb_device.c: 761:     {;usb/usb_device.c: 762:         USER_USB_CALLBACK_EVENT_HAN
      +                          DLER((USB_EVENT)EVENT_BUS_ERROR,0,1);
  9758     0F94  30FF               	movlw	255
  9759     0F95  0020               	movlb	0	; select bank0
  9760     0F96  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9761     0F97  307F               	movlw	127
  9762     0F98  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9763     0F99  3000               	movlw	0
  9764     0F9A  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9765     0F9B  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9766     0F9C  3001               	movlw	1
  9767     0F9D  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9768     0F9E  3000               	movlw	0
  9769     0F9F  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9770     0FA0  3193  238A  318F   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9771                           
  9772                           ;usb/usb_device.c: 763:         {UEIR = 0;};
  9773     0FA3  003D               	movlb	29	; select bank29
  9774     0FA4  0193               	clrf	19	;volatile
  9775     0FA5                     i1l5726:
  9776                           
  9777                           ;usb/usb_device.c: 778:     if(USBDeviceState < DEFAULT_STATE)
  9778     0FA5  3004               	movlw	4
  9779     0FA6  0020               	movlb	0	; select bank0
  9780     0FA7  026C               	subwf	_USBDeviceState,w
  9781     0FA8  1803               	skipnc
  9782     0FA9  2FAC               	goto	i1l464
  9783                           
  9784                           ;usb/usb_device.c: 779:     {;usb/usb_device.c: 780:         PIR2bits.USBIF = 0;;
  9785     0FAA  1112               	bcf	18,2	;volatile
  9786                           
  9787                           ;usb/usb_device.c: 781:         return;
  9788     0FAB  0008               	return
  9789     0FAC                     i1l464:	
  9790                           ;usb/usb_device.c: 782:     }
  9791                           
  9792                           
  9793                           ;usb/usb_device.c: 787:     if(UIEbits.TRNIE)
  9794     0FAC  003D               	movlb	29	; select bank29
  9795     0FAD  1D92               	btfss	18,3	;volatile
  9796     0FAE  2FFD               	goto	i1l465
  9797                           
  9798                           ;usb/usb_device.c: 788:     {;usb/usb_device.c: 789:         for(i = 0; i < 4u; i++)
  9799     0FAF  0020               	movlb	0	; select bank0
  9800     0FB0  01E2               	clrf	USBDeviceTasks@i
  9801     0FB1  2FFA               	goto	i1l466
  9802     0FB2                     i1l5736:
  9803                           
  9804                           ;usb/usb_device.c: 792:             {;usb/usb_device.c: 794:                 USTATcopy.V
      +                          al = USTAT;
  9805     0FB2  080F               	movf	15,w	;volatile
  9806     0FB3  0020               	movlb	0	; select bank0
  9807     0FB4  00ED               	movwf	_USTATcopy	;volatile
  9808                           
  9809                           ;usb/usb_device.c: 795:                 endpoint_number = USTATcopy.endpoint_number;
  9810     0FB5  0C6D               	rrf	_USTATcopy,w	;volatile
  9811     0FB6  00E1               	movwf	??_USBDeviceTasks
  9812     0FB7  0CE1               	rrf	??_USBDeviceTasks,f
  9813     0FB8  0C61               	rrf	??_USBDeviceTasks,w
  9814     0FB9  390F               	andlw	15
  9815     0FBA  0022               	movlb	2	; select bank2
  9816     0FBB  00DF               	movwf	_endpoint_number^(0+256)	;volatile
  9817                           
  9818                           ;usb/usb_device.c: 797:                 (UIR &= 0xF7);
  9819     0FBC  30F7               	movlw	247
  9820     0FBD  0020               	movlb	0	; select bank0
  9821     0FBE  00E1               	movwf	??_USBDeviceTasks
  9822     0FBF  0861               	movf	??_USBDeviceTasks,w
  9823     0FC0  003D               	movlb	29	; select bank29
  9824     0FC1  0590               	andwf	16,f	;volatile
  9825                           
  9826                           ;usb/usb_device.c: 802:                 if(USTATcopy.direction == 0)
  9827     0FC2  0020               	movlb	0	; select bank0
  9828     0FC3  196D               	btfsc	_USTATcopy,2	;volatile
  9829     0FC4  2FC9               	goto	i1l5746
  9830                           
  9831                           ;usb/usb_device.c: 803:                 {;usb/usb_device.c: 804:                     ep_
      +                          data_out[endpoint_number].bits.ping_pong_state ^= 1;
  9832     0FC5  0022               	movlb	2	; select bank2
  9833     0FC6  085F               	movf	_endpoint_number^(0+256),w	;volatile
  9834     0FC7  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  9835     0FC8  2FCC               	goto	L7
  9836     0FC9                     i1l5746:	
  9837                           ;usb/usb_device.c: 805:                 }
  9838                           
  9839                           
  9840                           ;usb/usb_device.c: 807:                 {;usb/usb_device.c: 808:                     ep_
      +                          data_in[endpoint_number].bits.ping_pong_state ^= 1;
  9841     0FC9  0022               	movlb	2	; select bank2
  9842     0FCA  085F               	movf	_endpoint_number^(0+256),w	;volatile
  9843     0FCB  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  9844     0FCC                     L7:
  9845     0FCC  0086               	movwf	6
  9846     0FCD  3001               	movlw	1	; select bank2/3
  9847     0FCE  0087               	movwf	7
  9848     0FCF  0801               	movf	1,w
  9849     0FD0  3901               	andlw	1
  9850     0FD1  0020               	movlb	0	; select bank0
  9851     0FD2  00E1               	movwf	??_USBDeviceTasks
  9852     0FD3  3001               	movlw	1
  9853     0FD4  06E1               	xorwf	??_USBDeviceTasks,f
  9854     0FD5  0801               	movf	1,w
  9855     0FD6  0661               	xorwf	??_USBDeviceTasks,w
  9856     0FD7  39FE               	andlw	-2
  9857     0FD8  0661               	xorwf	??_USBDeviceTasks,w
  9858     0FD9  0081               	movwf	1
  9859                           
  9860                           ;usb/usb_device.c: 814:                 if(endpoint_number == 0)
  9861     0FDA  0022               	movlb	2	; select bank2
  9862     0FDB  085F               	movf	_endpoint_number^(0+256),w	;volatile
  9863     0FDC  1D03               	btfss	3,2
  9864     0FDD  2FE2               	goto	i1l5752
  9865                           
  9866                           ;usb/usb_device.c: 815:                 {;usb/usb_device.c: 816:                     USB
      +                          CtrlEPService();
  9867     0FDE  3194  24D2  318F   	fcall	_USBCtrlEPService
  9868                           
  9869                           ;usb/usb_device.c: 817:                 }
  9870     0FE1  2FF1               	goto	i1l5754
  9871     0FE2                     i1l5752:
  9872                           
  9873                           ;usb/usb_device.c: 819:                 {;usb/usb_device.c: 820:                     USE
      +                          R_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_TRANSFER,(uint8_t*)&USTATcopy.Val,0);
  9874     0FE2  3072               	movlw	114
  9875     0FE3  0020               	movlb	0	; select bank0
  9876     0FE4  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9877     0FE5  3000               	movlw	0
  9878     0FE6  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9879     0FE7  306D               	movlw	low _USTATcopy
  9880     0FE8  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9881     0FE9  3000               	movlw	high _USTATcopy
  9882     0FEA  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9883     0FEB  3000               	movlw	0
  9884     0FEC  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9885     0FED  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9886     0FEE  3193  238A  318F   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9887     0FF1                     i1l5754:
  9888                           
  9889                           ;usb/usb_device.c: 827:         }
  9890     0FF1  3001               	movlw	1
  9891     0FF2  0020               	movlb	0	; select bank0
  9892     0FF3  00E1               	movwf	??_USBDeviceTasks
  9893     0FF4  0861               	movf	??_USBDeviceTasks,w
  9894     0FF5  07E2               	addwf	USBDeviceTasks@i,f
  9895     0FF6  3004               	movlw	4
  9896     0FF7  0262               	subwf	USBDeviceTasks@i,w
  9897     0FF8  1803               	btfsc	3,0
  9898     0FF9  2FFD               	goto	i1l465
  9899     0FFA                     i1l466:
  9900                           
  9901                           ;usb/usb_device.c: 790:         {;usb/usb_device.c: 791:             if(UIRbits.TRNIF)
  9902     0FFA  003D               	movlb	29	; select bank29
  9903     0FFB  1990               	btfsc	16,3	;volatile
  9904     0FFC  2FB2               	goto	i1l5736
  9905     0FFD                     i1l465:	
  9906                           ;usb/usb_device.c: 828:     }
  9907                           
  9908                           
  9909                           ;usb/usb_device.c: 830:     PIR2bits.USBIF = 0;;
  9910     0FFD  0020               	movlb	0	; select bank0
  9911     0FFE  1112               	bcf	18,2	;volatile
  9912     0FFF  0008               	return
  9913     1000                     __end_of_USBDeviceTasks:
  9914                           
  9915                           	psect	text49
  9916     0DDE                     __ptext49:	
  9917 ;; *************** function i1_USBDeviceInit *****************
  9918 ;; Defined at:
  9919 ;;		line 281 in file "usb/usb_device.c"
  9920 ;; Parameters:    Size  Location     Type
  9921 ;;		None
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;  p               2    4[COMMON] PTR unsigned char 
  9924 ;;		 -> UEP1(1), 
  9925 ;;  i               1    7[COMMON] unsigned char 
  9926 ;;  i               1    6[COMMON] unsigned char 
  9927 ;; Return value:  Size  Location     Type
  9928 ;;                  1    wreg      void 
  9929 ;; Registers used:
  9930 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9931 ;; Tracked objects:
  9932 ;;		On entry : 1F/1D
  9933 ;;		On exit  : 1F/0
  9934 ;;		Unchanged: 0/0
  9935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9940 ;;Total ram usage:        8 bytes
  9941 ;; Hardware stack levels used: 1
  9942 ;; This function calls:
  9943 ;;		Nothing
  9944 ;; This function is called by:
  9945 ;;		_USBDeviceTasks
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949     0DDE                     i1_USBDeviceInit:	
  9950                           ;psect for function i1_USBDeviceInit
  9951                           
  9952                           
  9953                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  9954                           
  9955                           ;incstack = 0
  9956                           ; Regs used in i1_USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  9957     0DDE  0021               	movlb	1	; select bank1
  9958     0DDF  1112               	bcf	18,2	;volatile
  9959                           
  9960                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  9961     0DE0  003D               	movlb	29	; select bank29
  9962     0DE1  0193               	clrf	19	;volatile
  9963                           
  9964                           ;usb/usb_device.c: 295:     {UIR = 0;};
  9965     0DE2  0190               	clrf	16	;volatile
  9966                           
  9967                           ;usb/usb_device.c: 298:     UEP0 = 0;
  9968     0DE3  0198               	clrf	24	;volatile
  9969                           
  9970                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  9971     0DE4  300E               	movlw	14
  9972     0DE5  00F5               	movwf	i1USBDeviceInit@p+1
  9973     0DE6  3099               	movlw	153
  9974     0DE7  00F4               	movwf	i1USBDeviceInit@p
  9975     0DE8  01F6               	clrf	i1USBDeviceInit@i_1324
  9976     0DE9                     i1l5566:
  9977     0DE9  0874               	movf	i1USBDeviceInit@p,w
  9978     0DEA  0086               	movwf	6
  9979     0DEB  0875               	movf	i1USBDeviceInit@p+1,w
  9980     0DEC  0087               	movwf	7
  9981     0DED  0181               	clrf	1
  9982     0DEE  3001               	movlw	1
  9983     0DEF  07F4               	addwf	i1USBDeviceInit@p,f
  9984     0DF0  3000               	movlw	0
  9985     0DF1  3DF5               	addwfc	i1USBDeviceInit@p+1,f
  9986     0DF2  3001               	movlw	1
  9987     0DF3  00F0               	movwf	??i1_USBDeviceInit
  9988     0DF4  0870               	movf	??i1_USBDeviceInit,w
  9989     0DF5  07F6               	addwf	i1USBDeviceInit@i_1324,f
  9990     0DF6  0876               	movf	i1USBDeviceInit@i_1324,w
  9991     0DF7  1903               	btfsc	3,2
  9992     0DF8  2DE9               	goto	i1l5566
  9993                           
  9994                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  9995     0DF9  3016               	movlw	22
  9996     0DFA  0091               	movwf	17	;volatile
  9997     0DFB  309F               	movlw	159
  9998     0DFC  0097               	movwf	23	;volatile
  9999     0DFD  307B               	movlw	123
 10000     0DFE  0092               	movwf	18	;volatile
 10001                           
 10002                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
 10003     0DFF  01F7               	clrf	i1USBDeviceInit@i
 10004     0E00                     i1l5582:
 10005                           
 10006                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
 10007     0E00  0877               	movf	i1USBDeviceInit@i,w
 10008     0E01  00F0               	movwf	??i1_USBDeviceInit
 10009     0E02  3001               	movlw	1
 10010     0E03                     u512_25:
 10011     0E03  35F0               	lslf	??i1_USBDeviceInit,f
 10012     0E04  3EFF               	addlw	-1
 10013     0E05  1D03               	skipz
 10014     0E06  2E03               	goto	u512_25
 10015     0E07  3570               	lslf	??i1_USBDeviceInit,w
 10016     0E08  3E20               	addlw	32
 10017     0E09  0086               	movwf	6
 10018     0E0A  0187               	clrf	7
 10019     0E0B  3000               	movlw	0
 10020     0E0C  3FC0               	movwi [0]fsr1
 10021     0E0D  3000               	movlw	0
 10022     0E0E  3FC1               	movwi [1]fsr1
 10023     0E0F  3FC2               	movwi [2]fsr1
 10024     0E10  3FC3               	movwi [3]fsr1
 10025                           
 10026                           ;usb/usb_device.c: 314:     }
 10027     0E11  3001               	movlw	1
 10028     0E12  00F0               	movwf	??i1_USBDeviceInit
 10029     0E13  0870               	movf	??i1_USBDeviceInit,w
 10030     0E14  07F7               	addwf	i1USBDeviceInit@i,f
 10031     0E15  3008               	movlw	8
 10032     0E16  0277               	subwf	i1USBDeviceInit@i,w
 10033     0E17  1C03               	skipc
 10034     0E18  2E00               	goto	i1l5582
 10035                           
 10036                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
 10037     0E19  170E               	bsf	14,6	;volatile
 10038                           
 10039                           ;usb/usb_device.c: 320:     UADDR = 0x00;
 10040     0E1A  0196               	clrf	22	;volatile
 10041                           
 10042                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
 10043     0E1B  120E               	bcf	14,4	;volatile
 10044                           
 10045                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
 10046     0E1C  130E               	bcf	14,6	;volatile
 10047     0E1D                     i1l5594:
 10048                           
 10049                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
 10050     0E1D  30F7               	movlw	247
 10051     0E1E  00F0               	movwf	??i1_USBDeviceInit
 10052     0E1F  0870               	movf	??i1_USBDeviceInit,w
 10053     0E20  0590               	andwf	16,f	;volatile
 10054                           
 10055                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
 10056     0E21  0021               	movlb	1	; select bank1
 10057     0E22  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 10058                           
 10059                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
 10060     0E23  0022               	movlb	2	; select bank2
 10061     0E24  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 10062                           
 10063                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
 10064     0E25  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 10065     0E26  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 10066                           
 10067                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
 10068     0E27  003D               	movlb	29	; select bank29
 10069     0E28  1990               	btfsc	16,3	;volatile
 10070     0E29  2E1D               	goto	i1l5594
 10071                           
 10072                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
 10073     0E2A  3001               	movlw	1
 10074     0E2B  0022               	movlb	2	; select bank2
 10075     0E2C  00DB               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10076                           
 10077                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
 10078     0E2D  3001               	movlw	1
 10079     0E2E  00DA               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10080                           
 10081                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
 10082     0E2F  01D9               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10083                           
 10084                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
 10085     0E30  01D8               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10086                           
 10087                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
 10088     0E31  01E0               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 10089                           
 10090                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
 10091     0E32  01F7               	clrf	i1USBDeviceInit@i
 10092     0E33                     i1l5616:
 10093                           
 10094                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
 10095     0E33  3577               	lslf	i1USBDeviceInit@i,w
 10096     0E34  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 10097     0E35  0086               	movwf	6
 10098     0E36  0187               	clrf	7
 10099     0E37  3000               	movlw	0
 10100     0E38  3FC0               	movwi [0]fsr1
 10101     0E39  3FC1               	movwi [1]fsr1
 10102                           
 10103                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
 10104     0E3A  3577               	lslf	i1USBDeviceInit@i,w
 10105     0E3B  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 10106     0E3C  0086               	movwf	6
 10107     0E3D  3001               	movlw	1	; select bank2/3
 10108     0E3E  0087               	movwf	7
 10109     0E3F  3000               	movlw	0
 10110     0E40  3FC0               	movwi [0]fsr1
 10111     0E41  3FC1               	movwi [1]fsr1
 10112                           
 10113                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
 10114     0E42  0877               	movf	i1USBDeviceInit@i,w
 10115     0E43  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 10116     0E44  0086               	movwf	6
 10117     0E45  3001               	movlw	1	; select bank2/3
 10118     0E46  0087               	movwf	7
 10119     0E47  0181               	clrf	1
 10120                           
 10121                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
 10122     0E48  0877               	movf	i1USBDeviceInit@i,w
 10123     0E49  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 10124     0E4A  0086               	movwf	6
 10125     0E4B  3001               	movlw	1	; select bank2/3
 10126     0E4C  0087               	movwf	7
 10127     0E4D  0181               	clrf	1
 10128                           
 10129                           ;usb/usb_device.c: 355:     }
 10130     0E4E  3001               	movlw	1
 10131     0E4F  00F0               	movwf	??i1_USBDeviceInit
 10132     0E50  0870               	movf	??i1_USBDeviceInit,w
 10133     0E51  07F7               	addwf	i1USBDeviceInit@i,f
 10134     0E52  3002               	movlw	2
 10135     0E53  0277               	subwf	i1USBDeviceInit@i,w
 10136     0E54  1C03               	skipc
 10137     0E55  2E33               	goto	i1l5616
 10138                           
 10139                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 10140     0E56  3028               	movlw	40
 10141     0E57  0020               	movlb	0	; select bank0
 10142     0E58  00E3               	movwf	_pBDTEntryIn
 10143     0E59  3000               	movlw	0
 10144     0E5A  00E4               	movwf	_pBDTEntryIn+1
 10145                           
 10146                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
 10147     0E5B  3016               	movlw	22
 10148     0E5C  003D               	movlb	29	; select bank29
 10149     0E5D  0098               	movwf	24	;volatile
 10150                           
 10151                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
 10152     0E5E  3040               	movlw	64
 10153     0E5F  00F0               	movwf	??i1_USBDeviceInit
 10154     0E60  3000               	movlw	0
 10155     0E61  00F1               	movwf	??i1_USBDeviceInit+1
 10156     0E62  30FF               	movlw	255
 10157     0E63  0570               	andwf	??i1_USBDeviceInit,w
 10158     0E64  00F2               	movwf	??i1_USBDeviceInit+2
 10159     0E65  307F               	movlw	127
 10160     0E66  0571               	andwf	??i1_USBDeviceInit+1,w
 10161     0E67  00F3               	movwf	??i1_USBDeviceInit+3
 10162     0E68  0872               	movf	??i1_USBDeviceInit+2,w
 10163     0E69  0020               	movlb	0	; select bank0
 10164     0E6A  00A2               	movwf	34	;volatile
 10165     0E6B  0873               	movf	??i1_USBDeviceInit+3,w
 10166     0E6C  00A3               	movwf	35	;volatile
 10167                           
 10168                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
 10169     0E6D  3008               	movlw	8
 10170     0E6E  00A1               	movwf	33	;volatile
 10171                           
 10172                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
 10173     0E6F  3004               	movlw	4
 10174     0E70  00A0               	movwf	32	;volatile
 10175                           
 10176                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
 10177     0E71  17A0               	bsf	32,7	;volatile
 10178                           
 10179                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
 10180     0E72  01EF               	clrf	_USBActiveConfiguration	;volatile
 10181                           
 10182                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
 10183     0E73  3000               	movlw	0
 10184     0E74  0023               	movlb	3	; select bank3
 10185     0E75  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
 10186     0E76  3000               	movlw	0
 10187     0E77  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
 10188     0E78  3000               	movlw	0
 10189     0E79  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
 10190     0E7A  3000               	movlw	0
 10191     0E7B  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
 10192                           
 10193                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
 10194     0E7C  0022               	movlb	2	; select bank2
 10195     0E7D  01D7               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10196                           
 10197                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
 10198     0E7E  0020               	movlb	0	; select bank0
 10199     0E7F  01EC               	clrf	_USBDeviceState	;volatile
 10200     0E80  0008               	return
 10201     0E81                     __end_ofi1_USBDeviceInit:
 10202                           
 10203                           	psect	text50
 10204     116E                     __ptext50:	
 10205 ;; *************** function _USBWakeFromSuspend *****************
 10206 ;; Defined at:
 10207 ;;		line 2310 in file "usb/usb_device.c"
 10208 ;; Parameters:    Size  Location     Type
 10209 ;;		None
 10210 ;; Auto vars:     Size  Location     Type
 10211 ;;		None
 10212 ;; Return value:  Size  Location     Type
 10213 ;;                  1    wreg      void 
 10214 ;; Registers used:
 10215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10216 ;; Tracked objects:
 10217 ;;		On entry : 1F/1D
 10218 ;;		On exit  : 1F/2
 10219 ;;		Unchanged: 0/0
 10220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;Total ram usage:        1 bytes
 10226 ;; Hardware stack levels used: 1
 10227 ;; Hardware stack levels required when called: 4
 10228 ;; This function calls:
 10229 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10230 ;; This function is called by:
 10231 ;;		_USBDeviceTasks
 10232 ;; This function uses a non-reentrant model
 10233 ;;
 10234                           
 10235     116E                     _USBWakeFromSuspend:	
 10236                           ;psect for function _USBWakeFromSuspend
 10237                           
 10238                           
 10239                           ;usb/usb_device.c: 2312:     USBBusIsSuspended = 0;
 10240                           
 10241                           ;incstack = 0
 10242                           ; Regs used in _USBWakeFromSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10243     116E  0022               	movlb	2	; select bank2
 10244     116F  01E0               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 10245                           
 10246                           ;usb/usb_device.c: 2318:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_RESUME,0,0
      +                          );
 10247     1170  3074               	movlw	116
 10248     1171  0020               	movlb	0	; select bank0
 10249     1172  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10250     1173  3000               	movlw	0
 10251     1174  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10252     1175  3000               	movlw	0
 10253     1176  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10254     1177  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10255     1178  3000               	movlw	0
 10256     1179  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10257     117A  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10258     117B  3193  238A  3191   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10259                           
 10260                           ;usb/usb_device.c: 2325:         UCONbits.SUSPND = 0;
 10261     117E  003D               	movlb	29	; select bank29
 10262     117F  108E               	bcf	14,1	;volatile
 10263                           
 10264                           ;usb/usb_device.c: 2330:     UIEbits.ACTVIE = 0;
 10265     1180  1112               	bcf	18,2	;volatile
 10266     1181                     i1l5304:	
 10267                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 10268                           
 10269                           
 10270                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 10271     1181  1D10               	btfss	16,2	;volatile
 10272     1182  2988               	goto	i1l5306
 10273                           
 10274                           ;usb/usb_device.c: 2350:     {;usb/usb_device.c: 2351:         (UIR &= 0xFB);
 10275     1183  30FB               	movlw	251
 10276     1184  00FD               	movwf	??_USBWakeFromSuspend
 10277     1185  087D               	movf	??_USBWakeFromSuspend,w
 10278     1186  0590               	andwf	16,f	;volatile
 10279     1187  2981               	goto	i1l5304
 10280     1188                     i1l5306:
 10281                           
 10282                           ;usb/usb_device.c: 2354:     USBTicksSinceSuspendEnd = 0;
 10283     1188  0022               	movlb	2	; select bank2
 10284     1189  01D7               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10285     118A  0008               	return
 10286     118B                     __end_of_USBWakeFromSuspend:
 10287                           
 10288                           	psect	text51
 10289     109A                     __ptext51:	
 10290 ;; *************** function _USBSuspend *****************
 10291 ;; Defined at:
 10292 ;;		line 2252 in file "usb/usb_device.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;		None
 10295 ;; Auto vars:     Size  Location     Type
 10296 ;;		None
 10297 ;; Return value:  Size  Location     Type
 10298 ;;                  1    wreg      void 
 10299 ;; Registers used:
 10300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10301 ;; Tracked objects:
 10302 ;;		On entry : 1F/1D
 10303 ;;		On exit  : 0/0
 10304 ;;		Unchanged: 0/0
 10305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;Total ram usage:        1 bytes
 10311 ;; Hardware stack levels used: 1
 10312 ;; Hardware stack levels required when called: 4
 10313 ;; This function calls:
 10314 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10315 ;; This function is called by:
 10316 ;;		_USBDeviceTasks
 10317 ;; This function uses a non-reentrant model
 10318 ;;
 10319                           
 10320     109A                     _USBSuspend:	
 10321                           ;psect for function _USBSuspend
 10322                           
 10323                           
 10324                           ;usb/usb_device.c: 2277:     UIEbits.ACTVIE = 1;
 10325                           
 10326                           ;incstack = 0
 10327                           ; Regs used in _USBSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10328     109A  1512               	bsf	18,2	;volatile
 10329                           
 10330                           ;usb/usb_device.c: 2278:     (UIR &= 0xEF);
 10331     109B  30EF               	movlw	239
 10332     109C  00FD               	movwf	??_USBSuspend
 10333     109D  087D               	movf	??_USBSuspend,w
 10334     109E  0590               	andwf	16,f	;volatile
 10335                           
 10336                           ;usb/usb_device.c: 2281:         UCONbits.SUSPND = 1;
 10337     109F  148E               	bsf	14,1	;volatile
 10338                           
 10339                           ;usb/usb_device.c: 2284:     USBBusIsSuspended = 1;
 10340     10A0  3001               	movlw	1
 10341     10A1  0022               	movlb	2	; select bank2
 10342     10A2  00E0               	movwf	_USBBusIsSuspended^(0+256)	;volatile
 10343                           
 10344                           ;usb/usb_device.c: 2285:     USBTicksSinceSuspendEnd = 0;
 10345     10A3  01D7               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10346                           
 10347                           ;usb/usb_device.c: 2292:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SUSPEND,0,
      +                          0);
 10348     10A4  3075               	movlw	117
 10349     10A5  0020               	movlb	0	; select bank0
 10350     10A6  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10351     10A7  3000               	movlw	0
 10352     10A8  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10353     10A9  3000               	movlw	0
 10354     10AA  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10355     10AB  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10356     10AC  3000               	movlw	0
 10357     10AD  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10358     10AE  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10359     10AF  3193  238A         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10360     10B1  0008               	return
 10361     10B2                     __end_of_USBSuspend:
 10362                           
 10363                           	psect	text52
 10364     1229                     __ptext52:	
 10365 ;; *************** function _USBStallHandler *****************
 10366 ;; Defined at:
 10367 ;;		line 2209 in file "usb/usb_device.c"
 10368 ;; Parameters:    Size  Location     Type
 10369 ;;		None
 10370 ;; Auto vars:     Size  Location     Type
 10371 ;;		None
 10372 ;; Return value:  Size  Location     Type
 10373 ;;                  1    wreg      void 
 10374 ;; Registers used:
 10375 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10376 ;; Tracked objects:
 10377 ;;		On entry : 1F/1D
 10378 ;;		On exit  : 1F/1D
 10379 ;;		Unchanged: 0/0
 10380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10385 ;;Total ram usage:        1 bytes
 10386 ;; Hardware stack levels used: 1
 10387 ;; This function calls:
 10388 ;;		Nothing
 10389 ;; This function is called by:
 10390 ;;		_USBDeviceTasks
 10391 ;; This function uses a non-reentrant model
 10392 ;;
 10393                           
 10394     1229                     _USBStallHandler:	
 10395                           ;psect for function _USBStallHandler
 10396                           
 10397                           
 10398                           ;usb/usb_device.c: 2221:     if(UEP0bits.EPSTALL == 1)
 10399                           
 10400                           ;incstack = 0
 10401                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10402     1229  1C18               	btfss	24,0	;volatile
 10403     122A  2A46               	goto	i1l5338
 10404                           
 10405                           ;usb/usb_device.c: 2222:     {;usb/usb_device.c: 2224:         if((pBDTEntryEP0OutCurren
      +                          t->STAT.Val == 0x80) && (pBDTEntryIn[0]->STAT.Val == (0x80|0x04)))
 10406     122B  0020               	movlb	0	; select bank0
 10407     122C  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10408     122D  0086               	movwf	6
 10409     122E  0187               	clrf	7
 10410     122F  3080               	movlw	128
 10411     1230  0601               	xorwf	1,w
 10412     1231  1D03               	btfss	3,2
 10413     1232  2A44               	goto	i1l5336
 10414     1233  0863               	movf	_pBDTEntryIn,w
 10415     1234  0086               	movwf	6
 10416     1235  0864               	movf	_pBDTEntryIn+1,w
 10417     1236  0087               	movwf	7
 10418     1237  3084               	movlw	132
 10419     1238  0601               	xorwf	1,w
 10420     1239  1D03               	btfss	3,2
 10421     123A  2A44               	goto	i1l5336
 10422                           
 10423                           ;usb/usb_device.c: 2225:         {;usb/usb_device.c: 2227:             pBDTEntryEP0OutCu
      +                          rrent->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 10424     123B  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10425     123C  0086               	movwf	6
 10426     123D  0187               	clrf	7
 10427     123E  300C               	movlw	12
 10428     123F  0081               	movwf	1
 10429                           
 10430                           ;usb/usb_device.c: 2228:             pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 10431     1240  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10432     1241  0086               	movwf	6
 10433     1242  0187               	clrf	7
 10434     1243  1781               	bsf	1,7
 10435     1244                     i1l5336:
 10436                           
 10437                           ;usb/usb_device.c: 2230:         UEP0bits.EPSTALL = 0;
 10438     1244  003D               	movlb	29	; select bank29
 10439     1245  1018               	bcf	24,0	;volatile
 10440     1246                     i1l5338:
 10441                           
 10442                           ;usb/usb_device.c: 2233:     (UIR &= 0xDF);
 10443     1246  30DF               	movlw	223
 10444     1247  00F0               	movwf	??_USBStallHandler
 10445     1248  0870               	movf	??_USBStallHandler,w
 10446     1249  0590               	andwf	16,f	;volatile
 10447     124A  0008               	return
 10448     124B                     __end_of_USBStallHandler:
 10449                           
 10450                           	psect	text53
 10451     1FD1                     __ptext53:	
 10452 ;; *************** function _USBIncrement1msInternalTimers *****************
 10453 ;; Defined at:
 10454 ;;		line 2998 in file "usb/usb_device.c"
 10455 ;; Parameters:    Size  Location     Type
 10456 ;;		None
 10457 ;; Auto vars:     Size  Location     Type
 10458 ;;		None
 10459 ;; Return value:  Size  Location     Type
 10460 ;;                  1    wreg      void 
 10461 ;; Registers used:
 10462 ;;		wreg, status,2, status,0
 10463 ;; Tracked objects:
 10464 ;;		On entry : 1F/1D
 10465 ;;		On exit  : 1F/2
 10466 ;;		Unchanged: 0/0
 10467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;Total ram usage:        1 bytes
 10473 ;; Hardware stack levels used: 1
 10474 ;; This function calls:
 10475 ;;		Nothing
 10476 ;; This function is called by:
 10477 ;;		_USBDeviceTasks
 10478 ;; This function uses a non-reentrant model
 10479 ;;
 10480                           
 10481     1FD1                     _USBIncrement1msInternalTimers:	
 10482                           ;psect for function _USBIncrement1msInternalTimers
 10483                           
 10484                           
 10485                           ;usb/usb_device.c: 3006:     USB1msTickCount++;
 10486                           
 10487                           ;incstack = 0
 10488                           ; Regs used in _USBIncrement1msInternalTimers: [wreg+status,2+status,0]
 10489     1FD1  3001               	movlw	1
 10490     1FD2  0023               	movlb	3	; select bank3
 10491     1FD3  07C0               	addwf	_USB1msTickCount^(0+384),f	;volatile
 10492     1FD4  3000               	movlw	0
 10493     1FD5  3DC1               	addwfc	(_USB1msTickCount+1)^(0+384),f	;volatile
 10494     1FD6  3000               	movlw	0
 10495     1FD7  3DC2               	addwfc	(_USB1msTickCount+2)^(0+384),f	;volatile
 10496     1FD8  3000               	movlw	0
 10497     1FD9  3DC3               	addwfc	(_USB1msTickCount+3)^(0+384),f	;volatile
 10498                           
 10499                           ;usb/usb_device.c: 3007:     if(USBBusIsSuspended == 0)
 10500     1FDA  0022               	movlb	2	; select bank2
 10501     1FDB  0860               	movf	_USBBusIsSuspended^(0+256),w	;volatile
 10502     1FDC  1D03               	btfss	3,2
 10503     1FDD  0008               	return
 10504                           
 10505                           ;usb/usb_device.c: 3008:     {;usb/usb_device.c: 3009:         USBTicksSinceSuspendEnd++
      +                          ;
 10506     1FDE  3001               	movlw	1
 10507     1FDF  00F0               	movwf	??_USBIncrement1msInternalTimers
 10508     1FE0  0870               	movf	??_USBIncrement1msInternalTimers,w
 10509     1FE1  07D7               	addwf	_USBTicksSinceSuspendEnd^(0+256),f	;volatile
 10510                           
 10511                           ;usb/usb_device.c: 3011:         if(USBTicksSinceSuspendEnd == 0)
 10512     1FE2  0857               	movf	_USBTicksSinceSuspendEnd^(0+256),w	;volatile
 10513     1FE3  1D03               	btfss	3,2
 10514     1FE4  0008               	return
 10515                           
 10516                           ;usb/usb_device.c: 3012:         {;usb/usb_device.c: 3013:             USBTicksSinceSusp
      +                          endEnd = 255;
 10517     1FE5  30FF               	movlw	255
 10518     1FE6  00D7               	movwf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10519     1FE7  0008               	return
 10520     1FE8                     __end_of_USBIncrement1msInternalTimers:
 10521                           
 10522                           	psect	text54
 10523     14D2                     __ptext54:	
 10524 ;; *************** function _USBCtrlEPService *****************
 10525 ;; Defined at:
 10526 ;;		line 2379 in file "usb/usb_device.c"
 10527 ;; Parameters:    Size  Location     Type
 10528 ;;		None
 10529 ;; Auto vars:     Size  Location     Type
 10530 ;;		None
 10531 ;; Return value:  Size  Location     Type
 10532 ;;                  1    wreg      void 
 10533 ;; Registers used:
 10534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10535 ;; Tracked objects:
 10536 ;;		On entry : 1F/2
 10537 ;;		On exit  : 1D/0
 10538 ;;		Unchanged: 0/0
 10539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;Total ram usage:        1 bytes
 10545 ;; Hardware stack levels used: 1
 10546 ;; Hardware stack levels required when called: 7
 10547 ;; This function calls:
 10548 ;;		_USBCtrlTrfInHandler
 10549 ;;		_USBCtrlTrfOutHandler
 10550 ;;		_USBCtrlTrfSetupHandler
 10551 ;;		i1_memcpy
 10552 ;; This function is called by:
 10553 ;;		_USBDeviceTasks
 10554 ;; This function uses a non-reentrant model
 10555 ;;
 10556                           
 10557     14D2                     _USBCtrlEPService:	
 10558                           ;psect for function _USBCtrlEPService
 10559                           
 10560                           
 10561                           ;usb/usb_device.c: 2385:         USBStatusStageTimeoutCounter = (uint8_t)45;
 10562                           
 10563                           ;incstack = 0
 10564                           ; Regs used in _USBCtrlEPService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10565     14D2  302D               	movlw	45
 10566     14D3  00DD               	movwf	_USBStatusStageTimeoutCounter^(0+256)	;volatile
 10567                           
 10568                           ;usb/usb_device.c: 2389:     if((USTATcopy.Val & ~0x02) == 0x00)
 10569     14D4  0020               	movlb	0	; select bank0
 10570     14D5  086D               	movf	_USTATcopy,w	;volatile
 10571     14D6  39FD               	andlw	253
 10572     14D7  1D03               	btfss	3,2
 10573     14D8  2D0F               	goto	i1l5358
 10574                           
 10575                           ;usb/usb_device.c: 2390:     {;usb/usb_device.c: 2393:             pBDTEntryEP0OutCurren
      +                          t = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val & 0x7E)>>1];
 10576     14D9  366D               	lsrf	_USTATcopy,w	;volatile
 10577     14DA  393F               	andlw	63
 10578     14DB  00E0               	movwf	??_USBCtrlEPService
 10579     14DC  3001               	movlw	1
 10580     14DD                     u466_25:
 10581     14DD  35E0               	lslf	??_USBCtrlEPService,f
 10582     14DE  3EFF               	addlw	-1
 10583     14DF  1D03               	skipz
 10584     14E0  2CDD               	goto	u466_25
 10585     14E1  3560               	lslf	??_USBCtrlEPService,w
 10586     14E2  3E20               	addlw	32
 10587     14E3  00EB               	movwf	_pBDTEntryEP0OutCurrent
 10588                           
 10589                           ;usb/usb_device.c: 2401:         pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 10590     14E4  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10591     14E5  00E7               	movwf	_pBDTEntryEP0OutNext
 10592     14E6  01E8               	clrf	_pBDTEntryEP0OutNext+1
 10593                           
 10594                           ;usb/usb_device.c: 2403:         pBDTEntryEP0OutNext = (volatile BDT_ENTRY*)(((uint16_t)
      +                          pBDTEntryEP0OutNext) ^ 0x0004);
 10595     14E7  3004               	movlw	4
 10596     14E8  0667               	xorwf	_pBDTEntryEP0OutNext,w
 10597     14E9  00E7               	movwf	_pBDTEntryEP0OutNext
 10598     14EA  3000               	movlw	0
 10599     14EB  0668               	xorwf	_pBDTEntryEP0OutNext+1,w
 10600     14EC  00E8               	movwf	_pBDTEntryEP0OutNext+1
 10601                           
 10602                           ;usb/usb_device.c: 2406:         if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
 10603     14ED  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10604     14EE  0086               	movwf	6
 10605     14EF  0187               	clrf	7
 10606     14F0  0C01               	rrf	1,w
 10607     14F1  0C89               	rrf	9,f
 10608     14F2  390F               	andlw	15
 10609     14F3  3A0D               	xorlw	13
 10610     14F4  1D03               	skipz
 10611     14F5  2D0C               	goto	i1l5356
 10612                           
 10613                           ;usb/usb_device.c: 2407:         {;usb/usb_device.c: 2412:             memcpy((uint8_t*)
      +                          &SetupPkt, (uint8_t*)((void *)(pBDTEntryEP0OutCurrent->ADR)), 8);
 10614     14F6  3040               	movlw	64
 10615     14F7  00F6               	movwf	i1memcpy@d1
 10616     14F8  3000               	movlw	0
 10617     14F9  00F7               	movwf	i1memcpy@d1+1
 10618     14FA  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10619     14FB  3E02               	addlw	2
 10620     14FC  0086               	movwf	6
 10621     14FD  0187               	clrf	7
 10622     14FE  3F40               	moviw [0]fsr1
 10623     14FF  00F8               	movwf	i1memcpy@s1
 10624     1500  3F41               	moviw [1]fsr1
 10625     1501  00F9               	movwf	i1memcpy@s1+1
 10626     1502  3008               	movlw	8
 10627     1503  00FA               	movwf	i1memcpy@n
 10628     1504  3000               	movlw	0
 10629     1505  00FB               	movwf	i1memcpy@n+1
 10630     1506  3192  2293  3194   	fcall	i1_memcpy
 10631                           
 10632                           ;usb/usb_device.c: 2415:             USBCtrlTrfSetupHandler();
 10633     1509  3195  2561         	fcall	_USBCtrlTrfSetupHandler
 10634                           
 10635                           ;usb/usb_device.c: 2416:         }
 10636     150B  0008               	return
 10637     150C                     i1l5356:
 10638                           
 10639                           ;usb/usb_device.c: 2418:         {;usb/usb_device.c: 2420:             USBCtrlTrfOutHand
      +                          ler();
 10640     150C  3193  2350         	fcall	_USBCtrlTrfOutHandler
 10641     150E  0008               	return
 10642     150F                     i1l5358:
 10643     150F  30FD               	movlw	253
 10644     1510  056D               	andwf	_USTATcopy,w	;volatile
 10645     1511  00E0               	movwf	??_USBCtrlEPService
 10646     1512  3004               	movlw	4
 10647     1513  0660               	xorwf	??_USBCtrlEPService,w
 10648     1514  1D03               	btfss	3,2
 10649     1515  0008               	return
 10650                           
 10651                           ;usb/usb_device.c: 2424:     {;usb/usb_device.c: 2427:         USBCtrlTrfInHandler();
 10652     1516  318A  22C6         	fcall	_USBCtrlTrfInHandler
 10653     1518  0008               	return
 10654     1519                     __end_of_USBCtrlEPService:
 10655                           
 10656                           	psect	text55
 10657     1561                     __ptext55:	
 10658 ;; *************** function _USBCtrlTrfSetupHandler *****************
 10659 ;; Defined at:
 10660 ;;		line 2472 in file "usb/usb_device.c"
 10661 ;; Parameters:    Size  Location     Type
 10662 ;;		None
 10663 ;; Auto vars:     Size  Location     Type
 10664 ;;		None
 10665 ;; Return value:  Size  Location     Type
 10666 ;;                  1    wreg      void 
 10667 ;; Registers used:
 10668 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10669 ;; Tracked objects:
 10670 ;;		On entry : 1F/0
 10671 ;;		On exit  : 1D/0
 10672 ;;		Unchanged: 0/0
 10673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10678 ;;Total ram usage:        1 bytes
 10679 ;; Hardware stack levels used: 1
 10680 ;; Hardware stack levels required when called: 6
 10681 ;; This function calls:
 10682 ;;		_USBCheckStdRequest
 10683 ;;		_USBCtrlEPServiceComplete
 10684 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10685 ;; This function is called by:
 10686 ;;		_USBCtrlEPService
 10687 ;; This function uses a non-reentrant model
 10688 ;;
 10689                           
 10690     1561                     _USBCtrlTrfSetupHandler:	
 10691                           ;psect for function _USBCtrlTrfSetupHandler
 10692                           
 10693                           
 10694                           ;usb/usb_device.c: 2477:     shortPacketStatus = 0;
 10695                           
 10696                           ;incstack = 0
 10697                           ; Regs used in _USBCtrlTrfSetupHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10698     1561  0022               	movlb	2	; select bank2
 10699     1562  01E3               	clrf	_shortPacketStatus^(0+256)	;volatile
 10700                           
 10701                           ;usb/usb_device.c: 2478:     USBDeferStatusStagePacket = 0;
 10702     1563  01DC               	clrf	_USBDeferStatusStagePacket^(0+256)	;volatile
 10703                           
 10704                           ;usb/usb_device.c: 2479:     USBDeferINDataStagePackets = 0;
 10705     1564  01D9               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10706                           
 10707                           ;usb/usb_device.c: 2480:     USBDeferOUTDataStagePackets = 0;
 10708     1565  01D8               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10709                           
 10710                           ;usb/usb_device.c: 2481:     BothEP0OutUOWNsSet = 0;
 10711     1566  01DE               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 10712                           
 10713                           ;usb/usb_device.c: 2482:     controlTransferState = 0;
 10714     1567  0020               	movlb	0	; select bank0
 10715     1568  01EA               	clrf	_controlTransferState	;volatile
 10716                           
 10717                           ;usb/usb_device.c: 2491:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 10718     1569  307F               	movlw	127
 10719     156A  00DF               	movwf	??_USBCtrlTrfSetupHandler
 10720     156B  0863               	movf	_pBDTEntryIn,w
 10721     156C  0086               	movwf	6
 10722     156D  0864               	movf	_pBDTEntryIn+1,w
 10723     156E  0087               	movwf	7
 10724     156F  085F               	movf	??_USBCtrlTrfSetupHandler,w
 10725     1570  0581               	andwf	1,f
 10726                           
 10727                           ;usb/usb_device.c: 2493:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 10728     1571  3004               	movlw	4
 10729     1572  0663               	xorwf	_pBDTEntryIn,w
 10730     1573  00E3               	movwf	_pBDTEntryIn
 10731     1574  3000               	movlw	0
 10732     1575  0664               	xorwf	_pBDTEntryIn+1,w
 10733     1576  00E4               	movwf	_pBDTEntryIn+1
 10734                           
 10735                           ;usb/usb_device.c: 2494:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 10736     1577  307F               	movlw	127
 10737     1578  00DF               	movwf	??_USBCtrlTrfSetupHandler
 10738     1579  0863               	movf	_pBDTEntryIn,w
 10739     157A  0086               	movwf	6
 10740     157B  0864               	movf	_pBDTEntryIn+1,w
 10741     157C  0087               	movwf	7
 10742     157D  085F               	movf	??_USBCtrlTrfSetupHandler,w
 10743     157E  0581               	andwf	1,f
 10744                           
 10745                           ;usb/usb_device.c: 2495:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 10746     157F  3004               	movlw	4
 10747     1580  0663               	xorwf	_pBDTEntryIn,w
 10748     1581  00E3               	movwf	_pBDTEntryIn
 10749     1582  3000               	movlw	0
 10750     1583  0664               	xorwf	_pBDTEntryIn+1,w
 10751     1584  00E4               	movwf	_pBDTEntryIn+1
 10752                           
 10753                           ;usb/usb_device.c: 2496:     pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
 10754     1585  307F               	movlw	127
 10755     1586  00DF               	movwf	??_USBCtrlTrfSetupHandler
 10756     1587  0867               	movf	_pBDTEntryEP0OutNext,w
 10757     1588  0086               	movwf	6
 10758     1589  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10759     158A  0087               	movwf	7
 10760     158B  085F               	movf	??_USBCtrlTrfSetupHandler,w
 10761     158C  0581               	andwf	1,f
 10762                           
 10763                           ;usb/usb_device.c: 2498:     inPipes[0].info.Val = 0;
 10764     158D  0021               	movlb	1	; select bank1
 10765     158E  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 10766                           
 10767                           ;usb/usb_device.c: 2499:     inPipes[0].wCount.Val = 0;
 10768     158F  01EC               	clrf	(_inPipes^(0+128)+3)	;volatile
 10769     1590  01ED               	clrf	((_inPipes+1)^(0+128)+3)	;volatile
 10770                           
 10771                           ;usb/usb_device.c: 2500:     outPipes[0].info.Val = 0;
 10772     1591  0022               	movlb	2	; select bank2
 10773     1592  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 10774                           
 10775                           ;usb/usb_device.c: 2501:     outPipes[0].wCount.Val = 0;
 10776     1593  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 10777     1594  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 10778                           
 10779                           ;usb/usb_device.c: 2507:     USBCheckStdRequest();
 10780     1595  3189  216F  3195   	fcall	_USBCheckStdRequest
 10781                           
 10782                           ;usb/usb_device.c: 2508:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_EP0_REQUES
      +                          T,0,0);
 10783     1598  3003               	movlw	3
 10784     1599  0020               	movlb	0	; select bank0
 10785     159A  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10786     159B  3000               	movlw	0
 10787     159C  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10788     159D  3000               	movlw	0
 10789     159E  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10790     159F  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10791     15A0  3000               	movlw	0
 10792     15A1  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10793     15A2  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10794     15A3  3193  238A  3195   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10795                           
 10796                           ;usb/usb_device.c: 2521:     USBCtrlEPServiceComplete();
 10797     15A6  318D  2550         	fcall	_USBCtrlEPServiceComplete
 10798     15A8  0008               	return
 10799     15A9                     __end_of_USBCtrlTrfSetupHandler:
 10800                           
 10801                           	psect	text56
 10802     0D50                     __ptext56:	
 10803 ;; *************** function _USBCtrlEPServiceComplete *****************
 10804 ;; Defined at:
 10805 ;;		line 1620 in file "usb/usb_device.c"
 10806 ;; Parameters:    Size  Location     Type
 10807 ;;		None
 10808 ;; Auto vars:     Size  Location     Type
 10809 ;;		None
 10810 ;; Return value:  Size  Location     Type
 10811 ;;                  1    wreg      void 
 10812 ;; Registers used:
 10813 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10814 ;; Tracked objects:
 10815 ;;		On entry : 0/2
 10816 ;;		On exit  : 1D/0
 10817 ;;		Unchanged: 0/0
 10818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;Total ram usage:        4 bytes
 10824 ;; Hardware stack levels used: 1
 10825 ;; Hardware stack levels required when called: 2
 10826 ;; This function calls:
 10827 ;;		_USBCtrlEPAllowDataStage
 10828 ;;		_USBCtrlEPAllowStatusStage
 10829 ;; This function is called by:
 10830 ;;		_USBCtrlTrfSetupHandler
 10831 ;; This function uses a non-reentrant model
 10832 ;;
 10833                           
 10834     0D50                     _USBCtrlEPServiceComplete:	
 10835                           ;psect for function _USBCtrlEPServiceComplete
 10836                           
 10837                           
 10838                           ;usb/usb_device.c: 1626:     UCONbits.PKTDIS = 0;
 10839                           
 10840                           ;incstack = 0
 10841                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10842     0D50  003D               	movlb	29	; select bank29
 10843     0D51  120E               	bcf	14,4	;volatile
 10844                           
 10845                           ;usb/usb_device.c: 1632:     if(inPipes[0].info.bits.busy == 0)
 10846     0D52  0021               	movlb	1	; select bank1
 10847     0D53  1BEB               	btfsc	(_inPipes^(0+128)+2),7	;volatile
 10848     0D54  2D9C               	goto	i1l516
 10849                           
 10850                           ;usb/usb_device.c: 1633:     {;usb/usb_device.c: 1634:         if(outPipes[0].info.bits.
      +                          busy == 1)
 10851     0D55  0022               	movlb	2	; select bank2
 10852     0D56  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 10853     0D57  2D65               	goto	i1l4548
 10854                           
 10855                           ;usb/usb_device.c: 1635:         {;usb/usb_device.c: 1636:             controlTransferSt
      +                          ate = 2;
 10856     0D58  3002               	movlw	2
 10857     0D59  0020               	movlb	0	; select bank0
 10858     0D5A  00EA               	movwf	_controlTransferState	;volatile
 10859                           
 10860                           ;usb/usb_device.c: 1647:             if(USBDeferOUTDataStagePackets == 0)
 10861     0D5B  0022               	movlb	2	; select bank2
 10862     0D5C  0858               	movf	_USBDeferOUTDataStagePackets^(0+256),w	;volatile
 10863     0D5D  1D03               	btfss	3,2
 10864     0D5E  2D61               	goto	i1l4544
 10865                           
 10866                           ;usb/usb_device.c: 1648:             {;usb/usb_device.c: 1649:                 USBCtrlEP
      +                          AllowDataStage();
 10867     0D5F  3197  2731         	fcall	_USBCtrlEPAllowDataStage
 10868     0D61                     i1l4544:
 10869                           
 10870                           ;usb/usb_device.c: 1654:             USBStatusStageEnabledFlag2 = 0;
 10871     0D61  0022               	movlb	2	; select bank2
 10872     0D62  01DA               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10873                           
 10874                           ;usb/usb_device.c: 1655:             USBStatusStageEnabledFlag1 = 0;
 10875     0D63  01DB               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10876                           
 10877                           ;usb/usb_device.c: 1656:         }
 10878     0D64  0008               	return
 10879     0D65                     i1l4548:
 10880                           
 10881                           ;usb/usb_device.c: 1658:         {;usb/usb_device.c: 1663:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 10882     0D65  0020               	movlb	0	; select bank0
 10883     0D66  0867               	movf	_pBDTEntryEP0OutNext,w
 10884     0D67  3E01               	addlw	1
 10885     0D68  00F7               	movwf	??_USBCtrlEPServiceComplete
 10886     0D69  3000               	movlw	0
 10887     0D6A  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 10888     0D6B  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10889     0D6C  0877               	movf	??_USBCtrlEPServiceComplete,w
 10890     0D6D  0086               	movwf	6
 10891     0D6E  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 10892     0D6F  0087               	movwf	7
 10893     0D70  3008               	movlw	8
 10894     0D71  0081               	movwf	1
 10895                           
 10896                           ;usb/usb_device.c: 1664:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 10897     0D72  3040               	movlw	64
 10898     0D73  00F7               	movwf	??_USBCtrlEPServiceComplete
 10899     0D74  3000               	movlw	0
 10900     0D75  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10901     0D76  30FF               	movlw	255
 10902     0D77  0577               	andwf	??_USBCtrlEPServiceComplete,w
 10903     0D78  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 10904     0D79  307F               	movlw	127
 10905     0D7A  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 10906     0D7B  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 10907     0D7C  0867               	movf	_pBDTEntryEP0OutNext,w
 10908     0D7D  0086               	movwf	6
 10909     0D7E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10910     0D7F  0087               	movwf	7
 10911     0D80  3142               	addfsr 1,2
 10912     0D81  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 10913     0D82  3FC0               	movwi [0]fsr1
 10914     0D83  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 10915     0D84  3FC1               	movwi [1]fsr1
 10916                           
 10917                           ;usb/usb_device.c: 1665:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 10918     0D85  0867               	movf	_pBDTEntryEP0OutNext,w
 10919     0D86  0086               	movwf	6
 10920     0D87  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10921     0D88  0087               	movwf	7
 10922     0D89  300C               	movlw	12
 10923     0D8A  0081               	movwf	1
 10924                           
 10925                           ;usb/usb_device.c: 1666:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 10926     0D8B  0867               	movf	_pBDTEntryEP0OutNext,w
 10927     0D8C  0086               	movwf	6
 10928     0D8D  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10929     0D8E  0087               	movwf	7
 10930     0D8F  1781               	bsf	1,7
 10931                           
 10932                           ;usb/usb_device.c: 1667:             pBDTEntryIn[0]->STAT.Val = 0x04;
 10933     0D90  0863               	movf	_pBDTEntryIn,w
 10934     0D91  0086               	movwf	6
 10935     0D92  0864               	movf	_pBDTEntryIn+1,w
 10936     0D93  0087               	movwf	7
 10937     0D94  3004               	movlw	4
 10938     0D95  0081               	movwf	1
 10939                           
 10940                           ;usb/usb_device.c: 1668:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 10941     0D96  0863               	movf	_pBDTEntryIn,w
 10942     0D97  0086               	movwf	6
 10943     0D98  0864               	movf	_pBDTEntryIn+1,w
 10944     0D99  0087               	movwf	7
 10945     0D9A  1781               	bsf	1,7
 10946     0D9B  0008               	return
 10947     0D9C                     i1l516:	
 10948                           ;usb/usb_device.c: 1671:     else
 10949                           
 10950                           
 10951                           ;usb/usb_device.c: 1672:     {;usb/usb_device.c: 1673:   if(SetupPkt.DataDir == (0x80>>7
      +                          ))
 10952     0D9C  0020               	movlb	0	; select bank0
 10953     0D9D  1FC0               	btfss	64,7	;volatile
 10954     0D9E  2DB1               	goto	i1l4574
 10955                           
 10956                           ;usb/usb_device.c: 1674:   {;usb/usb_device.c: 1675:    controlTransferState = 1;
 10957     0D9F  3001               	movlw	1
 10958     0DA0  00EA               	movwf	_controlTransferState	;volatile
 10959                           
 10960                           ;usb/usb_device.c: 1689:    if(USBDeferINDataStagePackets == 0)
 10961     0DA1  0022               	movlb	2	; select bank2
 10962     0DA2  0859               	movf	_USBDeferINDataStagePackets^(0+256),w	;volatile
 10963     0DA3  1D03               	btfss	3,2
 10964     0DA4  2DA8               	goto	i1l4566
 10965                           
 10966                           ;usb/usb_device.c: 1690:             {;usb/usb_device.c: 1691:                 USBCtrlEP
      +                          AllowDataStage();
 10967     0DA5  3197  2731  318D   	fcall	_USBCtrlEPAllowDataStage
 10968     0DA8                     i1l4566:
 10969                           
 10970                           ;usb/usb_device.c: 1714:             USBStatusStageEnabledFlag2 = 0;
 10971     0DA8  0022               	movlb	2	; select bank2
 10972     0DA9  01DA               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10973                           
 10974                           ;usb/usb_device.c: 1715:             USBStatusStageEnabledFlag1 = 0;
 10975     0DAA  01DB               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10976                           
 10977                           ;usb/usb_device.c: 1716:             if(USBDeferStatusStagePacket == 0)
 10978     0DAB  085C               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 10979     0DAC  1D03               	btfss	3,2
 10980     0DAD  0008               	return
 10981                           
 10982                           ;usb/usb_device.c: 1717:             {;usb/usb_device.c: 1718:                 USBCtrlEP
      +                          AllowStatusStage();
 10983     0DAE  3189  21E0         	fcall	_USBCtrlEPAllowStatusStage
 10984     0DB0  0008               	return
 10985     0DB1                     i1l4574:
 10986                           
 10987                           ;usb/usb_device.c: 1722:   {;usb/usb_device.c: 1733:    controlTransferState = 2;
 10988     0DB1  3002               	movlw	2
 10989     0DB2  00EA               	movwf	_controlTransferState	;volatile
 10990                           
 10991                           ;usb/usb_device.c: 1736:    pBDTEntryEP0OutNext->CNT = 8;
 10992     0DB3  0867               	movf	_pBDTEntryEP0OutNext,w
 10993     0DB4  3E01               	addlw	1
 10994     0DB5  00F7               	movwf	??_USBCtrlEPServiceComplete
 10995     0DB6  3000               	movlw	0
 10996     0DB7  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 10997     0DB8  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10998     0DB9  0877               	movf	??_USBCtrlEPServiceComplete,w
 10999     0DBA  0086               	movwf	6
 11000     0DBB  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 11001     0DBC  0087               	movwf	7
 11002     0DBD  3008               	movlw	8
 11003     0DBE  0081               	movwf	1
 11004                           
 11005                           ;usb/usb_device.c: 1737:    pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF
      +                          );
 11006     0DBF  3040               	movlw	64
 11007     0DC0  00F7               	movwf	??_USBCtrlEPServiceComplete
 11008     0DC1  3000               	movlw	0
 11009     0DC2  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 11010     0DC3  30FF               	movlw	255
 11011     0DC4  0577               	andwf	??_USBCtrlEPServiceComplete,w
 11012     0DC5  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 11013     0DC6  307F               	movlw	127
 11014     0DC7  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 11015     0DC8  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 11016     0DC9  0867               	movf	_pBDTEntryEP0OutNext,w
 11017     0DCA  0086               	movwf	6
 11018     0DCB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11019     0DCC  0087               	movwf	7
 11020     0DCD  3142               	addfsr 1,2
 11021     0DCE  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 11022     0DCF  3FC0               	movwi [0]fsr1
 11023     0DD0  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 11024     0DD1  3FC1               	movwi [1]fsr1
 11025                           
 11026                           ;usb/usb_device.c: 1738:    pBDTEntryEP0OutNext->STAT.Val = 0x04;
 11027     0DD2  0867               	movf	_pBDTEntryEP0OutNext,w
 11028     0DD3  0086               	movwf	6
 11029     0DD4  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11030     0DD5  0087               	movwf	7
 11031     0DD6  3004               	movlw	4
 11032     0DD7  0081               	movwf	1
 11033                           
 11034                           ;usb/usb_device.c: 1739:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 11035     0DD8  0867               	movf	_pBDTEntryEP0OutNext,w
 11036     0DD9  0086               	movwf	6
 11037     0DDA  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11038     0DDB  0087               	movwf	7
 11039     0DDC  1781               	bsf	1,7
 11040     0DDD  2DA8               	goto	i1l4566
 11041     0DDE                     __end_of_USBCtrlEPServiceComplete:	
 11042                           ;usb/usb_device.c: 1744:    if(USBDeferStatusStagePacket == 0)
 11043                           
 11044                           ;usb/usb_device.c: 1743:             USBStatusStageEnabledFlag1 = 0;
 11045                           
 11046                           ;usb/usb_device.c: 1742:             USBStatusStageEnabledFlag2 = 0;
 11047                           
 11048                           
 11049                           	psect	text57
 11050     1731                     __ptext57:	
 11051 ;; *************** function _USBCtrlEPAllowDataStage *****************
 11052 ;; Defined at:
 11053 ;;		line 1492 in file "usb/usb_device.c"
 11054 ;; Parameters:    Size  Location     Type
 11055 ;;		None
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;		None
 11058 ;; Return value:  Size  Location     Type
 11059 ;;                  1    wreg      void 
 11060 ;; Registers used:
 11061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11062 ;; Tracked objects:
 11063 ;;		On entry : 1F/2
 11064 ;;		On exit  : 1F/0
 11065 ;;		Unchanged: 0/0
 11066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11070 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11071 ;;Total ram usage:        4 bytes
 11072 ;; Hardware stack levels used: 1
 11073 ;; Hardware stack levels required when called: 1
 11074 ;; This function calls:
 11075 ;;		_USBCtrlTrfTxService
 11076 ;; This function is called by:
 11077 ;;		_USBCtrlEPServiceComplete
 11078 ;; This function uses a non-reentrant model
 11079 ;;
 11080                           
 11081     1731                     _USBCtrlEPAllowDataStage:	
 11082                           ;psect for function _USBCtrlEPAllowDataStage
 11083                           
 11084                           
 11085                           ;usb/usb_device.c: 1494:     USBDeferINDataStagePackets = 0;
 11086                           
 11087                           ;incstack = 0
 11088                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11089     1731  01D9               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 11090                           
 11091                           ;usb/usb_device.c: 1495:     USBDeferOUTDataStagePackets = 0;
 11092     1732  01D8               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 11093                           
 11094                           ;usb/usb_device.c: 1497:     if(controlTransferState == 2)
 11095     1733  3002               	movlw	2
 11096     1734  0020               	movlb	0	; select bank0
 11097     1735  066A               	xorwf	_controlTransferState,w	;volatile
 11098     1736  1D03               	btfss	3,2
 11099     1737  2F63               	goto	i1l4244
 11100                           
 11101                           ;usb/usb_device.c: 1498:     {;usb/usb_device.c: 1500:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 11102     1738  0867               	movf	_pBDTEntryEP0OutNext,w
 11103     1739  3E01               	addlw	1
 11104     173A  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11105     173B  3000               	movlw	0
 11106     173C  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 11107     173D  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11108     173E  0873               	movf	??_USBCtrlEPAllowDataStage,w
 11109     173F  0086               	movwf	6
 11110     1740  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 11111     1741  0087               	movwf	7
 11112     1742  3008               	movlw	8
 11113     1743  0081               	movwf	1
 11114                           
 11115                           ;usb/usb_device.c: 1501:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 11116     1744  3048               	movlw	72
 11117     1745  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11118     1746  3000               	movlw	0
 11119     1747  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11120     1748  30FF               	movlw	255
 11121     1749  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 11122     174A  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 11123     174B  307F               	movlw	127
 11124     174C  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 11125     174D  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 11126     174E  0867               	movf	_pBDTEntryEP0OutNext,w
 11127     174F  0086               	movwf	6
 11128     1750  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11129     1751  0087               	movwf	7
 11130     1752  3142               	addfsr 1,2
 11131     1753  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 11132     1754  3FC0               	movwi [0]fsr1
 11133     1755  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 11134     1756  3FC1               	movwi [1]fsr1
 11135                           
 11136                           ;usb/usb_device.c: 1502:         pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 0x08);
 11137     1757  0867               	movf	_pBDTEntryEP0OutNext,w
 11138     1758  0086               	movwf	6
 11139     1759  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11140     175A  0087               	movwf	7
 11141     175B  3048               	movlw	72
 11142     175C  0081               	movwf	1
 11143                           
 11144                           ;usb/usb_device.c: 1503:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 11145     175D  0867               	movf	_pBDTEntryEP0OutNext,w
 11146     175E  0086               	movwf	6
 11147     175F  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11148     1760  0087               	movwf	7
 11149     1761  1781               	bsf	1,7
 11150                           
 11151                           ;usb/usb_device.c: 1504:     }
 11152     1762  0008               	return
 11153     1763                     i1l4244:
 11154                           
 11155                           ;usb/usb_device.c: 1506:     {;usb/usb_device.c: 1509:   if(SetupPkt.wLength < inPipes[0
      +                          ].wCount.Val)
 11156     1763  0021               	movlb	1	; select bank1
 11157     1764  086D               	movf	((_inPipes+1)^(0+128)+3),w	;volatile
 11158     1765  0020               	movlb	0	; select bank0
 11159     1766  0247               	subwf	71,w	;volatile
 11160     1767  1D03               	skipz
 11161     1768  2F6D               	goto	u321_25
 11162     1769  0021               	movlb	1	; select bank1
 11163     176A  086C               	movf	(_inPipes^(0+128)+3),w	;volatile
 11164     176B  0020               	movlb	0	; select bank0
 11165     176C  0246               	subwf	70,w	;volatile
 11166     176D                     u321_25:
 11167     176D  1803               	skipnc
 11168     176E  2F76               	goto	i1l4248
 11169                           
 11170                           ;usb/usb_device.c: 1510:   {;usb/usb_device.c: 1511:    inPipes[0].wCount.Val = SetupPkt
      +                          .wLength;
 11171     176F  0847               	movf	71,w	;volatile
 11172     1770  0021               	movlb	1	; select bank1
 11173     1771  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11174     1772  0020               	movlb	0	; select bank0
 11175     1773  0846               	movf	70,w	;volatile
 11176     1774  0021               	movlb	1	; select bank1
 11177     1775  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11178     1776                     i1l4248:
 11179                           
 11180                           ;usb/usb_device.c: 1513:   USBCtrlTrfTxService();
 11181     1776  3196  26CA         	fcall	_USBCtrlTrfTxService
 11182                           
 11183                           ;usb/usb_device.c: 1518:   pBDTEntryIn[0]->ADR = (((uint16_t)(&CtrlTrfData)) & 0x7FFF);
 11184     1778  3048               	movlw	72
 11185     1779  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11186     177A  3000               	movlw	0
 11187     177B  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11188     177C  30FF               	movlw	255
 11189     177D  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 11190     177E  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 11191     177F  307F               	movlw	127
 11192     1780  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 11193     1781  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 11194     1782  0020               	movlb	0	; select bank0
 11195     1783  0863               	movf	_pBDTEntryIn,w
 11196     1784  0086               	movwf	6
 11197     1785  0864               	movf	_pBDTEntryIn+1,w
 11198     1786  0087               	movwf	7
 11199     1787  3142               	addfsr 1,2
 11200     1788  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 11201     1789  3FC0               	movwi [0]fsr1
 11202     178A  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 11203     178B  3FC1               	movwi [1]fsr1
 11204                           
 11205                           ;usb/usb_device.c: 1519:   pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 11206     178C  0863               	movf	_pBDTEntryIn,w
 11207     178D  0086               	movwf	6
 11208     178E  0864               	movf	_pBDTEntryIn+1,w
 11209     178F  0087               	movwf	7
 11210     1790  3048               	movlw	72
 11211     1791  0081               	movwf	1
 11212                           
 11213                           ;usb/usb_device.c: 1520:         pBDTEntryIn[0]->STAT.Val |= 0x80;
 11214     1792  0863               	movf	_pBDTEntryIn,w
 11215     1793  0086               	movwf	6
 11216     1794  0864               	movf	_pBDTEntryIn+1,w
 11217     1795  0087               	movwf	7
 11218     1796  1781               	bsf	1,7
 11219     1797  0008               	return
 11220     1798                     __end_of_USBCtrlEPAllowDataStage:
 11221                           
 11222                           	psect	text58
 11223     096F                     __ptext58:	
 11224 ;; *************** function _USBCheckStdRequest *****************
 11225 ;; Defined at:
 11226 ;;		line 2693 in file "usb/usb_device.c"
 11227 ;; Parameters:    Size  Location     Type
 11228 ;;		None
 11229 ;; Auto vars:     Size  Location     Type
 11230 ;;		None
 11231 ;; Return value:  Size  Location     Type
 11232 ;;                  1    wreg      void 
 11233 ;; Registers used:
 11234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11235 ;; Tracked objects:
 11236 ;;		On entry : 1F/2
 11237 ;;		On exit  : 0/0
 11238 ;;		Unchanged: 0/0
 11239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;Total ram usage:        2 bytes
 11245 ;; Hardware stack levels used: 1
 11246 ;; Hardware stack levels required when called: 5
 11247 ;; This function calls:
 11248 ;;		_USBStdFeatureReqHandler
 11249 ;;		_USBStdGetDscHandler
 11250 ;;		_USBStdGetStatusHandler
 11251 ;;		_USBStdSetCfgHandler
 11252 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11253 ;; This function is called by:
 11254 ;;		_USBCtrlTrfSetupHandler
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258     096F                     _USBCheckStdRequest:	
 11259                           ;psect for function _USBCheckStdRequest
 11260                           
 11261                           
 11262                           ;usb/usb_device.c: 2695:     if(SetupPkt.RequestType != (0x00>>5)) return;
 11263                           
 11264                           ;incstack = 0
 11265                           ; Regs used in _USBCheckStdRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11266     096F  0020               	movlb	0	; select bank0
 11267     0970  0E40               	swapf	64,w	;volatile
 11268     0971  0C89               	rrf	9,f
 11269     0972  3903               	andlw	3
 11270     0973  3A00               	xorlw	0
 11271     0974  1D03               	btfss	3,2
 11272     0975  0008               	return
 11273     0976  29B4               	goto	i1l4682
 11274     0977                     i1l644:	
 11275                           ;usb/usb_device.c: 2698:     {;usb/usb_device.c: 2699:         case 5:
 11276                           
 11277                           
 11278                           ;usb/usb_device.c: 2700:             inPipes[0].info.bits.busy = 1;
 11279     0977  0021               	movlb	1	; select bank1
 11280     0978  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11281                           
 11282                           ;usb/usb_device.c: 2701:             USBDeviceState = ADR_PENDING_STATE;
 11283     0979  3008               	movlw	8
 11284     097A  0020               	movlb	0	; select bank0
 11285     097B  00EC               	movwf	_USBDeviceState	;volatile
 11286                           
 11287                           ;usb/usb_device.c: 2703:             break;
 11288     097C  0008               	return
 11289     097D                     i1l4652:
 11290                           
 11291                           ;usb/usb_device.c: 2705:             USBStdGetDscHandler();
 11292     097D  318C  2441         	fcall	_USBStdGetDscHandler
 11293                           
 11294                           ;usb/usb_device.c: 2706:             break;
 11295     097F  0008               	return
 11296     0980                     i1l4654:
 11297                           
 11298                           ;usb/usb_device.c: 2708:             USBStdSetCfgHandler();
 11299     0980  3189  2103         	fcall	_USBStdSetCfgHandler
 11300                           
 11301                           ;usb/usb_device.c: 2709:             break;
 11302     0982  0008               	return
 11303     0983                     i1l4656:
 11304                           
 11305                           ;usb/usb_device.c: 2711:             inPipes[0].pSrc.bRam = (uint8_t*)&USBActiveConfigur
      +                          ation;
 11306     0983  306F               	movlw	low _USBActiveConfiguration
 11307     0984  0021               	movlb	1	; select bank1
 11308     0985  00E9               	movwf	_inPipes^(0+128)	;volatile
 11309     0986  3000               	movlw	high _USBActiveConfiguration
 11310     0987  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 11311                           
 11312                           ;usb/usb_device.c: 2712:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11313     0988  146B               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11314                           
 11315                           ;usb/usb_device.c: 2713:             inPipes[0].wCount.v[0] = 1;
 11316     0989  3001               	movlw	1
 11317     098A  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11318                           
 11319                           ;usb/usb_device.c: 2714:             inPipes[0].info.bits.busy = 1;
 11320     098B  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11321                           
 11322                           ;usb/usb_device.c: 2715:             break;
 11323     098C  0008               	return
 11324     098D                     i1l4664:
 11325                           
 11326                           ;usb/usb_device.c: 2717:             USBStdGetStatusHandler();
 11327     098D  3195  25A9         	fcall	_USBStdGetStatusHandler
 11328                           
 11329                           ;usb/usb_device.c: 2718:             break;
 11330     098F  0008               	return
 11331     0990                     i1l4666:
 11332                           
 11333                           ;usb/usb_device.c: 2721:             USBStdFeatureReqHandler();
 11334     0990  3182  2221         	fcall	_USBStdFeatureReqHandler
 11335                           
 11336                           ;usb/usb_device.c: 2722:             break;
 11337     0992  0008               	return
 11338     0993                     i1l4668:
 11339                           
 11340                           ;usb/usb_device.c: 2724:             inPipes[0].pSrc.bRam = (uint8_t*)&USBAlternateInter
      +                          face[SetupPkt.bIntfID];
 11341     0993  0844               	movf	68,w	;volatile
 11342     0994  3E6E               	addlw	(low (_USBAlternateInterface| 0))& (0+255)
 11343     0995  0021               	movlb	1	; select bank1
 11344     0996  00E9               	movwf	_inPipes^(0+128)	;volatile
 11345     0997  01EA               	clrf	(_inPipes+1)^(0+128)	;volatile
 11346                           
 11347                           ;usb/usb_device.c: 2725:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11348     0998  146B               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11349                           
 11350                           ;usb/usb_device.c: 2726:             inPipes[0].wCount.v[0] = 1;
 11351     0999  3001               	movlw	1
 11352     099A  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11353                           
 11354                           ;usb/usb_device.c: 2727:             inPipes[0].info.bits.busy = 1;
 11355     099B  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11356                           
 11357                           ;usb/usb_device.c: 2728:             break;
 11358     099C  0008               	return
 11359     099D                     i1l653:	
 11360                           ;usb/usb_device.c: 2729:         case 11:
 11361                           
 11362                           
 11363                           ;usb/usb_device.c: 2730:             inPipes[0].info.bits.busy = 1;
 11364     099D  0021               	movlb	1	; select bank1
 11365     099E  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11366                           
 11367                           ;usb/usb_device.c: 2731:             USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.
      +                          bAltID;
 11368     099F  0020               	movlb	0	; select bank0
 11369     09A0  0844               	movf	68,w	;volatile
 11370     09A1  3E6E               	addlw	(low (_USBAlternateInterface| 0))& (0+255)
 11371     09A2  0086               	movwf	6
 11372     09A3  0187               	clrf	7
 11373     09A4  0842               	movf	66,w	;volatile
 11374     09A5  0081               	movwf	1
 11375                           
 11376                           ;usb/usb_device.c: 2732:             break;
 11377     09A6  0008               	return
 11378     09A7                     i1l4678:
 11379                           
 11380                           ;usb/usb_device.c: 2734:             USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SE
      +                          T_DESCRIPTOR,0,0);
 11381     09A7  3002               	movlw	2
 11382     09A8  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11383     09A9  3000               	movlw	0
 11384     09AA  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11385     09AB  3000               	movlw	0
 11386     09AC  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11387     09AD  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11388     09AE  3000               	movlw	0
 11389     09AF  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11390     09B0  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11391     09B1  3193  238A         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11392                           
 11393                           ;usb/usb_device.c: 2735:             break;
 11394     09B3  0008               	return
 11395     09B4                     i1l4682:
 11396     09B4  0841               	movf	65,w	;volatile
 11397     09B5  00DD               	movwf	??_USBCheckStdRequest
 11398     09B6  01DE               	clrf	??_USBCheckStdRequest+1
 11399                           
 11400                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11401                           ; Switch size 1, requested type "simple"
 11402                           ; Number of cases is 1, Range of values is 0 to 0
 11403                           ; switch strategies available:
 11404                           ; Name         Instructions Cycles
 11405                           ; simple_byte            4     3 (average)
 11406                           ; direct_byte            8     6 (fixed)
 11407                           ; jumptable            260     6 (fixed)
 11408                           ;	Chosen strategy is simple_byte
 11409     09B7  085E               	movf	??_USBCheckStdRequest+1,w
 11410     09B8  3A00               	xorlw	0	; case 0
 11411     09B9  1903               	skipnz
 11412     09BA  29BC               	goto	i1l6684
 11413     09BB  29DF               	goto	i1l642
 11414     09BC                     i1l6684:
 11415                           
 11416                           ; Switch size 1, requested type "simple"
 11417                           ; Number of cases is 11, Range of values is 0 to 12
 11418                           ; switch strategies available:
 11419                           ; Name         Instructions Cycles
 11420                           ; direct_byte           32     6 (fixed)
 11421                           ; simple_byte           34    18 (average)
 11422                           ; jumptable            260     6 (fixed)
 11423                           ;	Chosen strategy is simple_byte
 11424     09BC  085D               	movf	??_USBCheckStdRequest,w
 11425     09BD  3A00               	xorlw	0	; case 0
 11426     09BE  1903               	skipnz
 11427     09BF  298D               	goto	i1l4664
 11428     09C0  3A01               	xorlw	1	; case 1
 11429     09C1  1903               	skipnz
 11430     09C2  2990               	goto	i1l4666
 11431     09C3  3A02               	xorlw	2	; case 3
 11432     09C4  1903               	skipnz
 11433     09C5  2990               	goto	i1l4666
 11434     09C6  3A06               	xorlw	6	; case 5
 11435     09C7  1903               	skipnz
 11436     09C8  2977               	goto	i1l644
 11437     09C9  3A03               	xorlw	3	; case 6
 11438     09CA  1903               	skipnz
 11439     09CB  297D               	goto	i1l4652
 11440     09CC  3A01               	xorlw	1	; case 7
 11441     09CD  1903               	skipnz
 11442     09CE  29A7               	goto	i1l4678
 11443     09CF  3A0F               	xorlw	15	; case 8
 11444     09D0  1903               	skipnz
 11445     09D1  2983               	goto	i1l4656
 11446     09D2  3A01               	xorlw	1	; case 9
 11447     09D3  1903               	skipnz
 11448     09D4  2980               	goto	i1l4654
 11449     09D5  3A03               	xorlw	3	; case 10
 11450     09D6  1903               	skipnz
 11451     09D7  2993               	goto	i1l4668
 11452     09D8  3A01               	xorlw	1	; case 11
 11453     09D9  1903               	skipnz
 11454     09DA  299D               	goto	i1l653
 11455     09DB  3A07               	xorlw	7	; case 12
 11456     09DC  1903               	skipnz
 11457     09DD  29DF               	goto	i1l642
 11458     09DE  29DF               	goto	i1l642
 11459     09DF                     i1l642:
 11460     09DF  0008               	return
 11461     09E0                     __end_of_USBCheckStdRequest:
 11462                           
 11463                           	psect	text59
 11464     0903                     __ptext59:	
 11465 ;; *************** function _USBStdSetCfgHandler *****************
 11466 ;; Defined at:
 11467 ;;		line 1972 in file "usb/usb_device.c"
 11468 ;; Parameters:    Size  Location     Type
 11469 ;;		None
 11470 ;; Auto vars:     Size  Location     Type
 11471 ;;  p               2    6[BANK0 ] PTR unsigned char 
 11472 ;;		 -> UEP1(1), 
 11473 ;;  i               1    8[BANK0 ] unsigned char 
 11474 ;;  i               1    9[BANK0 ] unsigned char 
 11475 ;; Return value:  Size  Location     Type
 11476 ;;                  1    wreg      void 
 11477 ;; Registers used:
 11478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11479 ;; Tracked objects:
 11480 ;;		On entry : 1D/0
 11481 ;;		On exit  : 1F/0
 11482 ;;		Unchanged: 0/0
 11483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11485 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11486 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11487 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;Total ram usage:        5 bytes
 11489 ;; Hardware stack levels used: 1
 11490 ;; Hardware stack levels required when called: 4
 11491 ;; This function calls:
 11492 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11493 ;;		i1_memset
 11494 ;; This function is called by:
 11495 ;;		_USBCheckStdRequest
 11496 ;; This function uses a non-reentrant model
 11497 ;;
 11498                           
 11499     0903                     _USBStdSetCfgHandler:	
 11500                           ;psect for function _USBStdSetCfgHandler
 11501                           
 11502                           
 11503                           ;usb/usb_device.c: 1974:     uint8_t i;;usb/usb_device.c: 1977:     inPipes[0].info.bits
      +                          .busy = 1;
 11504                           
 11505                           ;incstack = 0
 11506                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11507     0903  0021               	movlb	1	; select bank1
 11508     0904  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11509                           
 11510                           ;usb/usb_device.c: 1980:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++)
      +                           *p++ = 0; };
 11511     0905  300E               	movlw	14
 11512     0906  0020               	movlb	0	; select bank0
 11513     0907  00D7               	movwf	USBStdSetCfgHandler@p+1
 11514     0908  3099               	movlw	153
 11515     0909  00D6               	movwf	USBStdSetCfgHandler@p
 11516     090A  01D8               	clrf	USBStdSetCfgHandler@i_2020
 11517     090B                     i1l4264:
 11518     090B  0856               	movf	USBStdSetCfgHandler@p,w
 11519     090C  0086               	movwf	6
 11520     090D  0857               	movf	USBStdSetCfgHandler@p+1,w
 11521     090E  0087               	movwf	7
 11522     090F  0181               	clrf	1
 11523     0910  3001               	movlw	1
 11524     0911  07D6               	addwf	USBStdSetCfgHandler@p,f
 11525     0912  3000               	movlw	0
 11526     0913  3DD7               	addwfc	USBStdSetCfgHandler@p+1,f
 11527     0914  3001               	movlw	1
 11528     0915  00FD               	movwf	??_USBStdSetCfgHandler
 11529     0916  087D               	movf	??_USBStdSetCfgHandler,w
 11530     0917  07D8               	addwf	USBStdSetCfgHandler@i_2020,f
 11531     0918  0858               	movf	USBStdSetCfgHandler@i_2020,w
 11532     0919  1903               	btfsc	3,2
 11533     091A  290B               	goto	i1l4264
 11534                           
 11535                           ;usb/usb_device.c: 1983:     memset((void*)&BDT[0], 0x00, sizeof(BDT));
 11536     091B  3000               	movlw	0
 11537     091C  00F0               	movwf	i1memset@c
 11538     091D  00F1               	movwf	i1memset@c+1
 11539     091E  3020               	movlw	32
 11540     091F  00F2               	movwf	i1memset@n
 11541     0920  3000               	movlw	0
 11542     0921  00F3               	movwf	i1memset@n+1
 11543     0922  3020               	movlw	32
 11544     0923  319F  27BB  3189   	fcall	i1_memset
 11545                           
 11546                           ;usb/usb_device.c: 1986:     UCONbits.PPBRST = 1;
 11547     0926  003D               	movlb	29	; select bank29
 11548     0927  170E               	bsf	14,6	;volatile
 11549                           
 11550                           ;usb/usb_device.c: 1991:  for(i = 0; i < (uint8_t)(1 +1u); i++)
 11551     0928  0020               	movlb	0	; select bank0
 11552     0929  01D9               	clrf	USBStdSetCfgHandler@i
 11553     092A                     i1l4282:
 11554                           
 11555                           ;usb/usb_device.c: 1992:  {;usb/usb_device.c: 1993:   ep_data_in[i].Val = 0u;
 11556     092A  0859               	movf	USBStdSetCfgHandler@i,w
 11557     092B  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11558     092C  0086               	movwf	6
 11559     092D  3001               	movlw	1	; select bank2/3
 11560     092E  0087               	movwf	7
 11561     092F  0181               	clrf	1
 11562                           
 11563                           ;usb/usb_device.c: 1994:         ep_data_out[i].Val = 0u;
 11564     0930  0859               	movf	USBStdSetCfgHandler@i,w
 11565     0931  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11566     0932  0086               	movwf	6
 11567     0933  3001               	movlw	1	; select bank2/3
 11568     0934  0087               	movwf	7
 11569     0935  0181               	clrf	1
 11570                           
 11571                           ;usb/usb_device.c: 1995:  }
 11572     0936  3001               	movlw	1
 11573     0937  00FD               	movwf	??_USBStdSetCfgHandler
 11574     0938  087D               	movf	??_USBStdSetCfgHandler,w
 11575     0939  07D9               	addwf	USBStdSetCfgHandler@i,f
 11576     093A  3002               	movlw	2
 11577     093B  0259               	subwf	USBStdSetCfgHandler@i,w
 11578     093C  1C03               	skipc
 11579     093D  292A               	goto	i1l4282
 11580                           
 11581                           ;usb/usb_device.c: 1998:     memset((void*)&USBAlternateInterface,0x00,1);
 11582     093E  3000               	movlw	0
 11583     093F  00F0               	movwf	i1memset@c
 11584     0940  00F1               	movwf	i1memset@c+1
 11585     0941  3001               	movlw	1
 11586     0942  00F2               	movwf	i1memset@n
 11587     0943  3000               	movlw	0
 11588     0944  00F3               	movwf	i1memset@n+1
 11589     0945  306E               	movlw	(low (_USBAlternateInterface| 0))& (0+255)
 11590     0946  319F  27BB  3189   	fcall	i1_memset
 11591                           
 11592                           ;usb/usb_device.c: 2001:     UCONbits.PPBRST = 0;
 11593     0949  003D               	movlb	29	; select bank29
 11594     094A  130E               	bcf	14,6	;volatile
 11595                           
 11596                           ;usb/usb_device.c: 2003:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 11597     094B  3028               	movlw	40
 11598     094C  0020               	movlb	0	; select bank0
 11599     094D  00E3               	movwf	_pBDTEntryIn
 11600     094E  3000               	movlw	0
 11601     094F  00E4               	movwf	_pBDTEntryIn+1
 11602                           
 11603                           ;usb/usb_device.c: 2006:     pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 11604     0950  3020               	movlw	32
 11605     0951  00EB               	movwf	_pBDTEntryEP0OutCurrent
 11606                           
 11607                           ;usb/usb_device.c: 2007:     pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 11608     0952  086B               	movf	_pBDTEntryEP0OutCurrent,w
 11609     0953  00E7               	movwf	_pBDTEntryEP0OutNext
 11610     0954  01E8               	clrf	_pBDTEntryEP0OutNext+1
 11611                           
 11612                           ;usb/usb_device.c: 2010:     USBActiveConfiguration = SetupPkt.bConfigurationValue;
 11613     0955  0842               	movf	66,w	;volatile
 11614     0956  00EF               	movwf	_USBActiveConfiguration	;volatile
 11615                           
 11616                           ;usb/usb_device.c: 2013:     if(USBActiveConfiguration == 0)
 11617     0957  086F               	movf	_USBActiveConfiguration,w	;volatile
 11618     0958  1D03               	btfss	3,2
 11619     0959  295D               	goto	i1l4304
 11620                           
 11621                           ;usb/usb_device.c: 2014:     {;usb/usb_device.c: 2016:         USBDeviceState = ADDRESS_
      +                          STATE;
 11622     095A  3010               	movlw	16
 11623     095B  00EC               	movwf	_USBDeviceState	;volatile
 11624                           
 11625                           ;usb/usb_device.c: 2017:     }
 11626     095C  0008               	return
 11627     095D                     i1l4304:
 11628                           
 11629                           ;usb/usb_device.c: 2019:     {;usb/usb_device.c: 2021:         USER_USB_CALLBACK_EVENT_H
      +                          ANDLER((USB_EVENT)EVENT_CONFIGURED,(void*)&USBActiveConfiguration,1);
 11630     095D  3001               	movlw	1
 11631     095E  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11632     095F  3000               	movlw	0
 11633     0960  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11634     0961  306F               	movlw	low _USBActiveConfiguration
 11635     0962  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11636     0963  3000               	movlw	high _USBActiveConfiguration
 11637     0964  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11638     0965  3001               	movlw	1
 11639     0966  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11640     0967  3000               	movlw	0
 11641     0968  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11642     0969  3193  238A         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11643                           
 11644                           ;usb/usb_device.c: 2026:         USBDeviceState = CONFIGURED_STATE;
 11645     096B  3020               	movlw	32
 11646     096C  0020               	movlb	0	; select bank0
 11647     096D  00EC               	movwf	_USBDeviceState	;volatile
 11648     096E  0008               	return
 11649     096F                     __end_of_USBStdSetCfgHandler:
 11650                           
 11651                           	psect	text60
 11652     1FBB                     __ptext60:	
 11653 ;; *************** function i1_memset *****************
 11654 ;; Defined at:
 11655 ;;		line 3 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memset.c"
 11656 ;; Parameters:    Size  Location     Type
 11657 ;;  dest            1    wreg     PTR void 
 11658 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11659 ;;  c               2    0[COMMON] int 
 11660 ;;  n               2    2[COMMON] unsigned int 
 11661 ;; Auto vars:     Size  Location     Type
 11662 ;;  dest            1    5[COMMON] PTR void 
 11663 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11664 ;;  p               1    6[COMMON] PTR unsigned char 
 11665 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11666 ;; Return value:  Size  Location     Type
 11667 ;;                  2    0[COMMON] PTR void 
 11668 ;; Registers used:
 11669 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11670 ;; Tracked objects:
 11671 ;;		On entry : 1F/0
 11672 ;;		On exit  : 1F/0
 11673 ;;		Unchanged: 1F/0
 11674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11675 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11677 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;Total ram usage:        7 bytes
 11680 ;; Hardware stack levels used: 1
 11681 ;; This function calls:
 11682 ;;		Nothing
 11683 ;; This function is called by:
 11684 ;;		_USBStdSetCfgHandler
 11685 ;; This function uses a non-reentrant model
 11686 ;;
 11687                           
 11688     1FBB                     i1_memset:	
 11689                           ;psect for function i1_memset
 11690                           
 11691                           
 11692                           ;incstack = 0
 11693                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11694                           ;i1memset@dest stored from wreg
 11695     1FBB  00F5               	movwf	i1memset@dest
 11696     1FBC  0875               	movf	i1memset@dest,w
 11697     1FBD  00F6               	movwf	i1memset@p
 11698     1FBE                     i1l4194:
 11699     1FBE  3001               	movlw	1
 11700     1FBF  02F2               	subwf	i1memset@n,f
 11701     1FC0  3000               	movlw	0
 11702     1FC1  3BF3               	subwfb	i1memset@n+1,f
 11703     1FC2  0A72               	incf	i1memset@n,w
 11704     1FC3  1903               	btfsc	3,2
 11705     1FC4  0A73               	incf	i1memset@n+1,w
 11706     1FC5  1903               	btfsc	3,2
 11707     1FC6  0008               	return
 11708     1FC7  0876               	movf	i1memset@p,w
 11709     1FC8  0086               	movwf	6
 11710     1FC9  0187               	clrf	7
 11711     1FCA  0870               	movf	i1memset@c,w
 11712     1FCB  0081               	movwf	1
 11713     1FCC  3001               	movlw	1
 11714     1FCD  00F4               	movwf	??i1_memset
 11715     1FCE  0874               	movf	??i1_memset,w
 11716     1FCF  07F6               	addwf	i1memset@p,f
 11717     1FD0  2FBE               	goto	i1l4194
 11718     1FD1                     __end_ofi1_memset:
 11719                           
 11720                           	psect	text61
 11721     15A9                     __ptext61:	
 11722 ;; *************** function _USBStdGetStatusHandler *****************
 11723 ;; Defined at:
 11724 ;;		line 2133 in file "usb/usb_device.c"
 11725 ;; Parameters:    Size  Location     Type
 11726 ;;		None
 11727 ;; Auto vars:     Size  Location     Type
 11728 ;;  p               2    2[COMMON] PTR struct __BDT
 11729 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 11730 ;; Return value:  Size  Location     Type
 11731 ;;                  1    wreg      void 
 11732 ;; Registers used:
 11733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11734 ;; Tracked objects:
 11735 ;;		On entry : 1D/0
 11736 ;;		On exit  : 1F/1
 11737 ;;		Unchanged: 0/0
 11738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11743 ;;Total ram usage:        4 bytes
 11744 ;; Hardware stack levels used: 1
 11745 ;; This function calls:
 11746 ;;		Nothing
 11747 ;; This function is called by:
 11748 ;;		_USBCheckStdRequest
 11749 ;; This function uses a non-reentrant model
 11750 ;;
 11751                           
 11752     15A9                     _USBStdGetStatusHandler:	
 11753                           ;psect for function _USBStdGetStatusHandler
 11754                           
 11755                           
 11756                           ;usb/usb_device.c: 2135:     CtrlTrfData[0] = 0;
 11757                           
 11758                           ;incstack = 0
 11759                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
 11760     15A9  0020               	movlb	0	; select bank0
 11761     15AA  01C8               	clrf	72	;volatile
 11762                           
 11763                           ;usb/usb_device.c: 2136:     CtrlTrfData[1] = 0;
 11764     15AB  01C9               	clrf	73	;volatile
 11765                           
 11766                           ;usb/usb_device.c: 2138:     switch(SetupPkt.Recipient)
 11767     15AC  2DE7               	goto	i1l4368
 11768     15AD                     i1l581:	
 11769                           ;usb/usb_device.c: 2139:     {;usb/usb_device.c: 2140:         case (0x00):
 11770                           
 11771                           
 11772                           ;usb/usb_device.c: 2141:             inPipes[0].info.bits.busy = 1;
 11773     15AD  0021               	movlb	1	; select bank1
 11774     15AE  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11775                           
 11776                           ;usb/usb_device.c: 2151:             if(RemoteWakeup == 1)
 11777                           
 11778                           ;usb/usb_device.c: 2146:             if(0 == 1)
 11779     15AF  0022               	movlb	2	; select bank2
 11780     15B0  0361               	decf	_RemoteWakeup^(0+256),w	;volatile
 11781     15B1  1D03               	btfss	3,2
 11782     15B2  2DFB               	goto	i1l584
 11783                           
 11784                           ;usb/usb_device.c: 2152:             {;usb/usb_device.c: 2153:                 CtrlTrfDa
      +                          ta[0]|=0x02;
 11785     15B3  0020               	movlb	0	; select bank0
 11786     15B4  14C8               	bsf	72,1	;volatile
 11787     15B5  2DFB               	goto	i1l584
 11788     15B6                     i1l585:	
 11789                           ;usb/usb_device.c: 2156:         case (0x01):
 11790                           
 11791                           
 11792                           ;usb/usb_device.c: 2157:             inPipes[0].info.bits.busy = 1;
 11793     15B6  0021               	movlb	1	; select bank1
 11794     15B7  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11795                           
 11796                           ;usb/usb_device.c: 2158:             break;
 11797     15B8  2DFB               	goto	i1l584
 11798     15B9                     i1l586:	
 11799                           ;usb/usb_device.c: 2159:         case (0x02):
 11800                           
 11801                           
 11802                           ;usb/usb_device.c: 2160:             inPipes[0].info.bits.busy = 1;
 11803     15B9  0021               	movlb	1	; select bank1
 11804     15BA  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11805                           
 11806                           ;usb/usb_device.c: 2164:             if(SetupPkt.EPNum != 0)
 11807     15BB  0020               	movlb	0	; select bank0
 11808     15BC  0844               	movf	68,w	;volatile
 11809     15BD  390F               	andlw	15
 11810     15BE  3A00               	xorlw	0
 11811     15BF  1903               	skipnz
 11812     15C0  2DFB               	goto	i1l584
 11813                           
 11814                           ;usb/usb_device.c: 2165:             {;usb/usb_device.c: 2166:                 BDT_ENTRY
      +                           *p;;usb/usb_device.c: 2168:                 if(SetupPkt.EPDir == 0)
 11815     15C1  1BC4               	btfsc	68,7	;volatile
 11816     15C2  2DCE               	goto	i1l4358
 11817                           
 11818                           ;usb/usb_device.c: 2169:                 {;usb/usb_device.c: 2170:                     p
      +                           = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 11819     15C3  0844               	movf	68,w	;volatile
 11820     15C4  390F               	andlw	15
 11821     15C5  0709               	addwf	9,w
 11822     15C6  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 11823     15C7  0086               	movwf	6
 11824     15C8  3001               	movlw	1	; select bank2/3
 11825     15C9  0087               	movwf	7
 11826     15CA  3F40               	moviw [0]fsr1
 11827     15CB  00F2               	movwf	USBStdGetStatusHandler@p
 11828     15CC  3F41               	moviw [1]fsr1
 11829     15CD  2DD7               	goto	L8
 11830     15CE                     i1l4358:	
 11831                           ;usb/usb_device.c: 2171:                 }
 11832                           
 11833                           
 11834                           ;usb/usb_device.c: 2173:                 {;usb/usb_device.c: 2174:                     p
      +                           = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 11835     15CE  0844               	movf	68,w	;volatile
 11836     15CF  390F               	andlw	15
 11837     15D0  0709               	addwf	9,w
 11838     15D1  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 11839     15D2  0086               	movwf	6
 11840     15D3  0187               	clrf	7
 11841     15D4  3F40               	moviw [0]fsr1
 11842     15D5  00F2               	movwf	USBStdGetStatusHandler@p
 11843     15D6  3F41               	moviw [1]fsr1
 11844     15D7                     L8:
 11845     15D7  00F3               	movwf	USBStdGetStatusHandler@p+1
 11846                           
 11847                           ;usb/usb_device.c: 2177:                 if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1)
      +                          )
 11848     15D8  0872               	movf	USBStdGetStatusHandler@p,w
 11849     15D9  0086               	movwf	6
 11850     15DA  0873               	movf	USBStdGetStatusHandler@p+1,w
 11851     15DB  0087               	movwf	7
 11852     15DC  1F81               	btfss	1,7
 11853     15DD  2DFB               	goto	i1l584
 11854     15DE  0872               	movf	USBStdGetStatusHandler@p,w
 11855     15DF  0086               	movwf	6
 11856     15E0  0873               	movf	USBStdGetStatusHandler@p+1,w
 11857     15E1  0087               	movwf	7
 11858     15E2  1D01               	btfss	1,2
 11859     15E3  2DFB               	goto	i1l584
 11860                           
 11861                           ;usb/usb_device.c: 2178:                 {;usb/usb_device.c: 2179:                     C
      +                          trlTrfData[0]=0x01;
 11862     15E4  3001               	movlw	1
 11863     15E5  00C8               	movwf	72	;volatile
 11864     15E6  2DFB               	goto	i1l584
 11865     15E7                     i1l4368:
 11866     15E7  0840               	movf	64,w	;volatile
 11867     15E8  391F               	andlw	31
 11868     15E9  00F0               	movwf	??_USBStdGetStatusHandler
 11869     15EA  01F1               	clrf	??_USBStdGetStatusHandler+1
 11870                           
 11871                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11872                           ; Switch size 1, requested type "simple"
 11873                           ; Number of cases is 1, Range of values is 0 to 0
 11874                           ; switch strategies available:
 11875                           ; Name         Instructions Cycles
 11876                           ; simple_byte            4     3 (average)
 11877                           ; direct_byte            8     6 (fixed)
 11878                           ; jumptable            260     6 (fixed)
 11879                           ;	Chosen strategy is simple_byte
 11880     15EB  0871               	movf	??_USBStdGetStatusHandler+1,w
 11881     15EC  3A00               	xorlw	0	; case 0
 11882     15ED  1903               	skipnz
 11883     15EE  2DF0               	goto	i1l6686
 11884     15EF  2DFB               	goto	i1l584
 11885     15F0                     i1l6686:
 11886                           
 11887                           ; Switch size 1, requested type "simple"
 11888                           ; Number of cases is 3, Range of values is 0 to 2
 11889                           ; switch strategies available:
 11890                           ; Name         Instructions Cycles
 11891                           ; simple_byte           10     6 (average)
 11892                           ; direct_byte           12     6 (fixed)
 11893                           ; jumptable            260     6 (fixed)
 11894                           ;	Chosen strategy is simple_byte
 11895     15F0  0870               	movf	??_USBStdGetStatusHandler,w
 11896     15F1  3A00               	xorlw	0	; case 0
 11897     15F2  1903               	skipnz
 11898     15F3  2DAD               	goto	i1l581
 11899     15F4  3A01               	xorlw	1	; case 1
 11900     15F5  1903               	skipnz
 11901     15F6  2DB6               	goto	i1l585
 11902     15F7  3A03               	xorlw	3	; case 2
 11903     15F8  1903               	skipnz
 11904     15F9  2DB9               	goto	i1l586
 11905     15FA  2DFB               	goto	i1l584
 11906     15FB                     i1l584:
 11907                           
 11908                           ;usb/usb_device.c: 2185:     if(inPipes[0].info.bits.busy == 1)
 11909     15FB  0021               	movlb	1	; select bank1
 11910     15FC  1FEB               	btfss	(_inPipes^(0+128)+2),7	;volatile
 11911     15FD  0008               	return
 11912                           
 11913                           ;usb/usb_device.c: 2186:     {;usb/usb_device.c: 2187:         inPipes[0].pSrc.bRam = (u
      +                          int8_t*)&CtrlTrfData;
 11914     15FE  3048               	movlw	72
 11915     15FF  00E9               	movwf	_inPipes^(0+128)	;volatile
 11916     1600  3000               	movlw	0
 11917     1601  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 11918                           
 11919                           ;usb/usb_device.c: 2188:         inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11920     1602  146B               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11921                           
 11922                           ;usb/usb_device.c: 2189:         inPipes[0].wCount.v[0] = 2;
 11923     1603  3002               	movlw	2
 11924     1604  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11925     1605  0008               	return
 11926     1606                     __end_of_USBStdGetStatusHandler:
 11927                           
 11928                           	psect	text62
 11929     0C41                     __ptext62:	
 11930 ;; *************** function _USBStdGetDscHandler *****************
 11931 ;; Defined at:
 11932 ;;		line 2047 in file "usb/usb_device.c"
 11933 ;; Parameters:    Size  Location     Type
 11934 ;;		None
 11935 ;; Auto vars:     Size  Location     Type
 11936 ;;		None
 11937 ;; Return value:  Size  Location     Type
 11938 ;;                  1    wreg      void 
 11939 ;; Registers used:
 11940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11941 ;; Tracked objects:
 11942 ;;		On entry : 1D/0
 11943 ;;		On exit  : 1E/0
 11944 ;;		Unchanged: 0/0
 11945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11949 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11950 ;;Total ram usage:        3 bytes
 11951 ;; Hardware stack levels used: 1
 11952 ;; This function calls:
 11953 ;;		Nothing
 11954 ;; This function is called by:
 11955 ;;		_USBCheckStdRequest
 11956 ;; This function uses a non-reentrant model
 11957 ;;
 11958                           
 11959     0C41                     _USBStdGetDscHandler:	
 11960                           ;psect for function _USBStdGetDscHandler
 11961                           
 11962                           
 11963                           ;usb/usb_device.c: 2049:     if(SetupPkt.bmRequestType == 0x80)
 11964                           
 11965                           ;incstack = 0
 11966                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 11967     0C41  3080               	movlw	128
 11968     0C42  0020               	movlb	0	; select bank0
 11969     0C43  0640               	xorwf	64,w	;volatile
 11970     0C44  1D03               	btfss	3,2
 11971     0C45  0008               	return
 11972                           
 11973                           ;usb/usb_device.c: 2050:     {;usb/usb_device.c: 2051:         inPipes[0].info.Val = 0x0
      +                          0 | 0x80 | 0x40;
 11974     0C46  30C0               	movlw	192
 11975     0C47  0021               	movlb	1	; select bank1
 11976     0C48  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 11977                           
 11978                           ;usb/usb_device.c: 2053:         switch(SetupPkt.bDescriptorType)
 11979     0C49  2CAD               	goto	i1l4338
 11980     0C4A                     i1l4312:
 11981                           
 11982                           ;usb/usb_device.c: 2057:                     inPipes[0].pSrc.bRom = (const uint8_t*)&dev
      +                          ice_dsc;
 11983     0C4A  309C               	movlw	low (_device_dsc| (0+32768))
 11984     0C4B  0021               	movlb	1	; select bank1
 11985     0C4C  00E9               	movwf	_inPipes^(0+128)	;volatile
 11986     0C4D  3098               	movlw	high (_device_dsc| (0+32768))
 11987     0C4E  00EA               	movwf	(_inPipes^(0+128)+1)	;volatile
 11988                           
 11989                           ;usb/usb_device.c: 2061:                 inPipes[0].wCount.Val = sizeof(device_dsc);
 11990     0C4F  3000               	movlw	0
 11991     0C50  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11992     0C51  3012               	movlw	18
 11993     0C52  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11994                           
 11995                           ;usb/usb_device.c: 2062:                 break;
 11996     0C53  0008               	return
 11997     0C54                     i1l4316:
 11998                           
 11999                           ;usb/usb_device.c: 2067:                 if(SetupPkt.bDscIndex < 1)
 12000     0C54  0842               	movf	66,w	;volatile
 12001     0C55  1D03               	btfss	3,2
 12002     0C56  2C83               	goto	i1l4324
 12003                           
 12004                           ;usb/usb_device.c: 2068:                 {;usb/usb_device.c: 2070:                      
      +                             inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 12005     0C57  0842               	movf	66,w	;volatile
 12006     0C58  00F0               	movwf	??_USBStdGetDscHandler
 12007     0C59  01F1               	clrf	??_USBStdGetDscHandler+1
 12008     0C5A  35F0               	lslf	??_USBStdGetDscHandler,f
 12009     0C5B  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 12010     0C5C  30C6               	movlw	low _USB_CD_Ptr
 12011     0C5D  0770               	addwf	??_USBStdGetDscHandler,w
 12012     0C5E  0084               	movwf	4
 12013     0C5F  3018               	movlw	high _USB_CD_Ptr
 12014     0C60  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 12015     0C61  3880               	iorlw	128
 12016     0C62  0085               	movwf	5
 12017     0C63  3F00               	moviw [0]fsr0
 12018     0C64  0021               	movlb	1	; select bank1
 12019     0C65  00E9               	movwf	_inPipes^(0+128)	;volatile
 12020     0C66  3F01               	moviw [1]fsr0
 12021     0C67  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12022                           
 12023                           ;usb/usb_device.c: 2078:                     inPipes[0].wCount.byte.LB = *(inPipes[0].pS
      +                          rc.bRom+2);
 12024     0C68  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 12025     0C69  00F1               	movwf	??_USBStdGetDscHandler+1
 12026     0C6A  0869               	movf	_inPipes^(0+128),w	;volatile
 12027     0C6B  00F0               	movwf	??_USBStdGetDscHandler
 12028     0C6C  3002               	movlw	2
 12029     0C6D  0770               	addwf	??_USBStdGetDscHandler,w
 12030     0C6E  0084               	movwf	4
 12031     0C6F  0871               	movf	??_USBStdGetDscHandler+1,w
 12032     0C70  1803               	skipnc
 12033     0C71  0A71               	incf	??_USBStdGetDscHandler+1,w
 12034     0C72  0085               	movwf	5
 12035     0C73  0800               	movf	0,w	;code access
 12036     0C74  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12037                           
 12038                           ;usb/usb_device.c: 2079:                     inPipes[0].wCount.byte.HB = *(inPipes[0].pS
      +                          rc.bRom+3);
 12039     0C75  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 12040     0C76  00F1               	movwf	??_USBStdGetDscHandler+1
 12041     0C77  0869               	movf	_inPipes^(0+128),w	;volatile
 12042     0C78  00F0               	movwf	??_USBStdGetDscHandler
 12043     0C79  3003               	movlw	3
 12044     0C7A  0770               	addwf	??_USBStdGetDscHandler,w
 12045     0C7B  0084               	movwf	4
 12046     0C7C  0871               	movf	??_USBStdGetDscHandler+1,w
 12047     0C7D  1803               	skipnc
 12048     0C7E  0A71               	incf	??_USBStdGetDscHandler+1,w
 12049     0C7F  0085               	movwf	5
 12050     0C80  0800               	movf	0,w	;code access
 12051     0C81  00ED               	movwf	(_inPipes^(0+128)+4)	;volatile
 12052                           
 12053                           ;usb/usb_device.c: 2080:                 }
 12054     0C82  0008               	return
 12055     0C83                     i1l4324:
 12056                           
 12057                           ;usb/usb_device.c: 2082:     {;usb/usb_device.c: 2083:      inPipes[0].info.Val = 0;
 12058     0C83  0021               	movlb	1	; select bank1
 12059     0C84  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 12060     0C85  0008               	return
 12061     0C86                     i1l4326:
 12062                           
 12063                           ;usb/usb_device.c: 2090:                 if(SetupPkt.bDscIndex<3)
 12064     0C86  3003               	movlw	3
 12065     0C87  0242               	subwf	66,w	;volatile
 12066     0C88  1803               	skipnc
 12067     0C89  2CA7               	goto	i1l4332
 12068                           
 12069                           ;usb/usb_device.c: 2091:                 {;usb/usb_device.c: 2093:                     i
      +                          nPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 12070     0C8A  0842               	movf	66,w	;volatile
 12071     0C8B  00F0               	movwf	??_USBStdGetDscHandler
 12072     0C8C  01F1               	clrf	??_USBStdGetDscHandler+1
 12073     0C8D  35F0               	lslf	??_USBStdGetDscHandler,f
 12074     0C8E  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 12075     0C8F  30BC               	movlw	low _USB_SD_Ptr
 12076     0C90  0770               	addwf	??_USBStdGetDscHandler,w
 12077     0C91  0084               	movwf	4
 12078     0C92  3018               	movlw	high _USB_SD_Ptr
 12079     0C93  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 12080     0C94  3880               	iorlw	128
 12081     0C95  0085               	movwf	5
 12082     0C96  3F00               	moviw [0]fsr0
 12083     0C97  0021               	movlb	1	; select bank1
 12084     0C98  00E9               	movwf	_inPipes^(0+128)	;volatile
 12085     0C99  3F01               	moviw [1]fsr0
 12086     0C9A  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12087                           
 12088                           ;usb/usb_device.c: 2095:                     inPipes[0].wCount.Val = *inPipes[0].pSrc.bR
      +                          om;
 12089     0C9B  0869               	movf	_inPipes^(0+128),w	;volatile
 12090     0C9C  0084               	movwf	4
 12091     0C9D  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 12092     0C9E  0085               	movwf	5
 12093     0C9F  0800               	movf	0,w	;code access
 12094     0CA0  00F0               	movwf	??_USBStdGetDscHandler
 12095     0CA1  01F1               	clrf	??_USBStdGetDscHandler+1
 12096     0CA2  0870               	movf	??_USBStdGetDscHandler,w
 12097     0CA3  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12098     0CA4  0871               	movf	??_USBStdGetDscHandler+1,w
 12099     0CA5  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12100                           
 12101                           ;usb/usb_device.c: 2096:                 }
 12102     0CA6  0008               	return
 12103     0CA7                     i1l4332:
 12104                           
 12105                           ;usb/usb_device.c: 2107:                 {;usb/usb_device.c: 2108:                     i
      +                          nPipes[0].info.Val = 0;
 12106     0CA7  0021               	movlb	1	; select bank1
 12107     0CA8  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 12108     0CA9  0008               	return
 12109     0CAA                     i1l4334:
 12110                           
 12111                           ;usb/usb_device.c: 2112:                 inPipes[0].info.Val = 0;
 12112     0CAA  0021               	movlb	1	; select bank1
 12113     0CAB  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 12114                           
 12115                           ;usb/usb_device.c: 2113:                 break;
 12116     0CAC  0008               	return
 12117     0CAD                     i1l4338:
 12118     0CAD  0020               	movlb	0	; select bank0
 12119     0CAE  0843               	movf	67,w	;volatile
 12120     0CAF  00F0               	movwf	??_USBStdGetDscHandler
 12121     0CB0  01F1               	clrf	??_USBStdGetDscHandler+1
 12122                           
 12123                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12124                           ; Switch size 1, requested type "simple"
 12125                           ; Number of cases is 1, Range of values is 0 to 0
 12126                           ; switch strategies available:
 12127                           ; Name         Instructions Cycles
 12128                           ; simple_byte            4     3 (average)
 12129                           ; direct_byte            8     6 (fixed)
 12130                           ; jumptable            260     6 (fixed)
 12131                           ;	Chosen strategy is simple_byte
 12132     0CB1  0871               	movf	??_USBStdGetDscHandler+1,w
 12133     0CB2  3A00               	xorlw	0	; case 0
 12134     0CB3  1903               	skipnz
 12135     0CB4  2CB6               	goto	i1l6688
 12136     0CB5  2CAA               	goto	i1l4334
 12137     0CB6                     i1l6688:
 12138                           
 12139                           ; Switch size 1, requested type "simple"
 12140                           ; Number of cases is 3, Range of values is 1 to 3
 12141                           ; switch strategies available:
 12142                           ; Name         Instructions Cycles
 12143                           ; simple_byte           10     6 (average)
 12144                           ; direct_byte           15     9 (fixed)
 12145                           ; jumptable            263     9 (fixed)
 12146                           ;	Chosen strategy is simple_byte
 12147     0CB6  0870               	movf	??_USBStdGetDscHandler,w
 12148     0CB7  3A01               	xorlw	1	; case 1
 12149     0CB8  1903               	skipnz
 12150     0CB9  2C4A               	goto	i1l4312
 12151     0CBA  3A03               	xorlw	3	; case 2
 12152     0CBB  1903               	skipnz
 12153     0CBC  2C54               	goto	i1l4316
 12154     0CBD  3A01               	xorlw	1	; case 3
 12155     0CBE  1903               	skipnz
 12156     0CBF  2C86               	goto	i1l4326
 12157     0CC0  2CAA               	goto	i1l4334
 12158     0CC1  0008               	return
 12159     0CC2                     __end_of_USBStdGetDscHandler:
 12160                           
 12161                           	psect	text63
 12162     0221                     __ptext63:	
 12163 ;; *************** function _USBStdFeatureReqHandler *****************
 12164 ;; Defined at:
 12165 ;;		line 2761 in file "usb/usb_device.c"
 12166 ;; Parameters:    Size  Location     Type
 12167 ;;		None
 12168 ;; Auto vars:     Size  Location     Type
 12169 ;;  p               2   11[BANK0 ] PTR struct __BDT
 12170 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 12171 ;;  pUEP            2    8[BANK0 ] PTR unsigned char 
 12172 ;;		 -> UEP0(1), 
 12173 ;;  current_ep_d    1   10[BANK0 ] struct .
 12174 ;; Return value:  Size  Location     Type
 12175 ;;                  1    wreg      void 
 12176 ;; Registers used:
 12177 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12178 ;; Tracked objects:
 12179 ;;		On entry : 1D/0
 12180 ;;		On exit  : 1F/0
 12181 ;;		Unchanged: 0/0
 12182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12184 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12185 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12186 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;Total ram usage:        7 bytes
 12188 ;; Hardware stack levels used: 1
 12189 ;; Hardware stack levels required when called: 4
 12190 ;; This function calls:
 12191 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12192 ;; This function is called by:
 12193 ;;		_USBCheckStdRequest
 12194 ;; This function uses a non-reentrant model
 12195 ;;
 12196                           
 12197     0221                     _USBStdFeatureReqHandler:	
 12198                           ;psect for function _USBStdFeatureReqHandler
 12199                           
 12200                           
 12201                           ;usb/usb_device.c: 2763:     BDT_ENTRY *p;;usb/usb_device.c: 2764:     EP_STATUS current
      +                          _ep_data;;usb/usb_device.c: 2768:         unsigned char* pUEP;;usb/usb_device.c: 2772:  
      +                             if((SetupPkt.bFeature == 1)&&
 12202                           
 12203                           ;incstack = 0
 12204                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12205     0221  0020               	movlb	0	; select bank0
 12206     0222  0342               	decf	66,w	;volatile
 12207     0223  1D03               	btfss	3,2
 12208     0224  2A37               	goto	i1l4392
 12209     0225  0840               	movf	64,w	;volatile
 12210     0226  391F               	andlw	31
 12211     0227  3A00               	xorlw	0
 12212     0228  1D03               	skipz
 12213     0229  2A37               	goto	i1l4392
 12214                           
 12215                           ;usb/usb_device.c: 2774:     {;usb/usb_device.c: 2775:         inPipes[0].info.bits.busy
      +                           = 1;
 12216     022A  0021               	movlb	1	; select bank1
 12217     022B  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12218                           
 12219                           ;usb/usb_device.c: 2776:         if(SetupPkt.bRequest == 3)
 12220     022C  3003               	movlw	3
 12221     022D  0020               	movlb	0	; select bank0
 12222     022E  0641               	xorwf	65,w	;volatile
 12223     022F  1D03               	btfss	3,2
 12224     0230  2A35               	goto	i1l4390
 12225                           
 12226                           ;usb/usb_device.c: 2777:             RemoteWakeup = 1;
 12227     0231  3001               	movlw	1
 12228     0232  0022               	movlb	2	; select bank2
 12229     0233  00E1               	movwf	_RemoteWakeup^(0+256)	;volatile
 12230     0234  2A37               	goto	i1l4392
 12231     0235                     i1l4390:
 12232                           
 12233                           ;usb/usb_device.c: 2779:             RemoteWakeup = 0;
 12234     0235  0022               	movlb	2	; select bank2
 12235     0236  01E1               	clrf	_RemoteWakeup^(0+256)	;volatile
 12236     0237                     i1l4392:
 12237                           
 12238                           ;usb/usb_device.c: 2783:     if((SetupPkt.bFeature == 0)&&
 12239     0237  0020               	movlb	0	; select bank0
 12240     0238  0842               	movf	66,w	;volatile
 12241     0239  1D03               	btfss	3,2
 12242     023A  0008               	return
 12243     023B  0840               	movf	64,w	;volatile
 12244     023C  391F               	andlw	31
 12245     023D  3A02               	xorlw	2
 12246     023E  1D03               	skipz
 12247     023F  0008               	return
 12248     0240  0844               	movf	68,w	;volatile
 12249     0241  390F               	andlw	15
 12250     0242  3A00               	xorlw	0
 12251     0243  1903               	skipnz
 12252     0244  0008               	return
 12253     0245  0844               	movf	68,w	;volatile
 12254     0246  390F               	andlw	15
 12255     0247  00D6               	movwf	??_USBStdFeatureReqHandler
 12256     0248  3002               	movlw	2
 12257     0249  0256               	subwf	??_USBStdFeatureReqHandler,w
 12258     024A  1803               	skipnc
 12259     024B  0008               	return
 12260     024C  3020               	movlw	32
 12261     024D  066C               	xorwf	_USBDeviceState,w
 12262     024E  1D03               	btfss	3,2
 12263     024F  0008               	return
 12264                           
 12265                           ;usb/usb_device.c: 2787:     {;usb/usb_device.c: 2790:   inPipes[0].info.bits.busy = 1;
 12266     0250  0021               	movlb	1	; select bank1
 12267     0251  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12268                           
 12269                           ;usb/usb_device.c: 2793:         if(SetupPkt.EPDir == 0)
 12270     0252  0020               	movlb	0	; select bank0
 12271     0253  1BC4               	btfsc	68,7	;volatile
 12272     0254  2A64               	goto	i1l4406
 12273                           
 12274                           ;usb/usb_device.c: 2794:         {;usb/usb_device.c: 2795:             p = (BDT_ENTRY*)p
      +                          BDTEntryOut[SetupPkt.EPNum];
 12275     0255  0844               	movf	68,w	;volatile
 12276     0256  390F               	andlw	15
 12277     0257  0709               	addwf	9,w
 12278     0258  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12279     0259  0086               	movwf	6
 12280     025A  3001               	movlw	1	; select bank2/3
 12281     025B  0087               	movwf	7
 12282     025C  3F40               	moviw [0]fsr1
 12283     025D  00DB               	movwf	USBStdFeatureReqHandler@p
 12284     025E  3F41               	moviw [1]fsr1
 12285     025F  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12286                           
 12287                           ;usb/usb_device.c: 2796:             current_ep_data.Val = ep_data_out[SetupPkt.EPNum].V
      +                          al;
 12288     0260  0844               	movf	68,w	;volatile
 12289     0261  390F               	andlw	15
 12290     0262  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12291     0263  2A71               	goto	L9
 12292     0264                     i1l4406:	
 12293                           ;usb/usb_device.c: 2797:         }
 12294                           
 12295                           
 12296                           ;usb/usb_device.c: 2799:         {;usb/usb_device.c: 2800:             p = (BDT_ENTRY*)p
      +                          BDTEntryIn[SetupPkt.EPNum];
 12297     0264  0844               	movf	68,w	;volatile
 12298     0265  390F               	andlw	15
 12299     0266  0709               	addwf	9,w
 12300     0267  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12301     0268  0086               	movwf	6
 12302     0269  0187               	clrf	7
 12303     026A  3F40               	moviw [0]fsr1
 12304     026B  00DB               	movwf	USBStdFeatureReqHandler@p
 12305     026C  3F41               	moviw [1]fsr1
 12306     026D  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12307                           
 12308                           ;usb/usb_device.c: 2801:             current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Va
      +                          l;
 12309     026E  0844               	movf	68,w	;volatile
 12310     026F  390F               	andlw	15
 12311     0270  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12312     0271                     L9:
 12313     0271  0086               	movwf	6
 12314     0272  3001               	movlw	1	; select bank2/3
 12315     0273  0087               	movwf	7
 12316     0274  0801               	movf	1,w
 12317     0275  00DA               	movwf	USBStdFeatureReqHandler@current_ep_data
 12318                           
 12319                           ;usb/usb_device.c: 2808:             if(current_ep_data.bits.ping_pong_state == 0)
 12320     0276  185A               	btfsc	USBStdFeatureReqHandler@current_ep_data,0
 12321     0277  2A82               	goto	i1l4412
 12322                           
 12323                           ;usb/usb_device.c: 2809:             {;usb/usb_device.c: 2810:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) & (~0x0004));
 12324     0278  30FB               	movlw	251
 12325     0279  00D6               	movwf	??_USBStdFeatureReqHandler
 12326     027A  30FF               	movlw	255
 12327     027B  00D7               	movwf	??_USBStdFeatureReqHandler+1
 12328     027C  085B               	movf	USBStdFeatureReqHandler@p,w
 12329     027D  0556               	andwf	??_USBStdFeatureReqHandler,w
 12330     027E  00DB               	movwf	USBStdFeatureReqHandler@p
 12331     027F  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12332     0280  0557               	andwf	??_USBStdFeatureReqHandler+1,w
 12333     0281  2A87               	goto	L10
 12334     0282                     i1l4412:	
 12335                           ;usb/usb_device.c: 2811:             }
 12336                           
 12337                           
 12338                           ;usb/usb_device.c: 2813:             {;usb/usb_device.c: 2814:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) | 0x0004);
 12339     0282  3004               	movlw	4
 12340     0283  045B               	iorwf	USBStdFeatureReqHandler@p,w
 12341     0284  00DB               	movwf	USBStdFeatureReqHandler@p
 12342     0285  3000               	movlw	0
 12343     0286  045C               	iorwf	USBStdFeatureReqHandler@p+1,w
 12344     0287                     L10:
 12345     0287  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12346                           
 12347                           ;usb/usb_device.c: 2820:         if(SetupPkt.EPDir == 0)
 12348     0288  1BC4               	btfsc	68,7	;volatile
 12349     0289  2A96               	goto	i1l4418
 12350                           
 12351                           ;usb/usb_device.c: 2821:         {;usb/usb_device.c: 2822:             pBDTEntryOut[Setu
      +                          pPkt.EPNum] = (volatile BDT_ENTRY *)p;
 12352     028A  0844               	movf	68,w	;volatile
 12353     028B  390F               	andlw	15
 12354     028C  0709               	addwf	9,w
 12355     028D  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12356     028E  0086               	movwf	6
 12357     028F  3001               	movlw	1	; select bank2/3
 12358     0290  0087               	movwf	7
 12359     0291  085B               	movf	USBStdFeatureReqHandler@p,w
 12360     0292  3FC0               	movwi [0]fsr1
 12361     0293  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12362     0294  3FC1               	movwi [1]fsr1
 12363                           
 12364                           ;usb/usb_device.c: 2823:         }
 12365     0295  2AA0               	goto	i1l4420
 12366     0296                     i1l4418:
 12367                           
 12368                           ;usb/usb_device.c: 2825:         {;usb/usb_device.c: 2826:             pBDTEntryIn[Setup
      +                          Pkt.EPNum] = (volatile BDT_ENTRY *)p;
 12369     0296  0844               	movf	68,w	;volatile
 12370     0297  390F               	andlw	15
 12371     0298  0709               	addwf	9,w
 12372     0299  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12373     029A  0086               	movwf	6
 12374     029B  0187               	clrf	7
 12375     029C  085B               	movf	USBStdFeatureReqHandler@p,w
 12376     029D  3FC0               	movwi [0]fsr1
 12377     029E  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12378     029F  3FC1               	movwi [1]fsr1
 12379     02A0                     i1l4420:
 12380                           
 12381                           ;usb/usb_device.c: 2830:         if(SetupPkt.bRequest == 3)
 12382     02A0  3003               	movlw	3
 12383     02A1  0641               	xorwf	65,w	;volatile
 12384     02A2  1D03               	btfss	3,2
 12385     02A3  2AC2               	goto	i1l4434
 12386                           
 12387                           ;usb/usb_device.c: 2831:         {;usb/usb_device.c: 2832:             if(p->STAT.UOWN =
      +                          = 1)
 12388     02A4  085B               	movf	USBStdFeatureReqHandler@p,w
 12389     02A5  0086               	movwf	6
 12390     02A6  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12391     02A7  0087               	movwf	7
 12392     02A8  1F81               	btfss	1,7
 12393     02A9  2AB7               	goto	i1l4430
 12394                           
 12395                           ;usb/usb_device.c: 2833:             {;usb/usb_device.c: 2836:                 if(SetupP
      +                          kt.EPDir == 0)
 12396     02AA  1BC4               	btfsc	68,7	;volatile
 12397     02AB  2AB0               	goto	i1l4428
 12398                           
 12399                           ;usb/usb_device.c: 2837:                 {;usb/usb_device.c: 2838:                     e
      +                          p_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 12400     02AC  0844               	movf	68,w	;volatile
 12401     02AD  390F               	andlw	15
 12402     02AE  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12403     02AF  2AB3               	goto	L11
 12404     02B0                     i1l4428:	
 12405                           ;usb/usb_device.c: 2839:                 }
 12406                           
 12407                           
 12408                           ;usb/usb_device.c: 2841:                 {;usb/usb_device.c: 2842:                     e
      +                          p_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 12409     02B0  0844               	movf	68,w	;volatile
 12410     02B1  390F               	andlw	15
 12411     02B2  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12412     02B3                     L11:
 12413     02B3  0086               	movwf	6
 12414     02B4  3001               	movlw	1	; select bank2/3
 12415     02B5  0087               	movwf	7
 12416     02B6  1481               	bsf	1,1
 12417     02B7                     i1l4430:
 12418                           
 12419                           ;usb/usb_device.c: 2847:             p->STAT.Val |= 0x04;
 12420     02B7  085B               	movf	USBStdFeatureReqHandler@p,w
 12421     02B8  0086               	movwf	6
 12422     02B9  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12423     02BA  0087               	movwf	7
 12424     02BB  1501               	bsf	1,2
 12425                           
 12426                           ;usb/usb_device.c: 2848:             p->STAT.Val |= 0x80;
 12427     02BC  085B               	movf	USBStdFeatureReqHandler@p,w
 12428     02BD  0086               	movwf	6
 12429     02BE  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12430     02BF  0087               	movwf	7
 12431     02C0  1781               	bsf	1,7
 12432                           
 12433                           ;usb/usb_device.c: 2849:         }
 12434     02C1  0008               	return
 12435     02C2                     i1l4434:
 12436                           
 12437                           ;usb/usb_device.c: 2851:         {;usb/usb_device.c: 2855:                 p = (BDT_ENTR
      +                          Y*)(((uint16_t)p) ^ 0x0004);
 12438     02C2  3004               	movlw	4
 12439     02C3  065B               	xorwf	USBStdFeatureReqHandler@p,w
 12440     02C4  00DB               	movwf	USBStdFeatureReqHandler@p
 12441     02C5  3000               	movlw	0
 12442     02C6  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 12443     02C7  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12444                           
 12445                           ;usb/usb_device.c: 2857:                 if(p->STAT.UOWN == 1)
 12446     02C8  085B               	movf	USBStdFeatureReqHandler@p,w
 12447     02C9  0086               	movwf	6
 12448     02CA  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12449     02CB  0087               	movwf	7
 12450     02CC  1F81               	btfss	1,7
 12451     02CD  2AEB               	goto	i1l4444
 12452                           
 12453                           ;usb/usb_device.c: 2858:                 {;usb/usb_device.c: 2861:                     p
      +                          ->STAT.Val &= (~0x80);
 12454     02CE  307F               	movlw	127
 12455     02CF  00D6               	movwf	??_USBStdFeatureReqHandler
 12456     02D0  085B               	movf	USBStdFeatureReqHandler@p,w
 12457     02D1  0086               	movwf	6
 12458     02D2  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12459     02D3  0087               	movwf	7
 12460     02D4  0856               	movf	??_USBStdFeatureReqHandler,w
 12461     02D5  0581               	andwf	1,f
 12462                           
 12463                           ;usb/usb_device.c: 2862:                     p->STAT.Val |= 0x40;
 12464     02D6  085B               	movf	USBStdFeatureReqHandler@p,w
 12465     02D7  0086               	movwf	6
 12466     02D8  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12467     02D9  0087               	movwf	7
 12468     02DA  1701               	bsf	1,6
 12469                           
 12470                           ;usb/usb_device.c: 2863:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 12471     02DB  3005               	movlw	5
 12472     02DC  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12473     02DD  3000               	movlw	0
 12474     02DE  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12475     02DF  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12476     02E0  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12477     02E1  085B               	movf	USBStdFeatureReqHandler@p,w
 12478     02E2  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12479     02E3  3002               	movlw	2
 12480     02E4  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12481     02E5  3000               	movlw	0
 12482     02E6  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12483     02E7  3193  238A  3182   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12484                           
 12485                           ;usb/usb_device.c: 2864:                 }
 12486     02EA  2AF0               	goto	i1l4446
 12487     02EB                     i1l4444:
 12488                           
 12489                           ;usb/usb_device.c: 2866:                 {;usb/usb_device.c: 2868:      p->STAT.Val |= 0
      +                          x40;
 12490     02EB  085B               	movf	USBStdFeatureReqHandler@p,w
 12491     02EC  0086               	movwf	6
 12492     02ED  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12493     02EE  0087               	movwf	7
 12494     02EF  1701               	bsf	1,6
 12495     02F0                     i1l4446:
 12496                           
 12497                           ;usb/usb_device.c: 2873:                 p = (BDT_ENTRY*)(((uint16_t)p) ^ 0x0004);
 12498     02F0  3004               	movlw	4
 12499     02F1  0020               	movlb	0	; select bank0
 12500     02F2  065B               	xorwf	USBStdFeatureReqHandler@p,w
 12501     02F3  00DB               	movwf	USBStdFeatureReqHandler@p
 12502     02F4  3000               	movlw	0
 12503     02F5  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 12504     02F6  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12505                           
 12506                           ;usb/usb_device.c: 2879:                 if((current_ep_data.bits.transfer_terminated !=
      +                           0) || (p->STAT.UOWN == 1))
 12507     02F7  18DA               	btfsc	USBStdFeatureReqHandler@current_ep_data,1
 12508     02F8  2AFF               	goto	i1l678
 12509     02F9  085B               	movf	USBStdFeatureReqHandler@p,w
 12510     02FA  0086               	movwf	6
 12511     02FB  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12512     02FC  0087               	movwf	7
 12513     02FD  1F81               	btfss	1,7
 12514     02FE  2B24               	goto	i1l4458
 12515     02FF                     i1l678:
 12516                           
 12517                           ;usb/usb_device.c: 2880:                 {;usb/usb_device.c: 2881:                     i
      +                          f(SetupPkt.EPDir == 0)
 12518     02FF  1BC4               	btfsc	68,7	;volatile
 12519     0300  2B05               	goto	i1l4454
 12520                           
 12521                           ;usb/usb_device.c: 2882:                     {;usb/usb_device.c: 2883:                  
      +                                 ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 12522     0301  0844               	movf	68,w	;volatile
 12523     0302  390F               	andlw	15
 12524     0303  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12525     0304  2B08               	goto	L12
 12526     0305                     i1l4454:	
 12527                           ;usb/usb_device.c: 2884:                     }
 12528                           
 12529                           
 12530                           ;usb/usb_device.c: 2886:                     {;usb/usb_device.c: 2887:                  
      +                                 ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 12531     0305  0844               	movf	68,w	;volatile
 12532     0306  390F               	andlw	15
 12533     0307  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12534     0308                     L12:
 12535     0308  0086               	movwf	6
 12536     0309  3001               	movlw	1	; select bank2/3
 12537     030A  0087               	movwf	7
 12538     030B  1081               	bcf	1,1
 12539                           
 12540                           ;usb/usb_device.c: 2890:                     p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 12541                           
 12542                           ;usb/usb_device.c: 2888:                     }
 12543     030C  303B               	movlw	59
 12544     030D  00D6               	movwf	??_USBStdFeatureReqHandler
 12545     030E  085B               	movf	USBStdFeatureReqHandler@p,w
 12546     030F  0086               	movwf	6
 12547     0310  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12548     0311  0087               	movwf	7
 12549     0312  0856               	movf	??_USBStdFeatureReqHandler,w
 12550     0313  0581               	andwf	1,f
 12551                           
 12552                           ;usb/usb_device.c: 2893:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 12553     0314  3005               	movlw	5
 12554     0315  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12555     0316  3000               	movlw	0
 12556     0317  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12557     0318  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12558     0319  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12559     031A  085B               	movf	USBStdFeatureReqHandler@p,w
 12560     031B  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12561     031C  3002               	movlw	2
 12562     031D  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12563     031E  3000               	movlw	0
 12564     031F  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12565     0320  3193  238A  3182   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12566                           
 12567                           ;usb/usb_device.c: 2894:                 }
 12568     0323  2B2C               	goto	i1l4460
 12569     0324                     i1l4458:
 12570                           
 12571                           ;usb/usb_device.c: 2896:                 {;usb/usb_device.c: 2898:                     p
      +                          ->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 12572     0324  303B               	movlw	59
 12573     0325  00D6               	movwf	??_USBStdFeatureReqHandler
 12574     0326  085B               	movf	USBStdFeatureReqHandler@p,w
 12575     0327  0086               	movwf	6
 12576     0328  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12577     0329  0087               	movwf	7
 12578     032A  0856               	movf	??_USBStdFeatureReqHandler,w
 12579     032B  0581               	andwf	1,f
 12580     032C                     i1l4460:
 12581                           
 12582                           ;usb/usb_device.c: 2946:                 pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 12583     032C  0020               	movlb	0	; select bank0
 12584     032D  0844               	movf	68,w	;volatile
 12585     032E  390F               	andlw	15
 12586     032F  3E98               	addlw	152
 12587     0330  00D6               	movwf	??_USBStdFeatureReqHandler
 12588     0331  01D7               	clrf	??_USBStdFeatureReqHandler+1
 12589     0332  300E               	movlw	14
 12590     0333  3DD7               	addwfc	??_USBStdFeatureReqHandler+1,f
 12591     0334  0856               	movf	??_USBStdFeatureReqHandler,w
 12592     0335  00D8               	movwf	USBStdFeatureReqHandler@pUEP
 12593     0336  0857               	movf	??_USBStdFeatureReqHandler+1,w
 12594     0337  00D9               	movwf	USBStdFeatureReqHandler@pUEP+1
 12595                           
 12596                           ;usb/usb_device.c: 2950:             *pUEP &= ~0x0001;
 12597     0338  30FE               	movlw	254
 12598     0339  00D6               	movwf	??_USBStdFeatureReqHandler
 12599     033A  0858               	movf	USBStdFeatureReqHandler@pUEP,w
 12600     033B  0086               	movwf	6
 12601     033C  0859               	movf	USBStdFeatureReqHandler@pUEP+1,w
 12602     033D  0087               	movwf	7
 12603     033E  0856               	movf	??_USBStdFeatureReqHandler,w
 12604     033F  0581               	andwf	1,f
 12605     0340  0008               	return
 12606     0341                     __end_of_USBStdFeatureReqHandler:
 12607                           
 12608                           	psect	text64
 12609     138A                     __ptext64:	
 12610 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 12611 ;; Defined at:
 12612 ;;		line 66 in file "usb/usb_events.c"
 12613 ;; Parameters:    Size  Location     Type
 12614 ;;  event           2    0[BANK0 ] enum E238
 12615 ;;  pdata           2    2[BANK0 ] PTR void 
 12616 ;;		 -> RAM(4096), USTATcopy(1), USBActiveConfiguration(1), NULL(0), 
 12617 ;;		 -> BDT(32), 
 12618 ;;  size            2    4[BANK0 ] unsigned short 
 12619 ;; Auto vars:     Size  Location     Type
 12620 ;;		None
 12621 ;; Return value:  Size  Location     Type
 12622 ;;                  1    wreg      _Bool 
 12623 ;; Registers used:
 12624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12625 ;; Tracked objects:
 12626 ;;		On entry : 1F/0
 12627 ;;		On exit  : 0/0
 12628 ;;		Unchanged: 0/0
 12629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12630 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12633 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12634 ;;Total ram usage:        6 bytes
 12635 ;; Hardware stack levels used: 1
 12636 ;; Hardware stack levels required when called: 3
 12637 ;; This function calls:
 12638 ;;		_APP_KeyboardInit
 12639 ;;		_USBCheckHIDRequest
 12640 ;; This function is called by:
 12641 ;;		_USBDeviceTasks
 12642 ;;		_USBStdSetCfgHandler
 12643 ;;		_USBSuspend
 12644 ;;		_USBWakeFromSuspend
 12645 ;;		_USBCtrlTrfSetupHandler
 12646 ;;		_USBCheckStdRequest
 12647 ;;		_USBStdFeatureReqHandler
 12648 ;; This function uses a non-reentrant model
 12649 ;;
 12650                           
 12651     138A                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 12652                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 12653                           
 12654                           
 12655                           ;usb/usb_events.c: 66: _Bool USER_USB_CALLBACK_EVENT_HANDLER(USB_EVENT event, void *pdat
      +                          a, uint16_t size);usb/usb_events.c: 67: {;usb/usb_events.c: 68:     switch((int)event)
 12656                           
 12657                           ;incstack = 0
 12658                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12659     138A  2BA0               	goto	i1l4130
 12660     138B                     i1l4118:
 12661                           
 12662                           ;usb/usb_events.c: 77:             if(SOFCounter < 32767)
 12663     138B  0022               	movlb	2	; select bank2
 12664     138C  0A3A               	incf	_SOFCounter^(0+256),w	;volatile
 12665     138D  307F               	movlw	127
 12666     138E  1903               	skipnz
 12667     138F  063B               	xorwf	(_SOFCounter+1)^(0+256),w	;volatile
 12668     1390  1903               	btfsc	3,2
 12669     1391  2B97               	goto	i1l4122
 12670                           
 12671                           ;usb/usb_events.c: 78:             {;usb/usb_events.c: 79:                 SOFCounter++;
 12672     1392  3001               	movlw	1
 12673     1393  07BA               	addwf	_SOFCounter^(0+256),f	;volatile
 12674     1394  3000               	movlw	0
 12675     1395  3DBB               	addwfc	(_SOFCounter+1)^(0+256),f	;volatile
 12676                           
 12677                           ;usb/usb_events.c: 80:             }
 12678     1396  0008               	return
 12679     1397                     i1l4122:
 12680                           
 12681                           ;usb/usb_events.c: 82:             {;usb/usb_events.c: 83:                 SOFCounter = 
      +                          0;
 12682     1397  01BA               	clrf	_SOFCounter^(0+256)	;volatile
 12683     1398  01BB               	clrf	(_SOFCounter+1)^(0+256)	;volatile
 12684     1399  0008               	return
 12685     139A                     i1l4124:
 12686                           
 12687                           ;usb/usb_events.c: 114:             APP_KeyboardInit();
 12688     139A  3195  2519         	fcall	_APP_KeyboardInit
 12689                           
 12690                           ;usb/usb_events.c: 115:             break;
 12691     139C  0008               	return
 12692     139D                     i1l4126:
 12693                           
 12694                           ;usb/usb_events.c: 123:             USBCheckHIDRequest();
 12695     139D  318C  24C2         	fcall	_USBCheckHIDRequest
 12696                           
 12697                           ;usb/usb_events.c: 124:             break;
 12698     139F  0008               	return
 12699     13A0                     i1l4130:
 12700                           
 12701                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12702                           ; Switch size 1, requested type "simple"
 12703                           ; Number of cases is 2, Range of values is 0 to 127
 12704                           ; switch strategies available:
 12705                           ; Name         Instructions Cycles
 12706                           ; simple_byte            7     4 (average)
 12707                           ; direct_byte          262     6 (fixed)
 12708                           ; jumptable            260     6 (fixed)
 12709                           ;	Chosen strategy is simple_byte
 12710     13A0  0851               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
 12711     13A1  3A00               	xorlw	0	; case 0
 12712     13A2  1903               	skipnz
 12713     13A3  2BA8               	goto	i1l6690
 12714     13A4  3A7F               	xorlw	127	; case 127
 12715     13A5  1903               	skipnz
 12716     13A6  2BC2               	goto	i1l6692
 12717     13A7  2BC7               	goto	i1l763
 12718     13A8                     i1l6690:
 12719                           
 12720                           ; Switch size 1, requested type "simple"
 12721                           ; Number of cases is 8, Range of values is 1 to 117
 12722                           ; switch strategies available:
 12723                           ; Name         Instructions Cycles
 12724                           ; simple_byte           25    13 (average)
 12725                           ; direct_byte          243     9 (fixed)
 12726                           ; jumptable            263     9 (fixed)
 12727                           ;	Chosen strategy is simple_byte
 12728     13A8  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 12729     13A9  3A01               	xorlw	1	; case 1
 12730     13AA  1903               	skipnz
 12731     13AB  2B9A               	goto	i1l4124
 12732     13AC  3A03               	xorlw	3	; case 2
 12733     13AD  1903               	skipnz
 12734     13AE  2BC7               	goto	i1l763
 12735     13AF  3A01               	xorlw	1	; case 3
 12736     13B0  1903               	skipnz
 12737     13B1  2B9D               	goto	i1l4126
 12738     13B2  3A06               	xorlw	6	; case 5
 12739     13B3  1903               	skipnz
 12740     13B4  2BC7               	goto	i1l763
 12741     13B5  3A77               	xorlw	119	; case 114
 12742     13B6  1903               	skipnz
 12743     13B7  2BC7               	goto	i1l763
 12744     13B8  3A01               	xorlw	1	; case 115
 12745     13B9  1903               	skipnz
 12746     13BA  2B8B               	goto	i1l4118
 12747     13BB  3A07               	xorlw	7	; case 116
 12748     13BC  1903               	skipnz
 12749     13BD  2BC7               	goto	i1l763
 12750     13BE  3A01               	xorlw	1	; case 117
 12751     13BF  1903               	skipnz
 12752     13C0  2BC7               	goto	i1l763
 12753     13C1  2BC7               	goto	i1l763
 12754     13C2                     i1l6692:
 12755                           
 12756                           ; Switch size 1, requested type "simple"
 12757                           ; Number of cases is 1, Range of values is 255 to 255
 12758                           ; switch strategies available:
 12759                           ; Name         Instructions Cycles
 12760                           ; simple_byte            4     3 (average)
 12761                           ; direct_byte            7     5 (fixed)
 12762                           ; jumptable            263     9 (fixed)
 12763                           ;	Chosen strategy is simple_byte
 12764     13C2  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 12765     13C3  3AFF               	xorlw	255	; case 255
 12766     13C4  1903               	skipnz
 12767     13C5  2BC7               	goto	i1l763
 12768     13C6  2BC7               	goto	i1l763
 12769     13C7                     i1l763:
 12770     13C7  0008               	return
 12771     13C8                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:
 12772                           
 12773                           	psect	text65
 12774     0CC2                     __ptext65:	
 12775 ;; *************** function _USBCheckHIDRequest *****************
 12776 ;; Defined at:
 12777 ;;		line 161 in file "usb/usb_device_hid.c"
 12778 ;; Parameters:    Size  Location     Type
 12779 ;;		None
 12780 ;; Auto vars:     Size  Location     Type
 12781 ;;		None
 12782 ;; Return value:  Size  Location     Type
 12783 ;;                  1    wreg      void 
 12784 ;; Registers used:
 12785 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12786 ;; Tracked objects:
 12787 ;;		On entry : 1F/0
 12788 ;;		On exit  : 1C/0
 12789 ;;		Unchanged: 0/0
 12790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12794 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12795 ;;Total ram usage:        2 bytes
 12796 ;; Hardware stack levels used: 1
 12797 ;; Hardware stack levels required when called: 1
 12798 ;; This function calls:
 12799 ;;		_USBHIDCBSetIdleRateHandler
 12800 ;;		_USBHIDCBSetReportHandler
 12801 ;; This function is called by:
 12802 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12803 ;; This function uses a non-reentrant model
 12804 ;;
 12805                           
 12806     0CC2                     _USBCheckHIDRequest:	
 12807                           ;psect for function _USBCheckHIDRequest
 12808                           
 12809                           
 12810                           ;usb/usb_device_hid.c: 163:     if(SetupPkt.Recipient != (0x01)) return;
 12811                           
 12812                           ;incstack = 0
 12813                           ; Regs used in _USBCheckHIDRequest: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12814     0CC2  0840               	movf	64,w	;volatile
 12815     0CC3  391F               	andlw	31
 12816     0CC4  3A01               	xorlw	1
 12817     0CC5  1D03               	btfss	3,2
 12818     0CC6  0008               	return
 12819                           
 12820                           ;usb/usb_device_hid.c: 164:     if(SetupPkt.bIntfID != 0x00) return;
 12821     0CC7  0844               	movf	68,w	;volatile
 12822     0CC8  1D03               	btfss	3,2
 12823     0CC9  0008               	return
 12824                           
 12825                           ;usb/usb_device_hid.c: 171:     if(SetupPkt.bRequest == 6)
 12826     0CCA  3006               	movlw	6
 12827     0CCB  0641               	xorwf	65,w	;volatile
 12828     0CCC  1903               	btfsc	3,2
 12829     0CCD  2CE7               	goto	i1l4044
 12830     0CCE  2CFA               	goto	i1l4046
 12831     0CCF                     i1l4032:
 12832                           
 12833                           ;usb/usb_device_hid.c: 176:                 if(USBActiveConfiguration == 1)
 12834     0CCF  036F               	decf	_USBActiveConfiguration,w	;volatile
 12835     0CD0  1D03               	btfss	3,2
 12836     0CD1  2CFA               	goto	i1l4046
 12837                           
 12838                           ;usb/usb_device_hid.c: 177:                 {;usb/usb_device_hid.c: 178:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&configDescriptor1 + 18; inPipes[0].wCount
      +                          .Val = sizeof(USB_HID_DSC)+3; inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 12839     0CD2  3085               	movlw	low ((_configDescriptor1| (0+32768)+18))
 12840     0CD3  0021               	movlb	1	; select bank1
 12841     0CD4  00E9               	movwf	_inPipes^(0+128)	;volatile
 12842     0CD5  3098               	movlw	high ((_configDescriptor1| (0+32768)+18))
 12843     0CD6  00EA               	movwf	(_inPipes^(0+128)+1)	;volatile
 12844     0CD7  3000               	movlw	0
 12845     0CD8  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12846     0CD9  3009               	movlw	9
 12847     0CDA  2CE3               	goto	L14
 12848     0CDB                     i1l4038:
 12849                           
 12850                           ;usb/usb_device_hid.c: 186:                 {;usb/usb_device_hid.c: 187:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&hid_rpt01; inPipes[0].wCount.Val = 63; in
      +                          Pipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 12851     0CDB  3000               	movlw	low (_hid_rpt01| (0+32768))
 12852     0CDC  0021               	movlb	1	; select bank1
 12853     0CDD  00E9               	movwf	_inPipes^(0+128)	;volatile
 12854     0CDE  3098               	movlw	high (_hid_rpt01| (0+32768))
 12855     0CDF  00EA               	movwf	(_inPipes^(0+128)+1)	;volatile
 12856     0CE0  3000               	movlw	0
 12857     0CE1  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12858     0CE2  303F               	movlw	63
 12859     0CE3                     L14:
 12860     0CE3  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12861     0CE4  30C0               	movlw	192
 12862     0CE5  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12863                           
 12864                           ;usb/usb_device_hid.c: 191:                 };usb/usb_device_hid.c: 192:                
      +                           break;
 12865     0CE6  2CFA               	goto	i1l4046
 12866     0CE7                     i1l4044:
 12867     0CE7  0843               	movf	67,w	;volatile
 12868     0CE8  00F4               	movwf	??_USBCheckHIDRequest
 12869     0CE9  01F5               	clrf	??_USBCheckHIDRequest+1
 12870                           
 12871                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12872                           ; Switch size 1, requested type "simple"
 12873                           ; Number of cases is 1, Range of values is 0 to 0
 12874                           ; switch strategies available:
 12875                           ; Name         Instructions Cycles
 12876                           ; simple_byte            4     3 (average)
 12877                           ; direct_byte            8     6 (fixed)
 12878                           ; jumptable            260     6 (fixed)
 12879                           ;	Chosen strategy is simple_byte
 12880     0CEA  0875               	movf	??_USBCheckHIDRequest+1,w
 12881     0CEB  3A00               	xorlw	0	; case 0
 12882     0CEC  1903               	skipnz
 12883     0CED  2CEF               	goto	i1l6694
 12884     0CEE  2CFA               	goto	i1l4046
 12885     0CEF                     i1l6694:
 12886                           
 12887                           ; Switch size 1, requested type "simple"
 12888                           ; Number of cases is 3, Range of values is 33 to 35
 12889                           ; switch strategies available:
 12890                           ; Name         Instructions Cycles
 12891                           ; simple_byte           10     6 (average)
 12892                           ; direct_byte           15     9 (fixed)
 12893                           ; jumptable            263     9 (fixed)
 12894                           ;	Chosen strategy is simple_byte
 12895     0CEF  0874               	movf	??_USBCheckHIDRequest,w
 12896     0CF0  3A21               	xorlw	33	; case 33
 12897     0CF1  1903               	skipnz
 12898     0CF2  2CCF               	goto	i1l4032
 12899     0CF3  3A03               	xorlw	3	; case 34
 12900     0CF4  1903               	skipnz
 12901     0CF5  2CDB               	goto	i1l4038
 12902     0CF6  3A01               	xorlw	1	; case 35
 12903     0CF7  1903               	skipnz
 12904     0CF8  2CFA               	goto	i1l4046
 12905     0CF9  2CFA               	goto	i1l4046
 12906     0CFA                     i1l4046:
 12907                           
 12908                           ;usb/usb_device_hid.c: 209:     if(SetupPkt.RequestType != (0x20>>5))
 12909     0CFA  0020               	movlb	0	; select bank0
 12910     0CFB  0E40               	swapf	64,w	;volatile
 12911     0CFC  0C89               	rrf	9,f
 12912     0CFD  3903               	andlw	3
 12913     0CFE  3A01               	xorlw	1
 12914     0CFF  1D03               	btfss	3,2
 12915     0D00  0008               	return
 12916     0D01  2D33               	goto	i1l4072
 12917     0D02                     i1l4050:
 12918                           
 12919                           ;usb/usb_device_hid.c: 223:                 USBHIDCBSetReportHandler();
 12920     0D02  319F  270D         	fcall	_USBHIDCBSetReportHandler
 12921                           
 12922                           ;usb/usb_device_hid.c: 225:             break;
 12923     0D04  0008               	return
 12924     0D05                     i1l4052:
 12925                           
 12926                           ;usb/usb_device_hid.c: 227:             { inPipes[0].pSrc.bRam = (uint8_t*)&idle_rate; i
      +                          nPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 12927     0D05  306D               	movlw	low _idle_rate
 12928     0D06  0021               	movlb	1	; select bank1
 12929     0D07  00E9               	movwf	_inPipes^(0+128)	;volatile
 12930     0D08  3001               	movlw	high _idle_rate
 12931     0D09  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12932     0D0A  3000               	movlw	0
 12933     0D0B  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12934     0D0C  3001               	movlw	1
 12935     0D0D  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12936     0D0E  30C1               	movlw	193
 12937     0D0F  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12938                           
 12939                           ;usb/usb_device_hid.c: 231:             break;
 12940     0D10  0008               	return
 12941     0D11                     i1l4058:
 12942                           
 12943                           ;usb/usb_device_hid.c: 233:             inPipes[0].info.Val = 0x00 | 0x80;
 12944     0D11  3080               	movlw	128
 12945     0D12  0021               	movlb	1	; select bank1
 12946     0D13  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12947                           
 12948                           ;usb/usb_device_hid.c: 234:             idle_rate = SetupPkt.W_Value.byte.HB;
 12949     0D14  0020               	movlb	0	; select bank0
 12950     0D15  0843               	movf	67,w	;volatile
 12951     0D16  0022               	movlb	2	; select bank2
 12952     0D17  00ED               	movwf	_idle_rate^(0+256)
 12953                           
 12954                           ;usb/usb_device_hid.c: 235:             USBHIDCBSetIdleRateHandler(SetupPkt.W_Value.byte
      +                          .LB, idle_rate);
 12955     0D18  086D               	movf	_idle_rate^(0+256),w
 12956     0D19  00F0               	movwf	USBHIDCBSetIdleRateHandler@newIdleRate
 12957     0D1A  0020               	movlb	0	; select bank0
 12958     0D1B  0842               	movf	66,w	;volatile
 12959     0D1C  319F  2700         	fcall	_USBHIDCBSetIdleRateHandler
 12960                           
 12961                           ;usb/usb_device_hid.c: 236:             break;
 12962     0D1E  0008               	return
 12963     0D1F                     i1l4062:
 12964                           
 12965                           ;usb/usb_device_hid.c: 238:             { inPipes[0].pSrc.bRam = (uint8_t*)&active_proto
      +                          col; inPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
 12966     0D1F  306C               	movlw	low _active_protocol
 12967     0D20  0021               	movlb	1	; select bank1
 12968     0D21  00E9               	movwf	_inPipes^(0+128)	;volatile
 12969     0D22  3001               	movlw	high _active_protocol
 12970     0D23  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12971     0D24  3000               	movlw	0
 12972     0D25  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12973     0D26  3001               	movlw	1
 12974     0D27  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12975     0D28  3081               	movlw	129
 12976     0D29  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12977                           
 12978                           ;usb/usb_device_hid.c: 242:             break;
 12979     0D2A  0008               	return
 12980     0D2B                     i1l4068:
 12981                           
 12982                           ;usb/usb_device_hid.c: 244:             inPipes[0].info.Val = 0x00 | 0x80;
 12983     0D2B  3080               	movlw	128
 12984     0D2C  0021               	movlb	1	; select bank1
 12985     0D2D  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12986                           
 12987                           ;usb/usb_device_hid.c: 245:             active_protocol = SetupPkt.W_Value.byte.LB;
 12988     0D2E  0020               	movlb	0	; select bank0
 12989     0D2F  0842               	movf	66,w	;volatile
 12990     0D30  0022               	movlb	2	; select bank2
 12991     0D31  00EC               	movwf	_active_protocol^(0+256)
 12992                           
 12993                           ;usb/usb_device_hid.c: 246:             break;
 12994     0D32  0008               	return
 12995     0D33                     i1l4072:
 12996     0D33  0841               	movf	65,w	;volatile
 12997     0D34  00F4               	movwf	??_USBCheckHIDRequest
 12998     0D35  01F5               	clrf	??_USBCheckHIDRequest+1
 12999                           
 13000                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13001                           ; Switch size 1, requested type "simple"
 13002                           ; Number of cases is 1, Range of values is 0 to 0
 13003                           ; switch strategies available:
 13004                           ; Name         Instructions Cycles
 13005                           ; simple_byte            4     3 (average)
 13006                           ; direct_byte            8     6 (fixed)
 13007                           ; jumptable            260     6 (fixed)
 13008                           ;	Chosen strategy is simple_byte
 13009     0D36  0875               	movf	??_USBCheckHIDRequest+1,w
 13010     0D37  3A00               	xorlw	0	; case 0
 13011     0D38  1903               	skipnz
 13012     0D39  2D3B               	goto	i1l6696
 13013     0D3A  2D4F               	goto	i1l709
 13014     0D3B                     i1l6696:
 13015                           
 13016                           ; Switch size 1, requested type "simple"
 13017                           ; Number of cases is 6, Range of values is 1 to 11
 13018                           ; switch strategies available:
 13019                           ; Name         Instructions Cycles
 13020                           ; simple_byte           19    10 (average)
 13021                           ; direct_byte           31     9 (fixed)
 13022                           ; jumptable            263     9 (fixed)
 13023                           ;	Chosen strategy is simple_byte
 13024     0D3B  0874               	movf	??_USBCheckHIDRequest,w
 13025     0D3C  3A01               	xorlw	1	; case 1
 13026     0D3D  1903               	skipnz
 13027     0D3E  2D4F               	goto	i1l709
 13028     0D3F  3A03               	xorlw	3	; case 2
 13029     0D40  1903               	skipnz
 13030     0D41  2D05               	goto	i1l4052
 13031     0D42  3A01               	xorlw	1	; case 3
 13032     0D43  1903               	skipnz
 13033     0D44  2D1F               	goto	i1l4062
 13034     0D45  3A0A               	xorlw	10	; case 9
 13035     0D46  1903               	skipnz
 13036     0D47  2D02               	goto	i1l4050
 13037     0D48  3A03               	xorlw	3	; case 10
 13038     0D49  1903               	skipnz
 13039     0D4A  2D11               	goto	i1l4058
 13040     0D4B  3A01               	xorlw	1	; case 11
 13041     0D4C  1903               	skipnz
 13042     0D4D  2D2B               	goto	i1l4068
 13043     0D4E  2D4F               	goto	i1l709
 13044     0D4F                     i1l709:
 13045     0D4F  0008               	return
 13046     0D50                     __end_of_USBCheckHIDRequest:
 13047                           
 13048                           	psect	text66
 13049     1F0D                     __ptext66:	
 13050 ;; *************** function _USBHIDCBSetReportHandler *****************
 13051 ;; Defined at:
 13052 ;;		line 555 in file "app_device_keyboard.c"
 13053 ;; Parameters:    Size  Location     Type
 13054 ;;		None
 13055 ;; Auto vars:     Size  Location     Type
 13056 ;;		None
 13057 ;; Return value:  Size  Location     Type
 13058 ;;                  1    wreg      void 
 13059 ;; Registers used:
 13060 ;;		wreg
 13061 ;; Tracked objects:
 13062 ;;		On entry : 1F/0
 13063 ;;		On exit  : 1F/2
 13064 ;;		Unchanged: 0/0
 13065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13070 ;;Total ram usage:        0 bytes
 13071 ;; Hardware stack levels used: 1
 13072 ;; This function calls:
 13073 ;;		Nothing
 13074 ;; This function is called by:
 13075 ;;		_USBCheckHIDRequest
 13076 ;; This function uses a non-reentrant model
 13077 ;;
 13078                           
 13079     1F0D                     _USBHIDCBSetReportHandler:	
 13080                           ;psect for function _USBHIDCBSetReportHandler
 13081                           
 13082                           
 13083                           ;app_device_keyboard.c: 559:     {outPipes[0].pDst.bRam = (uint8_t*) & CtrlTrfData;outPi
      +                          pes[0].wCount.Val = 8;outPipes[0].pFunc = USBHIDCBSetReportComplete;outPipes[0].info.bit
      +                          s.busy = 1; };
 13084                           
 13085                           ;incstack = 0
 13086                           ; Regs used in _USBHIDCBSetReportHandler: [wreg]
 13087     1F0D  3048               	movlw	72
 13088     1F0E  0022               	movlb	2	; select bank2
 13089     1F0F  00A1               	movwf	_outPipes^(0+256)	;volatile
 13090     1F10  3000               	movlw	0
 13091     1F11  00A5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 13092     1F12  3008               	movlw	8
 13093     1F13  00A4               	movwf	(_outPipes^(0+256)+3)	;volatile
 13094     1F14  301E               	movlw	high _USBHIDCBSetReportComplete
 13095     1F15  00A7               	movwf	((low ((_outPipes| (0+256)+5))+1))^0	;volatile
 13096     1F16  304A               	movlw	low _USBHIDCBSetReportComplete
 13097     1F17  00A6               	movwf	(low ((_outPipes| (0+256)+5)))^0	;volatile
 13098     1F18  17A3               	bsf	(_outPipes^(0+256)+2),7	;volatile
 13099     1F19  0008               	return
 13100     1F1A                     __end_of_USBHIDCBSetReportHandler:
 13101                           
 13102                           	psect	text67
 13103     1F00                     __ptext67:	
 13104 ;; *************** function _USBHIDCBSetIdleRateHandler *****************
 13105 ;; Defined at:
 13106 ;;		line 566 in file "app_device_keyboard.c"
 13107 ;; Parameters:    Size  Location     Type
 13108 ;;  reportID        1    wreg     unsigned char 
 13109 ;;  newIdleRate     1    0[COMMON] unsigned char 
 13110 ;; Auto vars:     Size  Location     Type
 13111 ;;  reportID        1    3[COMMON] unsigned char 
 13112 ;; Return value:  Size  Location     Type
 13113 ;;                  1    wreg      void 
 13114 ;; Registers used:
 13115 ;;		wreg, status,2, status,0
 13116 ;; Tracked objects:
 13117 ;;		On entry : 1F/0
 13118 ;;		On exit  : 1D/0
 13119 ;;		Unchanged: 0/0
 13120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13121 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13122 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13123 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13124 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13125 ;;Total ram usage:        4 bytes
 13126 ;; Hardware stack levels used: 1
 13127 ;; This function calls:
 13128 ;;		Nothing
 13129 ;; This function is called by:
 13130 ;;		_USBCheckHIDRequest
 13131 ;; This function uses a non-reentrant model
 13132 ;;
 13133                           
 13134     1F00                     _USBHIDCBSetIdleRateHandler:	
 13135                           ;psect for function _USBHIDCBSetIdleRateHandler
 13136                           
 13137                           
 13138                           ;incstack = 0
 13139                           ; Regs used in _USBHIDCBSetIdleRateHandler: [wreg+status,2+status,0]
 13140                           ;USBHIDCBSetIdleRateHandler@reportID stored from wreg
 13141     1F00  00F3               	movwf	USBHIDCBSetIdleRateHandler@reportID
 13142                           
 13143                           ;app_device_keyboard.c: 570:     if (reportID == 0) {
 13144     1F01  0873               	movf	USBHIDCBSetIdleRateHandler@reportID,w
 13145     1F02  1D03               	btfss	3,2
 13146     1F03  0008               	return
 13147                           
 13148                           ;app_device_keyboard.c: 571:         keyboardIdleRate = newIdleRate;
 13149     1F04  0870               	movf	USBHIDCBSetIdleRateHandler@newIdleRate,w
 13150     1F05  00F1               	movwf	??_USBHIDCBSetIdleRateHandler
 13151     1F06  01F2               	clrf	??_USBHIDCBSetIdleRateHandler+1
 13152     1F07  0871               	movf	??_USBHIDCBSetIdleRateHandler,w
 13153     1F08  0022               	movlb	2	; select bank2
 13154     1F09  00B8               	movwf	_keyboardIdleRate^(0+256)
 13155     1F0A  0872               	movf	??_USBHIDCBSetIdleRateHandler+1,w
 13156     1F0B  00B9               	movwf	(_keyboardIdleRate+1)^(0+256)
 13157     1F0C  0008               	return
 13158     1F0D                     __end_of_USBHIDCBSetIdleRateHandler:
 13159                           
 13160                           	psect	text68
 13161     1519                     __ptext68:	
 13162 ;; *************** function _APP_KeyboardInit *****************
 13163 ;; Defined at:
 13164 ;;		line 311 in file "app_device_keyboard.c"
 13165 ;; Parameters:    Size  Location     Type
 13166 ;;		None
 13167 ;; Auto vars:     Size  Location     Type
 13168 ;;		None
 13169 ;; Return value:  Size  Location     Type
 13170 ;;                  1    wreg      void 
 13171 ;; Registers used:
 13172 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13173 ;; Tracked objects:
 13174 ;;		On entry : 1F/0
 13175 ;;		On exit  : 0/0
 13176 ;;		Unchanged: 0/0
 13177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;Total ram usage:        0 bytes
 13183 ;; Hardware stack levels used: 1
 13184 ;; Hardware stack levels required when called: 2
 13185 ;; This function calls:
 13186 ;;		_USBEnableEndpoint
 13187 ;;		i1_GenericQueue_Init
 13188 ;;		i1_USBTransferOnePacket
 13189 ;; This function is called by:
 13190 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13191 ;; This function uses a non-reentrant model
 13192 ;;
 13193                           
 13194     1519                     _APP_KeyboardInit:	
 13195                           ;psect for function _APP_KeyboardInit
 13196                           
 13197                           
 13198                           ;app_device_keyboard.c: 312:     GenericQueue_Init(&keyboard.keys, sizeof (uint8_t));
 13199                           
 13200                           ;incstack = 0
 13201                           ; Regs used in _APP_KeyboardInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13202     1519  3030               	movlw	48
 13203     151A  00F0               	movwf	i1GenericQueue_Init@q
 13204     151B  3023               	movlw	35
 13205     151C  00F1               	movwf	i1GenericQueue_Init@q+1
 13206     151D  3001               	movlw	1
 13207     151E  00F2               	movwf	i1GenericQueue_Init@element_size
 13208     151F  3000               	movlw	0
 13209     1520  00F3               	movwf	i1GenericQueue_Init@element_size+1
 13210     1521  3191  21E9  3195   	fcall	i1_GenericQueue_Init
 13211                           
 13212                           ;app_device_keyboard.c: 313:     keyboard.modifiers.value = 0;
 13213     1524  308F               	movlw	143
 13214     1525  0086               	movwf	6
 13215     1526  3023               	movlw	35
 13216     1527  0087               	movwf	7
 13217     1528  0181               	clrf	1
 13218                           
 13219                           ;app_device_keyboard.c: 314:     keyboard.leds.value = 0;
 13220     1529  3090               	movlw	144
 13221     152A  0086               	movwf	6
 13222     152B  3023               	movlw	35
 13223     152C  0087               	movwf	7
 13224     152D  0181               	clrf	1
 13225                           
 13226                           ;app_device_keyboard.c: 317:     keyboard.lastINTransmission = 0;
 13227     152E  302C               	movlw	44
 13228     152F  0086               	movwf	6
 13229     1530  3023               	movlw	35
 13230     1531  0087               	movwf	7
 13231     1532  3000               	movlw	0
 13232     1533  3FC0               	movwi [0]fsr1
 13233     1534  3FC1               	movwi [1]fsr1
 13234                           
 13235                           ;app_device_keyboard.c: 320:     keyboardIdleRate = 250;
 13236     1535  30FA               	movlw	250
 13237     1536  0022               	movlb	2	; select bank2
 13238     1537  00B8               	movwf	_keyboardIdleRate^(0+256)
 13239     1538  3000               	movlw	0
 13240     1539  00B9               	movwf	(_keyboardIdleRate^(0+256)+1)
 13241     153A                     i1l859:	
 13242                           ;app_device_keyboard.c: 327:     }
 13243                           
 13244                           ;app_device_keyboard.c: 325:     while (OldSOFCount != SOFCounter) {
 13245                           
 13246                           
 13247                           ;app_device_keyboard.c: 325:     while (OldSOFCount != SOFCounter) {
 13248     153A  083B               	movf	(_SOFCounter+1)^(0+256),w	;volatile
 13249     153B  0635               	xorwf	(_OldSOFCount+1)^(0+256),w
 13250     153C  1D03               	skipz
 13251     153D  2D40               	goto	u307_25
 13252     153E  083A               	movf	_SOFCounter^(0+256),w	;volatile
 13253     153F  0634               	xorwf	_OldSOFCount^(0+256),w
 13254     1540                     u307_25:
 13255     1540  1903               	btfsc	3,2
 13256     1541  2D47               	goto	i1l4094
 13257                           
 13258                           ;app_device_keyboard.c: 326:         OldSOFCount = SOFCounter;
 13259     1542  083B               	movf	(_SOFCounter+1)^(0+256),w	;volatile
 13260     1543  00B5               	movwf	(_OldSOFCount+1)^(0+256)
 13261     1544  083A               	movf	_SOFCounter^(0+256),w	;volatile
 13262     1545  00B4               	movwf	_OldSOFCount^(0+256)
 13263     1546  2D3A               	goto	i1l859
 13264     1547                     i1l4094:
 13265                           
 13266                           ;app_device_keyboard.c: 330:     USBEnableEndpoint(1, 0x02 | 0x04 | 0x10 | 0x08);
 13267     1547  301E               	movlw	30
 13268     1548  00F7               	movwf	USBEnableEndpoint@options
 13269     1549  3001               	movlw	1
 13270     154A  3191  21C9  3195   	fcall	_USBEnableEndpoint
 13271                           
 13272                           ;app_device_keyboard.c: 333:     keyboard.lastOUTTransmission = USBTransferOnePacket(1,0
      +                          ,(uint8_t*) & outputReport,sizeof (outputReport));
 13273     154D  01F0               	clrf	i1USBTransferOnePacket@dir
 13274     154E  3020               	movlw	32
 13275     154F  00F1               	movwf	i1USBTransferOnePacket@data
 13276     1550  3001               	movlw	1
 13277     1551  00F2               	movwf	i1USBTransferOnePacket@data+1
 13278     1552  01F3               	clrf	i1USBTransferOnePacket@len
 13279     1553  0AF3               	incf	i1USBTransferOnePacket@len,f
 13280     1554  3001               	movlw	1
 13281     1555  318B  2341         	fcall	i1_USBTransferOnePacket
 13282     1557  302C               	movlw	44
 13283     1558  0086               	movwf	6
 13284     1559  3023               	movlw	35
 13285     155A  0087               	movwf	7
 13286     155B  3142               	addfsr 1,2
 13287     155C  0870               	movf	?i1_USBTransferOnePacket,w
 13288     155D  3FC0               	movwi [0]fsr1
 13289     155E  0871               	movf	?i1_USBTransferOnePacket+1,w
 13290     155F  3FC1               	movwi [1]fsr1
 13291     1560  0008               	return
 13292     1561                     __end_of_APP_KeyboardInit:
 13293                           
 13294                           	psect	text69
 13295     0B41                     __ptext69:	
 13296 ;; *************** function i1_USBTransferOnePacket *****************
 13297 ;; Defined at:
 13298 ;;		line 999 in file "usb/usb_device.c"
 13299 ;; Parameters:    Size  Location     Type
 13300 ;;  ep              1    wreg     unsigned char 
 13301 ;;  dir             1    0[COMMON] unsigned char 
 13302 ;;  data            2    1[COMMON] PTR unsigned char 
 13303 ;;		 -> inputReport(8), outputReport(1), 
 13304 ;;  len             1    3[COMMON] unsigned char 
 13305 ;; Auto vars:     Size  Location     Type
 13306 ;;  ep              1    8[COMMON] unsigned char 
 13307 ;;  handle          2    9[COMMON] PTR volatile struct __BD
 13308 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 13309 ;; Return value:  Size  Location     Type
 13310 ;;                  2    0[COMMON] PTR void 
 13311 ;; Registers used:
 13312 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13313 ;; Tracked objects:
 13314 ;;		On entry : 0/2
 13315 ;;		On exit  : 0/0
 13316 ;;		Unchanged: 0/0
 13317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13318 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13319 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13320 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13321 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13322 ;;Total ram usage:       11 bytes
 13323 ;; Hardware stack levels used: 1
 13324 ;; This function calls:
 13325 ;;		Nothing
 13326 ;; This function is called by:
 13327 ;;		_APP_KeyboardInit
 13328 ;; This function uses a non-reentrant model
 13329 ;;
 13330                           
 13331     0B41                     i1_USBTransferOnePacket:	
 13332                           ;psect for function i1_USBTransferOnePacket
 13333                           
 13334                           
 13335                           ;incstack = 0
 13336                           ; Regs used in i1_USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 13337                           ;i1USBTransferOnePacket@ep stored from wreg
 13338     0B41  00F8               	movwf	i1USBTransferOnePacket@ep
 13339                           
 13340                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
 13341     0B42  0870               	movf	i1USBTransferOnePacket@dir,w
 13342     0B43  1903               	btfsc	3,2
 13343     0B44  2B4D               	goto	i1l3994
 13344                           
 13345                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
 13346     0B45  3578               	lslf	i1USBTransferOnePacket@ep,w
 13347     0B46  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13348     0B47  0086               	movwf	6
 13349     0B48  0187               	clrf	7
 13350     0B49  3F40               	moviw [0]fsr1
 13351     0B4A  00F9               	movwf	i1USBTransferOnePacket@handle
 13352     0B4B  3F41               	moviw [1]fsr1
 13353     0B4C  2B55               	goto	L15
 13354     0B4D                     i1l3994:	
 13355                           ;usb/usb_device.c: 1008:     }
 13356                           
 13357                           
 13358                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
 13359     0B4D  3578               	lslf	i1USBTransferOnePacket@ep,w
 13360     0B4E  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13361     0B4F  0086               	movwf	6
 13362     0B50  3001               	movlw	1	; select bank2/3
 13363     0B51  0087               	movwf	7
 13364     0B52  3F40               	moviw [0]fsr1
 13365     0B53  00F9               	movwf	i1USBTransferOnePacket@handle
 13366     0B54  3F41               	moviw [1]fsr1
 13367     0B55                     L15:
 13368     0B55  00FA               	movwf	i1USBTransferOnePacket@handle+1
 13369                           
 13370                           ;usb/usb_device.c: 1017:     if(handle == 0)
 13371     0B56  0879               	movf	i1USBTransferOnePacket@handle,w
 13372     0B57  047A               	iorwf	i1USBTransferOnePacket@handle+1,w
 13373     0B58  1D03               	btfss	3,2
 13374     0B59  2B5D               	goto	i1l4002
 13375                           
 13376                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
 13377     0B5A  01F0               	clrf	?i1_USBTransferOnePacket
 13378     0B5B  01F1               	clrf	?i1_USBTransferOnePacket+1
 13379     0B5C  0008               	return
 13380     0B5D                     i1l4002:
 13381                           
 13382                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
 13383     0B5D  30FF               	movlw	255
 13384     0B5E  0571               	andwf	i1USBTransferOnePacket@data,w
 13385     0B5F  00F4               	movwf	??i1_USBTransferOnePacket
 13386     0B60  307F               	movlw	127
 13387     0B61  0572               	andwf	i1USBTransferOnePacket@data+1,w
 13388     0B62  00F5               	movwf	??i1_USBTransferOnePacket+1
 13389     0B63  0879               	movf	i1USBTransferOnePacket@handle,w
 13390     0B64  0086               	movwf	6
 13391     0B65  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13392     0B66  0087               	movwf	7
 13393     0B67  3142               	addfsr 1,2
 13394     0B68  0874               	movf	??i1_USBTransferOnePacket,w
 13395     0B69  3FC0               	movwi [0]fsr1
 13396     0B6A  0875               	movf	??i1_USBTransferOnePacket+1,w
 13397     0B6B  3FC1               	movwi [1]fsr1
 13398                           
 13399                           ;usb/usb_device.c: 1034:     handle->CNT = len;
 13400     0B6C  0879               	movf	i1USBTransferOnePacket@handle,w
 13401     0B6D  3E01               	addlw	1
 13402     0B6E  00F4               	movwf	??i1_USBTransferOnePacket
 13403     0B6F  3000               	movlw	0
 13404     0B70  3D7A               	addwfc	i1USBTransferOnePacket@handle+1,w
 13405     0B71  00F5               	movwf	??i1_USBTransferOnePacket+1
 13406     0B72  0874               	movf	??i1_USBTransferOnePacket,w
 13407     0B73  0086               	movwf	6
 13408     0B74  0875               	movf	??i1_USBTransferOnePacket+1,w
 13409     0B75  0087               	movwf	7
 13410     0B76  0873               	movf	i1USBTransferOnePacket@len,w
 13411     0B77  0081               	movwf	1
 13412                           
 13413                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
 13414     0B78  3040               	movlw	64
 13415     0B79  00F4               	movwf	??i1_USBTransferOnePacket
 13416     0B7A  0879               	movf	i1USBTransferOnePacket@handle,w
 13417     0B7B  0086               	movwf	6
 13418     0B7C  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13419     0B7D  0087               	movwf	7
 13420     0B7E  0874               	movf	??i1_USBTransferOnePacket,w
 13421     0B7F  0581               	andwf	1,f
 13422                           
 13423                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
 13424     0B80  0879               	movf	i1USBTransferOnePacket@handle,w
 13425     0B81  0086               	movwf	6
 13426     0B82  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13427     0B83  0087               	movwf	7
 13428     0B84  1581               	bsf	1,3
 13429                           
 13430                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
 13431     0B85  0879               	movf	i1USBTransferOnePacket@handle,w
 13432     0B86  0086               	movwf	6
 13433     0B87  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13434     0B88  0087               	movwf	7
 13435     0B89  1781               	bsf	1,7
 13436                           
 13437                           ;usb/usb_device.c: 1040:     if(dir != 0)
 13438     0B8A  0870               	movf	i1USBTransferOnePacket@dir,w
 13439     0B8B  1903               	btfsc	3,2
 13440     0B8C  2BA4               	goto	i1l4012
 13441                           
 13442                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
 13443     0B8D  3578               	lslf	i1USBTransferOnePacket@ep,w
 13444     0B8E  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13445     0B8F  0086               	movwf	6
 13446     0B90  0187               	clrf	7
 13447     0B91  3F40               	moviw [0]fsr1
 13448     0B92  00F4               	movwf	??i1_USBTransferOnePacket
 13449     0B93  3F41               	moviw [1]fsr1
 13450     0B94  00F5               	movwf	??i1_USBTransferOnePacket+1
 13451     0B95  3004               	movlw	4
 13452     0B96  0674               	xorwf	??i1_USBTransferOnePacket,w
 13453     0B97  00F6               	movwf	??i1_USBTransferOnePacket+2
 13454     0B98  3000               	movlw	0
 13455     0B99  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 13456     0B9A  00F7               	movwf	??i1_USBTransferOnePacket+3
 13457     0B9B  3578               	lslf	i1USBTransferOnePacket@ep,w
 13458     0B9C  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13459     0B9D  0086               	movwf	6
 13460     0B9E  0187               	clrf	7
 13461     0B9F  0876               	movf	??i1_USBTransferOnePacket+2,w
 13462     0BA0  3FC0               	movwi [0]fsr1
 13463     0BA1  0877               	movf	??i1_USBTransferOnePacket+3,w
 13464     0BA2  3FC1               	movwi [1]fsr1
 13465                           
 13466                           ;usb/usb_device.c: 1044:     }
 13467     0BA3  2BBC               	goto	i1l4014
 13468     0BA4                     i1l4012:
 13469                           
 13470                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
 13471     0BA4  3578               	lslf	i1USBTransferOnePacket@ep,w
 13472     0BA5  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13473     0BA6  0086               	movwf	6
 13474     0BA7  3001               	movlw	1	; select bank2/3
 13475     0BA8  0087               	movwf	7
 13476     0BA9  3F40               	moviw [0]fsr1
 13477     0BAA  00F4               	movwf	??i1_USBTransferOnePacket
 13478     0BAB  3F41               	moviw [1]fsr1
 13479     0BAC  00F5               	movwf	??i1_USBTransferOnePacket+1
 13480     0BAD  3004               	movlw	4
 13481     0BAE  0674               	xorwf	??i1_USBTransferOnePacket,w
 13482     0BAF  00F6               	movwf	??i1_USBTransferOnePacket+2
 13483     0BB0  3000               	movlw	0
 13484     0BB1  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 13485     0BB2  00F7               	movwf	??i1_USBTransferOnePacket+3
 13486     0BB3  3578               	lslf	i1USBTransferOnePacket@ep,w
 13487     0BB4  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13488     0BB5  0086               	movwf	6
 13489     0BB6  3001               	movlw	1	; select bank2/3
 13490     0BB7  0087               	movwf	7
 13491     0BB8  0876               	movf	??i1_USBTransferOnePacket+2,w
 13492     0BB9  3FC0               	movwi [0]fsr1
 13493     0BBA  0877               	movf	??i1_USBTransferOnePacket+3,w
 13494     0BBB  3FC1               	movwi [1]fsr1
 13495     0BBC                     i1l4014:
 13496                           
 13497                           ;usb/usb_device.c: 1050:     return (void*)handle;
 13498     0BBC  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13499     0BBD  00F1               	movwf	?i1_USBTransferOnePacket+1
 13500     0BBE  0879               	movf	i1USBTransferOnePacket@handle,w
 13501     0BBF  00F0               	movwf	?i1_USBTransferOnePacket
 13502     0BC0  0008               	return
 13503     0BC1                     __end_ofi1_USBTransferOnePacket:
 13504                           
 13505                           	psect	text70
 13506     11E9                     __ptext70:	
 13507 ;; *************** function i1_GenericQueue_Init *****************
 13508 ;; Defined at:
 13509 ;;		line 4 in file "generic_queue.c"
 13510 ;; Parameters:    Size  Location     Type
 13511 ;;  q               2    0[COMMON] PTR struct .
 13512 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 13513 ;;  element_size    2    2[COMMON] unsigned int 
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;		None
 13516 ;; Return value:  Size  Location     Type
 13517 ;;                  1    wreg      void 
 13518 ;; Registers used:
 13519 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13520 ;; Tracked objects:
 13521 ;;		On entry : 1F/0
 13522 ;;		On exit  : 1F/0
 13523 ;;		Unchanged: 1F/0
 13524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13525 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13528 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13529 ;;Total ram usage:        4 bytes
 13530 ;; Hardware stack levels used: 1
 13531 ;; This function calls:
 13532 ;;		Nothing
 13533 ;; This function is called by:
 13534 ;;		_APP_KeyboardInit
 13535 ;; This function uses a non-reentrant model
 13536 ;;
 13537                           
 13538     11E9                     i1_GenericQueue_Init:	
 13539                           ;psect for function i1_GenericQueue_Init
 13540                           
 13541                           
 13542                           ;generic_queue.c: 5:     q->element_size = element_size;
 13543                           
 13544                           ;incstack = 0
 13545                           ; Regs used in i1_GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 13546     11E9  0870               	movf	i1GenericQueue_Init@q,w
 13547     11EA  3E5A               	addlw	90
 13548     11EB  0086               	movwf	6
 13549     11EC  3000               	movlw	0
 13550     11ED  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13551     11EE  0087               	movwf	7
 13552     11EF  0872               	movf	i1GenericQueue_Init@element_size,w
 13553     11F0  3FC0               	movwi [0]fsr1
 13554     11F1  0873               	movf	i1GenericQueue_Init@element_size+1,w
 13555     11F2  3FC1               	movwi [1]fsr1
 13556                           
 13557                           ;generic_queue.c: 6:     q->front = 0;
 13558     11F3  0870               	movf	i1GenericQueue_Init@q,w
 13559     11F4  3E5C               	addlw	92
 13560     11F5  0086               	movwf	6
 13561     11F6  3000               	movlw	0
 13562     11F7  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13563     11F8  0087               	movwf	7
 13564     11F9  0181               	clrf	1
 13565                           
 13566                           ;generic_queue.c: 7:     q->rear = 0;
 13567     11FA  0870               	movf	i1GenericQueue_Init@q,w
 13568     11FB  3E5D               	addlw	93
 13569     11FC  0086               	movwf	6
 13570     11FD  3000               	movlw	0
 13571     11FE  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13572     11FF  0087               	movwf	7
 13573     1200  0181               	clrf	1
 13574                           
 13575                           ;generic_queue.c: 8:     q->size = 0;
 13576     1201  0870               	movf	i1GenericQueue_Init@q,w
 13577     1202  3E5E               	addlw	94
 13578     1203  0086               	movwf	6
 13579     1204  3000               	movlw	0
 13580     1205  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13581     1206  0087               	movwf	7
 13582     1207  0181               	clrf	1
 13583     1208  0008               	return
 13584     1209                     __end_ofi1_GenericQueue_Init:
 13585                           
 13586                           	psect	text71
 13587     11C9                     __ptext71:	
 13588 ;; *************** function _USBEnableEndpoint *****************
 13589 ;; Defined at:
 13590 ;;		line 882 in file "usb/usb_device.c"
 13591 ;; Parameters:    Size  Location     Type
 13592 ;;  ep              1    wreg     unsigned char 
 13593 ;;  options         1    7[COMMON] unsigned char 
 13594 ;; Auto vars:     Size  Location     Type
 13595 ;;  ep              1   12[COMMON] unsigned char 
 13596 ;;  p               2   10[COMMON] PTR unsigned char 
 13597 ;;		 -> UEP0(1), 
 13598 ;; Return value:  Size  Location     Type
 13599 ;;                  1    wreg      void 
 13600 ;; Registers used:
 13601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13602 ;; Tracked objects:
 13603 ;;		On entry : 1F/2
 13604 ;;		On exit  : 0/0
 13605 ;;		Unchanged: 0/0
 13606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13607 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13608 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13609 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13610 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;Total ram usage:        6 bytes
 13612 ;; Hardware stack levels used: 1
 13613 ;; Hardware stack levels required when called: 1
 13614 ;; This function calls:
 13615 ;;		_USBConfigureEndpoint
 13616 ;; This function is called by:
 13617 ;;		_APP_KeyboardInit
 13618 ;; This function uses a non-reentrant model
 13619 ;;
 13620                           
 13621     11C9                     _USBEnableEndpoint:	
 13622                           ;psect for function _USBEnableEndpoint
 13623                           
 13624                           
 13625                           ;incstack = 0
 13626                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13627                           ;USBEnableEndpoint@ep stored from wreg
 13628     11C9  00FC               	movwf	USBEnableEndpoint@ep
 13629                           
 13630                           ;usb/usb_device.c: 882: void USBEnableEndpoint(uint8_t ep, uint8_t options);usb/usb_devi
      +                          ce.c: 883: {;usb/usb_device.c: 884:     unsigned char* p;;usb/usb_device.c: 888:     if(
      +                          options & 0x04)
 13631     11CA  1D77               	btfss	USBEnableEndpoint@options,2
 13632     11CB  29D1               	goto	i1l3970
 13633                           
 13634                           ;usb/usb_device.c: 889:     {;usb/usb_device.c: 890:         USBConfigureEndpoint(ep, 0)
      +                          ;
 13635     11CC  01F0               	clrf	USBConfigureEndpoint@direction
 13636     11CD  087C               	movf	USBEnableEndpoint@ep,w
 13637     11CE  3193  23C8  3191   	fcall	_USBConfigureEndpoint
 13638     11D1                     i1l3970:
 13639                           
 13640                           ;usb/usb_device.c: 892:     if(options & 0x02)
 13641     11D1  1CF7               	btfss	USBEnableEndpoint@options,1
 13642     11D2  29D8               	goto	i1l3974
 13643                           
 13644                           ;usb/usb_device.c: 893:     {;usb/usb_device.c: 894:         USBConfigureEndpoint(ep, 1)
      +                          ;
 13645     11D3  01F0               	clrf	USBConfigureEndpoint@direction
 13646     11D4  0AF0               	incf	USBConfigureEndpoint@direction,f
 13647     11D5  087C               	movf	USBEnableEndpoint@ep,w
 13648     11D6  3193  23C8         	fcall	_USBConfigureEndpoint
 13649     11D8                     i1l3974:
 13650                           
 13651                           ;usb/usb_device.c: 903:         p = (unsigned char*)(&UEP0+ep);
 13652     11D8  087C               	movf	USBEnableEndpoint@ep,w
 13653     11D9  3E98               	addlw	152
 13654     11DA  00F8               	movwf	??_USBEnableEndpoint
 13655     11DB  01F9               	clrf	??_USBEnableEndpoint+1
 13656     11DC  300E               	movlw	14
 13657     11DD  3DF9               	addwfc	??_USBEnableEndpoint+1,f
 13658     11DE  0878               	movf	??_USBEnableEndpoint,w
 13659     11DF  00FA               	movwf	USBEnableEndpoint@p
 13660     11E0  0879               	movf	??_USBEnableEndpoint+1,w
 13661     11E1  00FB               	movwf	USBEnableEndpoint@p+1
 13662                           
 13663                           ;usb/usb_device.c: 905:     *p = options;
 13664     11E2  087A               	movf	USBEnableEndpoint@p,w
 13665     11E3  0086               	movwf	6
 13666     11E4  087B               	movf	USBEnableEndpoint@p+1,w
 13667     11E5  0087               	movwf	7
 13668     11E6  0877               	movf	USBEnableEndpoint@options,w
 13669     11E7  0081               	movwf	1
 13670     11E8  0008               	return
 13671     11E9                     __end_of_USBEnableEndpoint:
 13672                           
 13673                           	psect	text72
 13674     13C8                     __ptext72:	
 13675 ;; *************** function _USBConfigureEndpoint *****************
 13676 ;; Defined at:
 13677 ;;		line 1547 in file "usb/usb_device.c"
 13678 ;; Parameters:    Size  Location     Type
 13679 ;;  EPNum           1    wreg     unsigned char 
 13680 ;;  direction       1    0[COMMON] unsigned char 
 13681 ;; Auto vars:     Size  Location     Type
 13682 ;;  EPNum           1    5[COMMON] unsigned char 
 13683 ;;  handle          1    6[COMMON] PTR volatile struct __BD
 13684 ;;		 -> BDT(32), 
 13685 ;; Return value:  Size  Location     Type
 13686 ;;                  1    wreg      void 
 13687 ;; Registers used:
 13688 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13689 ;; Tracked objects:
 13690 ;;		On entry : 0/2
 13691 ;;		On exit  : 0/0
 13692 ;;		Unchanged: 0/0
 13693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13694 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13695 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13696 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13698 ;;Total ram usage:        7 bytes
 13699 ;; Hardware stack levels used: 1
 13700 ;; This function calls:
 13701 ;;		Nothing
 13702 ;; This function is called by:
 13703 ;;		_USBEnableEndpoint
 13704 ;; This function uses a non-reentrant model
 13705 ;;
 13706                           
 13707     13C8                     _USBConfigureEndpoint:	
 13708                           ;psect for function _USBConfigureEndpoint
 13709                           
 13710                           
 13711                           ;incstack = 0
 13712                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 13713                           ;USBConfigureEndpoint@EPNum stored from wreg
 13714     13C8  00F5               	movwf	USBConfigureEndpoint@EPNum
 13715                           
 13716                           ;usb/usb_device.c: 1547: static void USBConfigureEndpoint(uint8_t EPNum, uint8_t directi
      +                          on);usb/usb_device.c: 1548: {;usb/usb_device.c: 1549:     volatile BDT_ENTRY* handle;;us
      +                          b/usb_device.c: 1553:     handle = (volatile BDT_ENTRY*)&BDT[0];
 13717     13C9  3020               	movlw	32
 13718     13CA  00F6               	movwf	USBConfigureEndpoint@handle
 13719                           
 13720                           ;usb/usb_device.c: 1554:     handle += (4*EPNum+2*direction+0u);
 13721     13CB  0870               	movf	USBConfigureEndpoint@direction,w
 13722     13CC  00F1               	movwf	??_USBConfigureEndpoint
 13723     13CD  3001               	movlw	1
 13724     13CE                     u292_25:
 13725     13CE  35F1               	lslf	??_USBConfigureEndpoint,f
 13726     13CF  0B89               	decfsz	9,f
 13727     13D0  2BCE               	goto	u292_25
 13728     13D1  0875               	movf	USBConfigureEndpoint@EPNum,w
 13729     13D2  00F2               	movwf	??_USBConfigureEndpoint+1
 13730     13D3  3001               	movlw	1
 13731     13D4                     u293_25:
 13732     13D4  35F2               	lslf	??_USBConfigureEndpoint+1,f
 13733     13D5  3EFF               	addlw	-1
 13734     13D6  1D03               	skipz
 13735     13D7  2BD4               	goto	u293_25
 13736     13D8  3572               	lslf	??_USBConfigureEndpoint+1,w
 13737     13D9  0771               	addwf	??_USBConfigureEndpoint,w
 13738     13DA  00F3               	movwf	??_USBConfigureEndpoint+2
 13739     13DB  3001               	movlw	1
 13740     13DC                     u294_25:
 13741     13DC  35F3               	lslf	??_USBConfigureEndpoint+2,f
 13742     13DD  3EFF               	addlw	-1
 13743     13DE  1D03               	skipz
 13744     13DF  2BDC               	goto	u294_25
 13745     13E0  3573               	lslf	??_USBConfigureEndpoint+2,w
 13746     13E1  00F4               	movwf	??_USBConfigureEndpoint+3
 13747     13E2  0874               	movf	??_USBConfigureEndpoint+3,w
 13748     13E3  07F6               	addwf	USBConfigureEndpoint@handle,f
 13749                           
 13750                           ;usb/usb_device.c: 1556:     handle->STAT.UOWN = 0;
 13751     13E4  0876               	movf	USBConfigureEndpoint@handle,w
 13752     13E5  0086               	movwf	6
 13753     13E6  0187               	clrf	7
 13754     13E7  1381               	bcf	1,7
 13755                           
 13756                           ;usb/usb_device.c: 1561:     if(direction == 0)
 13757     13E8  0870               	movf	USBConfigureEndpoint@direction,w
 13758     13E9  1D03               	btfss	3,2
 13759     13EA  2BF5               	goto	i1l3960
 13760                           
 13761                           ;usb/usb_device.c: 1562:     {;usb/usb_device.c: 1563:         pBDTEntryOut[EPNum] = han
      +                          dle;
 13762     13EB  3575               	lslf	USBConfigureEndpoint@EPNum,w
 13763     13EC  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13764     13ED  0086               	movwf	6
 13765     13EE  3001               	movlw	1	; select bank2/3
 13766     13EF  0087               	movwf	7
 13767     13F0  0876               	movf	USBConfigureEndpoint@handle,w
 13768     13F1  3FC0               	movwi [0]fsr1
 13769     13F2  3000               	movlw	0
 13770     13F3  3FC1               	movwi [1]fsr1
 13771                           
 13772                           ;usb/usb_device.c: 1564:     }
 13773     13F4  2BFD               	goto	i1l3962
 13774     13F5                     i1l3960:
 13775                           
 13776                           ;usb/usb_device.c: 1566:     {;usb/usb_device.c: 1567:         pBDTEntryIn[EPNum] = hand
      +                          le;
 13777     13F5  3575               	lslf	USBConfigureEndpoint@EPNum,w
 13778     13F6  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13779     13F7  0086               	movwf	6
 13780     13F8  0187               	clrf	7
 13781     13F9  0876               	movf	USBConfigureEndpoint@handle,w
 13782     13FA  3FC0               	movwi [0]fsr1
 13783     13FB  3000               	movlw	0
 13784     13FC  3FC1               	movwi [1]fsr1
 13785     13FD                     i1l3962:
 13786                           
 13787                           ;usb/usb_device.c: 1571:         handle->STAT.DTS = 0;
 13788     13FD  0876               	movf	USBConfigureEndpoint@handle,w
 13789     13FE  0086               	movwf	6
 13790     13FF  0187               	clrf	7
 13791     1400  1301               	bcf	1,6
 13792                           
 13793                           ;usb/usb_device.c: 1572:         (handle+1)->STAT.DTS = 1;
 13794     1401  0876               	movf	USBConfigureEndpoint@handle,w
 13795     1402  3E04               	addlw	4
 13796     1403  0086               	movwf	6
 13797     1404  0187               	clrf	7
 13798     1405  1701               	bsf	1,6
 13799     1406  0008               	return
 13800     1407                     __end_of_USBConfigureEndpoint:
 13801                           
 13802                           	psect	text73
 13803     1350                     __ptext73:	
 13804 ;; *************** function _USBCtrlTrfOutHandler *****************
 13805 ;; Defined at:
 13806 ;;		line 2545 in file "usb/usb_device.c"
 13807 ;; Parameters:    Size  Location     Type
 13808 ;;		None
 13809 ;; Auto vars:     Size  Location     Type
 13810 ;;		None
 13811 ;; Return value:  Size  Location     Type
 13812 ;;                  1    wreg      void 
 13813 ;; Registers used:
 13814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13815 ;; Tracked objects:
 13816 ;;		On entry : 1F/0
 13817 ;;		On exit  : 1D/0
 13818 ;;		Unchanged: 0/0
 13819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13822 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;Total ram usage:        4 bytes
 13825 ;; Hardware stack levels used: 1
 13826 ;; Hardware stack levels required when called: 4
 13827 ;; This function calls:
 13828 ;;		_USBCtrlTrfRxService
 13829 ;; This function is called by:
 13830 ;;		_USBCtrlEPService
 13831 ;; This function uses a non-reentrant model
 13832 ;;
 13833                           
 13834     1350                     _USBCtrlTrfOutHandler:	
 13835                           ;psect for function _USBCtrlTrfOutHandler
 13836                           
 13837                           
 13838                           ;usb/usb_device.c: 2547:     if(controlTransferState == 2)
 13839                           
 13840                           ;incstack = 0
 13841                           ; Regs used in _USBCtrlTrfOutHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13842     1350  3002               	movlw	2
 13843     1351  066A               	xorwf	_controlTransferState,w	;volatile
 13844     1352  1D03               	btfss	3,2
 13845     1353  2B57               	goto	i1l4832
 13846                           
 13847                           ;usb/usb_device.c: 2548:     {;usb/usb_device.c: 2549:         USBCtrlTrfRxService();
 13848     1354  3187  2732         	fcall	_USBCtrlTrfRxService
 13849                           
 13850                           ;usb/usb_device.c: 2550:     }
 13851     1356  0008               	return
 13852     1357                     i1l4832:
 13853                           
 13854                           ;usb/usb_device.c: 2552:     {;usb/usb_device.c: 2555:         controlTransferState = 0;
 13855     1357  01EA               	clrf	_controlTransferState	;volatile
 13856                           
 13857                           ;usb/usb_device.c: 2562:         if(BothEP0OutUOWNsSet == 0)
 13858     1358  0022               	movlb	2	; select bank2
 13859     1359  085E               	movf	_BothEP0OutUOWNsSet^(0+256),w	;volatile
 13860     135A  1D03               	btfss	3,2
 13861     135B  2B88               	goto	i1l4844
 13862                           
 13863                           ;usb/usb_device.c: 2563:         {;usb/usb_device.c: 2564:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 13864     135C  0020               	movlb	0	; select bank0
 13865     135D  0867               	movf	_pBDTEntryEP0OutNext,w
 13866     135E  3E01               	addlw	1
 13867     135F  00FA               	movwf	??_USBCtrlTrfOutHandler
 13868     1360  3000               	movlw	0
 13869     1361  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13870     1362  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 13871     1363  087A               	movf	??_USBCtrlTrfOutHandler,w
 13872     1364  0086               	movwf	6
 13873     1365  087B               	movf	??_USBCtrlTrfOutHandler+1,w
 13874     1366  0087               	movwf	7
 13875     1367  3008               	movlw	8
 13876     1368  0081               	movwf	1
 13877                           
 13878                           ;usb/usb_device.c: 2565:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 13879     1369  3040               	movlw	64
 13880     136A  00FA               	movwf	??_USBCtrlTrfOutHandler
 13881     136B  3000               	movlw	0
 13882     136C  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 13883     136D  30FF               	movlw	255
 13884     136E  057A               	andwf	??_USBCtrlTrfOutHandler,w
 13885     136F  00FC               	movwf	??_USBCtrlTrfOutHandler+2
 13886     1370  307F               	movlw	127
 13887     1371  057B               	andwf	??_USBCtrlTrfOutHandler+1,w
 13888     1372  00FD               	movwf	??_USBCtrlTrfOutHandler+3
 13889     1373  0867               	movf	_pBDTEntryEP0OutNext,w
 13890     1374  0086               	movwf	6
 13891     1375  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13892     1376  0087               	movwf	7
 13893     1377  3142               	addfsr 1,2
 13894     1378  087C               	movf	??_USBCtrlTrfOutHandler+2,w
 13895     1379  3FC0               	movwi [0]fsr1
 13896     137A  087D               	movf	??_USBCtrlTrfOutHandler+3,w
 13897     137B  3FC1               	movwi [1]fsr1
 13898                           
 13899                           ;usb/usb_device.c: 2566:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 13900     137C  0867               	movf	_pBDTEntryEP0OutNext,w
 13901     137D  0086               	movwf	6
 13902     137E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13903     137F  0087               	movwf	7
 13904     1380  300C               	movlw	12
 13905     1381  0081               	movwf	1
 13906                           
 13907                           ;usb/usb_device.c: 2567:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 13908     1382  0867               	movf	_pBDTEntryEP0OutNext,w
 13909     1383  0086               	movwf	6
 13910     1384  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13911     1385  0087               	movwf	7
 13912     1386  1781               	bsf	1,7
 13913                           
 13914                           ;usb/usb_device.c: 2568:         }
 13915     1387  0008               	return
 13916     1388                     i1l4844:
 13917                           
 13918                           ;usb/usb_device.c: 2570:         {;usb/usb_device.c: 2571:             BothEP0OutUOWNsSe
      +                          t = 0;
 13919     1388  01DE               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 13920     1389  0008               	return
 13921     138A                     __end_of_USBCtrlTrfOutHandler:
 13922                           
 13923                           	psect	text74
 13924     0732                     __ptext74:	
 13925 ;; *************** function _USBCtrlTrfRxService *****************
 13926 ;; Defined at:
 13927 ;;		line 1856 in file "usb/usb_device.c"
 13928 ;; Parameters:    Size  Location     Type
 13929 ;;		None
 13930 ;; Auto vars:     Size  Location     Type
 13931 ;;  byteToRead      1    9[COMMON] unsigned char 
 13932 ;;  i               1    8[COMMON] unsigned char 
 13933 ;; Return value:  Size  Location     Type
 13934 ;;                  1    wreg      void 
 13935 ;; Registers used:
 13936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13937 ;; Tracked objects:
 13938 ;;		On entry : 1F/0
 13939 ;;		On exit  : 1D/0
 13940 ;;		Unchanged: 0/0
 13941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13945 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13946 ;;Total ram usage:        6 bytes
 13947 ;; Hardware stack levels used: 1
 13948 ;; Hardware stack levels required when called: 3
 13949 ;; This function calls:
 13950 ;;		_USBCtrlEPAllowStatusStage
 13951 ;;		_USBHIDCBSetReportComplete
 13952 ;; This function is called by:
 13953 ;;		_USBCtrlTrfOutHandler
 13954 ;; This function uses a non-reentrant model
 13955 ;;
 13956                           
 13957     0732                     _USBCtrlTrfRxService:	
 13958                           ;psect for function _USBCtrlTrfRxService
 13959                           
 13960                           
 13961                           ;usb/usb_device.c: 1858:     uint8_t byteToRead;;usb/usb_device.c: 1859:     uint8_t i;;
      +                          usb/usb_device.c: 1863:     byteToRead = pBDTEntryEP0OutCurrent->CNT;
 13962                           
 13963                           ;incstack = 0
 13964                           ; Regs used in _USBCtrlTrfRxService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13965     0732  086B               	movf	_pBDTEntryEP0OutCurrent,w
 13966     0733  0086               	movwf	6
 13967     0734  0187               	clrf	7
 13968     0735  3F41               	moviw [1]fsr1
 13969     0736  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 13970                           
 13971                           ;usb/usb_device.c: 1869:     if(byteToRead > outPipes[0].wCount.Val)
 13972     0737  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13973     0738  00F4               	movwf	??_USBCtrlTrfRxService
 13974     0739  01F5               	clrf	??_USBCtrlTrfRxService+1
 13975     073A  0875               	movf	??_USBCtrlTrfRxService+1,w
 13976     073B  0022               	movlb	2	; select bank2
 13977     073C  0225               	subwf	((_outPipes+1)^(0+256)+3),w	;volatile
 13978     073D  1D03               	skipz
 13979     073E  2F41               	goto	u375_25
 13980     073F  0874               	movf	??_USBCtrlTrfRxService,w
 13981     0740  0224               	subwf	(_outPipes^(0+256)+3),w	;volatile
 13982     0741                     u375_25:
 13983     0741  1803               	skipnc
 13984     0742  2F45               	goto	i1l544
 13985                           
 13986                           ;usb/usb_device.c: 1870:     {;usb/usb_device.c: 1871:         byteToRead = outPipes[0].
      +                          wCount.Val;
 13987     0743  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 13988     0744  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 13989     0745                     i1l544:	
 13990                           ;usb/usb_device.c: 1872:     }
 13991                           
 13992                           
 13993                           ;usb/usb_device.c: 1874:     outPipes[0].wCount.Val -= byteToRead;
 13994     0745  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13995     0746  00F4               	movwf	??_USBCtrlTrfRxService
 13996     0747  01F5               	clrf	??_USBCtrlTrfRxService+1
 13997     0748  0874               	movf	??_USBCtrlTrfRxService,w
 13998     0749  02A4               	subwf	(_outPipes^(0+256)+3),f	;volatile
 13999     074A  0875               	movf	??_USBCtrlTrfRxService+1,w
 14000     074B  3BA5               	subwfb	((_outPipes+1)^(0+256)+3),f	;volatile
 14001                           
 14002                           ;usb/usb_device.c: 1878:     for(i=0;i<byteToRead;i++)
 14003     074C  01F8               	clrf	USBCtrlTrfRxService@i
 14004     074D                     i1l4604:
 14005     074D  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 14006     074E  0278               	subwf	USBCtrlTrfRxService@i,w
 14007     074F  1803               	btfsc	3,0
 14008     0750  2F63               	goto	i1l4606
 14009                           
 14010                           ;usb/usb_device.c: 1879:     {;usb/usb_device.c: 1880:         *outPipes[0].pDst.bRam++ 
      +                          = CtrlTrfData[i];
 14011     0751  0821               	movf	_outPipes^(0+256),w	;volatile
 14012     0752  0086               	movwf	6
 14013     0753  0187               	clrf	7
 14014     0754  0878               	movf	USBCtrlTrfRxService@i,w
 14015     0755  3E48               	addlw	72
 14016     0756  0084               	movwf	4
 14017     0757  0185               	clrf	5
 14018     0758  0800               	movf	0,w
 14019     0759  0081               	movwf	1
 14020     075A  3001               	movlw	1
 14021     075B  00F4               	movwf	??_USBCtrlTrfRxService
 14022     075C  0874               	movf	??_USBCtrlTrfRxService,w
 14023     075D  07A1               	addwf	_outPipes^(0+256),f	;volatile
 14024                           
 14025                           ;usb/usb_device.c: 1881:     }
 14026     075E  3001               	movlw	1
 14027     075F  00F4               	movwf	??_USBCtrlTrfRxService
 14028     0760  0874               	movf	??_USBCtrlTrfRxService,w
 14029     0761  07F8               	addwf	USBCtrlTrfRxService@i,f
 14030     0762  2F4D               	goto	i1l4604
 14031     0763                     i1l4606:
 14032                           
 14033                           ;usb/usb_device.c: 1885:     if(outPipes[0].wCount.Val > 0)
 14034     0763  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 14035     0764  0425               	iorwf	((_outPipes+1)^(0+256)+3),w	;volatile
 14036     0765  1903               	btfsc	3,2
 14037     0766  2FA4               	goto	i1l4618
 14038                           
 14039                           ;usb/usb_device.c: 1886:     {;usb/usb_device.c: 1887:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 14040     0767  0020               	movlb	0	; select bank0
 14041     0768  0867               	movf	_pBDTEntryEP0OutNext,w
 14042     0769  3E01               	addlw	1
 14043     076A  00F4               	movwf	??_USBCtrlTrfRxService
 14044     076B  3000               	movlw	0
 14045     076C  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 14046     076D  00F5               	movwf	??_USBCtrlTrfRxService+1
 14047     076E  0874               	movf	??_USBCtrlTrfRxService,w
 14048     076F  0086               	movwf	6
 14049     0770  0875               	movf	??_USBCtrlTrfRxService+1,w
 14050     0771  0087               	movwf	7
 14051     0772  3008               	movlw	8
 14052     0773  0081               	movwf	1
 14053                           
 14054                           ;usb/usb_device.c: 1888:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 14055     0774  3048               	movlw	72
 14056     0775  00F4               	movwf	??_USBCtrlTrfRxService
 14057     0776  3000               	movlw	0
 14058     0777  00F5               	movwf	??_USBCtrlTrfRxService+1
 14059     0778  30FF               	movlw	255
 14060     0779  0574               	andwf	??_USBCtrlTrfRxService,w
 14061     077A  00F6               	movwf	??_USBCtrlTrfRxService+2
 14062     077B  307F               	movlw	127
 14063     077C  0575               	andwf	??_USBCtrlTrfRxService+1,w
 14064     077D  00F7               	movwf	??_USBCtrlTrfRxService+3
 14065     077E  0867               	movf	_pBDTEntryEP0OutNext,w
 14066     077F  0086               	movwf	6
 14067     0780  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14068     0781  0087               	movwf	7
 14069     0782  3142               	addfsr 1,2
 14070     0783  0876               	movf	??_USBCtrlTrfRxService+2,w
 14071     0784  3FC0               	movwi [0]fsr1
 14072     0785  0877               	movf	??_USBCtrlTrfRxService+3,w
 14073     0786  3FC1               	movwi [1]fsr1
 14074                           
 14075                           ;usb/usb_device.c: 1889:         if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 14076     0787  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14077     0788  0086               	movwf	6
 14078     0789  0187               	clrf	7
 14079     078A  1B01               	btfsc	1,6
 14080     078B  2F98               	goto	i1l4616
 14081                           
 14082                           ;usb/usb_device.c: 1890:         {;usb/usb_device.c: 1891:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x40|(0x08 & 0x08);
 14083     078C  0867               	movf	_pBDTEntryEP0OutNext,w
 14084     078D  0086               	movwf	6
 14085     078E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14086     078F  0087               	movwf	7
 14087     0790  3048               	movlw	72
 14088     0791  0081               	movwf	1
 14089                           
 14090                           ;usb/usb_device.c: 1892:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14091     0792  0867               	movf	_pBDTEntryEP0OutNext,w
 14092     0793  0086               	movwf	6
 14093     0794  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14094     0795  0087               	movwf	7
 14095     0796  1781               	bsf	1,7
 14096                           
 14097                           ;usb/usb_device.c: 1893:         }
 14098     0797  0008               	return
 14099     0798                     i1l4616:
 14100                           
 14101                           ;usb/usb_device.c: 1895:         {;usb/usb_device.c: 1896:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x00|(0x08 & 0x08);
 14102     0798  0867               	movf	_pBDTEntryEP0OutNext,w
 14103     0799  0086               	movwf	6
 14104     079A  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14105     079B  0087               	movwf	7
 14106     079C  3008               	movlw	8
 14107     079D  0081               	movwf	1
 14108                           
 14109                           ;usb/usb_device.c: 1897:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14110     079E  0867               	movf	_pBDTEntryEP0OutNext,w
 14111     079F  0086               	movwf	6
 14112     07A0  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14113     07A1  0087               	movwf	7
 14114     07A2  1781               	bsf	1,7
 14115     07A3  0008               	return
 14116     07A4                     i1l4618:
 14117                           
 14118                           ;usb/usb_device.c: 1901:     {;usb/usb_device.c: 1905:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 14119     07A4  0020               	movlb	0	; select bank0
 14120     07A5  0867               	movf	_pBDTEntryEP0OutNext,w
 14121     07A6  3E01               	addlw	1
 14122     07A7  00F4               	movwf	??_USBCtrlTrfRxService
 14123     07A8  3000               	movlw	0
 14124     07A9  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 14125     07AA  00F5               	movwf	??_USBCtrlTrfRxService+1
 14126     07AB  0874               	movf	??_USBCtrlTrfRxService,w
 14127     07AC  0086               	movwf	6
 14128     07AD  0875               	movf	??_USBCtrlTrfRxService+1,w
 14129     07AE  0087               	movwf	7
 14130     07AF  3008               	movlw	8
 14131     07B0  0081               	movwf	1
 14132                           
 14133                           ;usb/usb_device.c: 1906:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0
      +                          x7FFF);
 14134     07B1  3040               	movlw	64
 14135     07B2  00F4               	movwf	??_USBCtrlTrfRxService
 14136     07B3  3000               	movlw	0
 14137     07B4  00F5               	movwf	??_USBCtrlTrfRxService+1
 14138     07B5  30FF               	movlw	255
 14139     07B6  0574               	andwf	??_USBCtrlTrfRxService,w
 14140     07B7  00F6               	movwf	??_USBCtrlTrfRxService+2
 14141     07B8  307F               	movlw	127
 14142     07B9  0575               	andwf	??_USBCtrlTrfRxService+1,w
 14143     07BA  00F7               	movwf	??_USBCtrlTrfRxService+3
 14144     07BB  0867               	movf	_pBDTEntryEP0OutNext,w
 14145     07BC  0086               	movwf	6
 14146     07BD  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14147     07BE  0087               	movwf	7
 14148     07BF  3142               	addfsr 1,2
 14149     07C0  0876               	movf	??_USBCtrlTrfRxService+2,w
 14150     07C1  3FC0               	movwi [0]fsr1
 14151     07C2  0877               	movf	??_USBCtrlTrfRxService+3,w
 14152     07C3  3FC1               	movwi [1]fsr1
 14153                           
 14154                           ;usb/usb_device.c: 1910:         pBDTEntryEP0OutNext->STAT.Val = 0x04;
 14155     07C4  0867               	movf	_pBDTEntryEP0OutNext,w
 14156     07C5  0086               	movwf	6
 14157     07C6  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14158     07C7  0087               	movwf	7
 14159     07C8  3004               	movlw	4
 14160     07C9  0081               	movwf	1
 14161                           
 14162                           ;usb/usb_device.c: 1911:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14163     07CA  0867               	movf	_pBDTEntryEP0OutNext,w
 14164     07CB  0086               	movwf	6
 14165     07CC  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14166     07CD  0087               	movwf	7
 14167     07CE  1781               	bsf	1,7
 14168                           
 14169                           ;usb/usb_device.c: 1918:         if(outPipes[0].pFunc != ((void*)0))
 14170     07CF  0022               	movlb	2	; select bank2
 14171     07D0  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 14172     07D1  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 14173     07D2  1903               	btfsc	3,2
 14174     07D3  2FDE               	goto	i1l4630
 14175                           
 14176                           ;usb/usb_device.c: 1919:         {
 14177     07D4  3005               	movlw	5
 14178     07D5  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 14179     07D6  0086               	movwf	6
 14180     07D7  3001               	movlw	1	; select bank2/3
 14181     07D8  0087               	movwf	7
 14182     07D9  3F41               	moviw [1]fsr1
 14183     07DA  008A               	movwf	10
 14184     07DB  3F40               	moviw [0]fsr1
 14185     07DC  000A               	callw
 14186     07DD  3187               	pagesel	$
 14187     07DE                     i1l4630:
 14188     07DE  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 14189                           
 14190                           ;usb/usb_device.c: 1945:         if(USBDeferStatusStagePacket == 0)
 14191     07DF  085C               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 14192     07E0  1D03               	btfss	3,2
 14193     07E1  0008               	return
 14194                           
 14195                           ;usb/usb_device.c: 1946:         {;usb/usb_device.c: 1947:             USBCtrlEPAllowSta
      +                          tusStage();
 14196     07E2  3189  21E0         	fcall	_USBCtrlEPAllowStatusStage
 14197     07E4  0008               	return
 14198     07E5                     __end_of_USBCtrlTrfRxService:
 14199                           
 14200                           	psect	text75
 14201     09E0                     __ptext75:	
 14202 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 14203 ;; Defined at:
 14204 ;;		line 1420 in file "usb/usb_device.c"
 14205 ;; Parameters:    Size  Location     Type
 14206 ;;		None
 14207 ;; Auto vars:     Size  Location     Type
 14208 ;;		None
 14209 ;; Return value:  Size  Location     Type
 14210 ;;                  1    wreg      void 
 14211 ;; Registers used:
 14212 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14213 ;; Tracked objects:
 14214 ;;		On entry : 0/2
 14215 ;;		On exit  : 1D/0
 14216 ;;		Unchanged: 0/0
 14217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14220 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14221 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;Total ram usage:        4 bytes
 14223 ;; Hardware stack levels used: 1
 14224 ;; This function calls:
 14225 ;;		Nothing
 14226 ;; This function is called by:
 14227 ;;		_USBDeviceTasks
 14228 ;;		_USBCtrlEPServiceComplete
 14229 ;;		_USBCtrlTrfRxService
 14230 ;; This function uses a non-reentrant model
 14231 ;;
 14232                           
 14233     09E0                     _USBCtrlEPAllowStatusStage:	
 14234                           ;psect for function _USBCtrlEPAllowStatusStage
 14235                           
 14236                           
 14237                           ;usb/usb_device.c: 1427:     if(USBStatusStageEnabledFlag1 == 0)
 14238                           
 14239                           ;incstack = 0
 14240                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 14241     09E0  0022               	movlb	2	; select bank2
 14242     09E1  085B               	movf	_USBStatusStageEnabledFlag1^(0+256),w	;volatile
 14243     09E2  1D03               	btfss	3,2
 14244     09E3  0008               	return
 14245                           
 14246                           ;usb/usb_device.c: 1428:     {;usb/usb_device.c: 1429:         USBStatusStageEnabledFlag
      +                          1 = 1;
 14247     09E4  3001               	movlw	1
 14248     09E5  00DB               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 14249                           
 14250                           ;usb/usb_device.c: 1430:         if(USBStatusStageEnabledFlag2 == 0)
 14251     09E6  085A               	movf	_USBStatusStageEnabledFlag2^(0+256),w	;volatile
 14252     09E7  1D03               	btfss	3,2
 14253     09E8  0008               	return
 14254                           
 14255                           ;usb/usb_device.c: 1431:         {;usb/usb_device.c: 1432:             USBStatusStageEna
      +                          bledFlag2 = 1;
 14256     09E9  3001               	movlw	1
 14257     09EA  00DA               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 14258                           
 14259                           ;usb/usb_device.c: 1436:             if(controlTransferState == 2)
 14260     09EB  3002               	movlw	2
 14261     09EC  0020               	movlb	0	; select bank0
 14262     09ED  066A               	xorwf	_controlTransferState,w	;volatile
 14263     09EE  1D03               	btfss	3,2
 14264     09EF  2A02               	goto	i1l4212
 14265                           
 14266                           ;usb/usb_device.c: 1437:             {;usb/usb_device.c: 1438:                 pBDTEntry
      +                          In[0]->CNT = 0;
 14267     09F0  0863               	movf	_pBDTEntryIn,w
 14268     09F1  0086               	movwf	6
 14269     09F2  0864               	movf	_pBDTEntryIn+1,w
 14270     09F3  0087               	movwf	7
 14271     09F4  3141               	addfsr 1,1
 14272     09F5  0181               	clrf	1
 14273                           
 14274                           ;usb/usb_device.c: 1439:                 pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 14275     09F6  0863               	movf	_pBDTEntryIn,w
 14276     09F7  0086               	movwf	6
 14277     09F8  0864               	movf	_pBDTEntryIn+1,w
 14278     09F9  0087               	movwf	7
 14279     09FA  3048               	movlw	72
 14280     09FB  0081               	movwf	1
 14281                           
 14282                           ;usb/usb_device.c: 1440:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14283     09FC  0863               	movf	_pBDTEntryIn,w
 14284     09FD  0086               	movwf	6
 14285     09FE  0864               	movf	_pBDTEntryIn+1,w
 14286     09FF  0087               	movwf	7
 14287     0A00  1781               	bsf	1,7
 14288                           
 14289                           ;usb/usb_device.c: 1441:             }
 14290     0A01  0008               	return
 14291     0A02                     i1l4212:
 14292     0A02  036A               	decf	_controlTransferState,w	;volatile
 14293     0A03  1D03               	btfss	3,2
 14294     0A04  0008               	return
 14295                           
 14296                           ;usb/usb_device.c: 1443:             {;usb/usb_device.c: 1444:                 BothEP0Ou
      +                          tUOWNsSet = 0;
 14297     0A05  0022               	movlb	2	; select bank2
 14298     0A06  01DE               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 14299                           
 14300                           ;usb/usb_device.c: 1449:                     pBDTEntryEP0OutCurrent->CNT = 8;
 14301     0A07  0020               	movlb	0	; select bank0
 14302     0A08  0A6B               	incf	_pBDTEntryEP0OutCurrent,w
 14303     0A09  0086               	movwf	6
 14304     0A0A  0187               	clrf	7
 14305     0A0B  3008               	movlw	8
 14306     0A0C  0081               	movwf	1
 14307                           
 14308                           ;usb/usb_device.c: 1450:                     pBDTEntryEP0OutCurrent->ADR = (((uint16_t)(
      +                          &SetupPkt)) & 0x7FFF);
 14309     0A0D  3040               	movlw	64
 14310     0A0E  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14311     0A0F  3000               	movlw	0
 14312     0A10  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14313     0A11  30FF               	movlw	255
 14314     0A12  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 14315     0A13  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 14316     0A14  307F               	movlw	127
 14317     0A15  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 14318     0A16  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 14319     0A17  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14320     0A18  3E02               	addlw	2
 14321     0A19  0086               	movwf	6
 14322     0A1A  0187               	clrf	7
 14323     0A1B  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 14324     0A1C  3FC0               	movwi [0]fsr1
 14325     0A1D  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 14326     0A1E  3FC1               	movwi [1]fsr1
 14327                           
 14328                           ;usb/usb_device.c: 1451:                     pBDTEntryEP0OutCurrent->STAT.Val = 0x04;
 14329     0A1F  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14330     0A20  0086               	movwf	6
 14331     0A21  0187               	clrf	7
 14332     0A22  3004               	movlw	4
 14333     0A23  0081               	movwf	1
 14334                           
 14335                           ;usb/usb_device.c: 1452:                     pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 14336     0A24  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14337     0A25  0086               	movwf	6
 14338     0A26  0187               	clrf	7
 14339     0A27  1781               	bsf	1,7
 14340                           
 14341                           ;usb/usb_device.c: 1453:                     BothEP0OutUOWNsSet = 1;
 14342     0A28  3001               	movlw	1
 14343     0A29  0022               	movlb	2	; select bank2
 14344     0A2A  00DE               	movwf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 14345                           
 14346                           ;usb/usb_device.c: 1457:                 pBDTEntryEP0OutNext->CNT = 8;
 14347     0A2B  0020               	movlb	0	; select bank0
 14348     0A2C  0867               	movf	_pBDTEntryEP0OutNext,w
 14349     0A2D  3E01               	addlw	1
 14350     0A2E  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14351     0A2F  3000               	movlw	0
 14352     0A30  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 14353     0A31  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14354     0A32  0870               	movf	??_USBCtrlEPAllowStatusStage,w
 14355     0A33  0086               	movwf	6
 14356     0A34  0871               	movf	??_USBCtrlEPAllowStatusStage+1,w
 14357     0A35  0087               	movwf	7
 14358     0A36  3008               	movlw	8
 14359     0A37  0081               	movwf	1
 14360                           
 14361                           ;usb/usb_device.c: 1458:                 pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupP
      +                          kt)) & 0x7FFF);
 14362     0A38  3040               	movlw	64
 14363     0A39  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14364     0A3A  3000               	movlw	0
 14365     0A3B  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14366     0A3C  30FF               	movlw	255
 14367     0A3D  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 14368     0A3E  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 14369     0A3F  307F               	movlw	127
 14370     0A40  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 14371     0A41  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 14372     0A42  0867               	movf	_pBDTEntryEP0OutNext,w
 14373     0A43  0086               	movwf	6
 14374     0A44  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14375     0A45  0087               	movwf	7
 14376     0A46  3142               	addfsr 1,2
 14377     0A47  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 14378     0A48  3FC0               	movwi [0]fsr1
 14379     0A49  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 14380     0A4A  3FC1               	movwi [1]fsr1
 14381                           
 14382                           ;usb/usb_device.c: 1459:                 pBDTEntryEP0OutNext->STAT.Val = 0x80;
 14383     0A4B  0867               	movf	_pBDTEntryEP0OutNext,w
 14384     0A4C  0086               	movwf	6
 14385     0A4D  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14386     0A4E  0087               	movwf	7
 14387     0A4F  3080               	movlw	128
 14388     0A50  0081               	movwf	1
 14389     0A51  0008               	return
 14390     0A52                     __end_of_USBCtrlEPAllowStatusStage:	
 14391                           ;usb/usb_device.c: 1461:         }
 14392                           
 14393                           
 14394                           	psect	text76
 14395     0AC6                     __ptext76:	
 14396 ;; *************** function _USBCtrlTrfInHandler *****************
 14397 ;; Defined at:
 14398 ;;		line 2599 in file "usb/usb_device.c"
 14399 ;; Parameters:    Size  Location     Type
 14400 ;;		None
 14401 ;; Auto vars:     Size  Location     Type
 14402 ;;  lastDTS         1    7[COMMON] unsigned char 
 14403 ;; Return value:  Size  Location     Type
 14404 ;;                  1    wreg      void 
 14405 ;; Registers used:
 14406 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14407 ;; Tracked objects:
 14408 ;;		On entry : 1F/0
 14409 ;;		On exit  : 1F/0
 14410 ;;		Unchanged: 0/0
 14411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14413 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14414 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14415 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14416 ;;Total ram usage:        5 bytes
 14417 ;; Hardware stack levels used: 1
 14418 ;; Hardware stack levels required when called: 3
 14419 ;; This function calls:
 14420 ;;		_USBCtrlTrfTxService
 14421 ;;		_USBHIDCBSetReportComplete
 14422 ;; This function is called by:
 14423 ;;		_USBCtrlEPService
 14424 ;; This function uses a non-reentrant model
 14425 ;;
 14426                           
 14427     0AC6                     _USBCtrlTrfInHandler:	
 14428                           ;psect for function _USBCtrlTrfInHandler
 14429                           
 14430                           
 14431                           ;usb/usb_device.c: 2601:     uint8_t lastDTS;;usb/usb_device.c: 2603:     lastDTS = pBDT
      +                          EntryIn[0]->STAT.DTS;
 14432                           
 14433                           ;incstack = 0
 14434                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14435     0AC6  0863               	movf	_pBDTEntryIn,w
 14436     0AC7  0086               	movwf	6
 14437     0AC8  0864               	movf	_pBDTEntryIn+1,w
 14438     0AC9  0087               	movwf	7
 14439     0ACA  3000               	movlw	0
 14440     0ACB  1B01               	btfsc	1,6
 14441     0ACC  3001               	movlw	1
 14442     0ACD  00F7               	movwf	USBCtrlTrfInHandler@lastDTS
 14443                           
 14444                           ;usb/usb_device.c: 2606:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 14445     0ACE  3004               	movlw	4
 14446     0ACF  0663               	xorwf	_pBDTEntryIn,w
 14447     0AD0  00E3               	movwf	_pBDTEntryIn
 14448     0AD1  3000               	movlw	0
 14449     0AD2  0664               	xorwf	_pBDTEntryIn+1,w
 14450     0AD3  00E4               	movwf	_pBDTEntryIn+1
 14451                           
 14452                           ;usb/usb_device.c: 2611:     if(USBDeviceState == ADR_PENDING_STATE)
 14453     0AD4  3008               	movlw	8
 14454     0AD5  066C               	xorwf	_USBDeviceState,w
 14455     0AD6  1D03               	btfss	3,2
 14456     0AD7  2AE4               	goto	i1l4860
 14457                           
 14458                           ;usb/usb_device.c: 2612:     {;usb/usb_device.c: 2613:         UADDR = (SetupPkt.bDevADR
      +                           & 0x7F);
 14459     0AD8  0842               	movf	66,w	;volatile
 14460     0AD9  397F               	andlw	127
 14461     0ADA  003D               	movlb	29	; select bank29
 14462     0ADB  0096               	movwf	22	;volatile
 14463                           
 14464                           ;usb/usb_device.c: 2614:         if(UADDR != 0u)
 14465     0ADC  0816               	movf	22,w
 14466     0ADD  1903               	btfsc	3,2
 14467     0ADE  2AE1               	goto	i1l4858
 14468                           
 14469                           ;usb/usb_device.c: 2615:         {;usb/usb_device.c: 2616:             USBDeviceState=AD
      +                          DRESS_STATE;
 14470     0ADF  3010               	movlw	16
 14471     0AE0  2AE2               	goto	L16
 14472     0AE1                     i1l4858:	
 14473                           ;usb/usb_device.c: 2617:         }
 14474                           
 14475                           
 14476                           ;usb/usb_device.c: 2619:         {;usb/usb_device.c: 2620:             USBDeviceState=DE
      +                          FAULT_STATE;
 14477     0AE1  3004               	movlw	4
 14478     0AE2                     L16:
 14479     0AE2  0020               	movlb	0	; select bank0
 14480     0AE3  00EC               	movwf	_USBDeviceState	;volatile
 14481     0AE4                     i1l4860:
 14482                           
 14483                           ;usb/usb_device.c: 2625:     if(controlTransferState == 1)
 14484     0AE4  036A               	decf	_controlTransferState,w	;volatile
 14485     0AE5  1D03               	btfss	3,2
 14486     0AE6  2B2C               	goto	i1l630
 14487                           
 14488                           ;usb/usb_device.c: 2626:     {;usb/usb_device.c: 2627:         pBDTEntryIn[0]->ADR = (((
      +                          uint16_t)(CtrlTrfData)) & 0x7FFF);
 14489     0AE7  3048               	movlw	72
 14490     0AE8  00F3               	movwf	??_USBCtrlTrfInHandler
 14491     0AE9  3000               	movlw	0
 14492     0AEA  00F4               	movwf	??_USBCtrlTrfInHandler+1
 14493     0AEB  30FF               	movlw	255
 14494     0AEC  0573               	andwf	??_USBCtrlTrfInHandler,w
 14495     0AED  00F5               	movwf	??_USBCtrlTrfInHandler+2
 14496     0AEE  307F               	movlw	127
 14497     0AEF  0574               	andwf	??_USBCtrlTrfInHandler+1,w
 14498     0AF0  00F6               	movwf	??_USBCtrlTrfInHandler+3
 14499     0AF1  0863               	movf	_pBDTEntryIn,w
 14500     0AF2  0086               	movwf	6
 14501     0AF3  0864               	movf	_pBDTEntryIn+1,w
 14502     0AF4  0087               	movwf	7
 14503     0AF5  3142               	addfsr 1,2
 14504     0AF6  0875               	movf	??_USBCtrlTrfInHandler+2,w
 14505     0AF7  3FC0               	movwi [0]fsr1
 14506     0AF8  0876               	movf	??_USBCtrlTrfInHandler+3,w
 14507     0AF9  3FC1               	movwi [1]fsr1
 14508                           
 14509                           ;usb/usb_device.c: 2628:         USBCtrlTrfTxService();
 14510     0AFA  3196  26CA  318A   	fcall	_USBCtrlTrfTxService
 14511                           
 14512                           ;usb/usb_device.c: 2634:         if(shortPacketStatus == 2)
 14513     0AFD  3002               	movlw	2
 14514     0AFE  0022               	movlb	2	; select bank2
 14515     0AFF  0663               	xorwf	_shortPacketStatus^(0+256),w	;volatile
 14516     0B00  1D03               	btfss	3,2
 14517     0B01  2B0F               	goto	i1l4870
 14518                           
 14519                           ;usb/usb_device.c: 2635:         {;usb/usb_device.c: 2638:             pBDTEntryIn[0]->S
      +                          TAT.Val = 0x04;
 14520     0B02  0020               	movlb	0	; select bank0
 14521     0B03  0863               	movf	_pBDTEntryIn,w
 14522     0B04  0086               	movwf	6
 14523     0B05  0864               	movf	_pBDTEntryIn+1,w
 14524     0B06  0087               	movwf	7
 14525     0B07  3004               	movlw	4
 14526     0B08  0081               	movwf	1
 14527                           
 14528                           ;usb/usb_device.c: 2639:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 14529     0B09  0863               	movf	_pBDTEntryIn,w
 14530     0B0A  0086               	movwf	6
 14531     0B0B  0864               	movf	_pBDTEntryIn+1,w
 14532     0B0C  0087               	movwf	7
 14533     0B0D  1781               	bsf	1,7
 14534                           
 14535                           ;usb/usb_device.c: 2640:         }
 14536     0B0E  0008               	return
 14537     0B0F                     i1l4870:
 14538                           
 14539                           ;usb/usb_device.c: 2642:         {;usb/usb_device.c: 2643:             if(lastDTS == 0)
 14540     0B0F  0877               	movf	USBCtrlTrfInHandler@lastDTS,w
 14541     0B10  1D03               	btfss	3,2
 14542     0B11  2B1F               	goto	i1l4874
 14543                           
 14544                           ;usb/usb_device.c: 2644:             {;usb/usb_device.c: 2645:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x40|(0x08 & 0x08);
 14545     0B12  0020               	movlb	0	; select bank0
 14546     0B13  0863               	movf	_pBDTEntryIn,w
 14547     0B14  0086               	movwf	6
 14548     0B15  0864               	movf	_pBDTEntryIn+1,w
 14549     0B16  0087               	movwf	7
 14550     0B17  3048               	movlw	72
 14551     0B18  0081               	movwf	1
 14552                           
 14553                           ;usb/usb_device.c: 2646:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14554     0B19  0863               	movf	_pBDTEntryIn,w
 14555     0B1A  0086               	movwf	6
 14556     0B1B  0864               	movf	_pBDTEntryIn+1,w
 14557     0B1C  0087               	movwf	7
 14558     0B1D  1781               	bsf	1,7
 14559                           
 14560                           ;usb/usb_device.c: 2647:             }
 14561     0B1E  0008               	return
 14562     0B1F                     i1l4874:
 14563                           
 14564                           ;usb/usb_device.c: 2649:             {;usb/usb_device.c: 2650:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x00|(0x08 & 0x08);
 14565     0B1F  0020               	movlb	0	; select bank0
 14566     0B20  0863               	movf	_pBDTEntryIn,w
 14567     0B21  0086               	movwf	6
 14568     0B22  0864               	movf	_pBDTEntryIn+1,w
 14569     0B23  0087               	movwf	7
 14570     0B24  3008               	movlw	8
 14571     0B25  0081               	movwf	1
 14572                           
 14573                           ;usb/usb_device.c: 2651:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14574     0B26  0863               	movf	_pBDTEntryIn,w
 14575     0B27  0086               	movwf	6
 14576     0B28  0864               	movf	_pBDTEntryIn+1,w
 14577     0B29  0087               	movwf	7
 14578     0B2A  1781               	bsf	1,7
 14579     0B2B  0008               	return
 14580     0B2C                     i1l630:	
 14581                           ;usb/usb_device.c: 2655:  else
 14582                           
 14583                           
 14584                           ;usb/usb_device.c: 2656:  {;usb/usb_device.c: 2660:         if(outPipes[0].info.bits.bus
      +                          y == 1)
 14585     0B2C  0022               	movlb	2	; select bank2
 14586     0B2D  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 14587     0B2E  2B3E               	goto	i1l4882
 14588                           
 14589                           ;usb/usb_device.c: 2661:         {;usb/usb_device.c: 2662:             if(outPipes[0].pF
      +                          unc != ((void*)0))
 14590     0B2F  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 14591     0B30  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 14592     0B31  1903               	btfsc	3,2
 14593     0B32  2B3D               	goto	i1l4880
 14594                           
 14595                           ;usb/usb_device.c: 2663:             {;usb/usb_device.c: 2664:                 outPipes[
      +                          0].pFunc();
 14596     0B33  3005               	movlw	5
 14597     0B34  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 14598     0B35  0086               	movwf	6
 14599     0B36  3001               	movlw	1	; select bank2/3
 14600     0B37  0087               	movwf	7
 14601     0B38  3F41               	moviw [1]fsr1
 14602     0B39  008A               	movwf	10
 14603     0B3A  3F40               	moviw [0]fsr1
 14604     0B3B  000A               	callw
 14605     0B3C  318A               	pagesel	$
 14606     0B3D                     i1l4880:
 14607                           
 14608                           ;usb/usb_device.c: 2666:             outPipes[0].info.bits.busy = 0;
 14609     0B3D  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 14610     0B3E                     i1l4882:
 14611                           
 14612                           ;usb/usb_device.c: 2669:         controlTransferState = 0;
 14613     0B3E  0020               	movlb	0	; select bank0
 14614     0B3F  01EA               	clrf	_controlTransferState	;volatile
 14615     0B40  0008               	return
 14616     0B41                     __end_of_USBCtrlTrfInHandler:
 14617                           
 14618                           	psect	text77
 14619     1E4A                     __ptext77:	
 14620 ;; *************** function _USBHIDCBSetReportComplete *****************
 14621 ;; Defined at:
 14622 ;;		line 546 in file "app_device_keyboard.c"
 14623 ;; Parameters:    Size  Location     Type
 14624 ;;		None
 14625 ;; Auto vars:     Size  Location     Type
 14626 ;;		None
 14627 ;; Return value:  Size  Location     Type
 14628 ;;                  1    wreg      void 
 14629 ;; Registers used:
 14630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14631 ;; Tracked objects:
 14632 ;;		On entry : 1F/2
 14633 ;;		On exit  : 1F/2
 14634 ;;		Unchanged: 0/0
 14635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14640 ;;Total ram usage:        0 bytes
 14641 ;; Hardware stack levels used: 1
 14642 ;; Hardware stack levels required when called: 2
 14643 ;; This function calls:
 14644 ;;		i1_APP_KeyboardProcessOutputReport
 14645 ;; This function is called by:
 14646 ;;		_USBHIDCBSetReportHandler
 14647 ;;		_USBCtrlTrfRxService
 14648 ;;		_USBCtrlTrfInHandler
 14649 ;; This function uses a non-reentrant model
 14650 ;;
 14651                           
 14652     1E4A                     _USBHIDCBSetReportComplete:	
 14653                           ;psect for function _USBHIDCBSetReportComplete
 14654                           
 14655                           
 14656                           ;app_device_keyboard.c: 549:     outputReport.value = CtrlTrfData[0];
 14657                           
 14658                           ;incstack = 0
 14659                           ; Regs used in _USBHIDCBSetReportComplete: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 14660     1E4A  0020               	movlb	0	; select bank0
 14661     1E4B  0848               	movf	72,w	;volatile
 14662     1E4C  0022               	movlb	2	; select bank2
 14663     1E4D  00A0               	movwf	32	;volatile
 14664                           
 14665                           ;app_device_keyboard.c: 552:     APP_KeyboardProcessOutputReport();
 14666     1E4E  319E  26A3         	fcall	i1_APP_KeyboardProcessOutputReport
 14667     1E50  0008               	return
 14668     1E51                     __end_of_USBHIDCBSetReportComplete:
 14669                           
 14670                           	psect	text78
 14671     1EA3                     __ptext78:	
 14672 ;; *************** function i1_APP_KeyboardProcessOutputReport *****************
 14673 ;; Defined at:
 14674 ;;		line 541 in file "app_device_keyboard.c"
 14675 ;; Parameters:    Size  Location     Type
 14676 ;;		None
 14677 ;; Auto vars:     Size  Location     Type
 14678 ;;		None
 14679 ;; Return value:  Size  Location     Type
 14680 ;;                  1    wreg      void 
 14681 ;; Registers used:
 14682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14683 ;; Tracked objects:
 14684 ;;		On entry : 1F/2
 14685 ;;		On exit  : 1F/2
 14686 ;;		Unchanged: 0/0
 14687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14692 ;;Total ram usage:        0 bytes
 14693 ;; Hardware stack levels used: 1
 14694 ;; Hardware stack levels required when called: 1
 14695 ;; This function calls:
 14696 ;;		i1_PS2Keyboard_SendCommand
 14697 ;; This function is called by:
 14698 ;;		_USBHIDCBSetReportComplete
 14699 ;; This function uses a non-reentrant model
 14700 ;;
 14701                           
 14702     1EA3                     i1_APP_KeyboardProcessOutputReport:	
 14703                           ;psect for function i1_APP_KeyboardProcessOutputReport
 14704                           
 14705                           
 14706                           ;app_device_keyboard.c: 542:     keyboard.leds.value = outputReport.value;
 14707                           
 14708                           ;incstack = 0
 14709                           ; Regs used in i1_APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+p
      +                          clath+cstack]
 14710     1EA3  3090               	movlw	144
 14711     1EA4  0086               	movwf	6
 14712     1EA5  3023               	movlw	35
 14713     1EA6  0087               	movwf	7
 14714     1EA7  0820               	movf	32,w	;volatile
 14715     1EA8  0081               	movwf	1
 14716                           
 14717                           ;app_device_keyboard.c: 543:     PS2Keyboard_SendCommand(0xED);
 14718     1EA9  30ED               	movlw	237
 14719     1EAA  3190  20CB         	fcall	i1_PS2Keyboard_SendCommand
 14720     1EAC  0008               	return
 14721     1EAD                     __end_ofi1_APP_KeyboardProcessOutputReport:
 14722                           
 14723                           	psect	text79
 14724     10CB                     __ptext79:	
 14725 ;; *************** function i1_PS2Keyboard_SendCommand *****************
 14726 ;; Defined at:
 14727 ;;		line 60 in file "ps2_keyboard.c"
 14728 ;; Parameters:    Size  Location     Type
 14729 ;;  cmd             1    wreg     unsigned char 
 14730 ;; Auto vars:     Size  Location     Type
 14731 ;;  cmd             1    0[COMMON] unsigned char 
 14732 ;; Return value:  Size  Location     Type
 14733 ;;                  1    wreg      void 
 14734 ;; Registers used:
 14735 ;;		wreg, status,2
 14736 ;; Tracked objects:
 14737 ;;		On entry : 1F/2
 14738 ;;		On exit  : 1F/2
 14739 ;;		Unchanged: 0/0
 14740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14742 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14744 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14745 ;;Total ram usage:        1 bytes
 14746 ;; Hardware stack levels used: 1
 14747 ;; This function calls:
 14748 ;;		Nothing
 14749 ;; This function is called by:
 14750 ;;		i1_APP_KeyboardProcessOutputReport
 14751 ;; This function uses a non-reentrant model
 14752 ;;
 14753                           
 14754     10CB                     i1_PS2Keyboard_SendCommand:	
 14755                           ;psect for function i1_PS2Keyboard_SendCommand
 14756                           
 14757                           
 14758                           ;incstack = 0
 14759                           ; Regs used in i1_PS2Keyboard_SendCommand: [wreg+status,2]
 14760                           ;i1PS2Keyboard_SendCommand@cmd stored from wreg
 14761     10CB  00F0               	movwf	i1PS2Keyboard_SendCommand@cmd
 14762                           
 14763                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
 14764     10CC  0870               	movf	i1PS2Keyboard_SendCommand@cmd,w
 14765     10CD  00CE               	movwf	_keyboardCommand^(0+256)	;volatile
 14766                           
 14767                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
 14768     10CE  138B               	bcf	11,7	;volatile
 14769     10CF  0021               	movlb	1	; select bank1
 14770     10D0  120C               	bcf	12,4	;volatile
 14771     10D1  0022               	movlb	2	; select bank2
 14772     10D2  120C               	bcf	12,4	;volatile
 14773                           
 14774                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 14775     10D3  30F0               	movlw	240
 14776     10D4                     u673_27:
 14777     10D4  3200               	nop2
 14778     10D5  0B89               	decfsz	9,f
 14779     10D6  28D4               	goto	u673_27
 14780     10D7  0021               	movlb	1	; select bank1
 14781     10D8  160C               	bsf	12,4	;volatile
 14782                           
 14783                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
 14784     10D9  0020               	movlb	0	; select bank0
 14785     10DA  01E9               	clrf	_keyboardCommandCount	;volatile
 14786                           
 14787                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
 14788     10DB  300C               	movlw	12
 14789     10DC  0022               	movlb	2	; select bank2
 14790     10DD  00CD               	movwf	_keyboardCommandBits^(0+256)	;volatile
 14791                           
 14792                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
 14793     10DE  01CC               	clrf	_keyboardCommandOnes^(0+256)	;volatile
 14794     10DF  0021               	movlb	1	; select bank1
 14795     10E0  128C               	bcf	12,5	;volatile
 14796     10E1  0022               	movlb	2	; select bank2
 14797     10E2  128C               	bcf	12,5	;volatile
 14798                           
 14799                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
 14800     10E3  178B               	bsf	11,7	;volatile
 14801     10E4  0008               	return
 14802     10E5                     __end_ofi1_PS2Keyboard_SendCommand:
 14803                           
 14804                           	psect	text80
 14805     16CA                     __ptext80:	
 14806 ;; *************** function _USBCtrlTrfTxService *****************
 14807 ;; Defined at:
 14808 ;;		line 1775 in file "usb/usb_device.c"
 14809 ;; Parameters:    Size  Location     Type
 14810 ;;		None
 14811 ;; Auto vars:     Size  Location     Type
 14812 ;;  byteToSend      1    2[COMMON] unsigned char 
 14813 ;; Return value:  Size  Location     Type
 14814 ;;                  1    wreg      void 
 14815 ;; Registers used:
 14816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 14817 ;; Tracked objects:
 14818 ;;		On entry : 1E/0
 14819 ;;		On exit  : 1C/0
 14820 ;;		Unchanged: 0/0
 14821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14825 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14826 ;;Total ram usage:        3 bytes
 14827 ;; Hardware stack levels used: 1
 14828 ;; This function calls:
 14829 ;;		Nothing
 14830 ;; This function is called by:
 14831 ;;		_USBCtrlEPAllowDataStage
 14832 ;;		_USBCtrlTrfInHandler
 14833 ;; This function uses a non-reentrant model
 14834 ;;
 14835                           
 14836     16CA                     _USBCtrlTrfTxService:	
 14837                           ;psect for function _USBCtrlTrfTxService
 14838                           
 14839                           
 14840                           ;usb/usb_device.c: 1777:     uint8_t byteToSend;;usb/usb_device.c: 1781:     byteToSend 
      +                          = 8;
 14841                           
 14842                           ;incstack = 0
 14843                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 14844     16CA  3008               	movlw	8
 14845     16CB  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 14846                           
 14847                           ;usb/usb_device.c: 1782:     if(inPipes[0].wCount.Val < (uint8_t)8)
 14848     16CC  3000               	movlw	0
 14849     16CD  0021               	movlb	1	; select bank1
 14850     16CE  026D               	subwf	((_inPipes+1)^(0+128)+3),w	;volatile
 14851     16CF  3008               	movlw	8
 14852     16D0  1903               	skipnz
 14853     16D1  026C               	subwf	(_inPipes^(0+128)+3),w	;volatile
 14854     16D2  1803               	skipnc
 14855     16D3  2EE1               	goto	i1l529
 14856                           
 14857                           ;usb/usb_device.c: 1783:     {;usb/usb_device.c: 1784:         byteToSend = inPipes[0].w
      +                          Count.Val;
 14858     16D4  086C               	movf	(_inPipes^(0+128)+3),w	;volatile
 14859     16D5  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 14860                           
 14861                           ;usb/usb_device.c: 1791:         if(shortPacketStatus == 0)
 14862     16D6  0022               	movlb	2	; select bank2
 14863     16D7  0863               	movf	_shortPacketStatus^(0+256),w	;volatile
 14864     16D8  1D03               	btfss	3,2
 14865     16D9  2EDC               	goto	i1l4152
 14866                           
 14867                           ;usb/usb_device.c: 1792:         {;usb/usb_device.c: 1793:             shortPacketStatus
      +                           = 1;
 14868     16DA  3001               	movlw	1
 14869     16DB  2EE0               	goto	L17
 14870     16DC                     i1l4152:	
 14871                           ;usb/usb_device.c: 1794:         }
 14872                           
 14873     16DC  0363               	decf	_shortPacketStatus^(0+256),w	;volatile
 14874     16DD  1D03               	btfss	3,2
 14875     16DE  2EE1               	goto	i1l529
 14876                           
 14877                           ;usb/usb_device.c: 1796:         {;usb/usb_device.c: 1797:             shortPacketStatus
      +                           = 2;
 14878     16DF  3002               	movlw	2
 14879     16E0                     L17:
 14880     16E0  00E3               	movwf	_shortPacketStatus^(0+256)	;volatile
 14881     16E1                     i1l529:	
 14882                           ;usb/usb_device.c: 1799:     }
 14883                           
 14884                           
 14885                           ;usb/usb_device.c: 1803:     inPipes[0].wCount.Val -= byteToSend;
 14886     16E1  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14887     16E2  00F0               	movwf	??_USBCtrlTrfTxService
 14888     16E3  01F1               	clrf	??_USBCtrlTrfTxService+1
 14889     16E4  0870               	movf	??_USBCtrlTrfTxService,w
 14890     16E5  0021               	movlb	1	; select bank1
 14891     16E6  02EC               	subwf	(_inPipes^(0+128)+3),f	;volatile
 14892     16E7  0871               	movf	??_USBCtrlTrfTxService+1,w
 14893     16E8  3BED               	subwfb	((_inPipes+1)^(0+128)+3),f	;volatile
 14894                           
 14895                           ;usb/usb_device.c: 1808:     pBDTEntryIn[0]->CNT = byteToSend;
 14896     16E9  0020               	movlb	0	; select bank0
 14897     16EA  0863               	movf	_pBDTEntryIn,w
 14898     16EB  3E01               	addlw	1
 14899     16EC  00F0               	movwf	??_USBCtrlTrfTxService
 14900     16ED  3000               	movlw	0
 14901     16EE  3D64               	addwfc	_pBDTEntryIn+1,w
 14902     16EF  00F1               	movwf	??_USBCtrlTrfTxService+1
 14903     16F0  0870               	movf	??_USBCtrlTrfTxService,w
 14904     16F1  0086               	movwf	6
 14905     16F2  0871               	movf	??_USBCtrlTrfTxService+1,w
 14906     16F3  0087               	movwf	7
 14907     16F4  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14908     16F5  0081               	movwf	1
 14909                           
 14910                           ;usb/usb_device.c: 1812:     pDst = (volatile uint8_t*)CtrlTrfData;
 14911     16F6  3048               	movlw	72
 14912     16F7  0022               	movlb	2	; select bank2
 14913     16F8  00E2               	movwf	_pDst^(0+256)
 14914                           
 14915                           ;usb/usb_device.c: 1813:     if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 14916     16F9  0021               	movlb	1	; select bank1
 14917     16FA  1C6B               	btfss	(_inPipes^(0+128)+2),0	;volatile
 14918     16FB  2F13               	goto	i1l4172
 14919     16FC  2F2D               	goto	i1l4182
 14920     16FD                     i1l4164:
 14921                           
 14922                           ;usb/usb_device.c: 1816:         {;usb/usb_device.c: 1817:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRom++;
 14923     16FD  0022               	movlb	2	; select bank2
 14924     16FE  0862               	movf	_pDst^(0+256),w
 14925     16FF  0086               	movwf	6
 14926     1700  0187               	clrf	7
 14927     1701  0021               	movlb	1	; select bank1
 14928     1702  0869               	movf	_inPipes^(0+128),w	;volatile
 14929     1703  0084               	movwf	4
 14930     1704  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 14931     1705  0085               	movwf	5
 14932     1706  0800               	movf	0,w	;code access
 14933     1707  0081               	movwf	1
 14934     1708  3001               	movlw	1
 14935     1709  07E9               	addwf	_inPipes^(0+128),f	;volatile
 14936     170A  3000               	movlw	0
 14937     170B  3DEA               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 14938     170C  3001               	movlw	1
 14939     170D  00F0               	movwf	??_USBCtrlTrfTxService
 14940     170E  0870               	movf	??_USBCtrlTrfTxService,w
 14941     170F  0022               	movlb	2	; select bank2
 14942     1710  07E2               	addwf	_pDst^(0+256),f
 14943                           
 14944                           ;usb/usb_device.c: 1818:             byteToSend--;
 14945     1711  3001               	movlw	1
 14946     1712  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 14947     1713                     i1l4172:
 14948                           
 14949                           ;usb/usb_device.c: 1815:         while(byteToSend)
 14950     1713  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14951     1714  1903               	btfsc	3,2
 14952     1715  0008               	return
 14953     1716  2EFD               	goto	i1l4164
 14954     1717                     i1l4174:
 14955                           
 14956                           ;usb/usb_device.c: 1824:         {;usb/usb_device.c: 1825:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRam++;
 14957     1717  0022               	movlb	2	; select bank2
 14958     1718  0862               	movf	_pDst^(0+256),w
 14959     1719  0086               	movwf	6
 14960     171A  0187               	clrf	7
 14961     171B  0021               	movlb	1	; select bank1
 14962     171C  0869               	movf	_inPipes^(0+128),w	;volatile
 14963     171D  0084               	movwf	4
 14964     171E  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 14965     171F  0085               	movwf	5
 14966     1720  0800               	movf	0,w	;code access
 14967     1721  0081               	movwf	1
 14968     1722  3001               	movlw	1
 14969     1723  07E9               	addwf	_inPipes^(0+128),f	;volatile
 14970     1724  3000               	movlw	0
 14971     1725  3DEA               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 14972     1726  3001               	movlw	1
 14973     1727  00F0               	movwf	??_USBCtrlTrfTxService
 14974     1728  0870               	movf	??_USBCtrlTrfTxService,w
 14975     1729  0022               	movlb	2	; select bank2
 14976     172A  07E2               	addwf	_pDst^(0+256),f
 14977                           
 14978                           ;usb/usb_device.c: 1826:             byteToSend--;
 14979     172B  3001               	movlw	1
 14980     172C  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 14981     172D                     i1l4182:
 14982                           
 14983                           ;usb/usb_device.c: 1823:         while(byteToSend)
 14984     172D  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14985     172E  1903               	btfsc	3,2
 14986     172F  0008               	return
 14987     1730  2F17               	goto	i1l4174
 14988     1731                     __end_of_USBCtrlTrfTxService:
 14989                           
 14990                           	psect	text81
 14991     1ECE                     __ptext81:	
 14992 ;; *************** function _TMR2_ISR *****************
 14993 ;; Defined at:
 14994 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 14995 ;; Parameters:    Size  Location     Type
 14996 ;;		None
 14997 ;; Auto vars:     Size  Location     Type
 14998 ;;		None
 14999 ;; Return value:  Size  Location     Type
 15000 ;;                  1    wreg      void 
 15001 ;; Registers used:
 15002 ;;		wreg, status,2, status,0, pclath, cstack
 15003 ;; Tracked objects:
 15004 ;;		On entry : 1F/0
 15005 ;;		On exit  : 0/0
 15006 ;;		Unchanged: 0/0
 15007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;Total ram usage:        0 bytes
 15013 ;; Hardware stack levels used: 1
 15014 ;; Hardware stack levels required when called: 1
 15015 ;; This function calls:
 15016 ;;		NULL
 15017 ;;		_SysTimeInterrupt
 15018 ;;		_TMR2_DefaultInterruptHandler
 15019 ;; This function is called by:
 15020 ;;		_INTERRUPT_InterruptManager
 15021 ;; This function uses a non-reentrant model
 15022 ;;
 15023                           
 15024     1ECE                     _TMR2_ISR:	
 15025                           ;psect for function _TMR2_ISR
 15026                           
 15027                           
 15028                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 15029                           
 15030                           ;incstack = 0
 15031                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 15032     1ECE  1091               	bcf	17,1	;volatile
 15033                           
 15034                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
 15035     1ECF  0022               	movlb	2	; select bank2
 15036     1ED0  0846               	movf	_TMR2_InterruptHandler^(0+256),w
 15037     1ED1  0447               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 15038     1ED2  1903               	btfsc	3,2
 15039     1ED3  0008               	return
 15040                           
 15041                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
 15042     1ED4  0847               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 15043     1ED5  008A               	movwf	10
 15044     1ED6  0846               	movf	_TMR2_InterruptHandler^(0+256),w
 15045     1ED7  000A               	callw
 15046     1ED8  319E               	pagesel	$
 15047     1ED9  0008               	return
 15048     1EDA                     __end_of_TMR2_ISR:
 15049                           
 15050                           	psect	text82
 15051     1E9A                     __ptext82:	
 15052 ;; *************** function _SysTimeInterrupt *****************
 15053 ;; Defined at:
 15054 ;;		line 24 in file "systime.c"
 15055 ;; Parameters:    Size  Location     Type
 15056 ;;		None
 15057 ;; Auto vars:     Size  Location     Type
 15058 ;;		None
 15059 ;; Return value:  Size  Location     Type
 15060 ;;                  1    wreg      void 
 15061 ;; Registers used:
 15062 ;;		wreg
 15063 ;; Tracked objects:
 15064 ;;		On entry : 1F/2
 15065 ;;		On exit  : 1F/2
 15066 ;;		Unchanged: 0/0
 15067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15072 ;;Total ram usage:        0 bytes
 15073 ;; Hardware stack levels used: 1
 15074 ;; This function calls:
 15075 ;;		Nothing
 15076 ;; This function is called by:
 15077 ;;		_SysTime_Init
 15078 ;;		_TMR2_ISR
 15079 ;; This function uses a non-reentrant model
 15080 ;;
 15081                           
 15082     1E9A                     _SysTimeInterrupt:	
 15083                           ;psect for function _SysTimeInterrupt
 15084                           
 15085                           
 15086                           ;systime.c: 26:     ++timeMs;
 15087                           
 15088                           ;incstack = 0
 15089                           ; Regs used in _SysTimeInterrupt: [wreg]
 15090     1E9A  3001               	movlw	1
 15091     1E9B  07A8               	addwf	_timeMs^(0+256),f
 15092     1E9C  3000               	movlw	0
 15093     1E9D  3DA9               	addwfc	(_timeMs+1)^(0+256),f
 15094     1E9E  3000               	movlw	0
 15095     1E9F  3DAA               	addwfc	(_timeMs+2)^(0+256),f
 15096     1EA0  3000               	movlw	0
 15097     1EA1  3DAB               	addwfc	(_timeMs+3)^(0+256),f
 15098     1EA2  0008               	return
 15099     1EA3                     __end_of_SysTimeInterrupt:
 15100                           
 15101                           	psect	text83
 15102     0003                     __ptext83:	
 15103 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 15104 ;; Defined at:
 15105 ;;		line 136 in file "mcc_generated_files/tmr2.c"
 15106 ;; Parameters:    Size  Location     Type
 15107 ;;		None
 15108 ;; Auto vars:     Size  Location     Type
 15109 ;;		None
 15110 ;; Return value:  Size  Location     Type
 15111 ;;                  1    wreg      void 
 15112 ;; Registers used:
 15113 ;;		None
 15114 ;; Tracked objects:
 15115 ;;		On entry : 1F/2
 15116 ;;		On exit  : 1F/2
 15117 ;;		Unchanged: 1F/0
 15118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15123 ;;Total ram usage:        0 bytes
 15124 ;; Hardware stack levels used: 1
 15125 ;; This function calls:
 15126 ;;		Nothing
 15127 ;; This function is called by:
 15128 ;;		_TMR2_Initialize
 15129 ;;		_TMR2_ISR
 15130 ;; This function uses a non-reentrant model
 15131 ;;
 15132                           
 15133     0003                     _TMR2_DefaultInterruptHandler:	
 15134                           ;psect for function _TMR2_DefaultInterruptHandler
 15135                           
 15136                           
 15137                           ;incstack = 0
 15138                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 15139     0003  0008               	return
 15140     0004                     __end_of_TMR2_DefaultInterruptHandler:
 15141                           
 15142                           	psect	text84
 15143     1EAD                     __ptext84:	
 15144 ;; *************** function _PIN_MANAGER_IOC *****************
 15145 ;; Defined at:
 15146 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 15147 ;; Parameters:    Size  Location     Type
 15148 ;;		None
 15149 ;; Auto vars:     Size  Location     Type
 15150 ;;		None
 15151 ;; Return value:  Size  Location     Type
 15152 ;;                  1    wreg      void 
 15153 ;; Registers used:
 15154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15155 ;; Tracked objects:
 15156 ;;		On entry : 0/0
 15157 ;;		On exit  : 1F/7
 15158 ;;		Unchanged: 0/0
 15159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15164 ;;Total ram usage:        0 bytes
 15165 ;; Hardware stack levels used: 1
 15166 ;; Hardware stack levels required when called: 4
 15167 ;; This function calls:
 15168 ;;		_IOCAF4_ISR
 15169 ;;		_IOCAF5_ISR
 15170 ;; This function is called by:
 15171 ;;		_INTERRUPT_InterruptManager
 15172 ;; This function uses a non-reentrant model
 15173 ;;
 15174                           
 15175     1EAD                     _PIN_MANAGER_IOC:	
 15176                           ;psect for function _PIN_MANAGER_IOC
 15177                           
 15178                           
 15179                           ;mcc_generated_files/pin_manager.c: 124:     if(IOCAFbits.IOCAF4 == 1)
 15180                           
 15181                           ;incstack = 0
 15182                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15183     1EAD  0027               	movlb	7	; select bank7
 15184     1EAE  1E13               	btfss	19,4	;volatile
 15185     1EAF  2EB3               	goto	i1l6366
 15186                           
 15187                           ;mcc_generated_files/pin_manager.c: 125:     {;mcc_generated_files/pin_manager.c: 126:  
      +                                 IOCAF4_ISR();
 15188     1EB0  319E  26E6  319E   	fcall	_IOCAF4_ISR
 15189     1EB3                     i1l6366:
 15190                           
 15191                           ;mcc_generated_files/pin_manager.c: 129:     if(IOCAFbits.IOCAF5 == 1)
 15192     1EB3  1E93               	btfss	19,5	;volatile
 15193     1EB4  0008               	return
 15194                           
 15195                           ;mcc_generated_files/pin_manager.c: 130:     {;mcc_generated_files/pin_manager.c: 131:  
      +                                 IOCAF5_ISR();
 15196     1EB5  319E  26F3         	fcall	_IOCAF5_ISR
 15197     1EB7  0008               	return
 15198     1EB8                     __end_of_PIN_MANAGER_IOC:
 15199                           
 15200                           	psect	text85
 15201     1EF3                     __ptext85:	
 15202 ;; *************** function _IOCAF5_ISR *****************
 15203 ;; Defined at:
 15204 ;;		line 168 in file "mcc_generated_files/pin_manager.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;		None
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;		None
 15209 ;; Return value:  Size  Location     Type
 15210 ;;                  1    wreg      void 
 15211 ;; Registers used:
 15212 ;;		wreg, status,2, status,0, pclath, cstack
 15213 ;; Tracked objects:
 15214 ;;		On entry : 1F/7
 15215 ;;		On exit  : 1F/7
 15216 ;;		Unchanged: 0/0
 15217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;Total ram usage:        0 bytes
 15223 ;; Hardware stack levels used: 1
 15224 ;; Hardware stack levels required when called: 2
 15225 ;; This function calls:
 15226 ;;		NULL
 15227 ;;		_IOCAF5_DefaultInterruptHandler
 15228 ;;		_PS2Keyboard_DataInterrupt
 15229 ;; This function is called by:
 15230 ;;		_PIN_MANAGER_IOC
 15231 ;; This function uses a non-reentrant model
 15232 ;;
 15233                           
 15234     1EF3                     _IOCAF5_ISR:	
 15235                           ;psect for function _IOCAF5_ISR
 15236                           
 15237                           
 15238                           ;mcc_generated_files/pin_manager.c: 173:     if(IOCAF5_InterruptHandler)
 15239                           
 15240                           ;incstack = 0
 15241                           ; Regs used in _IOCAF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 15242     1EF3  0023               	movlb	3	; select bank3
 15243     1EF4  084D               	movf	_IOCAF5_InterruptHandler^(0+384),w
 15244     1EF5  044E               	iorwf	(_IOCAF5_InterruptHandler+1)^(0+384),w
 15245     1EF6  1903               	btfsc	3,2
 15246     1EF7  2EFD               	goto	i1l5108
 15247                           
 15248                           ;mcc_generated_files/pin_manager.c: 174:     {;mcc_generated_files/pin_manager.c: 175:  
      +                                 IOCAF5_InterruptHandler();
 15249     1EF8  084E               	movf	(_IOCAF5_InterruptHandler+1)^(0+384),w
 15250     1EF9  008A               	movwf	10
 15251     1EFA  084D               	movf	_IOCAF5_InterruptHandler^(0+384),w
 15252     1EFB  000A               	callw
 15253     1EFC  319E               	pagesel	$
 15254     1EFD                     i1l5108:
 15255                           
 15256                           ;mcc_generated_files/pin_manager.c: 177:     IOCAFbits.IOCAF5 = 0;
 15257     1EFD  0027               	movlb	7	; select bank7
 15258     1EFE  1293               	bcf	19,5	;volatile
 15259     1EFF  0008               	return
 15260     1F00                     __end_of_IOCAF5_ISR:
 15261                           
 15262                           	psect	text86
 15263     0002                     __ptext86:	
 15264 ;; *************** function _IOCAF5_DefaultInterruptHandler *****************
 15265 ;; Defined at:
 15266 ;;		line 190 in file "mcc_generated_files/pin_manager.c"
 15267 ;; Parameters:    Size  Location     Type
 15268 ;;		None
 15269 ;; Auto vars:     Size  Location     Type
 15270 ;;		None
 15271 ;; Return value:  Size  Location     Type
 15272 ;;                  1    wreg      void 
 15273 ;; Registers used:
 15274 ;;		None
 15275 ;; Tracked objects:
 15276 ;;		On entry : 1F/3
 15277 ;;		On exit  : 1F/3
 15278 ;;		Unchanged: 1E/0
 15279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15284 ;;Total ram usage:        0 bytes
 15285 ;; Hardware stack levels used: 1
 15286 ;; This function calls:
 15287 ;;		Nothing
 15288 ;; This function is called by:
 15289 ;;		_PIN_MANAGER_Initialize
 15290 ;;		_IOCAF5_ISR
 15291 ;; This function uses a non-reentrant model
 15292 ;;
 15293                           
 15294     0002                     _IOCAF5_DefaultInterruptHandler:	
 15295                           ;psect for function _IOCAF5_DefaultInterruptHandler
 15296                           
 15297                           
 15298                           ;incstack = 0
 15299                           ; Regs used in _IOCAF5_DefaultInterruptHandler: []
 15300     0002  0008               	return
 15301     0003                     __end_of_IOCAF5_DefaultInterruptHandler:
 15302                           
 15303                           	psect	text87
 15304     1F27                     __ptext87:	
 15305 ;; *************** function _PS2Keyboard_DataInterrupt *****************
 15306 ;; Defined at:
 15307 ;;		line 79 in file "ps2_keyboard.c"
 15308 ;; Parameters:    Size  Location     Type
 15309 ;;		None
 15310 ;; Auto vars:     Size  Location     Type
 15311 ;;		None
 15312 ;; Return value:  Size  Location     Type
 15313 ;;                  1    wreg      void 
 15314 ;; Registers used:
 15315 ;;		wreg, status,2, status,0, pclath, cstack
 15316 ;; Tracked objects:
 15317 ;;		On entry : 1F/3
 15318 ;;		On exit  : 1F/2
 15319 ;;		Unchanged: 0/0
 15320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15325 ;;Total ram usage:        0 bytes
 15326 ;; Hardware stack levels used: 1
 15327 ;; Hardware stack levels required when called: 1
 15328 ;; This function calls:
 15329 ;;		_SysTime_GetCurrentTimeMs
 15330 ;; This function is called by:
 15331 ;;		_PS2Keyboard_Init
 15332 ;;		_IOCAF5_ISR
 15333 ;; This function uses a non-reentrant model
 15334 ;;
 15335                           
 15336     1F27                     _PS2Keyboard_DataInterrupt:	
 15337                           ;psect for function _PS2Keyboard_DataInterrupt
 15338                           
 15339                           
 15340                           ;ps2_keyboard.c: 80:     if (keyboardState == KeyboardIdle) {
 15341                           
 15342                           ;incstack = 0
 15343                           ; Regs used in _PS2Keyboard_DataInterrupt: [wreg+status,2+status,0+pclath+cstack]
 15344     1F27  0022               	movlb	2	; select bank2
 15345     1F28  0855               	movf	_keyboardState^(0+256),w
 15346     1F29  1D03               	btfss	3,2
 15347     1F2A  0008               	return
 15348                           
 15349                           ;ps2_keyboard.c: 81:         keyboardState = KeyboardStart;
 15350     1F2B  3001               	movlw	1
 15351     1F2C  00D5               	movwf	_keyboardState^(0+256)	;volatile
 15352                           
 15353                           ;ps2_keyboard.c: 82:         prevTimeMs = SysTime_GetCurrentTimeMs();
 15354     1F2D  319E  2691         	fcall	_SysTime_GetCurrentTimeMs
 15355     1F2F  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 15356     1F30  00AF               	movwf	(_prevTimeMs+3)^(0+256)	;volatile
 15357     1F31  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 15358     1F32  00AE               	movwf	(_prevTimeMs+2)^(0+256)	;volatile
 15359     1F33  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 15360     1F34  00AD               	movwf	(_prevTimeMs+1)^(0+256)	;volatile
 15361     1F35  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 15362     1F36  00AC               	movwf	_prevTimeMs^(0+256)	;volatile
 15363     1F37  0008               	return
 15364     1F38                     __end_of_PS2Keyboard_DataInterrupt:
 15365                           
 15366                           	psect	text88
 15367     1EE6                     __ptext88:	
 15368 ;; *************** function _IOCAF4_ISR *****************
 15369 ;; Defined at:
 15370 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
 15371 ;; Parameters:    Size  Location     Type
 15372 ;;		None
 15373 ;; Auto vars:     Size  Location     Type
 15374 ;;		None
 15375 ;; Return value:  Size  Location     Type
 15376 ;;                  1    wreg      void 
 15377 ;; Registers used:
 15378 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15379 ;; Tracked objects:
 15380 ;;		On entry : 1F/7
 15381 ;;		On exit  : 1F/7
 15382 ;;		Unchanged: 0/0
 15383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15388 ;;Total ram usage:        0 bytes
 15389 ;; Hardware stack levels used: 1
 15390 ;; Hardware stack levels required when called: 3
 15391 ;; This function calls:
 15392 ;;		NULL
 15393 ;;		_IOCAF4_DefaultInterruptHandler
 15394 ;;		_PS2Keyboard_ClockInterrupt
 15395 ;; This function is called by:
 15396 ;;		_PIN_MANAGER_IOC
 15397 ;; This function uses a non-reentrant model
 15398 ;;
 15399                           
 15400     1EE6                     _IOCAF4_ISR:	
 15401                           ;psect for function _IOCAF4_ISR
 15402                           
 15403                           
 15404                           ;mcc_generated_files/pin_manager.c: 143:     if(IOCAF4_InterruptHandler)
 15405                           
 15406                           ;incstack = 0
 15407                           ; Regs used in _IOCAF4_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15408     1EE6  0022               	movlb	2	; select bank2
 15409     1EE7  086E               	movf	_IOCAF4_InterruptHandler^(0+256),w
 15410     1EE8  046F               	iorwf	(_IOCAF4_InterruptHandler+1)^(0+256),w
 15411     1EE9  1903               	btfsc	3,2
 15412     1EEA  2EF0               	goto	i1l6246
 15413                           
 15414                           ;mcc_generated_files/pin_manager.c: 144:     {;mcc_generated_files/pin_manager.c: 145:  
      +                                 IOCAF4_InterruptHandler();
 15415     1EEB  086F               	movf	(_IOCAF4_InterruptHandler+1)^(0+256),w
 15416     1EEC  008A               	movwf	10
 15417     1EED  086E               	movf	_IOCAF4_InterruptHandler^(0+256),w
 15418     1EEE  000A               	callw
 15419     1EEF  319E               	pagesel	$
 15420     1EF0                     i1l6246:
 15421                           
 15422                           ;mcc_generated_files/pin_manager.c: 147:     IOCAFbits.IOCAF4 = 0;
 15423     1EF0  0027               	movlb	7	; select bank7
 15424     1EF1  1213               	bcf	19,4	;volatile
 15425     1EF2  0008               	return
 15426     1EF3                     __end_of_IOCAF4_ISR:
 15427                           
 15428                           	psect	text89
 15429     1E33                     __ptext89:	
 15430 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
 15431 ;; Defined at:
 15432 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
 15433 ;; Parameters:    Size  Location     Type
 15434 ;;		None
 15435 ;; Auto vars:     Size  Location     Type
 15436 ;;		None
 15437 ;; Return value:  Size  Location     Type
 15438 ;;                  1    wreg      void 
 15439 ;; Registers used:
 15440 ;;		None
 15441 ;; Tracked objects:
 15442 ;;		On entry : 1F/2
 15443 ;;		On exit  : 1F/2
 15444 ;;		Unchanged: 1F/0
 15445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15450 ;;Total ram usage:        0 bytes
 15451 ;; Hardware stack levels used: 1
 15452 ;; This function calls:
 15453 ;;		Nothing
 15454 ;; This function is called by:
 15455 ;;		_PIN_MANAGER_Initialize
 15456 ;;		_IOCAF4_ISR
 15457 ;; This function uses a non-reentrant model
 15458 ;;
 15459                           
 15460     1E33                     _IOCAF4_DefaultInterruptHandler:	
 15461                           ;psect for function _IOCAF4_DefaultInterruptHandler
 15462                           
 15463                           
 15464                           ;incstack = 0
 15465                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
 15466     1E33  0008               	return
 15467     1E34                     __end_of_IOCAF4_DefaultInterruptHandler:
 15468                           
 15469                           	psect	text90
 15470     0549                     __ptext90:	
 15471 ;; *************** function _PS2Keyboard_ClockInterrupt *****************
 15472 ;; Defined at:
 15473 ;;		line 86 in file "ps2_keyboard.c"
 15474 ;; Parameters:    Size  Location     Type
 15475 ;;		None
 15476 ;; Auto vars:     Size  Location     Type
 15477 ;;  bit             1   13[COMMON] _Bool 
 15478 ;;  bitPos          1   12[COMMON] unsigned char 
 15479 ;; Return value:  Size  Location     Type
 15480 ;;                  1    wreg      void 
 15481 ;; Registers used:
 15482 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15483 ;; Tracked objects:
 15484 ;;		On entry : 1F/2
 15485 ;;		On exit  : 1F/2
 15486 ;;		Unchanged: 0/0
 15487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15490 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15491 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15492 ;;Total ram usage:        6 bytes
 15493 ;; Hardware stack levels used: 1
 15494 ;; Hardware stack levels required when called: 2
 15495 ;; This function calls:
 15496 ;;		_SysTime_GetCurrentTimeMs
 15497 ;;		i1_GenericQueue_Enqueue
 15498 ;; This function is called by:
 15499 ;;		_PS2Keyboard_Init
 15500 ;;		_IOCAF4_ISR
 15501 ;; This function uses a non-reentrant model
 15502 ;;
 15503                           
 15504     0549                     _PS2Keyboard_ClockInterrupt:	
 15505                           ;psect for function _PS2Keyboard_ClockInterrupt
 15506                           
 15507                           
 15508                           ;ps2_keyboard.c: 88:     if (keyboardCommandBits > 0) {
 15509                           
 15510                           ;incstack = 0
 15511                           ; Regs used in _PS2Keyboard_ClockInterrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15512     0549  084D               	movf	_keyboardCommandBits^(0+256),w	;volatile
 15513     054A  1903               	btfsc	3,2
 15514     054B  2D8C               	goto	i1l6180
 15515                           
 15516                           ;ps2_keyboard.c: 89:         if(keyboardCommandCount > 0 && keyboardCommandCount < 9) {
 15517     054C  0020               	movlb	0	; select bank0
 15518     054D  0869               	movf	_keyboardCommandCount,w	;volatile
 15519     054E  1903               	btfsc	3,2
 15520     054F  2D74               	goto	i1l6172
 15521     0550  3009               	movlw	9
 15522     0551  0269               	subwf	_keyboardCommandCount,w	;volatile
 15523     0552  1803               	skipnc
 15524     0553  2D74               	goto	i1l6172
 15525                           
 15526                           ;ps2_keyboard.c: 90:             uint8_t bitPos = keyboardCommandCount - 1;
 15527     0554  0869               	movf	_keyboardCommandCount,w	;volatile
 15528     0555  3EFF               	addlw	255
 15529     0556  00FC               	movwf	PS2Keyboard_ClockInterrupt@bitPos
 15530                           
 15531                           ;ps2_keyboard.c: 91:             _Bool bit = (keyboardCommand >> bitPos) & 1;
 15532     0557  0022               	movlb	2	; select bank2
 15533     0558  084E               	movf	_keyboardCommand^(0+256),w	;volatile
 15534     0559  0020               	movlb	0	; select bank0
 15535     055A  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15536     055B  0A7C               	incf	PS2Keyboard_ClockInterrupt@bitPos,w
 15537     055C  2D5E               	goto	u588_24
 15538     055D                     u588_25:
 15539     055D  36DC               	lsrf	??_PS2Keyboard_ClockInterrupt,f
 15540     055E                     u588_24:
 15541     055E  0B89               	decfsz	9,f
 15542     055F  2D5D               	goto	u588_25
 15543     0560  1C5C               	btfss	??_PS2Keyboard_ClockInterrupt,0
 15544     0561  2D64               	goto	u589_20
 15545     0562  3001               	movlw	1
 15546     0563  2D65               	goto	u590_20
 15547     0564                     u589_20:
 15548     0564  3000               	movlw	0
 15549     0565                     u590_20:
 15550     0565  00FD               	movwf	PS2Keyboard_ClockInterrupt@bit
 15551                           
 15552                           ;ps2_keyboard.c: 92:             if(bit) {
 15553     0566  087D               	movf	PS2Keyboard_ClockInterrupt@bit,w
 15554     0567  1903               	btfsc	3,2
 15555     0568  2D72               	goto	i1l1048
 15556                           
 15557                           ;ps2_keyboard.c: 93:                 do { LATAbits.LATA5 = 1; } while(0);
 15558     0569  0022               	movlb	2	; select bank2
 15559     056A  168C               	bsf	12,5	;volatile
 15560                           
 15561                           ;ps2_keyboard.c: 94:                 keyboardCommandOnes += 1;
 15562     056B  3001               	movlw	1
 15563     056C  0020               	movlb	0	; select bank0
 15564     056D  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15565     056E  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15566     056F  0022               	movlb	2	; select bank2
 15567     0570  07CC               	addwf	_keyboardCommandOnes^(0+256),f	;volatile
 15568                           
 15569                           ;ps2_keyboard.c: 95:             } else {
 15570     0571  2D83               	goto	i1l6178
 15571     0572                     i1l1048:	
 15572                           ;ps2_keyboard.c: 96:                 do { LATAbits.LATA5 = 0; } while(0);
 15573                           
 15574     0572  0022               	movlb	2	; select bank2
 15575     0573  2D7B               	goto	i1l1053
 15576     0574                     i1l6172:
 15577     0574  3009               	movlw	9
 15578     0575  0669               	xorwf	_keyboardCommandCount,w	;volatile
 15579     0576  1D03               	btfss	3,2
 15580     0577  2D7D               	goto	i1l6176
 15581                           
 15582                           ;ps2_keyboard.c: 99:             if(keyboardCommandOnes & 1) {
 15583     0578  0022               	movlb	2	; select bank2
 15584     0579  1C4C               	btfss	_keyboardCommandOnes^(0+256),0	;volatile
 15585     057A  2D82               	goto	L18
 15586     057B                     i1l1053:	
 15587                           ;ps2_keyboard.c: 100:                 do { LATAbits.LATA5 = 0; } while(0);
 15588                           
 15589     057B  128C               	bcf	12,5	;volatile
 15590     057C  2D83               	goto	i1l6178
 15591     057D                     i1l6176:	
 15592                           ;ps2_keyboard.c: 102:                 do { LATAbits.LATA5 = 1; } while(0);
 15593                           
 15594     057D  300A               	movlw	10
 15595     057E  0669               	xorwf	_keyboardCommandCount,w	;volatile
 15596     057F  1D03               	btfss	3,2
 15597     0580  2D83               	goto	i1l6178
 15598                           
 15599                           ;ps2_keyboard.c: 105:             do { TRISAbits.TRISA5 = 1; } while(0);
 15600     0581  0021               	movlb	1	; select bank1
 15601     0582                     L18:
 15602     0582  168C               	bsf	12,5	;volatile
 15603     0583                     i1l6178:
 15604                           
 15605                           ;ps2_keyboard.c: 107:         keyboardCommandCount += 1;
 15606     0583  3001               	movlw	1
 15607     0584  0020               	movlb	0	; select bank0
 15608     0585  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15609     0586  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15610     0587  07E9               	addwf	_keyboardCommandCount,f	;volatile
 15611                           
 15612                           ;ps2_keyboard.c: 108:         keyboardCommandBits -= 1;
 15613     0588  3001               	movlw	1
 15614     0589  0022               	movlb	2	; select bank2
 15615     058A  02CD               	subwf	_keyboardCommandBits^(0+256),f	;volatile
 15616                           
 15617                           ;ps2_keyboard.c: 109:     } else {
 15618     058B  0008               	return
 15619     058C                     i1l6180:
 15620                           
 15621                           ;ps2_keyboard.c: 110:         if (SysTime_GetCurrentTimeMs() - prevTimeMs >= 250) {
 15622     058C  319E  2691  3185   	fcall	_SysTime_GetCurrentTimeMs
 15623     058F  082C               	movf	_prevTimeMs^(0+256),w	;volatile
 15624     0590  0270               	subwf	?_SysTime_GetCurrentTimeMs,w
 15625     0591  0020               	movlb	0	; select bank0
 15626     0592  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15627     0593  0022               	movlb	2	; select bank2
 15628     0594  082D               	movf	(_prevTimeMs+1)^(0+256),w	;volatile
 15629     0595  3B71               	subwfb	?_SysTime_GetCurrentTimeMs+1,w
 15630     0596  0020               	movlb	0	; select bank0
 15631     0597  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 15632     0598  0022               	movlb	2	; select bank2
 15633     0599  082E               	movf	(_prevTimeMs+2)^(0+256),w	;volatile
 15634     059A  3B72               	subwfb	?_SysTime_GetCurrentTimeMs+2,w
 15635     059B  0020               	movlb	0	; select bank0
 15636     059C  00DE               	movwf	??_PS2Keyboard_ClockInterrupt+2
 15637     059D  0022               	movlb	2	; select bank2
 15638     059E  082F               	movf	(_prevTimeMs+3)^(0+256),w	;volatile
 15639     059F  3B73               	subwfb	?_SysTime_GetCurrentTimeMs+3,w
 15640     05A0  0020               	movlb	0	; select bank0
 15641     05A1  00DF               	movwf	??_PS2Keyboard_ClockInterrupt+3
 15642     05A2  085F               	movf	??_PS2Keyboard_ClockInterrupt+3,w
 15643     05A3  1D03               	btfss	3,2
 15644     05A4  2DAF               	goto	i1l6182
 15645     05A5  085E               	movf	??_PS2Keyboard_ClockInterrupt+2,w
 15646     05A6  1D03               	btfss	3,2
 15647     05A7  2DAF               	goto	i1l6182
 15648     05A8  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15649     05A9  1D03               	btfss	3,2
 15650     05AA  2DAF               	goto	i1l6182
 15651     05AB  30FA               	movlw	250
 15652     05AC  025C               	subwf	??_PS2Keyboard_ClockInterrupt,w
 15653     05AD  1C03               	btfss	3,0
 15654     05AE  2E1B               	goto	i1l6234
 15655     05AF                     i1l6182:
 15656                           
 15657                           ;ps2_keyboard.c: 111:             keyboardState = KeyboardStart;
 15658     05AF  3001               	movlw	1
 15659     05B0  0022               	movlb	2	; select bank2
 15660     05B1  00D5               	movwf	_keyboardState^(0+256)	;volatile
 15661     05B2  2E1B               	goto	i1l6234
 15662     05B3                     i1l6184:
 15663                           
 15664                           ;ps2_keyboard.c: 115:                 keyboardIndexData = 0;
 15665     05B3  0022               	movlb	2	; select bank2
 15666     05B4  01D4               	clrf	_keyboardIndexData^(0+256)	;volatile
 15667                           
 15668                           ;ps2_keyboard.c: 116:                 keyboardOnesCount = 0;
 15669     05B5  01D3               	clrf	_keyboardOnesCount^(0+256)	;volatile
 15670                           
 15671                           ;ps2_keyboard.c: 117:                 keyboardScanCode.value = 0;
 15672     05B6  01E9               	clrf	_keyboardScanCode^(0+256)
 15673     05B7                     i1l6186:
 15674                           
 15675                           ;ps2_keyboard.c: 118:                 keyboardState = KeyboardData;
 15676     05B7  3002               	movlw	2
 15677     05B8  2DF1               	goto	L20
 15678     05B9                     i1l6188:	
 15679                           ;ps2_keyboard.c: 119:                 break;
 15680                           
 15681                           
 15682                           ;ps2_keyboard.c: 121:                 keyboardData = PORTAbits.RA5;
 15683     05B9  3000               	movlw	0
 15684     05BA  1A8C               	btfsc	12,5	;volatile
 15685     05BB  3001               	movlw	1
 15686     05BC  0022               	movlb	2	; select bank2
 15687     05BD  00D1               	movwf	_keyboardData^(0+256)	;volatile
 15688                           
 15689                           ;ps2_keyboard.c: 122:                 keyboardScanCode.value |= keyboardData << keyboard
      +                          IndexData;
 15690     05BE  0851               	movf	_keyboardData^(0+256),w	;volatile
 15691     05BF  0020               	movlb	0	; select bank0
 15692     05C0  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15693     05C1  0022               	movlb	2	; select bank2
 15694     05C2  0A54               	incf	_keyboardIndexData^(0+256),w	;volatile
 15695     05C3  0020               	movlb	0	; select bank0
 15696     05C4  2DC6               	goto	u596_24
 15697     05C5                     u596_25:
 15698     05C5  35DC               	lslf	??_PS2Keyboard_ClockInterrupt,f
 15699     05C6                     u596_24:
 15700     05C6  0B89               	decfsz	9,f
 15701     05C7  2DC5               	goto	u596_25
 15702     05C8  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15703     05C9  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 15704     05CA  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15705     05CB  0022               	movlb	2	; select bank2
 15706     05CC  04E9               	iorwf	_keyboardScanCode^(0+256),f
 15707                           
 15708                           ;ps2_keyboard.c: 123:                 keyboardOnesCount += keyboardData;
 15709     05CD  0851               	movf	_keyboardData^(0+256),w	;volatile
 15710     05CE  0020               	movlb	0	; select bank0
 15711     05CF  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15712     05D0  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15713     05D1  0022               	movlb	2	; select bank2
 15714     05D2  07D3               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 15715                           
 15716                           ;ps2_keyboard.c: 124:                 keyboardIndexData += 1;
 15717     05D3  3001               	movlw	1
 15718     05D4  0020               	movlb	0	; select bank0
 15719     05D5  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15720     05D6  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15721     05D7  0022               	movlb	2	; select bank2
 15722     05D8  07D4               	addwf	_keyboardIndexData^(0+256),f	;volatile
 15723                           
 15724                           ;ps2_keyboard.c: 125:                 if (keyboardIndexData == 8) {
 15725     05D9  3008               	movlw	8
 15726     05DA  0654               	xorwf	_keyboardIndexData^(0+256),w	;volatile
 15727     05DB  1D03               	btfss	3,2
 15728     05DC  2DB7               	goto	i1l6186
 15729                           
 15730                           ;ps2_keyboard.c: 126:                     keyboardState = KeyboardParity;
 15731     05DD  3003               	movlw	3
 15732     05DE  2DF1               	goto	L20
 15733     05DF                     i1l6202:	
 15734                           ;ps2_keyboard.c: 127:                 } else {
 15735                           
 15736                           
 15737                           ;ps2_keyboard.c: 132:                 keyboardData = PORTAbits.RA5;
 15738     05DF  3000               	movlw	0
 15739     05E0  1A8C               	btfsc	12,5	;volatile
 15740     05E1  3001               	movlw	1
 15741     05E2  0022               	movlb	2	; select bank2
 15742     05E3  00D1               	movwf	_keyboardData^(0+256)	;volatile
 15743                           
 15744                           ;ps2_keyboard.c: 133:                 keyboardOnesCount += keyboardData;
 15745     05E4  0851               	movf	_keyboardData^(0+256),w	;volatile
 15746     05E5  0020               	movlb	0	; select bank0
 15747     05E6  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15748     05E7  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15749     05E8  0022               	movlb	2	; select bank2
 15750     05E9  07D3               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 15751                           
 15752                           ;ps2_keyboard.c: 134:                 keyboardScanCodeValid = keyboardOnesCount & 0x01;
 15753     05EA  1C53               	btfss	_keyboardOnesCount^(0+256),0	;volatile
 15754     05EB  2DEE               	goto	u598_20
 15755     05EC  3001               	movlw	1
 15756     05ED  2DEF               	goto	u599_20
 15757     05EE                     u598_20:
 15758     05EE  3000               	movlw	0
 15759     05EF                     u599_20:
 15760     05EF  00D2               	movwf	_keyboardScanCodeValid^(0+256)	;volatile
 15761                           
 15762                           ;ps2_keyboard.c: 135:                 keyboardState = KeyboardStop;
 15763     05F0  3004               	movlw	4
 15764     05F1                     L20:
 15765     05F1  00D5               	movwf	_keyboardState^(0+256)	;volatile
 15766                           
 15767                           ;ps2_keyboard.c: 136:                 break;
 15768     05F2  2E33               	goto	i1l6236
 15769     05F3                     i1l6210:
 15770                           
 15771                           ;ps2_keyboard.c: 138:                 if (keyboardScanCode.value == 0xE0) {
 15772     05F3  30E0               	movlw	224
 15773     05F4  0022               	movlb	2	; select bank2
 15774     05F5  0669               	xorwf	_keyboardScanCode^(0+256),w
 15775     05F6  1D03               	btfss	3,2
 15776     05F7  2DFB               	goto	i1l6214
 15777                           
 15778                           ;ps2_keyboard.c: 139:                     keyboardIsExtend = 1;
 15779     05F8  3001               	movlw	1
 15780     05F9  00D0               	movwf	_keyboardIsExtend^(0+256)	;volatile
 15781                           
 15782                           ;ps2_keyboard.c: 140:                 } else if (keyboardScanCode.value == 0xF0) {
 15783     05FA  2E18               	goto	i1l6228
 15784     05FB                     i1l6214:
 15785     05FB  30F0               	movlw	240
 15786     05FC  0669               	xorwf	_keyboardScanCode^(0+256),w
 15787     05FD  1D03               	btfss	3,2
 15788     05FE  2E02               	goto	i1l6218
 15789                           
 15790                           ;ps2_keyboard.c: 141:                     keyboardIsBreak = 1;
 15791     05FF  3001               	movlw	1
 15792     0600  00CF               	movwf	_keyboardIsBreak^(0+256)	;volatile
 15793                           
 15794                           ;ps2_keyboard.c: 142:                 } else {
 15795     0601  2E18               	goto	i1l6228
 15796     0602                     i1l6218:
 15797                           
 15798                           ;ps2_keyboard.c: 143:                     keyboardScanCode.isBreak = keyboardIsBreak;
 15799     0602  084F               	movf	_keyboardIsBreak^(0+256),w	;volatile
 15800     0603  00EB               	movwf	(_keyboardScanCode^(0+256)+2)
 15801                           
 15802                           ;ps2_keyboard.c: 144:                     keyboardScanCode.isExtend = keyboardIsExtend;
 15803     0604  0850               	movf	_keyboardIsExtend^(0+256),w	;volatile
 15804     0605  00EA               	movwf	(_keyboardScanCode^(0+256)+1)
 15805                           
 15806                           ;ps2_keyboard.c: 145:                     if (keyboardScanCodeValid) {
 15807     0606  0852               	movf	_keyboardScanCodeValid^(0+256),w	;volatile
 15808     0607  1903               	btfsc	3,2
 15809     0608  2E15               	goto	i1l6224
 15810                           
 15811                           ;ps2_keyboard.c: 146:                         GenericQueue_Enqueue(&keyboardScanCodeQueu
      +                          e, &keyboardScanCode);
 15812     0609  3091               	movlw	145
 15813     060A  0020               	movlb	0	; select bank0
 15814     060B  00D5               	movwf	i1GenericQueue_Enqueue@q
 15815     060C  3023               	movlw	35
 15816     060D  00D6               	movwf	i1GenericQueue_Enqueue@q+1
 15817     060E  3069               	movlw	low _keyboardScanCode
 15818     060F  00D7               	movwf	i1GenericQueue_Enqueue@item
 15819     0610  3001               	movlw	high _keyboardScanCode
 15820     0611  00D8               	movwf	i1GenericQueue_Enqueue@item+1
 15821     0612  3197  2798  3185   	fcall	i1_GenericQueue_Enqueue
 15822     0615                     i1l6224:
 15823                           
 15824                           ;ps2_keyboard.c: 148:                     keyboardIsBreak = 0;
 15825     0615  0022               	movlb	2	; select bank2
 15826     0616  01CF               	clrf	_keyboardIsBreak^(0+256)	;volatile
 15827                           
 15828                           ;ps2_keyboard.c: 149:                     keyboardIsExtend = 0;
 15829     0617  01D0               	clrf	_keyboardIsExtend^(0+256)	;volatile
 15830     0618                     i1l6228:
 15831                           
 15832                           ;ps2_keyboard.c: 151:                 keyboardState = KeyboardIdle;
 15833     0618  0022               	movlb	2	; select bank2
 15834     0619  01D5               	clrf	_keyboardState^(0+256)	;volatile
 15835                           
 15836                           ;ps2_keyboard.c: 152:                 break;
 15837     061A  2E33               	goto	i1l6236
 15838     061B                     i1l6234:
 15839     061B  0022               	movlb	2	; select bank2
 15840     061C  0855               	movf	_keyboardState^(0+256),w	;volatile
 15841     061D  0020               	movlb	0	; select bank0
 15842     061E  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15843     061F  01DD               	clrf	??_PS2Keyboard_ClockInterrupt+1
 15844                           
 15845                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15846                           ; Switch size 1, requested type "simple"
 15847                           ; Number of cases is 1, Range of values is 0 to 0
 15848                           ; switch strategies available:
 15849                           ; Name         Instructions Cycles
 15850                           ; simple_byte            4     3 (average)
 15851                           ; direct_byte            8     6 (fixed)
 15852                           ; jumptable            260     6 (fixed)
 15853                           ;	Chosen strategy is simple_byte
 15854     0620  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15855     0621  3A00               	xorlw	0	; case 0
 15856     0622  1903               	skipnz
 15857     0623  2E25               	goto	i1l6698
 15858     0624  2E18               	goto	i1l6228
 15859     0625                     i1l6698:
 15860                           
 15861                           ; Switch size 1, requested type "simple"
 15862                           ; Number of cases is 4, Range of values is 1 to 4
 15863                           ; switch strategies available:
 15864                           ; Name         Instructions Cycles
 15865                           ; simple_byte           13     7 (average)
 15866                           ; direct_byte           17     9 (fixed)
 15867                           ; jumptable            263     9 (fixed)
 15868                           ;	Chosen strategy is simple_byte
 15869     0625  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15870     0626  3A01               	xorlw	1	; case 1
 15871     0627  1903               	skipnz
 15872     0628  2DB3               	goto	i1l6184
 15873     0629  3A03               	xorlw	3	; case 2
 15874     062A  1903               	skipnz
 15875     062B  2DB9               	goto	i1l6188
 15876     062C  3A01               	xorlw	1	; case 3
 15877     062D  1903               	skipnz
 15878     062E  2DDF               	goto	i1l6202
 15879     062F  3A07               	xorlw	7	; case 4
 15880     0630  1903               	skipnz
 15881     0631  2DF3               	goto	i1l6210
 15882     0632  2E18               	goto	i1l6228
 15883     0633                     i1l6236:
 15884                           
 15885                           ;ps2_keyboard.c: 157:         prevTimeMs = SysTime_GetCurrentTimeMs();
 15886     0633  319E  2691         	fcall	_SysTime_GetCurrentTimeMs
 15887     0635  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 15888     0636  00AF               	movwf	(_prevTimeMs+3)^(0+256)	;volatile
 15889     0637  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 15890     0638  00AE               	movwf	(_prevTimeMs+2)^(0+256)	;volatile
 15891     0639  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 15892     063A  00AD               	movwf	(_prevTimeMs+1)^(0+256)	;volatile
 15893     063B  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 15894     063C  00AC               	movwf	_prevTimeMs^(0+256)	;volatile
 15895     063D  0008               	return
 15896     063E                     __end_of_PS2Keyboard_ClockInterrupt:
 15897                           
 15898                           	psect	text91
 15899     1798                     __ptext91:	
 15900 ;; *************** function i1_GenericQueue_Enqueue *****************
 15901 ;; Defined at:
 15902 ;;		line 19 in file "generic_queue.c"
 15903 ;; Parameters:    Size  Location     Type
 15904 ;;  q               2    5[BANK0 ] PTR struct .
 15905 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 15906 ;;  item            2    7[BANK0 ] PTR const void 
 15907 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2865(1), APP_KeyboardUpdateState@usbHidCode_2856(1), 
 15908 ;; Auto vars:     Size  Location     Type
 15909 ;;		None
 15910 ;; Return value:  Size  Location     Type
 15911 ;;                  1    wreg      void 
 15912 ;; Registers used:
 15913 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15914 ;; Tracked objects:
 15915 ;;		On entry : 1F/0
 15916 ;;		On exit  : 1F/0
 15917 ;;		Unchanged: 0/0
 15918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15919 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15921 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15922 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15923 ;;Total ram usage:        7 bytes
 15924 ;; Hardware stack levels used: 1
 15925 ;; Hardware stack levels required when called: 1
 15926 ;; This function calls:
 15927 ;;		i1_GenericQueue_IsFull
 15928 ;;		i1___awmod
 15929 ;;		i1___wmul
 15930 ;;		i1_memcpy
 15931 ;; This function is called by:
 15932 ;;		_PS2Keyboard_ClockInterrupt
 15933 ;; This function uses a non-reentrant model
 15934 ;;
 15935                           
 15936     1798                     i1_GenericQueue_Enqueue:	
 15937                           ;psect for function i1_GenericQueue_Enqueue
 15938                           
 15939                           
 15940                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
 15941                           
 15942                           ;incstack = 0
 15943                           ; Regs used in i1_GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15944     1798  0856               	movf	i1GenericQueue_Enqueue@q+1,w
 15945     1799  00F1               	movwf	i1GenericQueue_IsFull@q+1
 15946     179A  0855               	movf	i1GenericQueue_Enqueue@q,w
 15947     179B  00F0               	movwf	i1GenericQueue_IsFull@q
 15948     179C  319F  277E  3197   	fcall	i1_GenericQueue_IsFull
 15949     179F  0870               	movf	?i1_GenericQueue_IsFull,w
 15950     17A0  0471               	iorwf	?i1_GenericQueue_IsFull+1,w
 15951     17A1  1D03               	btfss	3,2
 15952     17A2  0008               	return
 15953                           
 15954                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
 15955     17A3  0855               	movf	i1GenericQueue_Enqueue@q,w
 15956     17A4  3E5D               	addlw	93
 15957     17A5  0086               	movwf	6
 15958     17A6  3000               	movlw	0
 15959     17A7  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15960     17A8  0087               	movwf	7
 15961     17A9  0801               	movf	1,w
 15962     17AA  00D9               	movwf	??i1_GenericQueue_Enqueue
 15963     17AB  01DA               	clrf	??i1_GenericQueue_Enqueue+1
 15964     17AC  0859               	movf	??i1_GenericQueue_Enqueue,w
 15965     17AD  00F0               	movwf	i1___wmul@multiplier
 15966     17AE  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 15967     17AF  00F1               	movwf	i1___wmul@multiplier+1
 15968     17B0  0855               	movf	i1GenericQueue_Enqueue@q,w
 15969     17B1  3E5A               	addlw	90
 15970     17B2  0086               	movwf	6
 15971     17B3  3000               	movlw	0
 15972     17B4  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15973     17B5  0087               	movwf	7
 15974     17B6  3F40               	moviw [0]fsr1
 15975     17B7  00F2               	movwf	i1___wmul@multiplicand
 15976     17B8  3F41               	moviw [1]fsr1
 15977     17B9  00F3               	movwf	i1___wmul@multiplicand+1
 15978     17BA  3190  20E5  3197   	fcall	i1___wmul
 15979     17BD  0870               	movf	?i1___wmul,w
 15980     17BE  0755               	addwf	i1GenericQueue_Enqueue@q,w
 15981     17BF  00F6               	movwf	i1memcpy@d1
 15982     17C0  0871               	movf	?i1___wmul+1,w
 15983     17C1  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15984     17C2  00F7               	movwf	i1memcpy@d1+1
 15985     17C3  0858               	movf	i1GenericQueue_Enqueue@item+1,w
 15986     17C4  00F9               	movwf	i1memcpy@s1+1
 15987     17C5  0857               	movf	i1GenericQueue_Enqueue@item,w
 15988     17C6  00F8               	movwf	i1memcpy@s1
 15989     17C7  0855               	movf	i1GenericQueue_Enqueue@q,w
 15990     17C8  3E5A               	addlw	90
 15991     17C9  0086               	movwf	6
 15992     17CA  3000               	movlw	0
 15993     17CB  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15994     17CC  0087               	movwf	7
 15995     17CD  3F40               	moviw [0]fsr1
 15996     17CE  00FA               	movwf	i1memcpy@n
 15997     17CF  3F41               	moviw [1]fsr1
 15998     17D0  00FB               	movwf	i1memcpy@n+1
 15999     17D1  3192  2293  3197   	fcall	i1_memcpy
 16000                           
 16001                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
 16002     17D4  300F               	movlw	15
 16003     17D5  00F0               	movwf	i1___awmod@divisor
 16004     17D6  3000               	movlw	0
 16005     17D7  00F1               	movwf	i1___awmod@divisor+1
 16006     17D8  0855               	movf	i1GenericQueue_Enqueue@q,w
 16007     17D9  3E5D               	addlw	93
 16008     17DA  0086               	movwf	6
 16009     17DB  3000               	movlw	0
 16010     17DC  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 16011     17DD  0087               	movwf	7
 16012     17DE  0801               	movf	1,w
 16013     17DF  3E01               	addlw	1
 16014     17E0  00F2               	movwf	i1___awmod@dividend
 16015     17E1  3000               	movlw	0
 16016     17E2  1803               	skipnc
 16017     17E3  3001               	movlw	1
 16018     17E4  00F3               	movwf	i1___awmod@dividend+1
 16019     17E5  3194  2448         	fcall	i1___awmod
 16020     17E7  0870               	movf	?i1___awmod,w
 16021     17E8  00D9               	movwf	??i1_GenericQueue_Enqueue
 16022     17E9  0855               	movf	i1GenericQueue_Enqueue@q,w
 16023     17EA  3E5D               	addlw	93
 16024     17EB  00DA               	movwf	??i1_GenericQueue_Enqueue+1
 16025     17EC  3000               	movlw	0
 16026     17ED  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 16027     17EE  00DB               	movwf	??i1_GenericQueue_Enqueue+2
 16028     17EF  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 16029     17F0  0086               	movwf	6
 16030     17F1  085B               	movf	??i1_GenericQueue_Enqueue+2,w
 16031     17F2  0087               	movwf	7
 16032     17F3  0859               	movf	??i1_GenericQueue_Enqueue,w
 16033     17F4  0081               	movwf	1
 16034                           
 16035                           ;generic_queue.c: 23:         q->size++;
 16036     17F5  3001               	movlw	1
 16037     17F6  00D9               	movwf	??i1_GenericQueue_Enqueue
 16038     17F7  0855               	movf	i1GenericQueue_Enqueue@q,w
 16039     17F8  3E5E               	addlw	94
 16040     17F9  0086               	movwf	6
 16041     17FA  3000               	movlw	0
 16042     17FB  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 16043     17FC  0087               	movwf	7
 16044     17FD  0859               	movf	??i1_GenericQueue_Enqueue,w
 16045     17FE  0781               	addwf	1,f
 16046     17FF  0008               	return
 16047     1800                     __end_ofi1_GenericQueue_Enqueue:
 16048                           
 16049                           	psect	text92
 16050     1293                     __ptext92:	
 16051 ;; *************** function i1_memcpy *****************
 16052 ;; Defined at:
 16053 ;;		line 4 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memcpy.c"
 16054 ;; Parameters:    Size  Location     Type
 16055 ;;  d1              2    6[COMMON] PTR void 
 16056 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 16057 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 16058 ;;  s1              2    8[COMMON] PTR const void 
 16059 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2865(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2856(1), 
 16060 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 16061 ;;  n               2   10[COMMON] unsigned int 
 16062 ;; Auto vars:     Size  Location     Type
 16063 ;;  s               2    2[BANK0 ] PTR const unsigned char 
 16064 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2865(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2856(1), 
 16065 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 16066 ;;  d               2    0[BANK0 ] PTR unsigned char 
 16067 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 16068 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 16069 ;;  tmp             1    4[BANK0 ] unsigned char 
 16070 ;; Return value:  Size  Location     Type
 16071 ;;                  2    6[COMMON] PTR void 
 16072 ;; Registers used:
 16073 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16074 ;; Tracked objects:
 16075 ;;		On entry : 1F/0
 16076 ;;		On exit  : 1F/0
 16077 ;;		Unchanged: 0/0
 16078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16079 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16080 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16082 ;;      Totals:         6       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16083 ;;Total ram usage:       11 bytes
 16084 ;; Hardware stack levels used: 1
 16085 ;; This function calls:
 16086 ;;		Nothing
 16087 ;; This function is called by:
 16088 ;;		_USBCtrlEPService
 16089 ;;		i1_GenericQueue_Enqueue
 16090 ;; This function uses a non-reentrant model
 16091 ;;
 16092                           
 16093     1293                     i1_memcpy:	
 16094                           ;psect for function i1_memcpy
 16095                           
 16096                           
 16097                           ;incstack = 0
 16098                           ; Regs used in i1_memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 16099     1293  0879               	movf	i1memcpy@s1+1,w
 16100     1294  00D3               	movwf	i1memcpy@s+1
 16101     1295  0878               	movf	i1memcpy@s1,w
 16102     1296  00D2               	movwf	i1memcpy@s
 16103     1297  0877               	movf	i1memcpy@d1+1,w
 16104     1298  00D1               	movwf	i1memcpy@d+1
 16105     1299  0876               	movf	i1memcpy@d1,w
 16106     129A  00D0               	movwf	i1memcpy@d
 16107     129B                     i1l4532:
 16108     129B  3001               	movlw	1
 16109     129C  02FA               	subwf	i1memcpy@n,f
 16110     129D  3000               	movlw	0
 16111     129E  3BFB               	subwfb	i1memcpy@n+1,f
 16112     129F  0A7A               	incf	i1memcpy@n,w
 16113     12A0  1903               	btfsc	3,2
 16114     12A1  0A7B               	incf	i1memcpy@n+1,w
 16115     12A2  1903               	btfsc	3,2
 16116     12A3  0008               	return
 16117     12A4  0852               	movf	i1memcpy@s,w
 16118     12A5  0086               	movwf	6
 16119     12A6  0853               	movf	i1memcpy@s+1,w
 16120     12A7  0087               	movwf	7
 16121     12A8  0801               	movf	1,w
 16122     12A9  00D4               	movwf	i1memcpy@tmp
 16123     12AA  3001               	movlw	1
 16124     12AB  07D2               	addwf	i1memcpy@s,f
 16125     12AC  3000               	movlw	0
 16126     12AD  3DD3               	addwfc	i1memcpy@s+1,f
 16127     12AE  0850               	movf	i1memcpy@d,w
 16128     12AF  0086               	movwf	6
 16129     12B0  0851               	movf	i1memcpy@d+1,w
 16130     12B1  0087               	movwf	7
 16131     12B2  0854               	movf	i1memcpy@tmp,w
 16132     12B3  0081               	movwf	1
 16133     12B4  3001               	movlw	1
 16134     12B5  07D0               	addwf	i1memcpy@d,f
 16135     12B6  3000               	movlw	0
 16136     12B7  3DD1               	addwfc	i1memcpy@d+1,f
 16137     12B8  2A9B               	goto	i1l4532
 16138     12B9                     __end_ofi1_memcpy:
 16139                           
 16140                           	psect	text93
 16141     10E5                     __ptext93:	
 16142 ;; *************** function i1___wmul *****************
 16143 ;; Defined at:
 16144 ;;		line 15 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/Umul16.c"
 16145 ;; Parameters:    Size  Location     Type
 16146 ;;  multiplier      2    0[COMMON] unsigned int 
 16147 ;;  multiplicand    2    2[COMMON] unsigned int 
 16148 ;; Auto vars:     Size  Location     Type
 16149 ;;  product         2    4[COMMON] unsigned int 
 16150 ;; Return value:  Size  Location     Type
 16151 ;;                  2    0[COMMON] unsigned int 
 16152 ;; Registers used:
 16153 ;;		wreg, status,2, status,0
 16154 ;; Tracked objects:
 16155 ;;		On entry : 1F/0
 16156 ;;		On exit  : 1F/0
 16157 ;;		Unchanged: 1F/0
 16158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16159 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16160 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16162 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16163 ;;Total ram usage:        6 bytes
 16164 ;; Hardware stack levels used: 1
 16165 ;; This function calls:
 16166 ;;		Nothing
 16167 ;; This function is called by:
 16168 ;;		i1_GenericQueue_Enqueue
 16169 ;; This function uses a non-reentrant model
 16170 ;;
 16171                           
 16172     10E5                     i1___wmul:	
 16173                           ;psect for function i1___wmul
 16174                           
 16175                           
 16176                           ;incstack = 0
 16177                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 16178     10E5  01F4               	clrf	i1___wmul@product
 16179     10E6  01F5               	clrf	i1___wmul@product+1
 16180     10E7                     i1l4474:
 16181     10E7  1C70               	btfss	i1___wmul@multiplier,0
 16182     10E8  28ED               	goto	i1l1242
 16183     10E9  0872               	movf	i1___wmul@multiplicand,w
 16184     10EA  07F4               	addwf	i1___wmul@product,f
 16185     10EB  0873               	movf	i1___wmul@multiplicand+1,w
 16186     10EC  3DF5               	addwfc	i1___wmul@product+1,f
 16187     10ED                     i1l1242:
 16188     10ED  3001               	movlw	1
 16189     10EE                     u355_25:
 16190     10EE  35F2               	lslf	i1___wmul@multiplicand,f
 16191     10EF  0DF3               	rlf	i1___wmul@multiplicand+1,f
 16192     10F0  0B89               	decfsz	9,f
 16193     10F1  28EE               	goto	u355_25
 16194     10F2  3001               	movlw	1
 16195     10F3                     u356_25:
 16196     10F3  36F1               	lsrf	i1___wmul@multiplier+1,f
 16197     10F4  0CF0               	rrf	i1___wmul@multiplier,f
 16198     10F5  0B89               	decfsz	9,f
 16199     10F6  28F3               	goto	u356_25
 16200     10F7  0870               	movf	i1___wmul@multiplier,w
 16201     10F8  0471               	iorwf	i1___wmul@multiplier+1,w
 16202     10F9  1D03               	btfss	3,2
 16203     10FA  28E7               	goto	i1l4474
 16204     10FB  0875               	movf	i1___wmul@product+1,w
 16205     10FC  00F1               	movwf	?i1___wmul+1
 16206     10FD  0874               	movf	i1___wmul@product,w
 16207     10FE  00F0               	movwf	?i1___wmul
 16208     10FF  0008               	return
 16209     1100                     __end_ofi1___wmul:
 16210                           
 16211                           	psect	text94
 16212     1448                     __ptext94:	
 16213 ;; *************** function i1___awmod *****************
 16214 ;; Defined at:
 16215 ;;		line 5 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/awmod.c"
 16216 ;; Parameters:    Size  Location     Type
 16217 ;;  divisor         2    0[COMMON] int 
 16218 ;;  dividend        2    2[COMMON] int 
 16219 ;; Auto vars:     Size  Location     Type
 16220 ;;  sign            1    6[COMMON] unsigned char 
 16221 ;;  counter         1    5[COMMON] unsigned char 
 16222 ;; Return value:  Size  Location     Type
 16223 ;;                  2    0[COMMON] int 
 16224 ;; Registers used:
 16225 ;;		wreg, status,2, status,0
 16226 ;; Tracked objects:
 16227 ;;		On entry : 1F/0
 16228 ;;		On exit  : 1F/0
 16229 ;;		Unchanged: 1F/0
 16230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16231 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16235 ;;Total ram usage:        7 bytes
 16236 ;; Hardware stack levels used: 1
 16237 ;; This function calls:
 16238 ;;		Nothing
 16239 ;; This function is called by:
 16240 ;;		i1_GenericQueue_Enqueue
 16241 ;; This function uses a non-reentrant model
 16242 ;;
 16243                           
 16244     1448                     i1___awmod:	
 16245                           ;psect for function i1___awmod
 16246                           
 16247                           
 16248                           ;incstack = 0
 16249                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 16250     1448  01F6               	clrf	i1___awmod@sign
 16251     1449  1FF3               	btfss	i1___awmod@dividend+1,7
 16252     144A  2C52               	goto	i1l4494
 16253     144B  09F2               	comf	i1___awmod@dividend,f
 16254     144C  09F3               	comf	i1___awmod@dividend+1,f
 16255     144D  0AF2               	incf	i1___awmod@dividend,f
 16256     144E  1903               	skipnz
 16257     144F  0AF3               	incf	i1___awmod@dividend+1,f
 16258     1450  01F6               	clrf	i1___awmod@sign
 16259     1451  0AF6               	incf	i1___awmod@sign,f
 16260     1452                     i1l4494:
 16261     1452  1FF1               	btfss	i1___awmod@divisor+1,7
 16262     1453  2C59               	goto	i1l4498
 16263     1454  09F0               	comf	i1___awmod@divisor,f
 16264     1455  09F1               	comf	i1___awmod@divisor+1,f
 16265     1456  0AF0               	incf	i1___awmod@divisor,f
 16266     1457  1903               	skipnz
 16267     1458  0AF1               	incf	i1___awmod@divisor+1,f
 16268     1459                     i1l4498:
 16269     1459  0870               	movf	i1___awmod@divisor,w
 16270     145A  0471               	iorwf	i1___awmod@divisor+1,w
 16271     145B  1903               	btfsc	3,2
 16272     145C  2C80               	goto	i1l4516
 16273     145D  01F5               	clrf	i1___awmod@counter
 16274     145E  0AF5               	incf	i1___awmod@counter,f
 16275     145F                     i1l4506:
 16276     145F  1BF1               	btfsc	i1___awmod@divisor+1,7
 16277     1460  2C6B               	goto	i1l4508
 16278     1461  3001               	movlw	1
 16279     1462                     u361_25:
 16280     1462  35F0               	lslf	i1___awmod@divisor,f
 16281     1463  0DF1               	rlf	i1___awmod@divisor+1,f
 16282     1464  0B89               	decfsz	9,f
 16283     1465  2C62               	goto	u361_25
 16284     1466  3001               	movlw	1
 16285     1467  00F4               	movwf	??i1___awmod
 16286     1468  0874               	movf	??i1___awmod,w
 16287     1469  07F5               	addwf	i1___awmod@counter,f
 16288     146A  2C5F               	goto	i1l4506
 16289     146B                     i1l4508:
 16290     146B  0871               	movf	i1___awmod@divisor+1,w
 16291     146C  0273               	subwf	i1___awmod@dividend+1,w
 16292     146D  1D03               	skipz
 16293     146E  2C71               	goto	u363_25
 16294     146F  0870               	movf	i1___awmod@divisor,w
 16295     1470  0272               	subwf	i1___awmod@dividend,w
 16296     1471                     u363_25:
 16297     1471  1C03               	skipc
 16298     1472  2C77               	goto	i1l4512
 16299     1473  0870               	movf	i1___awmod@divisor,w
 16300     1474  02F2               	subwf	i1___awmod@dividend,f
 16301     1475  0871               	movf	i1___awmod@divisor+1,w
 16302     1476  3BF3               	subwfb	i1___awmod@dividend+1,f
 16303     1477                     i1l4512:
 16304     1477  3001               	movlw	1
 16305     1478                     u364_25:
 16306     1478  36F1               	lsrf	i1___awmod@divisor+1,f
 16307     1479  0CF0               	rrf	i1___awmod@divisor,f
 16308     147A  0B89               	decfsz	9,f
 16309     147B  2C78               	goto	u364_25
 16310     147C  3001               	movlw	1
 16311     147D  02F5               	subwf	i1___awmod@counter,f
 16312     147E  1D03               	btfss	3,2
 16313     147F  2C6B               	goto	i1l4508
 16314     1480                     i1l4516:
 16315     1480  0876               	movf	i1___awmod@sign,w
 16316     1481  1903               	btfsc	3,2
 16317     1482  2C88               	goto	i1l4520
 16318     1483  09F2               	comf	i1___awmod@dividend,f
 16319     1484  09F3               	comf	i1___awmod@dividend+1,f
 16320     1485  0AF2               	incf	i1___awmod@dividend,f
 16321     1486  1903               	skipnz
 16322     1487  0AF3               	incf	i1___awmod@dividend+1,f
 16323     1488                     i1l4520:
 16324     1488  0873               	movf	i1___awmod@dividend+1,w
 16325     1489  00F1               	movwf	?i1___awmod+1
 16326     148A  0872               	movf	i1___awmod@dividend,w
 16327     148B  00F0               	movwf	?i1___awmod
 16328     148C  0008               	return
 16329     148D                     __end_ofi1___awmod:
 16330                           
 16331                           	psect	text95
 16332     1F7E                     __ptext95:	
 16333 ;; *************** function i1_GenericQueue_IsFull *****************
 16334 ;; Defined at:
 16335 ;;		line 15 in file "generic_queue.c"
 16336 ;; Parameters:    Size  Location     Type
 16337 ;;  q               2    0[COMMON] PTR struct .
 16338 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 16339 ;; Auto vars:     Size  Location     Type
 16340 ;;		None
 16341 ;; Return value:  Size  Location     Type
 16342 ;;                  2    0[COMMON] int 
 16343 ;; Registers used:
 16344 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16345 ;; Tracked objects:
 16346 ;;		On entry : 1F/0
 16347 ;;		On exit  : 1F/0
 16348 ;;		Unchanged: 1F/0
 16349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16352 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16353 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16354 ;;Total ram usage:        4 bytes
 16355 ;; Hardware stack levels used: 1
 16356 ;; This function calls:
 16357 ;;		Nothing
 16358 ;; This function is called by:
 16359 ;;		i1_GenericQueue_Enqueue
 16360 ;; This function uses a non-reentrant model
 16361 ;;
 16362                           
 16363     1F7E                     i1_GenericQueue_IsFull:	
 16364                           ;psect for function i1_GenericQueue_IsFull
 16365                           
 16366                           
 16367                           ;generic_queue.c: 16:     return (q->size == 15);
 16368                           
 16369                           ;incstack = 0
 16370                           ; Regs used in i1_GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
 16371     1F7E  0870               	movf	i1GenericQueue_IsFull@q,w
 16372     1F7F  3E5E               	addlw	94
 16373     1F80  0086               	movwf	6
 16374     1F81  3000               	movlw	0
 16375     1F82  3D71               	addwfc	i1GenericQueue_IsFull@q+1,w
 16376     1F83  0087               	movwf	7
 16377     1F84  300F               	movlw	15
 16378     1F85  0601               	xorwf	1,w
 16379     1F86  1D03               	btfss	3,2
 16380     1F87  2F8A               	goto	u352_20
 16381     1F88  3001               	movlw	1
 16382     1F89  2F8B               	goto	u353_20
 16383     1F8A                     u352_20:
 16384     1F8A  3000               	movlw	0
 16385     1F8B                     u353_20:
 16386     1F8B  00F2               	movwf	??i1_GenericQueue_IsFull
 16387     1F8C  01F3               	clrf	??i1_GenericQueue_IsFull+1
 16388     1F8D  0872               	movf	??i1_GenericQueue_IsFull,w
 16389     1F8E  00F0               	movwf	?i1_GenericQueue_IsFull
 16390     1F8F  0873               	movf	??i1_GenericQueue_IsFull+1,w
 16391     1F90  00F1               	movwf	?i1_GenericQueue_IsFull+1
 16392     1F91  0008               	return
 16393     1F92                     __end_ofi1_GenericQueue_IsFull:
 16394                           
 16395                           	psect	text96
 16396     1E91                     __ptext96:	
 16397 ;; *************** function _SysTime_GetCurrentTimeMs *****************
 16398 ;; Defined at:
 16399 ;;		line 19 in file "systime.c"
 16400 ;; Parameters:    Size  Location     Type
 16401 ;;		None
 16402 ;; Auto vars:     Size  Location     Type
 16403 ;;		None
 16404 ;; Return value:  Size  Location     Type
 16405 ;;                  4    0[COMMON] unsigned long 
 16406 ;; Registers used:
 16407 ;;		wreg
 16408 ;; Tracked objects:
 16409 ;;		On entry : 1F/2
 16410 ;;		On exit  : 1F/2
 16411 ;;		Unchanged: 0/0
 16412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16413 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16416 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16417 ;;Total ram usage:        4 bytes
 16418 ;; Hardware stack levels used: 1
 16419 ;; This function calls:
 16420 ;;		Nothing
 16421 ;; This function is called by:
 16422 ;;		_PS2Keyboard_DataInterrupt
 16423 ;;		_PS2Keyboard_ClockInterrupt
 16424 ;; This function uses a non-reentrant model
 16425 ;;
 16426                           
 16427     1E91                     _SysTime_GetCurrentTimeMs:	
 16428                           ;psect for function _SysTime_GetCurrentTimeMs
 16429                           
 16430                           
 16431                           ;systime.c: 21:     return timeMs;
 16432                           
 16433                           ;incstack = 0
 16434                           ; Regs used in _SysTime_GetCurrentTimeMs: [wreg]
 16435     1E91  082B               	movf	(_timeMs+3)^(0+256),w
 16436     1E92  00F3               	movwf	?_SysTime_GetCurrentTimeMs+3
 16437     1E93  082A               	movf	(_timeMs+2)^(0+256),w
 16438     1E94  00F2               	movwf	?_SysTime_GetCurrentTimeMs+2
 16439     1E95  0829               	movf	(_timeMs+1)^(0+256),w
 16440     1E96  00F1               	movwf	?_SysTime_GetCurrentTimeMs+1
 16441     1E97  0828               	movf	_timeMs^(0+256),w
 16442     1E98  00F0               	movwf	?_SysTime_GetCurrentTimeMs
 16443     1E99  0008               	return
 16444     1E9A                     __end_of_SysTime_GetCurrentTimeMs:
 16445                           
 16446                           	psect	text97
 16447     118B                     __ptext97:	
 16448 ;; *************** function _EUSART_Transmit_ISR *****************
 16449 ;; Defined at:
 16450 ;;		line 197 in file "mcc_generated_files/eusart.c"
 16451 ;; Parameters:    Size  Location     Type
 16452 ;;		None
 16453 ;; Auto vars:     Size  Location     Type
 16454 ;;		None
 16455 ;; Return value:  Size  Location     Type
 16456 ;;                  1    wreg      void 
 16457 ;; Registers used:
 16458 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16459 ;; Tracked objects:
 16460 ;;		On entry : 1F/2
 16461 ;;		On exit  : 1F/1
 16462 ;;		Unchanged: 0/0
 16463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16466 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16467 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16468 ;;Total ram usage:        1 bytes
 16469 ;; Hardware stack levels used: 1
 16470 ;; This function calls:
 16471 ;;		Nothing
 16472 ;; This function is called by:
 16473 ;;		_EUSART_Initialize
 16474 ;;		_INTERRUPT_InterruptManager
 16475 ;; This function uses a non-reentrant model
 16476 ;;
 16477                           
 16478     118B                     _EUSART_Transmit_ISR:	
 16479                           ;psect for function _EUSART_Transmit_ISR
 16480                           
 16481                           
 16482                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 16483                           
 16484                           ;incstack = 0
 16485                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16486     118B  3008               	movlw	8
 16487     118C  0021               	movlb	1	; select bank1
 16488     118D  026F               	subwf	_eusartTxBufferRemaining^(0+128),w
 16489     118E  1803               	skipnc
 16490     118F  29A8               	goto	i1l267
 16491                           
 16492                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 16493     1190  0022               	movlb	2	; select bank2
 16494     1191  0867               	movf	_eusartTxTail^(0+256),w
 16495     1192  3EB8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 16496     1193  0086               	movwf	6
 16497     1194  3001               	movlw	1	; select bank3/4
 16498     1195  0087               	movwf	7
 16499     1196  0801               	movf	1,w
 16500     1197  0023               	movlb	3	; select bank3
 16501     1198  009A               	movwf	26	;volatile
 16502     1199  3001               	movlw	1
 16503     119A  00F0               	movwf	??_EUSART_Transmit_ISR
 16504     119B  0870               	movf	??_EUSART_Transmit_ISR,w
 16505     119C  0022               	movlb	2	; select bank2
 16506     119D  07E7               	addwf	_eusartTxTail^(0+256),f	;volatile
 16507                           
 16508                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 16509     119E  3008               	movlw	8
 16510     119F  0267               	subwf	_eusartTxTail^(0+256),w
 16511     11A0  1803               	btfsc	3,0
 16512                           
 16513                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
 16514     11A1  01E7               	clrf	_eusartTxTail^(0+256)	;volatile
 16515                           
 16516                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
 16517     11A2  3001               	movlw	1
 16518     11A3  00F0               	movwf	??_EUSART_Transmit_ISR
 16519     11A4  0870               	movf	??_EUSART_Transmit_ISR,w
 16520     11A5  0021               	movlb	1	; select bank1
 16521     11A6  07EF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 16522                           
 16523                           ;mcc_generated_files/eusart.c: 209:     }
 16524     11A7  0008               	return
 16525     11A8                     i1l267:	
 16526                           ;mcc_generated_files/eusart.c: 210:     else
 16527                           
 16528                           
 16529                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
 16530     11A8  1211               	bcf	17,4	;volatile
 16531     11A9  0008               	return
 16532     11AA                     __end_of_EUSART_Transmit_ISR:
 16533                           
 16534                           	psect	text98
 16535     1316                     __ptext98:	
 16536 ;; *************** function _EUSART_Receive_ISR *****************
 16537 ;; Defined at:
 16538 ;;		line 216 in file "mcc_generated_files/eusart.c"
 16539 ;; Parameters:    Size  Location     Type
 16540 ;;		None
 16541 ;; Auto vars:     Size  Location     Type
 16542 ;;		None
 16543 ;; Return value:  Size  Location     Type
 16544 ;;                  1    wreg      void 
 16545 ;; Registers used:
 16546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16547 ;; Tracked objects:
 16548 ;;		On entry : 1F/2
 16549 ;;		On exit  : 0/0
 16550 ;;		Unchanged: 0/0
 16551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16556 ;;Total ram usage:        0 bytes
 16557 ;; Hardware stack levels used: 1
 16558 ;; Hardware stack levels required when called: 2
 16559 ;; This function calls:
 16560 ;;		NULL
 16561 ;;		_EUSART_DefaultErrorHandler
 16562 ;;		_EUSART_DefaultFramingErrorHandler
 16563 ;;		_EUSART_DefaultOverrunErrorHandler
 16564 ;;		_EUSART_RxDataHandler
 16565 ;; This function is called by:
 16566 ;;		_EUSART_Initialize
 16567 ;;		_INTERRUPT_InterruptManager
 16568 ;; This function uses a non-reentrant model
 16569 ;;
 16570                           
 16571     1316                     _EUSART_Receive_ISR:	
 16572                           ;psect for function _EUSART_Receive_ISR
 16573                           
 16574                           
 16575                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 16576                           
 16577                           ;incstack = 0
 16578                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16579     1316  0021               	movlb	1	; select bank1
 16580     1317  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16581     1318  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16582     1319  0086               	movwf	6
 16583     131A  3001               	movlw	1	; select bank3/4
 16584     131B  0087               	movwf	7
 16585     131C  0181               	clrf	1
 16586                           
 16587                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
 16588     131D  0023               	movlb	3	; select bank3
 16589     131E  1D1D               	btfss	29,2	;volatile
 16590     131F  2B2D               	goto	i1l5784
 16591                           
 16592                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 16593     1320  0021               	movlb	1	; select bank1
 16594     1321  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16595     1322  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16596     1323  0086               	movwf	6
 16597     1324  3001               	movlw	1	; select bank3/4
 16598     1325  0087               	movwf	7
 16599     1326  1481               	bsf	1,1
 16600                           
 16601                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
 16602     1327  0022               	movlb	2	; select bank2
 16603     1328  0845               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 16604     1329  008A               	movwf	10
 16605     132A  0844               	movf	_EUSART_FramingErrorHandler^(0+256),w
 16606     132B  000A               	callw
 16607     132C  3193               	pagesel	$
 16608     132D                     i1l5784:
 16609                           
 16610                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
 16611     132D  0023               	movlb	3	; select bank3
 16612     132E  1C9D               	btfss	29,1	;volatile
 16613     132F  2B3D               	goto	i1l5790
 16614                           
 16615                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 16616     1330  0021               	movlb	1	; select bank1
 16617     1331  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16618     1332  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16619     1333  0086               	movwf	6
 16620     1334  3001               	movlw	1	; select bank3/4
 16621     1335  0087               	movwf	7
 16622     1336  1501               	bsf	1,2
 16623                           
 16624                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
 16625     1337  0022               	movlb	2	; select bank2
 16626     1338  0843               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 16627     1339  008A               	movwf	10
 16628     133A  0842               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 16629     133B  000A               	callw
 16630     133C  3193               	pagesel	$
 16631     133D                     i1l5790:
 16632                           
 16633                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
 16634     133D  0021               	movlb	1	; select bank1
 16635     133E  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16636     133F  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16637     1340  0086               	movwf	6
 16638     1341  3001               	movlw	1	; select bank3/4
 16639     1342  0087               	movwf	7
 16640     1343  0801               	movf	1,w
 16641     1344  1903               	btfsc	3,2
 16642     1345  2B4D               	goto	i1l5794
 16643                           
 16644                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
 16645     1346  0022               	movlb	2	; select bank2
 16646     1347  0841               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 16647     1348  008A               	movwf	10
 16648     1349  0840               	movf	_EUSART_ErrorHandler^(0+256),w
 16649     134A  000A               	callw
 16650     134B  3193               	pagesel	$
 16651                           
 16652                           ;mcc_generated_files/eusart.c: 233:     } else {
 16653     134C  0008               	return
 16654     134D                     i1l5794:
 16655                           
 16656                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
 16657     134D  319F  27E8         	fcall	_EUSART_RxDataHandler
 16658     134F  0008               	return
 16659     1350                     __end_of_EUSART_Receive_ISR:
 16660                           
 16661                           	psect	text99
 16662     1E40                     __ptext99:	
 16663 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 16664 ;; Defined at:
 16665 ;;		line 252 in file "mcc_generated_files/eusart.c"
 16666 ;; Parameters:    Size  Location     Type
 16667 ;;		None
 16668 ;; Auto vars:     Size  Location     Type
 16669 ;;		None
 16670 ;; Return value:  Size  Location     Type
 16671 ;;                  1    wreg      void 
 16672 ;; Registers used:
 16673 ;;		None
 16674 ;; Tracked objects:
 16675 ;;		On entry : 1F/2
 16676 ;;		On exit  : 1F/3
 16677 ;;		Unchanged: 0/0
 16678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16683 ;;Total ram usage:        0 bytes
 16684 ;; Hardware stack levels used: 1
 16685 ;; This function calls:
 16686 ;;		Nothing
 16687 ;; This function is called by:
 16688 ;;		_EUSART_Initialize
 16689 ;;		_EUSART_Receive_ISR
 16690 ;; This function uses a non-reentrant model
 16691 ;;
 16692                           
 16693     1E40                     _EUSART_DefaultOverrunErrorHandler:	
 16694                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 16695                           
 16696                           
 16697                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
 16698                           
 16699                           ;incstack = 0
 16700                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 16701     1E40  0023               	movlb	3	; select bank3
 16702     1E41  121D               	bcf	29,4	;volatile
 16703                           
 16704                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
 16705     1E42  161D               	bsf	29,4	;volatile
 16706     1E43  0008               	return
 16707     1E44                     __end_of_EUSART_DefaultOverrunErrorHandler:
 16708                           
 16709                           	psect	text100
 16710     1E32                     __ptext100:	
 16711 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 16712 ;; Defined at:
 16713 ;;		line 250 in file "mcc_generated_files/eusart.c"
 16714 ;; Parameters:    Size  Location     Type
 16715 ;;		None
 16716 ;; Auto vars:     Size  Location     Type
 16717 ;;		None
 16718 ;; Return value:  Size  Location     Type
 16719 ;;                  1    wreg      void 
 16720 ;; Registers used:
 16721 ;;		None
 16722 ;; Tracked objects:
 16723 ;;		On entry : 1F/2
 16724 ;;		On exit  : 1F/2
 16725 ;;		Unchanged: 1F/0
 16726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16731 ;;Total ram usage:        0 bytes
 16732 ;; Hardware stack levels used: 1
 16733 ;; This function calls:
 16734 ;;		Nothing
 16735 ;; This function is called by:
 16736 ;;		_EUSART_Initialize
 16737 ;;		_EUSART_Receive_ISR
 16738 ;; This function uses a non-reentrant model
 16739 ;;
 16740                           
 16741     1E32                     _EUSART_DefaultFramingErrorHandler:	
 16742                           ;psect for function _EUSART_DefaultFramingErrorHandler
 16743                           
 16744                           
 16745                           ;incstack = 0
 16746                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 16747     1E32  0008               	return
 16748     1E33                     __end_of_EUSART_DefaultFramingErrorHandler:
 16749                           
 16750                           	psect	text101
 16751     1E34                     __ptext101:	
 16752 ;; *************** function _EUSART_DefaultErrorHandler *****************
 16753 ;; Defined at:
 16754 ;;		line 260 in file "mcc_generated_files/eusart.c"
 16755 ;; Parameters:    Size  Location     Type
 16756 ;;		None
 16757 ;; Auto vars:     Size  Location     Type
 16758 ;;		None
 16759 ;; Return value:  Size  Location     Type
 16760 ;;                  1    wreg      void 
 16761 ;; Registers used:
 16762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16763 ;; Tracked objects:
 16764 ;;		On entry : 1F/2
 16765 ;;		On exit  : 1F/2
 16766 ;;		Unchanged: 0/0
 16767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16772 ;;Total ram usage:        0 bytes
 16773 ;; Hardware stack levels used: 1
 16774 ;; Hardware stack levels required when called: 1
 16775 ;; This function calls:
 16776 ;;		_EUSART_RxDataHandler
 16777 ;; This function is called by:
 16778 ;;		_EUSART_Initialize
 16779 ;;		_EUSART_Receive_ISR
 16780 ;; This function uses a non-reentrant model
 16781 ;;
 16782                           
 16783     1E34                     _EUSART_DefaultErrorHandler:	
 16784                           ;psect for function _EUSART_DefaultErrorHandler
 16785                           
 16786                           
 16787                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
 16788                           
 16789                           ;incstack = 0
 16790                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16791     1E34  319F  27E8         	fcall	_EUSART_RxDataHandler
 16792     1E36  0008               	return
 16793     1E37                     __end_of_EUSART_DefaultErrorHandler:
 16794                           
 16795                           	psect	text102
 16796     1FE8                     __ptext102:	
 16797 ;; *************** function _EUSART_RxDataHandler *****************
 16798 ;; Defined at:
 16799 ;;		line 240 in file "mcc_generated_files/eusart.c"
 16800 ;; Parameters:    Size  Location     Type
 16801 ;;		None
 16802 ;; Auto vars:     Size  Location     Type
 16803 ;;		None
 16804 ;; Return value:  Size  Location     Type
 16805 ;;                  1    wreg      void 
 16806 ;; Registers used:
 16807 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16808 ;; Tracked objects:
 16809 ;;		On entry : 1C/1
 16810 ;;		On exit  : 1F/2
 16811 ;;		Unchanged: 0/0
 16812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16816 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16817 ;;Total ram usage:        1 bytes
 16818 ;; Hardware stack levels used: 1
 16819 ;; This function calls:
 16820 ;;		Nothing
 16821 ;; This function is called by:
 16822 ;;		_EUSART_Receive_ISR
 16823 ;;		_EUSART_DefaultErrorHandler
 16824 ;; This function uses a non-reentrant model
 16825 ;;
 16826                           
 16827     1FE8                     _EUSART_RxDataHandler:	
 16828                           ;psect for function _EUSART_RxDataHandler
 16829                           
 16830                           
 16831                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
 16832                           
 16833                           ;incstack = 0
 16834                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 16835     1FE8  0021               	movlb	1	; select bank1
 16836     1FE9  086E               	movf	_eusartRxHead^(0+128),w
 16837     1FEA  3EB0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 16838     1FEB  0086               	movwf	6
 16839     1FEC  3001               	movlw	1	; select bank3/4
 16840     1FED  0087               	movwf	7
 16841     1FEE  0023               	movlb	3	; select bank3
 16842     1FEF  0819               	movf	25,w	;volatile
 16843     1FF0  0081               	movwf	1
 16844     1FF1  3001               	movlw	1
 16845     1FF2  00F0               	movwf	??_EUSART_RxDataHandler
 16846     1FF3  0870               	movf	??_EUSART_RxDataHandler,w
 16847     1FF4  0021               	movlb	1	; select bank1
 16848     1FF5  07EE               	addwf	_eusartRxHead^(0+128),f	;volatile
 16849                           
 16850                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16851     1FF6  3008               	movlw	8
 16852     1FF7  026E               	subwf	_eusartRxHead^(0+128),w
 16853     1FF8  1803               	btfsc	3,0
 16854                           
 16855                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
 16856     1FF9  01EE               	clrf	_eusartRxHead^(0+128)	;volatile
 16857                           
 16858                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
 16859     1FFA  3001               	movlw	1
 16860     1FFB  00F0               	movwf	??_EUSART_RxDataHandler
 16861     1FFC  0870               	movf	??_EUSART_RxDataHandler,w
 16862     1FFD  0022               	movlb	2	; select bank2
 16863     1FFE  07E5               	addwf	_eusartRxCount^(0+256),f	;volatile
 16864     1FFF  0008               	return
 16865     2000                     __end_of_EUSART_RxDataHandler:
 16866     007E                     btemp	set	126	;btemp
 16867     007E                     int$flags	set	126
 16868     007E                     wtemp0	set	126
 16869     232C                     
 16870                           	psect	config
 16871                           
 16872                           ;Config register CONFIG1 @ 0x8007
 16873                           ;	Oscillator Selection Bits
 16874                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 16875                           ;	Watchdog Timer Enable
 16876                           ;	WDTE = OFF, WDT disabled
 16877                           ;	Power-up Timer Enable
 16878                           ;	PWRTE = OFF, PWRT disabled
 16879                           ;	MCLR Pin Function Select
 16880                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 16881                           ;	Flash Program Memory Code Protection
 16882                           ;	CP = OFF, Program memory code protection is disabled
 16883                           ;	Brown-out Reset Enable
 16884                           ;	BOREN = OFF, Brown-out Reset disabled
 16885                           ;	Clock Out Enable
 16886                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 16887                           ;	Internal/External Switchover Mode
 16888                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 16889                           ;	Fail-Safe Clock Monitor Enable
 16890                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 16891     8007                     	org	32775
 16892     8007  39E4               	dw	14820
 16893                           
 16894                           ;Config register CONFIG2 @ 0x8008
 16895                           ;	Flash Memory Self-Write Protection
 16896                           ;	WRT = OFF, Write protection off
 16897                           ;	CPU System Clock Selection Bit
 16898                           ;	CPUDIV = NOCLKDIV, NO CPU system divide
 16899                           ;	USB Low Speed Clock Selection bit
 16900                           ;	USBLSCLK = 48MHz, System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
 16901                           ;	PLL Multiplier Selection Bit
 16902                           ;	PLLMULT = 3x, 3x Output Frequency Selected
 16903                           ;	PLL Enable Bit
 16904                           ;	PLLEN = ENABLED, 3x or 4x PLL Enabled
 16905                           ;	Stack Overflow/Underflow Reset Enable
 16906                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 16907                           ;	Brown-out Reset Voltage Selection
 16908                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 16909                           ;	Low-Power Brown Out Reset
 16910                           ;	LPBOR = OFF, Low-Power BOR is disabled
 16911                           ;	Low-Voltage Programming Enable
 16912                           ;	LVP = ON, Low-voltage programming enabled
 16913     8008                     	org	32776
 16914     8008  3FCF               	dw	16335

Data Sizes:
    Strings     0
    Constant    587
    Data        6
    BSS         136
    Persistent  36
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     19      32
    BANK1            72     65      72
    BANK2            79      0      79
    BANK3            80      0      47
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           12      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    APP_KeyboardTasks@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    APP_KeyboardUpdateState@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), NULL(), 

    GenericQueue_Contains@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode_2856(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2865(BANK1[1]), 

    GenericQueue_Contains@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_CopyToArray@array	PTR void  size(1) Largest target is 8
		 -> inputReport(BANK1[8]), 

    GenericQueue_CopyToArray@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_Dequeue@item	PTR void  size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), 

    GenericQueue_Dequeue@q	PTR struct . size(2) Largest target is 95
		 -> keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Enqueue@item	PTR const void  size(2) Largest target is 3
		 -> APP_KeyboardUpdateState@usbHidCode_2856(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2865(BANK1[1]), keyboardScanCode(BANK2[3]), 

    GenericQueue_Enqueue@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Init@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsEmpty@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsFull@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Remove@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2857(BANK1[1]), 

    GenericQueue_Remove@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    inPipes$pSrc$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes$pSrc$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes$pSrc$wRam	PTR unsigned short  size(2) Largest target is 0

    inPipes$pSrc$wRom	PTR const unsigned short  size(2) Largest target is 0

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), NULL(), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), 

    IOCAF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), NULL(), 

    IOCAF5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), 

    keyboard$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    keyboard$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    Log_Message@buf	PTR const unsigned char  size(1) Largest target is 6
		 -> main@scanCodeStr(BANK1[6]), 

    Log_UtilityConvertByteToHex@buf	PTR unsigned char  size(1) Largest target is 6
		 -> main@scanCodeStr(BANK1[6]), 

    main@hndlScanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    memcmp@l	PTR const unsigned char  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@r	PTR const unsigned char  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2856(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2857(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2865(BANK1[1]), 

    memcmp@vl	PTR const void  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@vr	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2856(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2857(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2865(BANK1[1]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    memcpy@d1	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2856(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2865(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK2[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2856(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2865(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK2[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memset@dest	PTR void  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    outPipes$pDst$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes$pDst$wRam	PTR unsigned short  size(2) Largest target is 0

    outPipes$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), NULL(NULL[0]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pDst	PTR volatile unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    PS2Keyboard_GetScanCode@scanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), 

    PS2USB_ScanCodeToUSBHID@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    S2611$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S2611$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S736$bRam	PTR unsigned char  size(2) Largest target is 0

    S736$bRom	PTR const unsigned char  size(2) Largest target is 0

    S736$wRam	PTR unsigned short  size(2) Largest target is 0

    S736$wRom	PTR const unsigned short  size(2) Largest target is 0

    S760$bRam	PTR unsigned char  size(2) Largest target is 0

    S760$wRam	PTR unsigned short  size(2) Largest target is 0

    S770$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    sp__memcpy	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), NULL(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 41
		 -> configDescriptor1(CODE[41]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(2) Largest target is 52
		 -> sd000(CODE[4]), sd001(CODE[52]), sd002(CODE[14]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBTransferOnePacket@data	PTR unsigned char  size(2) Largest target is 8
		 -> inputReport(BANK1[8]), outputReport(BANK2[1]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), USBActiveConfiguration(BANK0[1]), USTATcopy(BANK0[1]), 
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _USBDeviceTasks->_USBSuspend
    _USBDeviceTasks->_USBWakeFromSuspend
    _USBCtrlEPService->_USBCtrlTrfOutHandler
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _USBCheckHIDRequest->_USBHIDCBSetIdleRateHandler
    _APP_KeyboardInit->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    i1_APP_KeyboardProcessOutputReport->i1_PS2Keyboard_SendCommand
    _PS2Keyboard_DataInterrupt->_SysTime_GetCurrentTimeMs
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    i1_GenericQueue_Enqueue->i1_memcpy
    i1_memcpy->i1___wmul
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCtrlTrfSetupHandler->_USBCheckStdRequest
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    _PS2Keyboard_ClockInterrupt->i1_GenericQueue_Enqueue
    i1_GenericQueue_Enqueue->i1_memcpy

Critical Paths under _main in BANK1

    _main->_APP_KeyboardTasks
    _SysTime_Init->_TMR2_SetInterruptHandler
    _SYSTEM_Initialize->_USBDeviceInit
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF5_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _PS2Keyboard_Init->_GenericQueue_Init
    _PS2Keyboard_GetScanCode->_GenericQueue_Dequeue
    _GenericQueue_Dequeue->_memcpy
    _Log_UtilityConvertByteToHex->___bmul
    _Log_Message->_EUSART_Write
    _APP_KeyboardTasks->_APP_KeyboardUpdateState
    _GenericQueue_CopyToArray->_memcpy
    _APP_KeyboardUpdateState->_GenericQueue_Remove
    _GenericQueue_Remove->_memcpy
    _GenericQueue_Enqueue->_memcpy
    _memcpy->___wmul
    _GenericQueue_Contains->_memcmp
    _memcmp->___wmul
    ___wmul->___awmod
    _APP_KeyboardProcessOutputReport->_PS2Keyboard_SendCommand

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   46477
                                             48 BANK1     17    17      0
                  _APP_KeyboardTasks
                        _Log_Message
        _Log_UtilityConvertByteToHex
            _PS2Keyboard_GetScanCode
                   _PS2Keyboard_Init
                  _SYSTEM_Initialize
                       _SysTime_Init
 ---------------------------------------------------------------------------------
 (1) _SysTime_Init                                         0     0      0     200
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1427
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                    _USBDeviceAttach
                      _USBDeviceInit
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        8     8      0     272
                                              0 BANK1      8     8      0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     200
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     400
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     555
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_Init                                     0     0      0     814
                  _GenericQueue_Init
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF5_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Init                                    4     0      4     414
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_GetScanCode                              2     2      0    7991
                                             31 BANK1      2     2      0
               _GenericQueue_Dequeue
               _GenericQueue_IsEmpty
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Dequeue                                 7     4      3    7530
                                             24 BANK1      7     4      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _Log_UtilityConvertByteToHex                          6     4      2     689
                                              4 BANK1      6     4      2
                             ___bmul
                            _hex2str
 ---------------------------------------------------------------------------------
 (2) _hex2str                                              1     1      0      88
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Log_Message                                          4     3      1     259
                                              2 BANK1      4     3      1
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (2) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     2      0      44
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APP_KeyboardTasks                                    7     7      0   34532
                                             41 BANK1      7     7      0
    _APP_KeyboardProcessOutputReport
            _APP_KeyboardUpdateState
           _GenericQueue_CopyToArray
               _USBTransferOnePacket
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     634
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                11     7      4    1099
                                              0 BANK1     11     7      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_CopyToArray                             9     6      3    7445
                                             24 BANK1      9     6      3
                            ___awmod
                             ___bmul
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     245
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardUpdateState                              8     8      0   24993
                                             33 BANK1      8     8      0
              _GenericQueue_Contains
               _GenericQueue_Enqueue
                _GenericQueue_Remove
         _PS2Keyboard_GetLastCommand
            _PS2Keyboard_SendCommand
            _PS2USB_ScanCodeToUSBHID
 ---------------------------------------------------------------------------------
 (3) _PS2USB_ScanCodeToUSBHID                              1     1      0     210
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_GetLastCommand                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Remove                                  9     6      3    8757
                                             24 BANK1      9     6      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Enqueue                                 7     3      4    7720
                                             24 BANK1      7     3      4
                _GenericQueue_IsFull
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6    1400
                                             13 BANK1     11     5      6
                            ___awmod (ARG)
                             ___bmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _GenericQueue_IsFull                                  4     2      2     111
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Contains                                8     5      3    7047
                                             22 BANK1      8     5      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
 ---------------------------------------------------------------------------------
 (4) _memcmp                                               9     4      5     715
                                             13 BANK1      9     4      5
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3656
                                              7 BANK1      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1720
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_IsEmpty                                 4     2      2     378
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardProcessOutputReport                      0     0      0      22
            _PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_SendCommand                              1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0   31710
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
                     _USBDeviceTasks
 ---------------------------------------------------------------------------------
 (6) _USBDeviceTasks                                       2     2      0   30454
                                             17 BANK0      2     2      0
          _USBCtrlEPAllowStatusStage
                   _USBCtrlEPService
      _USBIncrement1msInternalTimers
                    _USBStallHandler
                         _USBSuspend
                 _USBWakeFromSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
                    i1_USBDeviceInit
 ---------------------------------------------------------------------------------
 (7) i1_USBDeviceInit                                      8     8      0     272
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (7) _USBWakeFromSuspend                                   1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USBSuspend                                           1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USBStallHandler                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _USBIncrement1msInternalTimers                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _USBCtrlEPService                                     1     1      0   17881
                                             16 BANK0      1     1      0
                _USBCtrlTrfInHandler
               _USBCtrlTrfOutHandler
             _USBCtrlTrfSetupHandler
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfSetupHandler                               1     1      0   17309
                                             15 BANK0      1     1      0
                 _USBCheckStdRequest
           _USBCtrlEPServiceComplete
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (9) _USBCtrlEPServiceComplete                             4     4      0      92
                                              7 COMMON     4     4      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPAllowDataStage                             4     4      0      92
                                              3 COMMON     4     4      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (9) _USBCheckStdRequest                                   2     2      0   13132
                                             13 BANK0      2     2      0
            _USBStdFeatureReqHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
                _USBStdSetCfgHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (10) _USBStdSetCfgHandler                                 5     5      0    4445
                                             13 COMMON     1     1      0
                                              6 BANK0      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                           i1_memset
 ---------------------------------------------------------------------------------
 (11) i1_memset                                            7     3      4     200
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) _USBStdGetStatusHandler                              4     4      0      46
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (10) _USBStdGetDscHandler                                 3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _USBStdFeatureReqHandler                             7     7      0    4556
                                              6 BANK0      7     7      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USER_USB_CALLBACK_EVENT_HANDLER                      6     0      6    4085
                                              0 BANK0      6     0      6
                   _APP_KeyboardInit
                 _USBCheckHIDRequest
 ---------------------------------------------------------------------------------
 (8) _USBCheckHIDRequest                                   2     2      0     133
                                              4 COMMON     2     2      0
         _USBHIDCBSetIdleRateHandler
           _USBHIDCBSetReportHandler
 ---------------------------------------------------------------------------------
 (9) _USBHIDCBSetReportHandler                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _USBHIDCBSetIdleRateHandler                           4     3      1     133
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (8) _APP_KeyboardInit                                     0     0      0    1260
                  _USBEnableEndpoint
                i1_GenericQueue_Init
             i1_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (9) i1_USBTransferOnePacket                              11     7      4     454
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (9) i1_GenericQueue_Init                                  4     0      4     162
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (9) _USBEnableEndpoint                                    6     5      1     644
                                              7 COMMON     6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (10) _USBConfigureEndpoint                                7     6      1     400
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfOutHandler                                 4     4      0     136
                                             10 COMMON     4     4      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (9) _USBCtrlTrfRxService                                  6     6      0     136
                                              4 COMMON     6     6      0
          _USBCtrlEPAllowStatusStage
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPAllowStatusStage                           4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfInHandler                                  5     5      0     137
                                              3 COMMON     5     5      0
                _USBCtrlTrfTxService
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (10) _USBHIDCBSetReportComplete                           0     0      0      22
  i1_APP_KeyboardProcessOutputReport
 ---------------------------------------------------------------------------------
 (11) i1_APP_KeyboardProcessOutputReport                   0     0      0      22
          i1_PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (12) i1_PS2Keyboard_SendCommand                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBCtrlTrfTxService                                 3     3      0      92
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             0     0      0       0
                                NULL *
                   _SysTimeInterrupt *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SysTimeInterrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0    1256
                         _IOCAF4_ISR
                         _IOCAF5_ISR
 ---------------------------------------------------------------------------------
 (7) _IOCAF5_ISR                                           0     0      0       0
                                NULL *
     _IOCAF5_DefaultInterruptHandler *
          _PS2Keyboard_DataInterrupt *
 ---------------------------------------------------------------------------------
 (8) _PS2Keyboard_DataInterrupt                            0     0      0       0
           _SysTime_GetCurrentTimeMs
 ---------------------------------------------------------------------------------
 (8) _IOCAF5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _IOCAF4_ISR                                           0     0      0    1256
                                NULL *
     _IOCAF4_DefaultInterruptHandler *
         _PS2Keyboard_ClockInterrupt *
 ---------------------------------------------------------------------------------
 (8) _PS2Keyboard_ClockInterrupt                           6     6      0    1256
                                             12 COMMON     2     2      0
                                             12 BANK0      4     4      0
           _SysTime_GetCurrentTimeMs
             i1_GenericQueue_Enqueue
 ---------------------------------------------------------------------------------
 (9) i1_GenericQueue_Enqueue                               7     3      4    1188
                                              5 BANK0      7     3      4
              i1_GenericQueue_IsFull
                          i1___awmod
                           i1___wmul
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (8) i1_memcpy                                            11     5      6     299
                                              6 COMMON     6     0      6
                                              0 BANK0      5     5      0
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) i1___awmod                                           7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) i1_GenericQueue_IsFull                               4     2      2      48
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (9) _SysTime_GetCurrentTimeMs                             4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _IOCAF4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_KeyboardTasks
     _APP_KeyboardProcessOutputReport
       _PS2Keyboard_SendCommand
     _APP_KeyboardUpdateState
       _GenericQueue_Contains
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
           ___awmod (ARG)
         _memcmp
           ___wmul (ARG)
       _GenericQueue_Enqueue
         _GenericQueue_IsFull
         ___awmod
         ___wmul
         _memcpy
           ___awmod (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
       _GenericQueue_Remove
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
         _memcmp
         _memcpy
       _PS2Keyboard_GetLastCommand
       _PS2Keyboard_SendCommand
       _PS2USB_ScanCodeToUSBHID
     _GenericQueue_CopyToArray
       ___awmod
       ___bmul
       ___wmul
       _memcpy
     _USBTransferOnePacket
     _memset
   _Log_Message
     _EUSART_Write
     _EUSART_is_tx_ready
   _Log_UtilityConvertByteToHex
     ___bmul
     _hex2str
   _PS2Keyboard_GetScanCode
     _GenericQueue_Dequeue
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
       _memcpy
     _GenericQueue_IsEmpty
   _PS2Keyboard_Init
     _GenericQueue_Init
     _IOCAF4_SetInterruptHandler
     _IOCAF5_SetInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
       _IOCAF5_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _USBDeviceAttach
     _USBDeviceInit
     _WDT_Initialize
   _SysTime_Init
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       NULL(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       _PS2Keyboard_ClockInterrupt *
         _SysTime_GetCurrentTimeMs
         i1_GenericQueue_Enqueue
           i1_GenericQueue_IsFull
           i1___awmod
           i1___wmul
           i1_memcpy
             i1___wmul (ARG)
     _IOCAF5_ISR
       NULL(Fake) *
       _IOCAF5_DefaultInterruptHandler *
       _PS2Keyboard_DataInterrupt *
         _SysTime_GetCurrentTimeMs
   _TMR2_ISR *
     NULL(Fake) *
     _SysTimeInterrupt *
     _TMR2_DefaultInterruptHandler *
   _USBDeviceTasks *
     _USBCtrlEPAllowStatusStage
     _USBCtrlEPService
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
         _USBHIDCBSetReportComplete *
           i1_APP_KeyboardProcessOutputReport
             i1_PS2Keyboard_SendCommand
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
           _USBHIDCBSetReportComplete *
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _APP_KeyboardInit
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i1_GenericQueue_Init
                 i1_USBTransferOnePacket
               _USBCheckHIDRequest
                 _USBHIDCBSetIdleRateHandler
                 _USBHIDCBSetReportHandler
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
             i1_memset
           _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
         _USER_USB_CALLBACK_EVENT_HANDLER
       i1_memcpy
     _USBIncrement1msInternalTimers
     _USBStallHandler
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USER_USB_CALLBACK_EVENT_HANDLER
     i1_USBDeviceInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     13      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            48      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               48     41      48       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            4F      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               4F      0      4F       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2F      11       58.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      F4      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10               C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      F4      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Oct 24 19:45:12 2024

                ?_EUSART_SetRxInterruptHandler 00A8               __end_of_TMR2_SetInterruptHandler 1E91  
                                   _USB_SD_Ptr 18BC                                 ___bmul@product 00AA  
                     __end_of_PS2Keyboard_Init 0800                                  _USBDeviceInit 0E81  
                          ___wmul@multiplicand 00B1                             _USBCheckHIDRequest 0CC2  
             __end_of_USBHIDCBSetReportHandler 1F1A                               i1___wmul@product 0074  
                   PS2Keyboard_SendCommand@cmd 00A8           USER_USB_CALLBACK_EVENT_HANDLER@event 0050  
         USER_USB_CALLBACK_EVENT_HANDLER@pdata 0052                                            l102 1F23  
                                          l261 1255                    __end_of_USBStdGetDscHandler 0CC2  
                                          l491 10C2                                            _BDT 0020  
                                          l868 034E                       _GenericQueue_CopyToArray 1668  
                                          _PR2 001B                                            _UIE 0E92  
                                          _UIR 0E90                         ??_EUSART_RxDataHandler 0070  
                                   _USBSuspend 109A                 ?_EUSART_SetFramingErrorHandler 00A8  
                                 ___awmod@sign 00AE                           USBStdSetCfgHandler@i 0059  
                         USBStdSetCfgHandler@p 0056                                _TMR2_Initialize 1F5A  
                                          wreg 0009                                 _USBDeviceTasks 0F2D  
                          ?_USBCheckHIDRequest 0070                            _GenericQueue_IsFull 1F92  
                               _USBDeviceState 006C             __end_of_IOCAF5_SetInterruptHandler 1E61  
                   _IOCAF5_SetInterruptHandler 1E59                              main@scanCodeValid 00E4  
                  ??_PS2Keyboard_DataInterrupt 0074                          ??_USBCtrlTrfRxService 0074  
                          _GenericQueue_Remove 063E                       USBEnableEndpoint@options 0077  
                  ?_PS2Keyboard_GetLastCommand 0070                                           l1242 1108  
                                         l1147 1671                     USBConfigureEndpoint@handle 0076  
                                         l5200 0EC3                                           l5054 1F3A  
                                         l5222 0EDC                                           l5058 1F40  
                                         l6300 0142                                           l5172 0E8C  
                                         l4710 1301                                           l4720 1102  
                                         l6312 0169                                           l6400 03A0  
                                         l5264 10C7                                           l4714 1308  
                                         l4706 12FD                                           l6306 014F  
                                         l5274 124C                                           l4740 1497  
                                         l4708 12E6                                           l4644 12C1  
                                         l6332 01B0                                           l6324 0180  
                                         l6308 015E                                           l6420 03D5  
                                         l6412 03BD                                           l5188 0EA5  
                                         l6500 0A9B                                           l4910 06F8  
                                         l6350 01EB                                           l6342 01D1  
                                         l6318 0174                                           l6262 00B2  
                                         l5374 0BDD                                           l5366 0BCD  
                                         l4752 14A4                                           l4744 149E  
                                         l6272 00DA                                           l6264 00C0  
                                         l5384 0C24                                           l6416 03CD  
                                         l5288 126B                                           l5552 1F58  
                                         l5544 1F51                                           l6512 0AC1  
                                         l4754 14B0                                           l4762 14C5  
                                         l4914 0722                                           l6354 01F8  
                                         l6346 01DE                                           l6282 010A  
                                         l6258 00A5                                           l5386 0C3C  
                                         l6426 03EE                                           l6434 0419  
                                         l6506 0AAA                                           l4932 1666  
                                         l6292 0128                                           l6268 00CD  
                                         l6276 00F6                                           l5396 1087  
                                         l4766 14CD                                           l4758 14BC  
                                         l6358 0205                                           l6438 0432  
                                         l5814 116B                                           l4928 1656  
                                         l6296 0135                                           l6288 011B  
                                         l6392 0377                                           l5840 111D  
                                         l5816 116C                                           l6386 035C  
                                         l5834 1121                                           l4892 11BD  
                                         l6396 0389                                           l6492 0A8F  
                                         l6494 0A90                                           l6486 0A84  
                                         _LATA 010C                                           _LATC 010E  
                                         u4005 14BD                                           u4540 0805  
                                         u3830 1F76                                           u3840 1F77  
                                         u3850 1F9E                                           u3915 1109  
                                         u3860 1F9F                                           u3925 110E  
                                         u4485 0EA8                                           u6520 03FC  
                                         u6505 03E9                                           u6425 0355  
                                         u6285 019F                                           u6445 0380  
                                         u3975 14A7                                           u5495 1276  
                        ??_USBCtrlTrfTxService 0070                                           u3995 14B6  
                                         u6660 0A80                                           u6717 0A61  
                                         u6727 1141                                           _UCFG 0E91  
                                         _UEP0 0E98                                           _UEP1 0E99  
                                         _UEIE 0E97                                           _UEIR 0E93  
                                         _UCON 0E8E                                           _TMR2 001A  
                                         _WPUA 020C         USBStdFeatureReqHandler@current_ep_data 005A  
                                         _pDst 0162                                           _main 0A52  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                              _USBDeviceAttach 10B2                      ?_SysTime_GetCurrentTimeMs 0070  
                                         btemp 007E                                           start 003D  
                                 _SysTime_Init 1EC3                           _GenericQueue_Dequeue 089A  
                         _GenericQueue_IsEmpty 1F6B                           ??_USBCheckHIDRequest 0074  
                         ?_GenericQueue_IsFull 00A8                     __end_of_USBCheckStdRequest 09E0  
                       ??_USBCtrlTrfOutHandler 007A                              ___bmul@multiplier 00AB  
                                _LocalSOFCount 0136                           _GenericQueue_Enqueue 0832  
              APP_KeyboardUpdateState@scanCode 00D0                            USBDeviceInit@i_1324 00AE  
                    ??_USBStdFeatureReqHandler 0056                           ?_GenericQueue_Remove 00C0  
                                ??_Log_Message 00AB                       ?_APP_KeyboardUpdateState 0070  
                     GenericQueue_Dequeue@item 00C2                       ??_USBStdGetStatusHandler 0070  
                               ?_USBDeviceInit 0070                                  ?_EUSART_Write 0070  
                __end_of_OSCILLATOR_Initialize 1F27                __end_of_PS2Keyboard_GetScanCode 116E  
                                        ?_main 0070                                __end_of___awmod 14D2  
                       __end_of_USBDeviceTasks 1000                                          _T2CON 001C  
                    ?_USBCtrlEPServiceComplete 0070                                          i1l140 0033  
                                        i1l133 000D                                          i1l136 0019  
                                        i1l145 003B                                          i1l138 0026  
                                   i1memcpy@d1 0076                                          i1l267 11A8  
                                        i1l516 0D9C                                          i1l460 0F84  
                                        i1l630 0B2C                                          i1l454 0F4C  
                                        i1l544 0745                                          i1l464 0FAC  
                                        i1l529 16E1                                          i1l465 0FFD  
                                        i1l642 09DF                                          i1l466 0FFA  
                                        i1l644 0977                                          i1l709 0D4F  
                                        i1l581 15AD                                          i1l653 099D  
                                        i1l584 15FB                                          i1l585 15B6  
                                        i1l586 15B9                                          i1l763 13C7  
                                        i1l678 02FF                                          i1l859 153A  
                                   i1memcpy@s1 0078                                          _UADDR 0E96  
                                        _RCREG 0199                                          _RCSTA 019D  
                                        _TRISA 008C                                          _TRISC 008E  
                                        _USTAT 0E8F                                          _TXREG 019A  
                                 main@scanCode 00E6                                          _TXSTA 019E  
                                 _outputReport 0120                                __end_of_hex2str 1F5A  
           __end_of_USBHIDCBSetIdleRateHandler 1F0D                     _USBHIDCBSetIdleRateHandler 1F00  
              __end_of_USBCtrlEPAllowDataStage 1798                                          _sd000 18C2  
                                        _sd001 183F                                          _sd002 18AE  
                             __end_of_TMR2_ISR 1EDA                 ?_USBIncrement1msInternalTimers 0070  
                               i1___awmod@sign 0076                        __end_of_PIN_MANAGER_IOC 1EB8  
                      _PS2USB_ScanCodeToUSBHID 11AA                                 _WDT_Initialize 1E3A  
                                        pclath 000A                               __end_ofi1___wmul 1100  
                                        status 0003                            i1___wmul@multiplier 0070  
                                        wtemp0 007E                               __end_ofi1_memcpy 12B9  
                              _TMR2_StartTimer 1E3D                               __end_ofi1_memset 1FD1  
                        ?_GenericQueue_Dequeue 00C0                          ?_GenericQueue_IsEmpty 00A8  
                        ??_GenericQueue_IsFull 00AA                           __end_of_ps2ExtUsbMap 0549  
                        _GenericQueue_Contains 1606                PS2USB_ScanCodeToUSBHID@scanCode 00A8  
                        ?_GenericQueue_Enqueue 00C0                          ??_GenericQueue_Remove 00C3  
                    _PS2Keyboard_DataInterrupt 1F27                                __initialization 003F  
                  ?_PS2Keyboard_ClockInterrupt 0070                                   __end_of_main 0AC6  
                               ??_EUSART_Write 00A8                        __end_of_TMR2_Initialize 1F6B  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 00AA  
                     _TMR2_SetInterruptHandler 1E89                                         ??_main 00D8  
                __end_ofi1_GenericQueue_IsFull 1F92                            __end_of_Log_Message 1136  
                              ?_USBDeviceTasks 0070                       ?_PS2Keyboard_SendCommand 0070  
                GenericQueue_Init@element_size 00AA                                    ?_USBSuspend 0070  
                      _IOCAF4_InterruptHandler 016E                                i1_USBDeviceInit 0DDE  
                     _USBHIDCBSetReportHandler 1F0D                         __end_of_WDT_Initialize 1E3D  
    __end_of_EUSART_DefaultFramingErrorHandler 1E33            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 1E32  
                      __end_of_USBDeviceAttach 10CB                     _EUSART_OverrunErrorHandler 0142  
                                       _ACTCON 039B                                         _APFCON 011D  
                                       _ANSELA 018C                                         _ANSELC 018E  
                                       _BORCON 0116                       __end_of_SysTimeInterrupt 1EA3  
                                       i1l1053 057B                                         i1l1048 0572  
                                       i1l1242 10ED                                         i1l4002 0B5D  
                                       i1l4012 0BA4                                         i1l4014 0BBC  
                                       i1l4032 0CCF                                         i1l4050 0D02  
                                       i1l4122 1397                                         i1l4130 13A0  
                                       i1l4212 0A02                                         i1l4052 0D05  
                                       i1l4044 0CE7                                         i1l4124 139A  
                                       i1l4062 0D1F                                         i1l4038 0CDB  
                                       i1l4046 0CFA                                         i1l4126 139D  
                                       i1l4118 138B                                         i1l4152 16DC  
                                       i1l4072 0D33                                         i1l4312 0C4A  
                                       i1l4304 095D                                         i1l4058 0D11  
                                       i1l5108 1EFD                                         i1l4164 16FD  
                                       i1l4172 1713                                         i1l4068 0D2B  
                                       i1l4420 02A0                                         i1l4412 0282  
                                       i1l4332 0CA7                                         i1l4324 0C83  
                                       i1l4316 0C54                                         i1l4244 1763  
                                       i1l4174 1717                                         i1l4182 172D  
                                       i1l4094 1547                                         i1l4430 02B7  
                                       i1l4406 0264                                         i1l4334 0CAA  
                                       i1l4326 0C86                                         i1l4520 1488  
                                       i1l4512 1477                                         i1l4264 090B  
                                       i1l4248 1776                                         i1l5304 1181  
                                       i1l4506 145F                                         i1l6210 05F3  
                                       i1l6202 05DF                                         i1l4434 02C2  
                                       i1l4418 0296                                         i1l4338 0CAD  
                                       i1l4194 1FBE                                         i1l4282 092A  
                                       i1l5306 1188                                         i1l4508 146B  
                                       i1l4516 1480                                         i1l4532 129B  
                                       i1l4604 074D                                         i1l4460 032C  
                                       i1l4444 02EB                                         i1l4428 02B0  
                                       i1l6214 05FB                                         i1l4630 07DE  
                                       i1l4606 0763                                         i1l4454 0305  
                                       i1l4446 02F0                                         i1l4390 0235  
                                       i1l4358 15CE                                         i1l6224 0615  
                                       i1l4616 0798                                         i1l4392 0237  
                                       i1l4368 15E7                                         i1l4544 0D61  
                                       i1l5336 1244                                         i1l4474 10E7  
                                       i1l6218 0602                                         i1l6234 061B  
                                       i1l4618 07A4                                         i1l4458 0324  
                                       i1l5338 1246                                         i1l6228 0618  
                                       i1l6236 0633                                         i1l6172 0574  
                                       i1l6180 058C                                         i1l4652 097D  
                                       i1l4548 0D65                                         i1l5356 150C  
                                       i1l4494 1452                                         i1l6182 05AF  
                                       i1l6246 1EF0                                         i1l4654 0980  
                                       i1l4566 0DA8                                         i1l4574 0DB1  
                                       i1l5358 150F                                         i1l5702 0F76  
                                       i1l6184 05B3                                         i1l6176 057D  
                                       i1l4832 1357                                         i1l3960 13F5  
                                       i1l4664 098D                                         i1l4656 0983  
                                       i1l5616 0E33                                         i1l5712 0F8A  
                                       i1l4498 1459                                         i1l6186 05B7  
                                       i1l6178 0583                                         i1l3962 13FD  
                                       i1l3970 11D1                                         i1l4666 0990  
                                       i1l4682 09B4                                         i1l6188 05B9  
                                       i1l4860 0AE4                                         i1l4844 1388  
                                       i1l4668 0993                                         i1l6366 1EB3  
                                       i1l4870 0B0F                                         i1l3974 11D8  
                                       i1l4678 09A7                                         i1l5582 0E00  
                                       i1l5566 0DE9                                         i1l5726 0FA5  
                                       i1l5718 0F91                                         i1l4880 0B3D  
                                       i1l5752 0FE2                                         i1l5736 0FB2  
                                       i1l4882 0B3E                                         i1l4874 0B1F  
                                       i1l4858 0AE1                                         i1l3994 0B4D  
                                       i1l5594 0E1D                                         i1l5754 0FF1  
                                       i1l5746 0FC9                                         i1l5690 0F5C  
                                       i1l5676 0F46                                         i1l5668 0F39  
                                       i1l5790 133D                                         i1l5784 132D  
                                       i1l5696 0F62                                         i1l5794 134D  
                                       i1l6690 13A8                                         i1l6692 13C2  
                                       i1l6684 09BC                                         i1l6694 0CEF  
                                       i1l6686 15F0                                         i1l6696 0D3B  
                                       i1l6688 0CB6                                         i1l6698 0625  
                                       u321_25 176D                                         u307_25 1540  
                   __end_of_EUSART_is_tx_ready 0807                                         u352_20 1F8A  
                                       u512_25 0E03                                         u353_20 1F8B  
                                       u361_25 1462                                         u363_25 1471  
                                       u355_25 10EE                                         u364_25 1478  
                                       u356_25 10F3                                         u292_25 13CE  
                                       u293_25 13D4                                         u294_25 13DC  
                                       u375_25 0741                                         _OSCCON 0099  
                                       u466_25 14DD                                         u590_20 0565  
                                       _PLLRDY 04D6                                    i1memcpy@tmp 0054  
                                       u673_27 10D4                                         u596_24 05C6  
                                       u588_24 055E                                         u596_25 05C5  
                                       u588_25 055D                                         u589_20 0564  
                                       u598_20 05EE                                         u599_20 05EF  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097                   i1USBTransferOnePacket@handle 0079  
              __end_of_APP_KeyboardUpdateState 0221                              _shortPacketStatus 0163  
                             _APP_KeyboardInit 1519                                USBDeviceTasks@i 0062  
                  USBStdFeatureReqHandler@pUEP 0058                       USBTransferOnePacket@data 00A9  
                   USBCtrlTrfInHandler@lastDTS 0077                                ??_USBDeviceInit 00A8  
                                       ___bmul 1F38                                _keyboardIsBreak 014F  
                                       ___wmul 1100                                      ??___awmod 00AC  
                              _keyboardCommand 014E                              _USBEnableEndpoint 11C9  
                          _EUSART_Transmit_ISR 118B                                         _memcmp 12DF  
                                       _memcpy 12B9                   i1PS2Keyboard_SendCommand@cmd 0070  
                                       _memset 1084                                ___awmod@divisor 00A8  
                                       _timeMs 0128                                      ??_hex2str 00A8  
                              ___awmod@counter 00AD                             ?_USBEnableEndpoint 0077  
                            __end_ofi1___awmod 148D                                   Log_Message@i 00AD  
                    ??_PS2USB_ScanCodeToUSBHID 00A8                                ?_WDT_Initialize 0070  
                                  _OldSOFCount 0134                            ??_USBEnableEndpoint 0078  
                           APP_KeyboardTasks@i 00D7                        __end_of_TMR2_StartTimer 1E40  
     TMR2_SetInterruptHandler@InterruptHandler 00A8     IOCAF5_SetInterruptHandler@InterruptHandler 00A8  
   IOCAF4_SetInterruptHandler@InterruptHandler 00A8                               ?_PIN_MANAGER_IOC 0070  
                                  _CtrlTrfData 0048                                   ??_IOCAF4_ISR 007E  
                                 ??_IOCAF5_ISR 0074                           ?_EUSART_Transmit_ISR 0070  
           USBHIDCBSetIdleRateHandler@reportID 0073                           _controlTransferState 006A  
                PS2Keyboard_ClockInterrupt@bit 007D                              _SYSTEM_Initialize 1FA6  
                      __end_of__initialization 0083                     i1USBTransferOnePacket@data 0071  
                      ?i1_GenericQueue_Enqueue 0055                         ??_GenericQueue_Dequeue 00C3  
                       ??_GenericQueue_IsEmpty 00AA                         ?_GenericQueue_Contains 00BE  
                           ?_SYSTEM_Initialize 0070                         ??_GenericQueue_Enqueue 00C4  
                     GenericQueue_Enqueue@item 00C2           __end_of_EUSART_SetTxInterruptHandler 1E89  
                 _EUSART_SetTxInterruptHandler 1E81                            ___bmul@multiplicand 00A8  
                      i1GenericQueue_Enqueue@q 0055                                 __pcstackCOMMON 0070  
                   ??_GenericQueue_CopyToArray 00C3                      __end_of_USBEnableEndpoint 11E9  
                                __end_of_sd000 18C6                                  __end_of_sd001 1873  
                                __end_of_sd002 18BC                                   __pidataBANK3 1E44  
                          ??_SYSTEM_Initialize 00B0                                    _Log_Message 111B  
                                    ?_TMR2_ISR 0070                                _active_protocol 016C  
              __end_of_PS2Keyboard_SendCommand 1152         __end_of_IOCAF4_DefaultInterruptHandler 1E34  
               _IOCAF4_DefaultInterruptHandler 1E33                        __end_ofi1_USBDeviceInit 0E81  
                  __end_of_USBCtrlTrfInHandler 0B41                               ?_TMR2_Initialize 0070  
                            ?_PS2Keyboard_Init 0070                   ?_Log_UtilityConvertByteToHex 00AC  
                           __end_of_IOCAF4_ISR 1EF3                             __end_of_IOCAF5_ISR 1F00  
                                    ?i1___wmul 0070                    __end_ofi1_GenericQueue_Init 1209  
                           ??_PS2Keyboard_Init 00AC                                 _OPTION_REGbits 0095  
                                    ?i1_memcpy 0076                                      ?i1_memset 0070  
                         _eusartRxStatusBuffer 01A8                    ?_IOCAF5_SetInterruptHandler 00A8  
              ??_EUSART_SetOverrunErrorHandler 00AA                       ??_USBCtrlTrfSetupHandler 005F  
                      _USBTicksSinceSuspendEnd 0157                     ?i1_PS2Keyboard_SendCommand 0070  
              i1GenericQueue_Init@element_size 0072                                  _keyboardState 0155  
                             ?_USBDeviceAttach 0070                      __end_of_SYSTEM_Initialize 1FBB  
                        ??_EUSART_Transmit_ISR 0070                         _USBStdGetStatusHandler 15A9  
                   i1GenericQueue_Enqueue@item 0057                 __end_ofi1_GenericQueue_Enqueue 1800  
                                   __pbssBANK0 0063                                     __pbssBANK1 00E9  
                                   __pbssBANK2 0121                                     __pbssBANK3 01A0  
                         __end_of_EUSART_Write 126E               ??_IOCAF5_DefaultInterruptHandler 0070  
              ?_IOCAF5_DefaultInterruptHandler 0070                                    _pBDTEntryIn 0063  
                      _IOCAF5_InterruptHandler 01CD                            _keyboardCommandBits 014D  
             __end_of_USBCtrlEPServiceComplete 0DDE                            _keyboardCommandOnes 014C  
             PS2Keyboard_ClockInterrupt@bitPos 007C             Log_UtilityConvertByteToHex@bufSize 00AD  
                                   __pmaintext 0A52              APP_KeyboardUpdateState@usbHidCode 00CC  
       APP_KeyboardUpdateState@usbHidCode_2856 00CE         APP_KeyboardUpdateState@usbHidCode_2865 00CF  
       APP_KeyboardUpdateState@usbHidCode_2857 00CD                           USBCtrlTrfRxService@i 0078  
               Log_UtilityConvertByteToHex@buf 00AC                                        ?___bmul 00A8  
                ?_EUSART_SetTxInterruptHandler 00A8               _EUSART_TxDefaultInterruptHandler 014A  
                                      ?___wmul 00AF                                     ??_TMR2_ISR 0070  
                                   __pintentry 0004                                        ?_memcmp 00B5  
                                      ?_memcpy 00B5                                        _BAUDCON 019F  
                                      ?_memset 00A8                                     _device_dsc 189C  
                             _USBCtrlEPService 14D2                   ??_EUSART_DefaultErrorHandler 0071  
                                   _ep_data_in 013E                                     ??i1___wmul 0074  
                  __end_of_USBCtrlTrfRxService 07E5                             _USBCheckStdRequest 096F  
                                _eusartRxCount 0165                              _configDescriptor1 1873  
                ??_Log_UtilityConvertByteToHex 00AE                                     ??i1_memcpy 007C  
                                   ??i1_memset 0074                                   _ps2ExtUsbMap 044A  
       APP_KeyboardTasks@TimeDeltaMilliseconds 00D5                    __end_of_USBCtrlTrfTxService 1731  
                          _USBStdSetCfgHandler 0903                    ?_USBHIDCBSetIdleRateHandler 0070  
                             main@hndlScanCode 00E5                                        _OSCTUNE 0098  
                Log_UtilityConvertByteToHex@d0 00AF                  Log_UtilityConvertByteToHex@d1 00B1  
                     ??_EUSART_SetErrorHandler 00AA                            ?_USBCheckStdRequest 0070  
                             ?_TMR2_StartTimer 0070                                        _UIEbits 0E92  
            __end_ofi1_PS2Keyboard_SendCommand 10E5                                        _UIRbits 0E90  
                        GenericQueue_Dequeue@q 00C0                    APP_KeyboardUpdateState@leds 00CB  
                                 i1memset@dest 0075                       ??i1_USBTransferOnePacket 0074  
                        GenericQueue_IsEmpty@q 00A8                              __end_of_ps2UsbMap 1084  
              ??_USBIncrement1msInternalTimers 0070                           ?_USBStdSetCfgHandler 0070  
                            _APP_KeyboardTasks 0341                     ??_TMR2_SetInterruptHandler 00AA  
                            __end_of_hid_rpt01 183F                             Log_Message@bufSize 00AA  
                         ??_USBCheckStdRequest 005D                             ?_APP_KeyboardTasks 0070  
                                      ___awmod 148D                          GenericQueue_Enqueue@q 00C0  
                         i1GenericQueue_Init@q 0070                               ??_USBDeviceTasks 0061  
                   ??_USBHIDCBSetReportHandler 0070                              ??_USBStallHandler 0070  
                             _keyboardIdleRate 0138                               ?i1_USBDeviceInit 0070  
                    __end_of_configDescriptor1 189C                               _keyboardIsExtend 0150  
                                      _hex2str 1F49                                        __ptext1 1EC3  
                                      __ptext2 1E3D                                        __ptext3 1FA6  
                                      __ptext4 1E3A                                        __ptext5 0E81  
                                      __ptext6 10B2                                        __ptext7 1F5A  
                                      __ptext8 1E89                                        __ptext9 0807  
                                      _inPipes 00E9                    _USBDeferOUTDataStagePackets 0158  
                          ??_APP_KeyboardTasks 00D1                          _OSCILLATOR_Initialize 1F1A  
                                 ??_USBSuspend 007D                                      _T2CONbits 001C  
                             _keyboardScanCode 0169                               ___awmod@dividend 00AA  
                     ??_PIN_MANAGER_Initialize 00AA                                      _IOCAFbits 0393  
                     __end_of_APP_KeyboardInit 1561                                        _oreflag 0156  
                                    _IOCANbits 0392                                      _IOCAPbits 0391  
                           __end_of_USB_CD_Ptr 18C8                                        clrloop0 1EDB  
                     _SysTime_GetCurrentTimeMs 1E91                           end_of_initialization 0083  
                  __end_of_GenericQueue_IsFull 1FA6                             __end_of_USB_SD_Ptr 18C2  
                                      memcmp@l 00BB                                        memcmp@n 00B8  
                                      memcmp@r 00BD                              ?_SysTimeInterrupt 0070  
        __end_of_EUSART_SetOverrunErrorHandler 1E79                  _EUSART_SetOverrunErrorHandler 1E71  
                                      memcpy@d 00BB                                        memcpy@n 00B9  
                                      memcpy@s 00BD                            _pBDTEntryEP0OutNext 0067  
                  __end_of_GenericQueue_Remove 0732                                        memset@c 00A8  
                                      memset@n 00AA                                        memset@p 00AD  
                              _USB1msTickCount 01C0                        _PS2Keyboard_GetScanCode 1152  
                     ?_USBStdFeatureReqHandler 0070                             ??_SysTimeInterrupt 0070  
                    __end_of_APP_KeyboardTasks 044A                              _EUSART_Initialize 1407  
                        ??_USBStdSetCfgHandler 007D                                     hex2str@val 00A8  
                           ?_EUSART_Initialize 0070                             __end_of_USBSuspend 10B2  
                      _USBCtrlEPAllowDataStage 1731                                      _RCSTAbits 019D  
                           _EUSART_is_tx_ready 0800                                     _prevTimeMs 012C  
                     _USBCtrlEPServiceComplete 0D50                          i1___wmul@multiplicand 0072  
                   _USBStatusStageEnabledFlag1 015B                     _USBStatusStageEnabledFlag2 015A  
                          ??_EUSART_Initialize 00AA                               ??_WDT_Initialize 00A8  
               ??_EUSART_SetTxInterruptHandler 00AA                             USBEnableEndpoint@p 007A  
                                    _PORTAbits 000C                            ?_EUSART_is_tx_ready 0070  
                        i1_GenericQueue_IsFull 1F7E                                      _TRISAbits 008C  
                           _BothEP0OutUOWNsSet 015E                      USBStdSetCfgHandler@i_2020 0058  
                                    i1___awmod 1448                   ??_IOCAF4_SetInterruptHandler 00AA  
                    USBConfigureEndpoint@EPNum 0075                              _GenericQueue_Init 1209  
                   ?_USBCtrlEPAllowStatusStage 0070                        ??_GenericQueue_Contains 00C1  
          USER_USB_CALLBACK_EVENT_HANDLER@size 0054                                      _USTATcopy 006D  
                           ?_GenericQueue_Init 00A8                      __end_of_EUSART_Initialize 1448  
                     i1USBTransferOnePacket@ep 0078                   __end_of_USBTransferOnePacket 0C41  
                         ??_EUSART_is_tx_ready 00A8                            ??_GenericQueue_Init 00AC  
                        i1USBDeviceInit@i_1324 0076                         _USBCtrlTrfSetupHandler 1561  
                                 ?_Log_Message 00AA           __end_of_TMR2_DefaultInterruptHandler 0004  
                 _TMR2_DefaultInterruptHandler 0003                                 __end_of___bmul 1F49  
                        __end_of_USBDeviceInit 0F2D          __end_of_USBIncrement1msInternalTimers 1FE8  
                _USBIncrement1msInternalTimers 1FD1             __end_of_EUSART_DefaultErrorHandler 1E37  
                   _EUSART_DefaultErrorHandler 1E34                                      i1memcpy@d 0050  
                                    i1memcpy@n 007A                                      i1memcpy@s 0052  
                               __end_of___wmul 111B                                      i1memset@c 0070  
                                    i1memset@n 0072                                      i1memset@p 0076  
                                 _EUSART_Write 124B                                 __end_of_memcmp 1316  
                               __end_of_memcpy 12DF                         ?_OSCILLATOR_Initialize 0070  
                               __end_of_memset 109A                     ?_USBHIDCBSetReportComplete 0070  
                            _USBBusIsSuspended 0160                            start_initialization 003F  
                      _APP_KeyboardUpdateState 0087                        ?_USBStdGetStatusHandler 0070  
                USBCtrlTrfRxService@byteToRead 0079                      __end_of_GenericQueue_Init 1229  
                                   ?i1___awmod 0070                                 _oldInputReport 01A0  
 EUSART_SetRxInterruptHandler@interruptHandler 00A8   EUSART_SetTxInterruptHandler@interruptHandler 00A8  
                  ??i1_PS2Keyboard_SendCommand 0070                   __end_of_USBConfigureEndpoint 1407  
              __end_of_USBStdFeatureReqHandler 0341                      ??_PS2Keyboard_GetScanCode 00C7  
                 ??_PS2Keyboard_GetLastCommand 00A8              __end_of_USBCtrlEPAllowStatusStage 0A52  
                     __end_of_USBCtrlEPService 1519                                  ?_SysTime_Init 0070  
                    ??_USBCtrlEPAllowDataStage 0073                                 USBDeviceInit@i 00AF  
                               USBDeviceInit@p 00AC                 ?_EUSART_SetOverrunErrorHandler 00A8  
                       _pBDTEntryEP0OutCurrent 006B                        USBTransferOnePacket@dir 00A8  
                      USBTransferOnePacket@len 00AB                     _EUSART_FramingErrorHandler 0144  
                                     ??___bmul 00A9                                       ??___wmul 00B3  
                       _EUSART_SetErrorHandler 1E61                            _USBStdGetDscHandler 0C41  
                                  __pdataBANK3 01C7                             i1___awmod@dividend 0072  
                                     ??_memcmp 00BA                                       ??_memcpy 00BB  
                                     ??_memset 00AC                  ?_TMR2_DefaultInterruptHandler 0070  
                     ?_PS2USB_ScanCodeToUSBHID 0070                                     memset@dest 00AE  
              PS2Keyboard_GetScanCode@scanCode 00C7                         i1_USBTransferOnePacket 0B41  
       __end_of_IOCAF5_DefaultInterruptHandler 0003                 _IOCAF5_DefaultInterruptHandler 0002  
                       ?i1_GenericQueue_IsFull 0070                         i1GenericQueue_IsFull@q 0070  
                       _USBActiveConfiguration 006F                 __end_of_USBStdGetStatusHandler 1606  
                    i1USBTransferOnePacket@dir 0070                                    __pbssBIGRAM 232C  
                  __end_of_EUSART_Transmit_ISR 11AA                      i1USBTransferOnePacket@len 0073  
            __end_of_USBHIDCBSetReportComplete 1E51                                      ___latbits 0002  
                                __pcstackBANK0 0050                                  __pcstackBANK1 00A8  
                    ?_GenericQueue_CopyToArray 00C0                           ?_USBStdGetDscHandler 0070  
                      _PS2Keyboard_SendCommand 1136      __end_ofi1_APP_KeyboardProcessOutputReport 1EAD  
      __end_of_APP_KeyboardProcessOutputReport 1EC3            ??i1_APP_KeyboardProcessOutputReport 0071  
           ?i1_APP_KeyboardProcessOutputReport 0070               ?_APP_KeyboardProcessOutputReport 0070  
            ??_APP_KeyboardProcessOutputReport 00A9              i1_APP_KeyboardProcessOutputReport 1EA3  
              _APP_KeyboardProcessOutputReport 1EB8                     __end_of_EUSART_Receive_ISR 1350  
                                 _keyboardData 0151                     __end_of_USBWakeFromSuspend 118B  
             _EUSART_RxDefaultInterruptHandler 0148                                 ??_SysTime_Init 00AA  
                              _USBStallHandler 1229                                   _pBDTEntryOut 0130  
                                    __pnvBANK2 016E                                      __pnvBANK3 01CD  
                         _keyboardCommandCount 0069                   __end_of_EUSART_RxDataHandler 2000  
                                    _main$2580 00E2                                      _main$2579 00E0  
                       _PIN_MANAGER_Initialize 0807                      i1_PS2Keyboard_SendCommand 10CB  
                                    __ptext100 1E32                                      __ptext101 1E34  
                                    __ptext102 1FE8                Log_UtilityConvertByteToHex@byte 00B0  
                                     ?___awmod 00A8                                      _ps2UsbMap 1000  
                 ??_PS2Keyboard_ClockInterrupt 005C                             GenericQueue_Init@q 00A8  
                                 _eusartRxHead 00EE                                   _eusartTxHead 0168  
                                    _hid_rpt01 1800                                   _eusartRxTail 0166  
                                 _eusartTxTail 0167                                      _idle_rate 016D  
                 ??_INTERRUPT_InterruptManager 007E                          _keyboardScanCodeValid 0152  
                                     ?_hex2str 0070                          _keyboardScanCodeQueue 2391  
                    ??_APP_KeyboardUpdateState 00C9                        _eusartTxBufferRemaining 00EF  
                   ??_SysTime_GetCurrentTimeMs 0074                           _USBTransferOnePacket 0BC1  
                         GenericQueue_IsFull@q 00A8             __end_of_IOCAF4_SetInterruptHandler 1E59  
                   _IOCAF4_SetInterruptHandler 1E51                   __end_of_USBCtrlTrfOutHandler 138A  
                            ?_APP_KeyboardInit 0070                                    ??i1___awmod 0074  
                        ??_USBStdGetDscHandler 0070                                    _ep_data_out 013C  
                USBConfigureEndpoint@direction 0070                             ??_APP_KeyboardInit 007D  
                               _eusartRxBuffer 01B0                                 _eusartTxBuffer 01B8  
                         GenericQueue_Remove@i 00C7                           GenericQueue_Remove@j 00C8  
                         GenericQueue_Remove@q 00C0                                 ___wmul@product 00B3  
                                     _LATAbits 010C         EUSART_SetErrorHandler@interruptHandler 00A8  
                   __end_of_USBCheckHIDRequest 0D50                     ??_USBCtrlEPServiceComplete 0077  
                                    clear_ram0 1EDA                                       _PIE1bits 0091  
                                     _PIE2bits 0092                              _eusartRxLastError 0164  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 00AA  
                                     _PIR2bits 0012                __end_of_PS2USB_ScanCodeToUSBHID 11C9  
                                     _UEP0bits 0E98                                      main@F3300 01C4  
                                    main@F3304 01C7                     _USBDeferINDataStagePackets 0159  
    __end_of_EUSART_DefaultOverrunErrorHandler 1E44            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 1E40  
                                     _TMR2_ISR 1ECE                                       _UCONbits 0E8E  
                            ??_PIN_MANAGER_IOC 007E                           _USBConfigureEndpoint 13C8  
          __end_of_Log_UtilityConvertByteToHex 1293                    _Log_UtilityConvertByteToHex 126E  
                      GenericQueue_Remove@item 00C2                      APP_KeyboardTasks@scanCode 00D3  
                            ___wmul@multiplier 00AF                          ?_USBTransferOnePacket 00A8  
                                     i1___wmul 10E5                                main@scanCodeStr 00DA  
                                     i1_memcpy 1293                                       i1_memset 1FBB  
                     ??i1_GenericQueue_Enqueue 0059                                   _RemoteWakeup 0161  
               ??_TMR2_DefaultInterruptHandler 0070                      ?_TMR2_SetInterruptHandler 00A8  
                   ?_PS2Keyboard_DataInterrupt 0070                      ??_PS2Keyboard_SendCommand 00A8  
                      __end_of_USBStallHandler 124B             __end_of_PS2Keyboard_GetLastCommand 1E3A  
                   _PS2Keyboard_GetLastCommand 1E37                      ?_USBHIDCBSetReportHandler 0070  
                             _PS2Keyboard_Init 07E5                    ??_USBCtrlEPAllowStatusStage 0070  
                  __end_of_USBStdSetCfgHandler 096F                              ??_TMR2_Initialize 00AA  
                __end_of_GenericQueue_Contains 1668                             __end_of_device_dsc 18AE  
                       GenericQueue_Contains@i 00C5                         GenericQueue_Contains@q 00BE  
                      ?_USBCtrlTrfSetupHandler 0070                        USBStdGetStatusHandler@p 0072  
                                    memcpy@tmp 00BF                         USBTransferOnePacket@ep 00B0  
                                     _SetupPkt 0040                              i1___awmod@divisor 0070  
                      ??_OSCILLATOR_Initialize 00A8                            _EUSART_ErrorHandler 0140  
                        ?_USBConfigureEndpoint 0070                              i1___awmod@counter 0075  
                            ??_USBDeviceAttach 00A8                    ?_EUSART_DefaultErrorHandler 0070  
                         __end_of_SysTime_Init 1ECE                    ??_USBHIDCBSetReportComplete 0071  
                         _EUSART_RxDataHandler 1FE8                                       __ptext10 1F1A  
                                     __ptext11 1407                                       __ptext20 1209  
                                     __ptext12 1E81                                       __ptext21 1152  
                                     __ptext13 1E79                                       __ptext30 0BC1  
                                     __ptext22 089A                                       __ptext14 1E71  
                                     __ptext31 1668                                       __ptext23 126E  
                                     __ptext15 1E69                                       __ptext40 1606  
                                     __ptext32 1F38                                       __ptext24 1F49  
                                     __ptext16 1E61                                       __ptext41 12DF  
                                     __ptext33 0087                                       __ptext25 111B  
                                     __ptext17 07E5                                       __ptext50 116E  
                                     __ptext42 1100                                       __ptext34 11AA  
                                     __ptext26 0800                                       __ptext18 1E59  
                                     __ptext51 109A                                       __ptext43 148D  
                                     __ptext35 1E37                                       __ptext27 124B  
                                     __ptext19 1E51                                       __ptext60 1FBB  
                                     __ptext52 1229                                       __ptext44 1F6B  
                                     __ptext36 063E                                       __ptext28 0341  
                                     __ptext61 15A9                                       __ptext53 1FD1  
                                     __ptext45 1EB8                                       __ptext37 0832  
                                     __ptext29 1084                                       __ptext70 11E9  
                                     __ptext62 0C41                                       __ptext54 14D2  
                                     __ptext46 1136                                       __ptext38 12B9  
                                     __ptext71 11C9                                       __ptext63 0221  
                                     __ptext55 1561                                       __ptext39 1F92  
                                     __ptext80 16CA                                       __ptext72 13C8  
                                     __ptext64 138A                                       __ptext56 0D50  
                                     __ptext48 0F2D                                       __ptext81 1ECE  
                                     __ptext73 1350                                       __ptext65 0CC2  
                                     __ptext57 1731                                       __ptext49 0DDE  
                                     __ptext90 0549                                       __ptext82 1E9A  
                                     __ptext74 0732                                       __ptext66 1F0D  
                                     __ptext58 096F                                       __ptext91 1798  
                                     __ptext83 0003                                       __ptext75 09E0  
                                     __ptext67 1F00                                       __ptext59 0903  
                                     __ptext92 1293                                       __ptext84 1EAD  
                                     __ptext76 0AC6                                       __ptext68 1519  
                                     __ptext93 10E5                                       __ptext85 1EF3  
                                     __ptext77 1E4A                                       __ptext69 0B41  
                                     __ptext94 1448                                       __ptext86 0002  
                                     __ptext78 1EA3                                       __ptext95 1F7E  
                                     __ptext87 1F27                                       __ptext79 10CB  
                                     __ptext96 1E91                                       __ptext88 1EE6  
                                     __ptext97 118B                                       __ptext89 1E33  
                                     __ptext98 1316                                       __ptext99 1E40  
                 ??_IOCAF5_SetInterruptHandler 00AA              __end_of_PS2Keyboard_DataInterrupt 1F38  
                            _keyboardIndexData 0154                                     _IOCAF4_ISR 1EE6  
                GenericQueue_CopyToArray@array 00C2                                     _IOCAF5_ISR 1EF3  
                GenericQueue_CopyToArray@count 00C8                  GenericQueue_CopyToArray@index 00C7  
                                     _keyboard 232C                 __end_of_USBCtrlTrfSetupHandler 15A9  
                            ?_USBCtrlEPService 0070                             ??_USBCtrlEPService 0060  
                      ?_EUSART_SetErrorHandler 00A8                            _USBCtrlTrfInHandler 0AC6  
EUSART_SetOverrunErrorHandler@interruptHandler 00A8                                    _inputReport 00A0  
           __end_of_PS2Keyboard_ClockInterrupt 063E                     _PS2Keyboard_ClockInterrupt 0549  
                            _keyboardOnesCount 0153                                       _outPipes 0121  
                         _USBCtrlTrfOutHandler 1350                                       int$flags 007E  
                          i1_GenericQueue_Init 11E9                        ?i1_USBTransferOnePacket 0070  
             __end_of_GenericQueue_CopyToArray 16CA                      _USBCtrlEPAllowStatusStage 09E0  
                            ??_TMR2_StartTimer 00A8             __end_of_INTERRUPT_InterruptManager 003D  
                   _INTERRUPT_InterruptManager 0004                        ??i1_GenericQueue_IsFull 0072  
        __end_of_EUSART_SetFramingErrorHandler 1E71                  _EUSART_SetFramingErrorHandler 1E69  
                       ??_USBTransferOnePacket 00AC               __end_of_SysTime_GetCurrentTimeMs 1E9A  
                 __end_of_GenericQueue_Dequeue 0903                   __end_of_GenericQueue_IsEmpty 1F7E  
                    _USBDeferStatusStagePacket 015C                               i1USBDeviceInit@i 0077  
                             i1USBDeviceInit@p 0074                                     _INTCONbits 000B  
                 __end_of_GenericQueue_Enqueue 089A                           ?_USBCtrlTrfInHandler 0070  
                                     memcmp@vl 00B5                                       memcmp@vr 00B7  
                        ?_EUSART_RxDataHandler 0070                                       memcpy@d1 00B5  
                                     memcpy@s1 00B7                  USBCtrlTrfTxService@byteToSend 0072  
                               Log_Message@buf 00AC                                 __pstringtext10 18C2  
                 ??_USBHIDCBSetIdleRateHandler 0071                               ?_USBStallHandler 0070  
                         ?i1_GenericQueue_Init 0070                       USBStdFeatureReqHandler@p 005B  
                                     intlevel1 0000        __end_of_USER_USB_CALLBACK_EVENT_HANDLER 13C8  
             ?_USER_USB_CALLBACK_EVENT_HANDLER 0050              ??_USER_USB_CALLBACK_EVENT_HANDLER 007D  
              _USER_USB_CALLBACK_EVENT_HANDLER 138A                              ??i1_USBDeviceInit 0070  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 1E69  
                    _USBHIDCBSetReportComplete 1E4A           __end_of_EUSART_SetRxInterruptHandler 1E81  
                 _EUSART_SetRxInterruptHandler 1E79                      GenericQueue_CopyToArray@q 00C0  
                    GenericQueue_Contains@item 00C0                 __end_ofi1_USBTransferOnePacket 0BC1  
                       ??_USBConfigureEndpoint 0071                          ?_USBCtrlTrfOutHandler 0070  
                           _EUSART_Receive_ISR 1316                            _USBCtrlTrfRxService 0732  
EUSART_SetFramingErrorHandler@interruptHandler 00A8                             _USBWakeFromSuspend 116E  
                             _SysTimeInterrupt 1E9A                        _USBStdFeatureReqHandler 0221  
                   PS2Keyboard_GetScanCode@ret 00C8                            _USBCtrlTrfTxService 16CA  
                                __pstringtext1 044A                                  __pstringtext2 1000  
                                __pstringtext3 18BC                                  __pstringtext4 18C6  
                                __pstringtext5 1800                                  __pstringtext6 183F  
                                __pstringtext7 1873                                  __pstringtext8 189C  
                                __pstringtext9 18AE                            ?_EUSART_Receive_ISR 0070  
                          ?_USBWakeFromSuspend 0070                          ??_USBCtrlTrfInHandler 0073  
                        _USBAlternateInterface 006E                       ?_PS2Keyboard_GetScanCode 0070  
                  ?_IOCAF4_SetInterruptHandler 00A8          USBHIDCBSetIdleRateHandler@newIdleRate 0070  
                          USBEnableEndpoint@ep 007C                                _endpoint_number 015F  
                        ??i1_GenericQueue_Init 0074                           ?_USBCtrlTrfRxService 0070  
                                  ?_IOCAF4_ISR 0070                                    ?_IOCAF5_ISR 0070  
                           EUSART_Write@txData 00A9                 __end_of_PIN_MANAGER_Initialize 0832  
                     ?_USBCtrlEPAllowDataStage 0070                           ?_USBCtrlTrfTxService 0070  
                                   _SOFCounter 013A               ??_IOCAF4_DefaultInterruptHandler 0070  
              ?_IOCAF4_DefaultInterruptHandler 0070                   _USBStatusStageTimeoutCounter 015D  
                              _PIN_MANAGER_IOC 1EAD                           ??_EUSART_Receive_ISR 0071  
                        _TMR2_InterruptHandler 0146                           ??_USBWakeFromSuspend 007D  
                   USBTransferOnePacket@handle 00B1     APP_KeyboardTasks@needToSendNewReportPacket 00D4  
                       i1_GenericQueue_Enqueue 1798                                     _USB_CD_Ptr 18C6  
