

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Oct 21 00:26:09 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og9 
     1                           	processor	16F1455
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    15                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    22                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    25                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    27                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    28                           	psect	text1,local,class=CODE,merge=1,delta=2
    29                           	psect	text2,local,class=CODE,merge=1,delta=2
    30                           	psect	text3,local,class=CODE,merge=1,delta=2
    31                           	psect	text4,local,class=CODE,merge=1,delta=2
    32                           	psect	text5,local,class=CODE,merge=1,delta=2
    33                           	psect	text6,local,class=CODE,merge=1,delta=2
    34                           	psect	text7,local,class=CODE,merge=1,delta=2
    35                           	psect	text8,local,class=CODE,merge=1,delta=2
    36                           	psect	text9,local,class=CODE,merge=1,delta=2
    37                           	psect	text10,local,class=CODE,merge=1,delta=2
    38                           	psect	text11,local,class=CODE,merge=1,delta=2
    39                           	psect	text12,local,class=CODE,merge=1,delta=2
    40                           	psect	text13,local,class=CODE,merge=1,delta=2
    41                           	psect	text14,local,class=CODE,merge=1,delta=2
    42                           	psect	text15,local,class=CODE,merge=1,delta=2
    43                           	psect	text16,local,class=CODE,merge=1,delta=2
    44                           	psect	text17,local,class=CODE,merge=1,delta=2
    45                           	psect	text18,local,class=CODE,merge=1,delta=2
    46                           	psect	text19,local,class=CODE,merge=1,delta=2
    47                           	psect	text20,local,class=CODE,merge=1,delta=2
    48                           	psect	text21,local,class=CODE,merge=1,delta=2
    49                           	psect	text22,local,class=CODE,merge=1,delta=2
    50                           	psect	text23,local,class=CODE,merge=1,delta=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text30,local,class=CODE,merge=1,delta=2
    58                           	psect	text31,local,class=CODE,merge=1,delta=2
    59                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text33,local,class=CODE,merge=1,delta=2
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text39,local,class=CODE,merge=1,delta=2
    67                           	psect	text40,local,class=CODE,merge=1,delta=2
    68                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    69                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text44,local,class=CODE,merge=1,delta=2
    72                           	psect	text45,local,class=CODE,merge=1,delta=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	psect	text49,local,class=CODE,merge=1,delta=2
    77                           	psect	text50,local,class=CODE,merge=1,delta=2
    78                           	psect	text51,local,class=CODE,merge=1,delta=2
    79                           	psect	text52,local,class=CODE,merge=1,delta=2
    80                           	psect	text53,local,class=CODE,merge=1,delta=2
    81                           	psect	text54,local,class=CODE,merge=1,delta=2
    82                           	psect	text55,local,class=CODE,merge=1,delta=2
    83                           	psect	text56,local,class=CODE,merge=1,delta=2
    84                           	psect	text57,local,class=CODE,merge=1,delta=2
    85                           	psect	text58,local,class=CODE,merge=1,delta=2
    86                           	psect	text59,local,class=CODE,merge=1,delta=2
    87                           	psect	text60,local,class=CODE,merge=1,delta=2
    88                           	psect	text61,local,class=CODE,merge=1,delta=2
    89                           	psect	text62,local,class=CODE,merge=1,delta=2
    90                           	psect	text63,local,class=CODE,merge=1,delta=2
    91                           	psect	text64,local,class=CODE,merge=1,delta=2
    92                           	psect	text65,local,class=CODE,merge=1,delta=2
    93                           	psect	text66,local,class=CODE,merge=1,delta=2
    94                           	psect	text67,local,class=CODE,merge=1,delta=2
    95                           	psect	text68,local,class=CODE,merge=1,delta=2
    96                           	psect	text69,local,class=CODE,merge=1,delta=2
    97                           	psect	text70,local,class=CODE,merge=1,delta=2
    98                           	psect	text71,local,class=CODE,merge=1,delta=2
    99                           	psect	text72,local,class=CODE,merge=1,delta=2
   100                           	psect	text73,local,class=CODE,merge=1,delta=2
   101                           	psect	text74,local,class=CODE,merge=1,delta=2
   102                           	psect	text75,local,class=CODE,merge=1,delta=2
   103                           	psect	text76,local,class=CODE,merge=1,delta=2
   104                           	psect	text77,local,class=CODE,merge=1,delta=2
   105                           	psect	text78,local,class=CODE,merge=1,delta=2
   106                           	psect	text79,local,class=CODE,merge=1,delta=2
   107                           	psect	text80,local,class=CODE,merge=1,delta=2
   108                           	psect	text81,local,class=CODE,merge=1,delta=2
   109                           	psect	text82,local,class=CODE,merge=1,delta=2
   110                           	psect	text83,local,class=CODE,merge=1,delta=2
   111                           	psect	text84,local,class=CODE,merge=1,delta=2
   112                           	psect	text85,local,class=CODE,merge=1,delta=2
   113                           	psect	text86,local,class=CODE,merge=1,delta=2
   114                           	psect	text87,local,class=CODE,merge=1,delta=2
   115                           	psect	text88,local,class=CODE,merge=1,delta=2
   116                           	psect	text89,local,class=CODE,merge=1,delta=2
   117                           	psect	text90,local,class=CODE,merge=1,delta=2
   118                           	psect	text91,local,class=CODE,merge=1,delta=2
   119                           	psect	text92,local,class=CODE,merge=1,delta=2
   120                           	psect	text93,local,class=CODE,merge=1,delta=2
   121                           	psect	text94,local,class=CODE,merge=1,delta=2
   122                           	psect	text95,local,class=CODE,merge=1,delta=2
   123                           	psect	text96,local,class=CODE,merge=1,delta=2
   124                           	psect	text97,local,class=CODE,merge=1,delta=2
   125                           	psect	text98,local,class=CODE,merge=1,delta=2
   126                           	psect	text99,local,class=CODE,merge=1,delta=2
   127                           	psect	text100,local,class=CODE,merge=1,delta=2
   128                           	psect	text101,local,class=CODE,merge=1,delta=2
   129                           	psect	text102,local,class=CODE,merge=1,delta=2
   130                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   131                           	dabs	1,0x620,48
   132                           	dabs	1,0x5C1,47
   133                           	dabs	1,0x5A0,33
   134                           	dabs	1,0x52C,68
   135                           	dabs	1,0x20,32,_BDT
   136                           	dabs	1,0x48,8,_CtrlTrfData
   137                           	dabs	1,0x40,8,_SetupPkt
   138                           	dabs	1,0xA0,8,_inputReport
   139                           	dabs	1,0x120,1,_outputReport
   140                           	dabs	1,0x232C,0,_keyboard
   141                           	dabs	1,0x2391,0,_keyboardScanCodeQueue
   142                           	dabs	1,0x7E,2
   143     0000                     
   144                           ; Generated 07/09/2023 GMT
   145                           ; 
   146                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   147                           ; All rights reserved.
   148                           ; 
   149                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   150                           ; 
   151                           ; Redistribution and use in source and binary forms, with or without modification, are
   152                           ; permitted provided that the following conditions are met:
   153                           ; 
   154                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   155                           ;        conditions and the following disclaimer.
   156                           ; 
   157                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   158                           ;        of conditions and the following disclaimer in the documentation and/or other
   159                           ;        materials provided with the distribution. Publication is not required when
   160                           ;        this file is used in an embedded application.
   161                           ; 
   162                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   163                           ;        software without specific prior written permission.
   164                           ; 
   165                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   166                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   167                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   168                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   169                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   170                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   171                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   172                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   173                           ; 
   174                           ; 
   175                           ; Code-generator required, PIC16F1455 Definitions
   176                           ; 
   177                           ; SFR Addresses
   178     0000                     	;# 
   179     0001                     	;# 
   180     0002                     	;# 
   181     0003                     	;# 
   182     0004                     	;# 
   183     0005                     	;# 
   184     0006                     	;# 
   185     0007                     	;# 
   186     0008                     	;# 
   187     0009                     	;# 
   188     000A                     	;# 
   189     000B                     	;# 
   190     000C                     	;# 
   191     000E                     	;# 
   192     0011                     	;# 
   193     0012                     	;# 
   194     0015                     	;# 
   195     0016                     	;# 
   196     0016                     	;# 
   197     0017                     	;# 
   198     0018                     	;# 
   199     0019                     	;# 
   200     001A                     	;# 
   201     001B                     	;# 
   202     001C                     	;# 
   203     008C                     	;# 
   204     008E                     	;# 
   205     0091                     	;# 
   206     0092                     	;# 
   207     0095                     	;# 
   208     0096                     	;# 
   209     0097                     	;# 
   210     0098                     	;# 
   211     0099                     	;# 
   212     009A                     	;# 
   213     009B                     	;# 
   214     009B                     	;# 
   215     009C                     	;# 
   216     009D                     	;# 
   217     009E                     	;# 
   218     009F                     	;# 
   219     010C                     	;# 
   220     010E                     	;# 
   221     0111                     	;# 
   222     0112                     	;# 
   223     0113                     	;# 
   224     0114                     	;# 
   225     0115                     	;# 
   226     0116                     	;# 
   227     0117                     	;# 
   228     0118                     	;# 
   229     0119                     	;# 
   230     011D                     	;# 
   231     018C                     	;# 
   232     018E                     	;# 
   233     0191                     	;# 
   234     0191                     	;# 
   235     0192                     	;# 
   236     0193                     	;# 
   237     0193                     	;# 
   238     0194                     	;# 
   239     0195                     	;# 
   240     0196                     	;# 
   241     0197                     	;# 
   242     0199                     	;# 
   243     019A                     	;# 
   244     019B                     	;# 
   245     019B                     	;# 
   246     019C                     	;# 
   247     019D                     	;# 
   248     019E                     	;# 
   249     019F                     	;# 
   250     020C                     	;# 
   251     0211                     	;# 
   252     0211                     	;# 
   253     0212                     	;# 
   254     0212                     	;# 
   255     0213                     	;# 
   256     0213                     	;# 
   257     0214                     	;# 
   258     0214                     	;# 
   259     0215                     	;# 
   260     0215                     	;# 
   261     0215                     	;# 
   262     0216                     	;# 
   263     0216                     	;# 
   264     0217                     	;# 
   265     0217                     	;# 
   266     0391                     	;# 
   267     0392                     	;# 
   268     0393                     	;# 
   269     039A                     	;# 
   270     039B                     	;# 
   271     0611                     	;# 
   272     0612                     	;# 
   273     0613                     	;# 
   274     0613                     	;# 
   275     0614                     	;# 
   276     0615                     	;# 
   277     0616                     	;# 
   278     0616                     	;# 
   279     0691                     	;# 
   280     0692                     	;# 
   281     0693                     	;# 
   282     0694                     	;# 
   283     0695                     	;# 
   284     0E8E                     	;# 
   285     0E8F                     	;# 
   286     0E90                     	;# 
   287     0E91                     	;# 
   288     0E92                     	;# 
   289     0E93                     	;# 
   290     0E94                     	;# 
   291     0E94                     	;# 
   292     0E95                     	;# 
   293     0E96                     	;# 
   294     0E97                     	;# 
   295     0E98                     	;# 
   296     0E99                     	;# 
   297     0E9A                     	;# 
   298     0E9B                     	;# 
   299     0E9C                     	;# 
   300     0E9D                     	;# 
   301     0E9E                     	;# 
   302     0E9F                     	;# 
   303     0FE4                     	;# 
   304     0FE5                     	;# 
   305     0FE6                     	;# 
   306     0FE7                     	;# 
   307     0FE8                     	;# 
   308     0FE9                     	;# 
   309     0FEA                     	;# 
   310     0FEB                     	;# 
   311     0FED                     	;# 
   312     0FEE                     	;# 
   313     0FEF                     	;# 
   314     0000                     	;# 
   315     0001                     	;# 
   316     0002                     	;# 
   317     0003                     	;# 
   318     0004                     	;# 
   319     0005                     	;# 
   320     0006                     	;# 
   321     0007                     	;# 
   322     0008                     	;# 
   323     0009                     	;# 
   324     000A                     	;# 
   325     000B                     	;# 
   326     000C                     	;# 
   327     000E                     	;# 
   328     0011                     	;# 
   329     0012                     	;# 
   330     0015                     	;# 
   331     0016                     	;# 
   332     0016                     	;# 
   333     0017                     	;# 
   334     0018                     	;# 
   335     0019                     	;# 
   336     001A                     	;# 
   337     001B                     	;# 
   338     001C                     	;# 
   339     008C                     	;# 
   340     008E                     	;# 
   341     0091                     	;# 
   342     0092                     	;# 
   343     0095                     	;# 
   344     0096                     	;# 
   345     0097                     	;# 
   346     0098                     	;# 
   347     0099                     	;# 
   348     009A                     	;# 
   349     009B                     	;# 
   350     009B                     	;# 
   351     009C                     	;# 
   352     009D                     	;# 
   353     009E                     	;# 
   354     009F                     	;# 
   355     010C                     	;# 
   356     010E                     	;# 
   357     0111                     	;# 
   358     0112                     	;# 
   359     0113                     	;# 
   360     0114                     	;# 
   361     0115                     	;# 
   362     0116                     	;# 
   363     0117                     	;# 
   364     0118                     	;# 
   365     0119                     	;# 
   366     011D                     	;# 
   367     018C                     	;# 
   368     018E                     	;# 
   369     0191                     	;# 
   370     0191                     	;# 
   371     0192                     	;# 
   372     0193                     	;# 
   373     0193                     	;# 
   374     0194                     	;# 
   375     0195                     	;# 
   376     0196                     	;# 
   377     0197                     	;# 
   378     0199                     	;# 
   379     019A                     	;# 
   380     019B                     	;# 
   381     019B                     	;# 
   382     019C                     	;# 
   383     019D                     	;# 
   384     019E                     	;# 
   385     019F                     	;# 
   386     020C                     	;# 
   387     0211                     	;# 
   388     0211                     	;# 
   389     0212                     	;# 
   390     0212                     	;# 
   391     0213                     	;# 
   392     0213                     	;# 
   393     0214                     	;# 
   394     0214                     	;# 
   395     0215                     	;# 
   396     0215                     	;# 
   397     0215                     	;# 
   398     0216                     	;# 
   399     0216                     	;# 
   400     0217                     	;# 
   401     0217                     	;# 
   402     0391                     	;# 
   403     0392                     	;# 
   404     0393                     	;# 
   405     039A                     	;# 
   406     039B                     	;# 
   407     0611                     	;# 
   408     0612                     	;# 
   409     0613                     	;# 
   410     0613                     	;# 
   411     0614                     	;# 
   412     0615                     	;# 
   413     0616                     	;# 
   414     0616                     	;# 
   415     0691                     	;# 
   416     0692                     	;# 
   417     0693                     	;# 
   418     0694                     	;# 
   419     0695                     	;# 
   420     0E8E                     	;# 
   421     0E8F                     	;# 
   422     0E90                     	;# 
   423     0E91                     	;# 
   424     0E92                     	;# 
   425     0E93                     	;# 
   426     0E94                     	;# 
   427     0E94                     	;# 
   428     0E95                     	;# 
   429     0E96                     	;# 
   430     0E97                     	;# 
   431     0E98                     	;# 
   432     0E99                     	;# 
   433     0E9A                     	;# 
   434     0E9B                     	;# 
   435     0E9C                     	;# 
   436     0E9D                     	;# 
   437     0E9E                     	;# 
   438     0E9F                     	;# 
   439     0FE4                     	;# 
   440     0FE5                     	;# 
   441     0FE6                     	;# 
   442     0FE7                     	;# 
   443     0FE8                     	;# 
   444     0FE9                     	;# 
   445     0FEA                     	;# 
   446     0FEB                     	;# 
   447     0FED                     	;# 
   448     0FEE                     	;# 
   449     0FEF                     	;# 
   450     0000                     	;# 
   451     0001                     	;# 
   452     0002                     	;# 
   453     0003                     	;# 
   454     0004                     	;# 
   455     0005                     	;# 
   456     0006                     	;# 
   457     0007                     	;# 
   458     0008                     	;# 
   459     0009                     	;# 
   460     000A                     	;# 
   461     000B                     	;# 
   462     000C                     	;# 
   463     000E                     	;# 
   464     0011                     	;# 
   465     0012                     	;# 
   466     0015                     	;# 
   467     0016                     	;# 
   468     0016                     	;# 
   469     0017                     	;# 
   470     0018                     	;# 
   471     0019                     	;# 
   472     001A                     	;# 
   473     001B                     	;# 
   474     001C                     	;# 
   475     008C                     	;# 
   476     008E                     	;# 
   477     0091                     	;# 
   478     0092                     	;# 
   479     0095                     	;# 
   480     0096                     	;# 
   481     0097                     	;# 
   482     0098                     	;# 
   483     0099                     	;# 
   484     009A                     	;# 
   485     009B                     	;# 
   486     009B                     	;# 
   487     009C                     	;# 
   488     009D                     	;# 
   489     009E                     	;# 
   490     009F                     	;# 
   491     010C                     	;# 
   492     010E                     	;# 
   493     0111                     	;# 
   494     0112                     	;# 
   495     0113                     	;# 
   496     0114                     	;# 
   497     0115                     	;# 
   498     0116                     	;# 
   499     0117                     	;# 
   500     0118                     	;# 
   501     0119                     	;# 
   502     011D                     	;# 
   503     018C                     	;# 
   504     018E                     	;# 
   505     0191                     	;# 
   506     0191                     	;# 
   507     0192                     	;# 
   508     0193                     	;# 
   509     0193                     	;# 
   510     0194                     	;# 
   511     0195                     	;# 
   512     0196                     	;# 
   513     0197                     	;# 
   514     0199                     	;# 
   515     019A                     	;# 
   516     019B                     	;# 
   517     019B                     	;# 
   518     019C                     	;# 
   519     019D                     	;# 
   520     019E                     	;# 
   521     019F                     	;# 
   522     020C                     	;# 
   523     0211                     	;# 
   524     0211                     	;# 
   525     0212                     	;# 
   526     0212                     	;# 
   527     0213                     	;# 
   528     0213                     	;# 
   529     0214                     	;# 
   530     0214                     	;# 
   531     0215                     	;# 
   532     0215                     	;# 
   533     0215                     	;# 
   534     0216                     	;# 
   535     0216                     	;# 
   536     0217                     	;# 
   537     0217                     	;# 
   538     0391                     	;# 
   539     0392                     	;# 
   540     0393                     	;# 
   541     039A                     	;# 
   542     039B                     	;# 
   543     0611                     	;# 
   544     0612                     	;# 
   545     0613                     	;# 
   546     0613                     	;# 
   547     0614                     	;# 
   548     0615                     	;# 
   549     0616                     	;# 
   550     0616                     	;# 
   551     0691                     	;# 
   552     0692                     	;# 
   553     0693                     	;# 
   554     0694                     	;# 
   555     0695                     	;# 
   556     0E8E                     	;# 
   557     0E8F                     	;# 
   558     0E90                     	;# 
   559     0E91                     	;# 
   560     0E92                     	;# 
   561     0E93                     	;# 
   562     0E94                     	;# 
   563     0E94                     	;# 
   564     0E95                     	;# 
   565     0E96                     	;# 
   566     0E97                     	;# 
   567     0E98                     	;# 
   568     0E99                     	;# 
   569     0E9A                     	;# 
   570     0E9B                     	;# 
   571     0E9C                     	;# 
   572     0E9D                     	;# 
   573     0E9E                     	;# 
   574     0E9F                     	;# 
   575     0FE4                     	;# 
   576     0FE5                     	;# 
   577     0FE6                     	;# 
   578     0FE7                     	;# 
   579     0FE8                     	;# 
   580     0FE9                     	;# 
   581     0FEA                     	;# 
   582     0FEB                     	;# 
   583     0FED                     	;# 
   584     0FEE                     	;# 
   585     0FEF                     	;# 
   586     0000                     	;# 
   587     0001                     	;# 
   588     0002                     	;# 
   589     0003                     	;# 
   590     0004                     	;# 
   591     0005                     	;# 
   592     0006                     	;# 
   593     0007                     	;# 
   594     0008                     	;# 
   595     0009                     	;# 
   596     000A                     	;# 
   597     000B                     	;# 
   598     000C                     	;# 
   599     000E                     	;# 
   600     0011                     	;# 
   601     0012                     	;# 
   602     0015                     	;# 
   603     0016                     	;# 
   604     0016                     	;# 
   605     0017                     	;# 
   606     0018                     	;# 
   607     0019                     	;# 
   608     001A                     	;# 
   609     001B                     	;# 
   610     001C                     	;# 
   611     008C                     	;# 
   612     008E                     	;# 
   613     0091                     	;# 
   614     0092                     	;# 
   615     0095                     	;# 
   616     0096                     	;# 
   617     0097                     	;# 
   618     0098                     	;# 
   619     0099                     	;# 
   620     009A                     	;# 
   621     009B                     	;# 
   622     009B                     	;# 
   623     009C                     	;# 
   624     009D                     	;# 
   625     009E                     	;# 
   626     009F                     	;# 
   627     010C                     	;# 
   628     010E                     	;# 
   629     0111                     	;# 
   630     0112                     	;# 
   631     0113                     	;# 
   632     0114                     	;# 
   633     0115                     	;# 
   634     0116                     	;# 
   635     0117                     	;# 
   636     0118                     	;# 
   637     0119                     	;# 
   638     011D                     	;# 
   639     018C                     	;# 
   640     018E                     	;# 
   641     0191                     	;# 
   642     0191                     	;# 
   643     0192                     	;# 
   644     0193                     	;# 
   645     0193                     	;# 
   646     0194                     	;# 
   647     0195                     	;# 
   648     0196                     	;# 
   649     0197                     	;# 
   650     0199                     	;# 
   651     019A                     	;# 
   652     019B                     	;# 
   653     019B                     	;# 
   654     019C                     	;# 
   655     019D                     	;# 
   656     019E                     	;# 
   657     019F                     	;# 
   658     020C                     	;# 
   659     0211                     	;# 
   660     0211                     	;# 
   661     0212                     	;# 
   662     0212                     	;# 
   663     0213                     	;# 
   664     0213                     	;# 
   665     0214                     	;# 
   666     0214                     	;# 
   667     0215                     	;# 
   668     0215                     	;# 
   669     0215                     	;# 
   670     0216                     	;# 
   671     0216                     	;# 
   672     0217                     	;# 
   673     0217                     	;# 
   674     0391                     	;# 
   675     0392                     	;# 
   676     0393                     	;# 
   677     039A                     	;# 
   678     039B                     	;# 
   679     0611                     	;# 
   680     0612                     	;# 
   681     0613                     	;# 
   682     0613                     	;# 
   683     0614                     	;# 
   684     0615                     	;# 
   685     0616                     	;# 
   686     0616                     	;# 
   687     0691                     	;# 
   688     0692                     	;# 
   689     0693                     	;# 
   690     0694                     	;# 
   691     0695                     	;# 
   692     0E8E                     	;# 
   693     0E8F                     	;# 
   694     0E90                     	;# 
   695     0E91                     	;# 
   696     0E92                     	;# 
   697     0E93                     	;# 
   698     0E94                     	;# 
   699     0E94                     	;# 
   700     0E95                     	;# 
   701     0E96                     	;# 
   702     0E97                     	;# 
   703     0E98                     	;# 
   704     0E99                     	;# 
   705     0E9A                     	;# 
   706     0E9B                     	;# 
   707     0E9C                     	;# 
   708     0E9D                     	;# 
   709     0E9E                     	;# 
   710     0E9F                     	;# 
   711     0FE4                     	;# 
   712     0FE5                     	;# 
   713     0FE6                     	;# 
   714     0FE7                     	;# 
   715     0FE8                     	;# 
   716     0FE9                     	;# 
   717     0FEA                     	;# 
   718     0FEB                     	;# 
   719     0FED                     	;# 
   720     0FEE                     	;# 
   721     0FEF                     	;# 
   722     0000                     	;# 
   723     0001                     	;# 
   724     0002                     	;# 
   725     0003                     	;# 
   726     0004                     	;# 
   727     0005                     	;# 
   728     0006                     	;# 
   729     0007                     	;# 
   730     0008                     	;# 
   731     0009                     	;# 
   732     000A                     	;# 
   733     000B                     	;# 
   734     000C                     	;# 
   735     000E                     	;# 
   736     0011                     	;# 
   737     0012                     	;# 
   738     0015                     	;# 
   739     0016                     	;# 
   740     0016                     	;# 
   741     0017                     	;# 
   742     0018                     	;# 
   743     0019                     	;# 
   744     001A                     	;# 
   745     001B                     	;# 
   746     001C                     	;# 
   747     008C                     	;# 
   748     008E                     	;# 
   749     0091                     	;# 
   750     0092                     	;# 
   751     0095                     	;# 
   752     0096                     	;# 
   753     0097                     	;# 
   754     0098                     	;# 
   755     0099                     	;# 
   756     009A                     	;# 
   757     009B                     	;# 
   758     009B                     	;# 
   759     009C                     	;# 
   760     009D                     	;# 
   761     009E                     	;# 
   762     009F                     	;# 
   763     010C                     	;# 
   764     010E                     	;# 
   765     0111                     	;# 
   766     0112                     	;# 
   767     0113                     	;# 
   768     0114                     	;# 
   769     0115                     	;# 
   770     0116                     	;# 
   771     0117                     	;# 
   772     0118                     	;# 
   773     0119                     	;# 
   774     011D                     	;# 
   775     018C                     	;# 
   776     018E                     	;# 
   777     0191                     	;# 
   778     0191                     	;# 
   779     0192                     	;# 
   780     0193                     	;# 
   781     0193                     	;# 
   782     0194                     	;# 
   783     0195                     	;# 
   784     0196                     	;# 
   785     0197                     	;# 
   786     0199                     	;# 
   787     019A                     	;# 
   788     019B                     	;# 
   789     019B                     	;# 
   790     019C                     	;# 
   791     019D                     	;# 
   792     019E                     	;# 
   793     019F                     	;# 
   794     020C                     	;# 
   795     0211                     	;# 
   796     0211                     	;# 
   797     0212                     	;# 
   798     0212                     	;# 
   799     0213                     	;# 
   800     0213                     	;# 
   801     0214                     	;# 
   802     0214                     	;# 
   803     0215                     	;# 
   804     0215                     	;# 
   805     0215                     	;# 
   806     0216                     	;# 
   807     0216                     	;# 
   808     0217                     	;# 
   809     0217                     	;# 
   810     0391                     	;# 
   811     0392                     	;# 
   812     0393                     	;# 
   813     039A                     	;# 
   814     039B                     	;# 
   815     0611                     	;# 
   816     0612                     	;# 
   817     0613                     	;# 
   818     0613                     	;# 
   819     0614                     	;# 
   820     0615                     	;# 
   821     0616                     	;# 
   822     0616                     	;# 
   823     0691                     	;# 
   824     0692                     	;# 
   825     0693                     	;# 
   826     0694                     	;# 
   827     0695                     	;# 
   828     0E8E                     	;# 
   829     0E8F                     	;# 
   830     0E90                     	;# 
   831     0E91                     	;# 
   832     0E92                     	;# 
   833     0E93                     	;# 
   834     0E94                     	;# 
   835     0E94                     	;# 
   836     0E95                     	;# 
   837     0E96                     	;# 
   838     0E97                     	;# 
   839     0E98                     	;# 
   840     0E99                     	;# 
   841     0E9A                     	;# 
   842     0E9B                     	;# 
   843     0E9C                     	;# 
   844     0E9D                     	;# 
   845     0E9E                     	;# 
   846     0E9F                     	;# 
   847     0FE4                     	;# 
   848     0FE5                     	;# 
   849     0FE6                     	;# 
   850     0FE7                     	;# 
   851     0FE8                     	;# 
   852     0FE9                     	;# 
   853     0FEA                     	;# 
   854     0FEB                     	;# 
   855     0FED                     	;# 
   856     0FEE                     	;# 
   857     0FEF                     	;# 
   858     0000                     	;# 
   859     0001                     	;# 
   860     0002                     	;# 
   861     0003                     	;# 
   862     0004                     	;# 
   863     0005                     	;# 
   864     0006                     	;# 
   865     0007                     	;# 
   866     0008                     	;# 
   867     0009                     	;# 
   868     000A                     	;# 
   869     000B                     	;# 
   870     000C                     	;# 
   871     000E                     	;# 
   872     0011                     	;# 
   873     0012                     	;# 
   874     0015                     	;# 
   875     0016                     	;# 
   876     0016                     	;# 
   877     0017                     	;# 
   878     0018                     	;# 
   879     0019                     	;# 
   880     001A                     	;# 
   881     001B                     	;# 
   882     001C                     	;# 
   883     008C                     	;# 
   884     008E                     	;# 
   885     0091                     	;# 
   886     0092                     	;# 
   887     0095                     	;# 
   888     0096                     	;# 
   889     0097                     	;# 
   890     0098                     	;# 
   891     0099                     	;# 
   892     009A                     	;# 
   893     009B                     	;# 
   894     009B                     	;# 
   895     009C                     	;# 
   896     009D                     	;# 
   897     009E                     	;# 
   898     009F                     	;# 
   899     010C                     	;# 
   900     010E                     	;# 
   901     0111                     	;# 
   902     0112                     	;# 
   903     0113                     	;# 
   904     0114                     	;# 
   905     0115                     	;# 
   906     0116                     	;# 
   907     0117                     	;# 
   908     0118                     	;# 
   909     0119                     	;# 
   910     011D                     	;# 
   911     018C                     	;# 
   912     018E                     	;# 
   913     0191                     	;# 
   914     0191                     	;# 
   915     0192                     	;# 
   916     0193                     	;# 
   917     0193                     	;# 
   918     0194                     	;# 
   919     0195                     	;# 
   920     0196                     	;# 
   921     0197                     	;# 
   922     0199                     	;# 
   923     019A                     	;# 
   924     019B                     	;# 
   925     019B                     	;# 
   926     019C                     	;# 
   927     019D                     	;# 
   928     019E                     	;# 
   929     019F                     	;# 
   930     020C                     	;# 
   931     0211                     	;# 
   932     0211                     	;# 
   933     0212                     	;# 
   934     0212                     	;# 
   935     0213                     	;# 
   936     0213                     	;# 
   937     0214                     	;# 
   938     0214                     	;# 
   939     0215                     	;# 
   940     0215                     	;# 
   941     0215                     	;# 
   942     0216                     	;# 
   943     0216                     	;# 
   944     0217                     	;# 
   945     0217                     	;# 
   946     0391                     	;# 
   947     0392                     	;# 
   948     0393                     	;# 
   949     039A                     	;# 
   950     039B                     	;# 
   951     0611                     	;# 
   952     0612                     	;# 
   953     0613                     	;# 
   954     0613                     	;# 
   955     0614                     	;# 
   956     0615                     	;# 
   957     0616                     	;# 
   958     0616                     	;# 
   959     0691                     	;# 
   960     0692                     	;# 
   961     0693                     	;# 
   962     0694                     	;# 
   963     0695                     	;# 
   964     0E8E                     	;# 
   965     0E8F                     	;# 
   966     0E90                     	;# 
   967     0E91                     	;# 
   968     0E92                     	;# 
   969     0E93                     	;# 
   970     0E94                     	;# 
   971     0E94                     	;# 
   972     0E95                     	;# 
   973     0E96                     	;# 
   974     0E97                     	;# 
   975     0E98                     	;# 
   976     0E99                     	;# 
   977     0E9A                     	;# 
   978     0E9B                     	;# 
   979     0E9C                     	;# 
   980     0E9D                     	;# 
   981     0E9E                     	;# 
   982     0E9F                     	;# 
   983     0FE4                     	;# 
   984     0FE5                     	;# 
   985     0FE6                     	;# 
   986     0FE7                     	;# 
   987     0FE8                     	;# 
   988     0FE9                     	;# 
   989     0FEA                     	;# 
   990     0FEB                     	;# 
   991     0FED                     	;# 
   992     0FEE                     	;# 
   993     0FEF                     	;# 
   994     0000                     	;# 
   995     0001                     	;# 
   996     0002                     	;# 
   997     0003                     	;# 
   998     0004                     	;# 
   999     0005                     	;# 
  1000     0006                     	;# 
  1001     0007                     	;# 
  1002     0008                     	;# 
  1003     0009                     	;# 
  1004     000A                     	;# 
  1005     000B                     	;# 
  1006     000C                     	;# 
  1007     000E                     	;# 
  1008     0011                     	;# 
  1009     0012                     	;# 
  1010     0015                     	;# 
  1011     0016                     	;# 
  1012     0016                     	;# 
  1013     0017                     	;# 
  1014     0018                     	;# 
  1015     0019                     	;# 
  1016     001A                     	;# 
  1017     001B                     	;# 
  1018     001C                     	;# 
  1019     008C                     	;# 
  1020     008E                     	;# 
  1021     0091                     	;# 
  1022     0092                     	;# 
  1023     0095                     	;# 
  1024     0096                     	;# 
  1025     0097                     	;# 
  1026     0098                     	;# 
  1027     0099                     	;# 
  1028     009A                     	;# 
  1029     009B                     	;# 
  1030     009B                     	;# 
  1031     009C                     	;# 
  1032     009D                     	;# 
  1033     009E                     	;# 
  1034     009F                     	;# 
  1035     010C                     	;# 
  1036     010E                     	;# 
  1037     0111                     	;# 
  1038     0112                     	;# 
  1039     0113                     	;# 
  1040     0114                     	;# 
  1041     0115                     	;# 
  1042     0116                     	;# 
  1043     0117                     	;# 
  1044     0118                     	;# 
  1045     0119                     	;# 
  1046     011D                     	;# 
  1047     018C                     	;# 
  1048     018E                     	;# 
  1049     0191                     	;# 
  1050     0191                     	;# 
  1051     0192                     	;# 
  1052     0193                     	;# 
  1053     0193                     	;# 
  1054     0194                     	;# 
  1055     0195                     	;# 
  1056     0196                     	;# 
  1057     0197                     	;# 
  1058     0199                     	;# 
  1059     019A                     	;# 
  1060     019B                     	;# 
  1061     019B                     	;# 
  1062     019C                     	;# 
  1063     019D                     	;# 
  1064     019E                     	;# 
  1065     019F                     	;# 
  1066     020C                     	;# 
  1067     0211                     	;# 
  1068     0211                     	;# 
  1069     0212                     	;# 
  1070     0212                     	;# 
  1071     0213                     	;# 
  1072     0213                     	;# 
  1073     0214                     	;# 
  1074     0214                     	;# 
  1075     0215                     	;# 
  1076     0215                     	;# 
  1077     0215                     	;# 
  1078     0216                     	;# 
  1079     0216                     	;# 
  1080     0217                     	;# 
  1081     0217                     	;# 
  1082     0391                     	;# 
  1083     0392                     	;# 
  1084     0393                     	;# 
  1085     039A                     	;# 
  1086     039B                     	;# 
  1087     0611                     	;# 
  1088     0612                     	;# 
  1089     0613                     	;# 
  1090     0613                     	;# 
  1091     0614                     	;# 
  1092     0615                     	;# 
  1093     0616                     	;# 
  1094     0616                     	;# 
  1095     0691                     	;# 
  1096     0692                     	;# 
  1097     0693                     	;# 
  1098     0694                     	;# 
  1099     0695                     	;# 
  1100     0E8E                     	;# 
  1101     0E8F                     	;# 
  1102     0E90                     	;# 
  1103     0E91                     	;# 
  1104     0E92                     	;# 
  1105     0E93                     	;# 
  1106     0E94                     	;# 
  1107     0E94                     	;# 
  1108     0E95                     	;# 
  1109     0E96                     	;# 
  1110     0E97                     	;# 
  1111     0E98                     	;# 
  1112     0E99                     	;# 
  1113     0E9A                     	;# 
  1114     0E9B                     	;# 
  1115     0E9C                     	;# 
  1116     0E9D                     	;# 
  1117     0E9E                     	;# 
  1118     0E9F                     	;# 
  1119     0FE4                     	;# 
  1120     0FE5                     	;# 
  1121     0FE6                     	;# 
  1122     0FE7                     	;# 
  1123     0FE8                     	;# 
  1124     0FE9                     	;# 
  1125     0FEA                     	;# 
  1126     0FEB                     	;# 
  1127     0FED                     	;# 
  1128     0FEE                     	;# 
  1129     0FEF                     	;# 
  1130     0000                     	;# 
  1131     0001                     	;# 
  1132     0002                     	;# 
  1133     0003                     	;# 
  1134     0004                     	;# 
  1135     0005                     	;# 
  1136     0006                     	;# 
  1137     0007                     	;# 
  1138     0008                     	;# 
  1139     0009                     	;# 
  1140     000A                     	;# 
  1141     000B                     	;# 
  1142     000C                     	;# 
  1143     000E                     	;# 
  1144     0011                     	;# 
  1145     0012                     	;# 
  1146     0015                     	;# 
  1147     0016                     	;# 
  1148     0016                     	;# 
  1149     0017                     	;# 
  1150     0018                     	;# 
  1151     0019                     	;# 
  1152     001A                     	;# 
  1153     001B                     	;# 
  1154     001C                     	;# 
  1155     008C                     	;# 
  1156     008E                     	;# 
  1157     0091                     	;# 
  1158     0092                     	;# 
  1159     0095                     	;# 
  1160     0096                     	;# 
  1161     0097                     	;# 
  1162     0098                     	;# 
  1163     0099                     	;# 
  1164     009A                     	;# 
  1165     009B                     	;# 
  1166     009B                     	;# 
  1167     009C                     	;# 
  1168     009D                     	;# 
  1169     009E                     	;# 
  1170     009F                     	;# 
  1171     010C                     	;# 
  1172     010E                     	;# 
  1173     0111                     	;# 
  1174     0112                     	;# 
  1175     0113                     	;# 
  1176     0114                     	;# 
  1177     0115                     	;# 
  1178     0116                     	;# 
  1179     0117                     	;# 
  1180     0118                     	;# 
  1181     0119                     	;# 
  1182     011D                     	;# 
  1183     018C                     	;# 
  1184     018E                     	;# 
  1185     0191                     	;# 
  1186     0191                     	;# 
  1187     0192                     	;# 
  1188     0193                     	;# 
  1189     0193                     	;# 
  1190     0194                     	;# 
  1191     0195                     	;# 
  1192     0196                     	;# 
  1193     0197                     	;# 
  1194     0199                     	;# 
  1195     019A                     	;# 
  1196     019B                     	;# 
  1197     019B                     	;# 
  1198     019C                     	;# 
  1199     019D                     	;# 
  1200     019E                     	;# 
  1201     019F                     	;# 
  1202     020C                     	;# 
  1203     0211                     	;# 
  1204     0211                     	;# 
  1205     0212                     	;# 
  1206     0212                     	;# 
  1207     0213                     	;# 
  1208     0213                     	;# 
  1209     0214                     	;# 
  1210     0214                     	;# 
  1211     0215                     	;# 
  1212     0215                     	;# 
  1213     0215                     	;# 
  1214     0216                     	;# 
  1215     0216                     	;# 
  1216     0217                     	;# 
  1217     0217                     	;# 
  1218     0391                     	;# 
  1219     0392                     	;# 
  1220     0393                     	;# 
  1221     039A                     	;# 
  1222     039B                     	;# 
  1223     0611                     	;# 
  1224     0612                     	;# 
  1225     0613                     	;# 
  1226     0613                     	;# 
  1227     0614                     	;# 
  1228     0615                     	;# 
  1229     0616                     	;# 
  1230     0616                     	;# 
  1231     0691                     	;# 
  1232     0692                     	;# 
  1233     0693                     	;# 
  1234     0694                     	;# 
  1235     0695                     	;# 
  1236     0E8E                     	;# 
  1237     0E8F                     	;# 
  1238     0E90                     	;# 
  1239     0E91                     	;# 
  1240     0E92                     	;# 
  1241     0E93                     	;# 
  1242     0E94                     	;# 
  1243     0E94                     	;# 
  1244     0E95                     	;# 
  1245     0E96                     	;# 
  1246     0E97                     	;# 
  1247     0E98                     	;# 
  1248     0E99                     	;# 
  1249     0E9A                     	;# 
  1250     0E9B                     	;# 
  1251     0E9C                     	;# 
  1252     0E9D                     	;# 
  1253     0E9E                     	;# 
  1254     0E9F                     	;# 
  1255     0FE4                     	;# 
  1256     0FE5                     	;# 
  1257     0FE6                     	;# 
  1258     0FE7                     	;# 
  1259     0FE8                     	;# 
  1260     0FE9                     	;# 
  1261     0FEA                     	;# 
  1262     0FEB                     	;# 
  1263     0FED                     	;# 
  1264     0FEE                     	;# 
  1265     0FEF                     	;# 
  1266     0000                     	;# 
  1267     0001                     	;# 
  1268     0002                     	;# 
  1269     0003                     	;# 
  1270     0004                     	;# 
  1271     0005                     	;# 
  1272     0006                     	;# 
  1273     0007                     	;# 
  1274     0008                     	;# 
  1275     0009                     	;# 
  1276     000A                     	;# 
  1277     000B                     	;# 
  1278     000C                     	;# 
  1279     000E                     	;# 
  1280     0011                     	;# 
  1281     0012                     	;# 
  1282     0015                     	;# 
  1283     0016                     	;# 
  1284     0016                     	;# 
  1285     0017                     	;# 
  1286     0018                     	;# 
  1287     0019                     	;# 
  1288     001A                     	;# 
  1289     001B                     	;# 
  1290     001C                     	;# 
  1291     008C                     	;# 
  1292     008E                     	;# 
  1293     0091                     	;# 
  1294     0092                     	;# 
  1295     0095                     	;# 
  1296     0096                     	;# 
  1297     0097                     	;# 
  1298     0098                     	;# 
  1299     0099                     	;# 
  1300     009A                     	;# 
  1301     009B                     	;# 
  1302     009B                     	;# 
  1303     009C                     	;# 
  1304     009D                     	;# 
  1305     009E                     	;# 
  1306     009F                     	;# 
  1307     010C                     	;# 
  1308     010E                     	;# 
  1309     0111                     	;# 
  1310     0112                     	;# 
  1311     0113                     	;# 
  1312     0114                     	;# 
  1313     0115                     	;# 
  1314     0116                     	;# 
  1315     0117                     	;# 
  1316     0118                     	;# 
  1317     0119                     	;# 
  1318     011D                     	;# 
  1319     018C                     	;# 
  1320     018E                     	;# 
  1321     0191                     	;# 
  1322     0191                     	;# 
  1323     0192                     	;# 
  1324     0193                     	;# 
  1325     0193                     	;# 
  1326     0194                     	;# 
  1327     0195                     	;# 
  1328     0196                     	;# 
  1329     0197                     	;# 
  1330     0199                     	;# 
  1331     019A                     	;# 
  1332     019B                     	;# 
  1333     019B                     	;# 
  1334     019C                     	;# 
  1335     019D                     	;# 
  1336     019E                     	;# 
  1337     019F                     	;# 
  1338     020C                     	;# 
  1339     0211                     	;# 
  1340     0211                     	;# 
  1341     0212                     	;# 
  1342     0212                     	;# 
  1343     0213                     	;# 
  1344     0213                     	;# 
  1345     0214                     	;# 
  1346     0214                     	;# 
  1347     0215                     	;# 
  1348     0215                     	;# 
  1349     0215                     	;# 
  1350     0216                     	;# 
  1351     0216                     	;# 
  1352     0217                     	;# 
  1353     0217                     	;# 
  1354     0391                     	;# 
  1355     0392                     	;# 
  1356     0393                     	;# 
  1357     039A                     	;# 
  1358     039B                     	;# 
  1359     0611                     	;# 
  1360     0612                     	;# 
  1361     0613                     	;# 
  1362     0613                     	;# 
  1363     0614                     	;# 
  1364     0615                     	;# 
  1365     0616                     	;# 
  1366     0616                     	;# 
  1367     0691                     	;# 
  1368     0692                     	;# 
  1369     0693                     	;# 
  1370     0694                     	;# 
  1371     0695                     	;# 
  1372     0E8E                     	;# 
  1373     0E8F                     	;# 
  1374     0E90                     	;# 
  1375     0E91                     	;# 
  1376     0E92                     	;# 
  1377     0E93                     	;# 
  1378     0E94                     	;# 
  1379     0E94                     	;# 
  1380     0E95                     	;# 
  1381     0E96                     	;# 
  1382     0E97                     	;# 
  1383     0E98                     	;# 
  1384     0E99                     	;# 
  1385     0E9A                     	;# 
  1386     0E9B                     	;# 
  1387     0E9C                     	;# 
  1388     0E9D                     	;# 
  1389     0E9E                     	;# 
  1390     0E9F                     	;# 
  1391     0FE4                     	;# 
  1392     0FE5                     	;# 
  1393     0FE6                     	;# 
  1394     0FE7                     	;# 
  1395     0FE8                     	;# 
  1396     0FE9                     	;# 
  1397     0FEA                     	;# 
  1398     0FEB                     	;# 
  1399     0FED                     	;# 
  1400     0FEE                     	;# 
  1401     0FEF                     	;# 
  1402     0000                     	;# 
  1403     0001                     	;# 
  1404     0002                     	;# 
  1405     0003                     	;# 
  1406     0004                     	;# 
  1407     0005                     	;# 
  1408     0006                     	;# 
  1409     0007                     	;# 
  1410     0008                     	;# 
  1411     0009                     	;# 
  1412     000A                     	;# 
  1413     000B                     	;# 
  1414     000C                     	;# 
  1415     000E                     	;# 
  1416     0011                     	;# 
  1417     0012                     	;# 
  1418     0015                     	;# 
  1419     0016                     	;# 
  1420     0016                     	;# 
  1421     0017                     	;# 
  1422     0018                     	;# 
  1423     0019                     	;# 
  1424     001A                     	;# 
  1425     001B                     	;# 
  1426     001C                     	;# 
  1427     008C                     	;# 
  1428     008E                     	;# 
  1429     0091                     	;# 
  1430     0092                     	;# 
  1431     0095                     	;# 
  1432     0096                     	;# 
  1433     0097                     	;# 
  1434     0098                     	;# 
  1435     0099                     	;# 
  1436     009A                     	;# 
  1437     009B                     	;# 
  1438     009B                     	;# 
  1439     009C                     	;# 
  1440     009D                     	;# 
  1441     009E                     	;# 
  1442     009F                     	;# 
  1443     010C                     	;# 
  1444     010E                     	;# 
  1445     0111                     	;# 
  1446     0112                     	;# 
  1447     0113                     	;# 
  1448     0114                     	;# 
  1449     0115                     	;# 
  1450     0116                     	;# 
  1451     0117                     	;# 
  1452     0118                     	;# 
  1453     0119                     	;# 
  1454     011D                     	;# 
  1455     018C                     	;# 
  1456     018E                     	;# 
  1457     0191                     	;# 
  1458     0191                     	;# 
  1459     0192                     	;# 
  1460     0193                     	;# 
  1461     0193                     	;# 
  1462     0194                     	;# 
  1463     0195                     	;# 
  1464     0196                     	;# 
  1465     0197                     	;# 
  1466     0199                     	;# 
  1467     019A                     	;# 
  1468     019B                     	;# 
  1469     019B                     	;# 
  1470     019C                     	;# 
  1471     019D                     	;# 
  1472     019E                     	;# 
  1473     019F                     	;# 
  1474     020C                     	;# 
  1475     0211                     	;# 
  1476     0211                     	;# 
  1477     0212                     	;# 
  1478     0212                     	;# 
  1479     0213                     	;# 
  1480     0213                     	;# 
  1481     0214                     	;# 
  1482     0214                     	;# 
  1483     0215                     	;# 
  1484     0215                     	;# 
  1485     0215                     	;# 
  1486     0216                     	;# 
  1487     0216                     	;# 
  1488     0217                     	;# 
  1489     0217                     	;# 
  1490     0391                     	;# 
  1491     0392                     	;# 
  1492     0393                     	;# 
  1493     039A                     	;# 
  1494     039B                     	;# 
  1495     0611                     	;# 
  1496     0612                     	;# 
  1497     0613                     	;# 
  1498     0613                     	;# 
  1499     0614                     	;# 
  1500     0615                     	;# 
  1501     0616                     	;# 
  1502     0616                     	;# 
  1503     0691                     	;# 
  1504     0692                     	;# 
  1505     0693                     	;# 
  1506     0694                     	;# 
  1507     0695                     	;# 
  1508     0E8E                     	;# 
  1509     0E8F                     	;# 
  1510     0E90                     	;# 
  1511     0E91                     	;# 
  1512     0E92                     	;# 
  1513     0E93                     	;# 
  1514     0E94                     	;# 
  1515     0E94                     	;# 
  1516     0E95                     	;# 
  1517     0E96                     	;# 
  1518     0E97                     	;# 
  1519     0E98                     	;# 
  1520     0E99                     	;# 
  1521     0E9A                     	;# 
  1522     0E9B                     	;# 
  1523     0E9C                     	;# 
  1524     0E9D                     	;# 
  1525     0E9E                     	;# 
  1526     0E9F                     	;# 
  1527     0FE4                     	;# 
  1528     0FE5                     	;# 
  1529     0FE6                     	;# 
  1530     0FE7                     	;# 
  1531     0FE8                     	;# 
  1532     0FE9                     	;# 
  1533     0FEA                     	;# 
  1534     0FEB                     	;# 
  1535     0FED                     	;# 
  1536     0FEE                     	;# 
  1537     0FEF                     	;# 
  1538     0000                     	;# 
  1539     0001                     	;# 
  1540     0002                     	;# 
  1541     0003                     	;# 
  1542     0004                     	;# 
  1543     0005                     	;# 
  1544     0006                     	;# 
  1545     0007                     	;# 
  1546     0008                     	;# 
  1547     0009                     	;# 
  1548     000A                     	;# 
  1549     000B                     	;# 
  1550     000C                     	;# 
  1551     000E                     	;# 
  1552     0011                     	;# 
  1553     0012                     	;# 
  1554     0015                     	;# 
  1555     0016                     	;# 
  1556     0016                     	;# 
  1557     0017                     	;# 
  1558     0018                     	;# 
  1559     0019                     	;# 
  1560     001A                     	;# 
  1561     001B                     	;# 
  1562     001C                     	;# 
  1563     008C                     	;# 
  1564     008E                     	;# 
  1565     0091                     	;# 
  1566     0092                     	;# 
  1567     0095                     	;# 
  1568     0096                     	;# 
  1569     0097                     	;# 
  1570     0098                     	;# 
  1571     0099                     	;# 
  1572     009A                     	;# 
  1573     009B                     	;# 
  1574     009B                     	;# 
  1575     009C                     	;# 
  1576     009D                     	;# 
  1577     009E                     	;# 
  1578     009F                     	;# 
  1579     010C                     	;# 
  1580     010E                     	;# 
  1581     0111                     	;# 
  1582     0112                     	;# 
  1583     0113                     	;# 
  1584     0114                     	;# 
  1585     0115                     	;# 
  1586     0116                     	;# 
  1587     0117                     	;# 
  1588     0118                     	;# 
  1589     0119                     	;# 
  1590     011D                     	;# 
  1591     018C                     	;# 
  1592     018E                     	;# 
  1593     0191                     	;# 
  1594     0191                     	;# 
  1595     0192                     	;# 
  1596     0193                     	;# 
  1597     0193                     	;# 
  1598     0194                     	;# 
  1599     0195                     	;# 
  1600     0196                     	;# 
  1601     0197                     	;# 
  1602     0199                     	;# 
  1603     019A                     	;# 
  1604     019B                     	;# 
  1605     019B                     	;# 
  1606     019C                     	;# 
  1607     019D                     	;# 
  1608     019E                     	;# 
  1609     019F                     	;# 
  1610     020C                     	;# 
  1611     0211                     	;# 
  1612     0211                     	;# 
  1613     0212                     	;# 
  1614     0212                     	;# 
  1615     0213                     	;# 
  1616     0213                     	;# 
  1617     0214                     	;# 
  1618     0214                     	;# 
  1619     0215                     	;# 
  1620     0215                     	;# 
  1621     0215                     	;# 
  1622     0216                     	;# 
  1623     0216                     	;# 
  1624     0217                     	;# 
  1625     0217                     	;# 
  1626     0391                     	;# 
  1627     0392                     	;# 
  1628     0393                     	;# 
  1629     039A                     	;# 
  1630     039B                     	;# 
  1631     0611                     	;# 
  1632     0612                     	;# 
  1633     0613                     	;# 
  1634     0613                     	;# 
  1635     0614                     	;# 
  1636     0615                     	;# 
  1637     0616                     	;# 
  1638     0616                     	;# 
  1639     0691                     	;# 
  1640     0692                     	;# 
  1641     0693                     	;# 
  1642     0694                     	;# 
  1643     0695                     	;# 
  1644     0E8E                     	;# 
  1645     0E8F                     	;# 
  1646     0E90                     	;# 
  1647     0E91                     	;# 
  1648     0E92                     	;# 
  1649     0E93                     	;# 
  1650     0E94                     	;# 
  1651     0E94                     	;# 
  1652     0E95                     	;# 
  1653     0E96                     	;# 
  1654     0E97                     	;# 
  1655     0E98                     	;# 
  1656     0E99                     	;# 
  1657     0E9A                     	;# 
  1658     0E9B                     	;# 
  1659     0E9C                     	;# 
  1660     0E9D                     	;# 
  1661     0E9E                     	;# 
  1662     0E9F                     	;# 
  1663     0FE4                     	;# 
  1664     0FE5                     	;# 
  1665     0FE6                     	;# 
  1666     0FE7                     	;# 
  1667     0FE8                     	;# 
  1668     0FE9                     	;# 
  1669     0FEA                     	;# 
  1670     0FEB                     	;# 
  1671     0FED                     	;# 
  1672     0FEE                     	;# 
  1673     0FEF                     	;# 
  1674     0000                     	;# 
  1675     0001                     	;# 
  1676     0002                     	;# 
  1677     0003                     	;# 
  1678     0004                     	;# 
  1679     0005                     	;# 
  1680     0006                     	;# 
  1681     0007                     	;# 
  1682     0008                     	;# 
  1683     0009                     	;# 
  1684     000A                     	;# 
  1685     000B                     	;# 
  1686     000C                     	;# 
  1687     000E                     	;# 
  1688     0011                     	;# 
  1689     0012                     	;# 
  1690     0015                     	;# 
  1691     0016                     	;# 
  1692     0016                     	;# 
  1693     0017                     	;# 
  1694     0018                     	;# 
  1695     0019                     	;# 
  1696     001A                     	;# 
  1697     001B                     	;# 
  1698     001C                     	;# 
  1699     008C                     	;# 
  1700     008E                     	;# 
  1701     0091                     	;# 
  1702     0092                     	;# 
  1703     0095                     	;# 
  1704     0096                     	;# 
  1705     0097                     	;# 
  1706     0098                     	;# 
  1707     0099                     	;# 
  1708     009A                     	;# 
  1709     009B                     	;# 
  1710     009B                     	;# 
  1711     009C                     	;# 
  1712     009D                     	;# 
  1713     009E                     	;# 
  1714     009F                     	;# 
  1715     010C                     	;# 
  1716     010E                     	;# 
  1717     0111                     	;# 
  1718     0112                     	;# 
  1719     0113                     	;# 
  1720     0114                     	;# 
  1721     0115                     	;# 
  1722     0116                     	;# 
  1723     0117                     	;# 
  1724     0118                     	;# 
  1725     0119                     	;# 
  1726     011D                     	;# 
  1727     018C                     	;# 
  1728     018E                     	;# 
  1729     0191                     	;# 
  1730     0191                     	;# 
  1731     0192                     	;# 
  1732     0193                     	;# 
  1733     0193                     	;# 
  1734     0194                     	;# 
  1735     0195                     	;# 
  1736     0196                     	;# 
  1737     0197                     	;# 
  1738     0199                     	;# 
  1739     019A                     	;# 
  1740     019B                     	;# 
  1741     019B                     	;# 
  1742     019C                     	;# 
  1743     019D                     	;# 
  1744     019E                     	;# 
  1745     019F                     	;# 
  1746     020C                     	;# 
  1747     0211                     	;# 
  1748     0211                     	;# 
  1749     0212                     	;# 
  1750     0212                     	;# 
  1751     0213                     	;# 
  1752     0213                     	;# 
  1753     0214                     	;# 
  1754     0214                     	;# 
  1755     0215                     	;# 
  1756     0215                     	;# 
  1757     0215                     	;# 
  1758     0216                     	;# 
  1759     0216                     	;# 
  1760     0217                     	;# 
  1761     0217                     	;# 
  1762     0391                     	;# 
  1763     0392                     	;# 
  1764     0393                     	;# 
  1765     039A                     	;# 
  1766     039B                     	;# 
  1767     0611                     	;# 
  1768     0612                     	;# 
  1769     0613                     	;# 
  1770     0613                     	;# 
  1771     0614                     	;# 
  1772     0615                     	;# 
  1773     0616                     	;# 
  1774     0616                     	;# 
  1775     0691                     	;# 
  1776     0692                     	;# 
  1777     0693                     	;# 
  1778     0694                     	;# 
  1779     0695                     	;# 
  1780     0E8E                     	;# 
  1781     0E8F                     	;# 
  1782     0E90                     	;# 
  1783     0E91                     	;# 
  1784     0E92                     	;# 
  1785     0E93                     	;# 
  1786     0E94                     	;# 
  1787     0E94                     	;# 
  1788     0E95                     	;# 
  1789     0E96                     	;# 
  1790     0E97                     	;# 
  1791     0E98                     	;# 
  1792     0E99                     	;# 
  1793     0E9A                     	;# 
  1794     0E9B                     	;# 
  1795     0E9C                     	;# 
  1796     0E9D                     	;# 
  1797     0E9E                     	;# 
  1798     0E9F                     	;# 
  1799     0FE4                     	;# 
  1800     0FE5                     	;# 
  1801     0FE6                     	;# 
  1802     0FE7                     	;# 
  1803     0FE8                     	;# 
  1804     0FE9                     	;# 
  1805     0FEA                     	;# 
  1806     0FEB                     	;# 
  1807     0FED                     	;# 
  1808     0FEE                     	;# 
  1809     0FEF                     	;# 
  1810     0000                     	;# 
  1811     0001                     	;# 
  1812     0002                     	;# 
  1813     0003                     	;# 
  1814     0004                     	;# 
  1815     0005                     	;# 
  1816     0006                     	;# 
  1817     0007                     	;# 
  1818     0008                     	;# 
  1819     0009                     	;# 
  1820     000A                     	;# 
  1821     000B                     	;# 
  1822     000C                     	;# 
  1823     000E                     	;# 
  1824     0011                     	;# 
  1825     0012                     	;# 
  1826     0015                     	;# 
  1827     0016                     	;# 
  1828     0016                     	;# 
  1829     0017                     	;# 
  1830     0018                     	;# 
  1831     0019                     	;# 
  1832     001A                     	;# 
  1833     001B                     	;# 
  1834     001C                     	;# 
  1835     008C                     	;# 
  1836     008E                     	;# 
  1837     0091                     	;# 
  1838     0092                     	;# 
  1839     0095                     	;# 
  1840     0096                     	;# 
  1841     0097                     	;# 
  1842     0098                     	;# 
  1843     0099                     	;# 
  1844     009A                     	;# 
  1845     009B                     	;# 
  1846     009B                     	;# 
  1847     009C                     	;# 
  1848     009D                     	;# 
  1849     009E                     	;# 
  1850     009F                     	;# 
  1851     010C                     	;# 
  1852     010E                     	;# 
  1853     0111                     	;# 
  1854     0112                     	;# 
  1855     0113                     	;# 
  1856     0114                     	;# 
  1857     0115                     	;# 
  1858     0116                     	;# 
  1859     0117                     	;# 
  1860     0118                     	;# 
  1861     0119                     	;# 
  1862     011D                     	;# 
  1863     018C                     	;# 
  1864     018E                     	;# 
  1865     0191                     	;# 
  1866     0191                     	;# 
  1867     0192                     	;# 
  1868     0193                     	;# 
  1869     0193                     	;# 
  1870     0194                     	;# 
  1871     0195                     	;# 
  1872     0196                     	;# 
  1873     0197                     	;# 
  1874     0199                     	;# 
  1875     019A                     	;# 
  1876     019B                     	;# 
  1877     019B                     	;# 
  1878     019C                     	;# 
  1879     019D                     	;# 
  1880     019E                     	;# 
  1881     019F                     	;# 
  1882     020C                     	;# 
  1883     0211                     	;# 
  1884     0211                     	;# 
  1885     0212                     	;# 
  1886     0212                     	;# 
  1887     0213                     	;# 
  1888     0213                     	;# 
  1889     0214                     	;# 
  1890     0214                     	;# 
  1891     0215                     	;# 
  1892     0215                     	;# 
  1893     0215                     	;# 
  1894     0216                     	;# 
  1895     0216                     	;# 
  1896     0217                     	;# 
  1897     0217                     	;# 
  1898     0391                     	;# 
  1899     0392                     	;# 
  1900     0393                     	;# 
  1901     039A                     	;# 
  1902     039B                     	;# 
  1903     0611                     	;# 
  1904     0612                     	;# 
  1905     0613                     	;# 
  1906     0613                     	;# 
  1907     0614                     	;# 
  1908     0615                     	;# 
  1909     0616                     	;# 
  1910     0616                     	;# 
  1911     0691                     	;# 
  1912     0692                     	;# 
  1913     0693                     	;# 
  1914     0694                     	;# 
  1915     0695                     	;# 
  1916     0E8E                     	;# 
  1917     0E8F                     	;# 
  1918     0E90                     	;# 
  1919     0E91                     	;# 
  1920     0E92                     	;# 
  1921     0E93                     	;# 
  1922     0E94                     	;# 
  1923     0E94                     	;# 
  1924     0E95                     	;# 
  1925     0E96                     	;# 
  1926     0E97                     	;# 
  1927     0E98                     	;# 
  1928     0E99                     	;# 
  1929     0E9A                     	;# 
  1930     0E9B                     	;# 
  1931     0E9C                     	;# 
  1932     0E9D                     	;# 
  1933     0E9E                     	;# 
  1934     0E9F                     	;# 
  1935     0FE4                     	;# 
  1936     0FE5                     	;# 
  1937     0FE6                     	;# 
  1938     0FE7                     	;# 
  1939     0FE8                     	;# 
  1940     0FE9                     	;# 
  1941     0FEA                     	;# 
  1942     0FEB                     	;# 
  1943     0FED                     	;# 
  1944     0FEE                     	;# 
  1945     0FEF                     	;# 
  1946     0000                     	;# 
  1947     0001                     	;# 
  1948     0002                     	;# 
  1949     0003                     	;# 
  1950     0004                     	;# 
  1951     0005                     	;# 
  1952     0006                     	;# 
  1953     0007                     	;# 
  1954     0008                     	;# 
  1955     0009                     	;# 
  1956     000A                     	;# 
  1957     000B                     	;# 
  1958     000C                     	;# 
  1959     000E                     	;# 
  1960     0011                     	;# 
  1961     0012                     	;# 
  1962     0015                     	;# 
  1963     0016                     	;# 
  1964     0016                     	;# 
  1965     0017                     	;# 
  1966     0018                     	;# 
  1967     0019                     	;# 
  1968     001A                     	;# 
  1969     001B                     	;# 
  1970     001C                     	;# 
  1971     008C                     	;# 
  1972     008E                     	;# 
  1973     0091                     	;# 
  1974     0092                     	;# 
  1975     0095                     	;# 
  1976     0096                     	;# 
  1977     0097                     	;# 
  1978     0098                     	;# 
  1979     0099                     	;# 
  1980     009A                     	;# 
  1981     009B                     	;# 
  1982     009B                     	;# 
  1983     009C                     	;# 
  1984     009D                     	;# 
  1985     009E                     	;# 
  1986     009F                     	;# 
  1987     010C                     	;# 
  1988     010E                     	;# 
  1989     0111                     	;# 
  1990     0112                     	;# 
  1991     0113                     	;# 
  1992     0114                     	;# 
  1993     0115                     	;# 
  1994     0116                     	;# 
  1995     0117                     	;# 
  1996     0118                     	;# 
  1997     0119                     	;# 
  1998     011D                     	;# 
  1999     018C                     	;# 
  2000     018E                     	;# 
  2001     0191                     	;# 
  2002     0191                     	;# 
  2003     0192                     	;# 
  2004     0193                     	;# 
  2005     0193                     	;# 
  2006     0194                     	;# 
  2007     0195                     	;# 
  2008     0196                     	;# 
  2009     0197                     	;# 
  2010     0199                     	;# 
  2011     019A                     	;# 
  2012     019B                     	;# 
  2013     019B                     	;# 
  2014     019C                     	;# 
  2015     019D                     	;# 
  2016     019E                     	;# 
  2017     019F                     	;# 
  2018     020C                     	;# 
  2019     0211                     	;# 
  2020     0211                     	;# 
  2021     0212                     	;# 
  2022     0212                     	;# 
  2023     0213                     	;# 
  2024     0213                     	;# 
  2025     0214                     	;# 
  2026     0214                     	;# 
  2027     0215                     	;# 
  2028     0215                     	;# 
  2029     0215                     	;# 
  2030     0216                     	;# 
  2031     0216                     	;# 
  2032     0217                     	;# 
  2033     0217                     	;# 
  2034     0391                     	;# 
  2035     0392                     	;# 
  2036     0393                     	;# 
  2037     039A                     	;# 
  2038     039B                     	;# 
  2039     0611                     	;# 
  2040     0612                     	;# 
  2041     0613                     	;# 
  2042     0613                     	;# 
  2043     0614                     	;# 
  2044     0615                     	;# 
  2045     0616                     	;# 
  2046     0616                     	;# 
  2047     0691                     	;# 
  2048     0692                     	;# 
  2049     0693                     	;# 
  2050     0694                     	;# 
  2051     0695                     	;# 
  2052     0E8E                     	;# 
  2053     0E8F                     	;# 
  2054     0E90                     	;# 
  2055     0E91                     	;# 
  2056     0E92                     	;# 
  2057     0E93                     	;# 
  2058     0E94                     	;# 
  2059     0E94                     	;# 
  2060     0E95                     	;# 
  2061     0E96                     	;# 
  2062     0E97                     	;# 
  2063     0E98                     	;# 
  2064     0E99                     	;# 
  2065     0E9A                     	;# 
  2066     0E9B                     	;# 
  2067     0E9C                     	;# 
  2068     0E9D                     	;# 
  2069     0E9E                     	;# 
  2070     0E9F                     	;# 
  2071     0FE4                     	;# 
  2072     0FE5                     	;# 
  2073     0FE6                     	;# 
  2074     0FE7                     	;# 
  2075     0FE8                     	;# 
  2076     0FE9                     	;# 
  2077     0FEA                     	;# 
  2078     0FEB                     	;# 
  2079     0FED                     	;# 
  2080     0FEE                     	;# 
  2081     0FEF                     	;_keyboard
  2082                           
  2083                           	psect	idataBANK3
  2084     1E8C                     __pidataBANK3:
  2085                           
  2086                           ;initializer for main@F3304
  2087     1E8C  3420               	retlw	32
  2088     1E8D  3420               	retlw	32
  2089     1E8E  3420               	retlw	32
  2090     1E8F  3420               	retlw	32
  2091     1E90  340D               	retlw	13
  2092     1E91  340A               	retlw	10
  2093                           
  2094                           	psect	stringtext1
  2095     03FB                     __pstringtext1:
  2096     03FB                     _ps2ExtUsbMap:
  2097     03FB  3400               	retlw	0
  2098     03FC  3400               	retlw	0
  2099     03FD  3400               	retlw	0
  2100     03FE  3400               	retlw	0
  2101     03FF  3400               	retlw	0
  2102     0400  3400               	retlw	0
  2103     0401  3400               	retlw	0
  2104     0402  3400               	retlw	0
  2105     0403  3400               	retlw	0
  2106     0404  3400               	retlw	0
  2107     0405  3400               	retlw	0
  2108     0406  3400               	retlw	0
  2109     0407  3400               	retlw	0
  2110     0408  3400               	retlw	0
  2111     0409  3400               	retlw	0
  2112     040A  3400               	retlw	0
  2113     040B  3400               	retlw	0
  2114     040C  34E6               	retlw	230
  2115     040D  3446               	retlw	70
  2116     040E  3400               	retlw	0
  2117     040F  34E4               	retlw	228
  2118     0410  3400               	retlw	0
  2119     0411  3400               	retlw	0
  2120     0412  3400               	retlw	0
  2121     0413  3400               	retlw	0
  2122     0414  3400               	retlw	0
  2123     0415  3400               	retlw	0
  2124     0416  3400               	retlw	0
  2125     0417  3400               	retlw	0
  2126     0418  3400               	retlw	0
  2127     0419  3400               	retlw	0
  2128     041A  34E3               	retlw	227
  2129     041B  3400               	retlw	0
  2130     041C  3400               	retlw	0
  2131     041D  3400               	retlw	0
  2132     041E  3400               	retlw	0
  2133     041F  3400               	retlw	0
  2134     0420  3400               	retlw	0
  2135     0421  3400               	retlw	0
  2136     0422  34E7               	retlw	231
  2137     0423  3400               	retlw	0
  2138     0424  3400               	retlw	0
  2139     0425  3400               	retlw	0
  2140     0426  3400               	retlw	0
  2141     0427  3400               	retlw	0
  2142     0428  3400               	retlw	0
  2143     0429  3400               	retlw	0
  2144     042A  3465               	retlw	101
  2145     042B  3400               	retlw	0
  2146     042C  3400               	retlw	0
  2147     042D  3400               	retlw	0
  2148     042E  3400               	retlw	0
  2149     042F  3400               	retlw	0
  2150     0430  3400               	retlw	0
  2151     0431  3400               	retlw	0
  2152     0432  3400               	retlw	0
  2153     0433  3400               	retlw	0
  2154     0434  3400               	retlw	0
  2155     0435  3400               	retlw	0
  2156     0436  3400               	retlw	0
  2157     0437  3400               	retlw	0
  2158     0438  3400               	retlw	0
  2159     0439  3400               	retlw	0
  2160     043A  3400               	retlw	0
  2161     043B  3400               	retlw	0
  2162     043C  3400               	retlw	0
  2163     043D  3400               	retlw	0
  2164     043E  3400               	retlw	0
  2165     043F  3400               	retlw	0
  2166     0440  3400               	retlw	0
  2167     0441  3400               	retlw	0
  2168     0442  3400               	retlw	0
  2169     0443  3400               	retlw	0
  2170     0444  3400               	retlw	0
  2171     0445  3454               	retlw	84
  2172     0446  3400               	retlw	0
  2173     0447  3400               	retlw	0
  2174     0448  3400               	retlw	0
  2175     0449  3400               	retlw	0
  2176     044A  3400               	retlw	0
  2177     044B  3400               	retlw	0
  2178     044C  3400               	retlw	0
  2179     044D  3400               	retlw	0
  2180     044E  3400               	retlw	0
  2181     044F  3400               	retlw	0
  2182     0450  3400               	retlw	0
  2183     0451  3400               	retlw	0
  2184     0452  3400               	retlw	0
  2185     0453  3400               	retlw	0
  2186     0454  3400               	retlw	0
  2187     0455  3458               	retlw	88
  2188     0456  3400               	retlw	0
  2189     0457  3400               	retlw	0
  2190     0458  3400               	retlw	0
  2191     0459  3400               	retlw	0
  2192     045A  3400               	retlw	0
  2193     045B  3400               	retlw	0
  2194     045C  3400               	retlw	0
  2195     045D  3400               	retlw	0
  2196     045E  3400               	retlw	0
  2197     045F  3400               	retlw	0
  2198     0460  3400               	retlw	0
  2199     0461  3400               	retlw	0
  2200     0462  3400               	retlw	0
  2201     0463  3400               	retlw	0
  2202     0464  344D               	retlw	77
  2203     0465  3400               	retlw	0
  2204     0466  3450               	retlw	80
  2205     0467  344A               	retlw	74
  2206     0468  3400               	retlw	0
  2207     0469  3400               	retlw	0
  2208     046A  3400               	retlw	0
  2209     046B  3449               	retlw	73
  2210     046C  344C               	retlw	76
  2211     046D  3451               	retlw	81
  2212     046E  3400               	retlw	0
  2213     046F  344F               	retlw	79
  2214     0470  3452               	retlw	82
  2215     0471  3400               	retlw	0
  2216     0472  3400               	retlw	0
  2217     0473  3400               	retlw	0
  2218     0474  3400               	retlw	0
  2219     0475  344E               	retlw	78
  2220     0476  3400               	retlw	0
  2221     0477  3446               	retlw	70
  2222     0478  344B               	retlw	75
  2223     0479  3400               	retlw	0
  2224     047A  3400               	retlw	0
  2225     047B  3400               	retlw	0
  2226     047C  3400               	retlw	0
  2227     047D  3400               	retlw	0
  2228     047E  3400               	retlw	0
  2229     047F  3400               	retlw	0
  2230     0480  3400               	retlw	0
  2231     0481  3400               	retlw	0
  2232     0482  3400               	retlw	0
  2233     0483  3400               	retlw	0
  2234     0484  3400               	retlw	0
  2235     0485  3400               	retlw	0
  2236     0486  3400               	retlw	0
  2237     0487  3400               	retlw	0
  2238     0488  3400               	retlw	0
  2239     0489  3400               	retlw	0
  2240     048A  3400               	retlw	0
  2241     048B  3400               	retlw	0
  2242     048C  3400               	retlw	0
  2243     048D  3400               	retlw	0
  2244     048E  3400               	retlw	0
  2245     048F  3400               	retlw	0
  2246     0490  3400               	retlw	0
  2247     0491  3400               	retlw	0
  2248     0492  3400               	retlw	0
  2249     0493  3400               	retlw	0
  2250     0494  3400               	retlw	0
  2251     0495  3400               	retlw	0
  2252     0496  3400               	retlw	0
  2253     0497  3400               	retlw	0
  2254     0498  3400               	retlw	0
  2255     0499  3400               	retlw	0
  2256     049A  3400               	retlw	0
  2257     049B  3400               	retlw	0
  2258     049C  3400               	retlw	0
  2259     049D  3400               	retlw	0
  2260     049E  3400               	retlw	0
  2261     049F  3400               	retlw	0
  2262     04A0  3400               	retlw	0
  2263     04A1  3400               	retlw	0
  2264     04A2  3400               	retlw	0
  2265     04A3  3400               	retlw	0
  2266     04A4  3400               	retlw	0
  2267     04A5  3400               	retlw	0
  2268     04A6  3400               	retlw	0
  2269     04A7  3400               	retlw	0
  2270     04A8  3400               	retlw	0
  2271     04A9  3400               	retlw	0
  2272     04AA  3400               	retlw	0
  2273     04AB  3400               	retlw	0
  2274     04AC  3400               	retlw	0
  2275     04AD  3400               	retlw	0
  2276     04AE  3400               	retlw	0
  2277     04AF  3400               	retlw	0
  2278     04B0  3400               	retlw	0
  2279     04B1  3400               	retlw	0
  2280     04B2  3400               	retlw	0
  2281     04B3  3400               	retlw	0
  2282     04B4  3400               	retlw	0
  2283     04B5  3400               	retlw	0
  2284     04B6  3400               	retlw	0
  2285     04B7  3400               	retlw	0
  2286     04B8  3400               	retlw	0
  2287     04B9  3400               	retlw	0
  2288     04BA  3400               	retlw	0
  2289     04BB  3400               	retlw	0
  2290     04BC  3400               	retlw	0
  2291     04BD  3400               	retlw	0
  2292     04BE  3400               	retlw	0
  2293     04BF  3400               	retlw	0
  2294     04C0  3400               	retlw	0
  2295     04C1  3400               	retlw	0
  2296     04C2  3400               	retlw	0
  2297     04C3  3400               	retlw	0
  2298     04C4  3400               	retlw	0
  2299     04C5  3400               	retlw	0
  2300     04C6  3400               	retlw	0
  2301     04C7  3400               	retlw	0
  2302     04C8  3400               	retlw	0
  2303     04C9  3400               	retlw	0
  2304     04CA  3400               	retlw	0
  2305     04CB  3400               	retlw	0
  2306     04CC  3400               	retlw	0
  2307     04CD  3400               	retlw	0
  2308     04CE  3400               	retlw	0
  2309     04CF  3400               	retlw	0
  2310     04D0  3400               	retlw	0
  2311     04D1  3400               	retlw	0
  2312     04D2  3400               	retlw	0
  2313     04D3  3400               	retlw	0
  2314     04D4  3400               	retlw	0
  2315     04D5  3400               	retlw	0
  2316     04D6  3400               	retlw	0
  2317     04D7  3400               	retlw	0
  2318     04D8  3400               	retlw	0
  2319     04D9  3400               	retlw	0
  2320     04DA  3400               	retlw	0
  2321     04DB  3400               	retlw	0
  2322     04DC  3400               	retlw	0
  2323     04DD  3400               	retlw	0
  2324     04DE  3400               	retlw	0
  2325     04DF  3400               	retlw	0
  2326     04E0  3400               	retlw	0
  2327     04E1  3400               	retlw	0
  2328     04E2  3400               	retlw	0
  2329     04E3  3400               	retlw	0
  2330     04E4  3400               	retlw	0
  2331     04E5  3400               	retlw	0
  2332     04E6  3400               	retlw	0
  2333     04E7  3400               	retlw	0
  2334     04E8  3400               	retlw	0
  2335     04E9  3400               	retlw	0
  2336     04EA  3400               	retlw	0
  2337     04EB  3400               	retlw	0
  2338     04EC  3400               	retlw	0
  2339     04ED  3400               	retlw	0
  2340     04EE  3400               	retlw	0
  2341     04EF  3400               	retlw	0
  2342     04F0  3400               	retlw	0
  2343     04F1  3400               	retlw	0
  2344     04F2  3400               	retlw	0
  2345     04F3  3400               	retlw	0
  2346     04F4  3400               	retlw	0
  2347     04F5  3400               	retlw	0
  2348     04F6  3400               	retlw	0
  2349     04F7  3400               	retlw	0
  2350     04F8  3400               	retlw	0
  2351     04F9  3400               	retlw	0
  2352     04FA                     __end_of_ps2ExtUsbMap:
  2353                           
  2354                           	psect	stringtext2
  2355     1000                     __pstringtext2:
  2356     1000                     _ps2UsbMap:
  2357     1000  3400               	retlw	0
  2358     1001  3442               	retlw	66
  2359     1002  3400               	retlw	0
  2360     1003  343E               	retlw	62
  2361     1004  343C               	retlw	60
  2362     1005  343A               	retlw	58
  2363     1006  343B               	retlw	59
  2364     1007  3445               	retlw	69
  2365     1008  3400               	retlw	0
  2366     1009  3443               	retlw	67
  2367     100A  3441               	retlw	65
  2368     100B  343F               	retlw	63
  2369     100C  343D               	retlw	61
  2370     100D  342B               	retlw	43
  2371     100E  3435               	retlw	53
  2372     100F  3400               	retlw	0
  2373     1010  3400               	retlw	0
  2374     1011  34E2               	retlw	226
  2375     1012  34E1               	retlw	225
  2376     1013  3488               	retlw	136
  2377     1014  34E0               	retlw	224
  2378     1015  3414               	retlw	20
  2379     1016  341E               	retlw	30
  2380     1017  3400               	retlw	0
  2381     1018  3400               	retlw	0
  2382     1019  3400               	retlw	0
  2383     101A  341D               	retlw	29
  2384     101B  3416               	retlw	22
  2385     101C  3404               	retlw	4
  2386     101D  341A               	retlw	26
  2387     101E  341F               	retlw	31
  2388     101F  3400               	retlw	0
  2389     1020  3400               	retlw	0
  2390     1021  3406               	retlw	6
  2391     1022  341B               	retlw	27
  2392     1023  3407               	retlw	7
  2393     1024  3408               	retlw	8
  2394     1025  3421               	retlw	33
  2395     1026  3420               	retlw	32
  2396     1027  3400               	retlw	0
  2397     1028  3400               	retlw	0
  2398     1029  342C               	retlw	44
  2399     102A  3419               	retlw	25
  2400     102B  3409               	retlw	9
  2401     102C  3417               	retlw	23
  2402     102D  3415               	retlw	21
  2403     102E  3422               	retlw	34
  2404     102F  3400               	retlw	0
  2405     1030  3400               	retlw	0
  2406     1031  3411               	retlw	17
  2407     1032  3405               	retlw	5
  2408     1033  340B               	retlw	11
  2409     1034  340A               	retlw	10
  2410     1035  341C               	retlw	28
  2411     1036  3423               	retlw	35
  2412     1037  3400               	retlw	0
  2413     1038  3400               	retlw	0
  2414     1039  3400               	retlw	0
  2415     103A  3410               	retlw	16
  2416     103B  340D               	retlw	13
  2417     103C  3418               	retlw	24
  2418     103D  3424               	retlw	36
  2419     103E  3425               	retlw	37
  2420     103F  3400               	retlw	0
  2421     1040  3400               	retlw	0
  2422     1041  3436               	retlw	54
  2423     1042  340E               	retlw	14
  2424     1043  340C               	retlw	12
  2425     1044  3412               	retlw	18
  2426     1045  3427               	retlw	39
  2427     1046  3426               	retlw	38
  2428     1047  3400               	retlw	0
  2429     1048  3400               	retlw	0
  2430     1049  3437               	retlw	55
  2431     104A  3438               	retlw	56
  2432     104B  340F               	retlw	15
  2433     104C  3433               	retlw	51
  2434     104D  3413               	retlw	19
  2435     104E  342D               	retlw	45
  2436     104F  3400               	retlw	0
  2437     1050  3400               	retlw	0
  2438     1051  3487               	retlw	135
  2439     1052  3434               	retlw	52
  2440     1053  3400               	retlw	0
  2441     1054  342F               	retlw	47
  2442     1055  342E               	retlw	46
  2443     1056  3400               	retlw	0
  2444     1057  3400               	retlw	0
  2445     1058  34E3               	retlw	227
  2446     1059  34E5               	retlw	229
  2447     105A  3428               	retlw	40
  2448     105B  3430               	retlw	48
  2449     105C  3400               	retlw	0
  2450     105D  3432               	retlw	50
  2451     105E  3400               	retlw	0
  2452     105F  3400               	retlw	0
  2453     1060  3400               	retlw	0
  2454     1061  3400               	retlw	0
  2455     1062  3400               	retlw	0
  2456     1063  3400               	retlw	0
  2457     1064  348A               	retlw	138
  2458     1065  3400               	retlw	0
  2459     1066  342A               	retlw	42
  2460     1067  348B               	retlw	139
  2461     1068  3400               	retlw	0
  2462     1069  3459               	retlw	89
  2463     106A  3489               	retlw	137
  2464     106B  345C               	retlw	92
  2465     106C  345F               	retlw	95
  2466     106D  3400               	retlw	0
  2467     106E  3400               	retlw	0
  2468     106F  3400               	retlw	0
  2469     1070  3462               	retlw	98
  2470     1071  3463               	retlw	99
  2471     1072  345A               	retlw	90
  2472     1073  345D               	retlw	93
  2473     1074  345E               	retlw	94
  2474     1075  3460               	retlw	96
  2475     1076  3429               	retlw	41
  2476     1077  3453               	retlw	83
  2477     1078  3444               	retlw	68
  2478     1079  3457               	retlw	87
  2479     107A  345B               	retlw	91
  2480     107B  3454               	retlw	84
  2481     107C  3455               	retlw	85
  2482     107D  3461               	retlw	97
  2483     107E  3447               	retlw	71
  2484     107F  3400               	retlw	0
  2485     1080  3400               	retlw	0
  2486     1081  3400               	retlw	0
  2487     1082  3400               	retlw	0
  2488     1083  3440               	retlw	64
  2489     1084                     __end_of_ps2UsbMap:
  2490                           
  2491                           	psect	stringtext3
  2492     18BC                     __pstringtext3:
  2493     18BC                     _USB_SD_Ptr:
  2494     18BC  34C2               	retlw	low (_sd000| (0+32768))
  2495     18BD  3498               	retlw	high (_sd000| (0+32768))
  2496     18BE  343F               	retlw	low (_sd001| (0+32768))
  2497     18BF  3498               	retlw	high (_sd001| (0+32768))
  2498     18C0  34AE               	retlw	low (_sd002| (0+32768))
  2499     18C1  3498               	retlw	high (_sd002| (0+32768))
  2500     18C2                     __end_of_USB_SD_Ptr:
  2501                           
  2502                           	psect	stringtext4
  2503     18C6                     __pstringtext4:
  2504     18C6                     _USB_CD_Ptr:
  2505     18C6  3473               	retlw	low (_configDescriptor1| (0+32768))
  2506     18C7  3498               	retlw	high (_configDescriptor1| (0+32768))
  2507     18C8                     __end_of_USB_CD_Ptr:
  2508                           
  2509                           	psect	stringtext5
  2510     1800                     __pstringtext5:
  2511     1800                     _hid_rpt01:
  2512     1800  3405               	retlw	5
  2513     1801  3401               	retlw	1
  2514     1802  3409               	retlw	9
  2515     1803  3406               	retlw	6
  2516     1804  34A1               	retlw	161
  2517     1805  3401               	retlw	1
  2518     1806  3405               	retlw	5
  2519     1807  3407               	retlw	7
  2520     1808  3419               	retlw	25
  2521     1809  34E0               	retlw	224
  2522     180A  3429               	retlw	41
  2523     180B  34E7               	retlw	231
  2524     180C  3415               	retlw	21
  2525     180D  3400               	retlw	0
  2526     180E  3425               	retlw	37
  2527     180F  3401               	retlw	1
  2528     1810  3475               	retlw	117
  2529     1811  3401               	retlw	1
  2530     1812  3495               	retlw	149
  2531     1813  3408               	retlw	8
  2532     1814  3481               	retlw	129
  2533     1815  3402               	retlw	2
  2534     1816  3495               	retlw	149
  2535     1817  3401               	retlw	1
  2536     1818  3475               	retlw	117
  2537     1819  3408               	retlw	8
  2538     181A  3481               	retlw	129
  2539     181B  3403               	retlw	3
  2540     181C  3495               	retlw	149
  2541     181D  3405               	retlw	5
  2542     181E  3475               	retlw	117
  2543     181F  3401               	retlw	1
  2544     1820  3405               	retlw	5
  2545     1821  3408               	retlw	8
  2546     1822  3419               	retlw	25
  2547     1823  3401               	retlw	1
  2548     1824  3429               	retlw	41
  2549     1825  3405               	retlw	5
  2550     1826  3491               	retlw	145
  2551     1827  3402               	retlw	2
  2552     1828  3495               	retlw	149
  2553     1829  3401               	retlw	1
  2554     182A  3475               	retlw	117
  2555     182B  3403               	retlw	3
  2556     182C  3491               	retlw	145
  2557     182D  3403               	retlw	3
  2558     182E  3495               	retlw	149
  2559     182F  3406               	retlw	6
  2560     1830  3475               	retlw	117
  2561     1831  3408               	retlw	8
  2562     1832  3415               	retlw	21
  2563     1833  3400               	retlw	0
  2564     1834  3425               	retlw	37
  2565     1835  348B               	retlw	139
  2566     1836  3405               	retlw	5
  2567     1837  3407               	retlw	7
  2568     1838  3419               	retlw	25
  2569     1839  3400               	retlw	0
  2570     183A  3429               	retlw	41
  2571     183B  348B               	retlw	139
  2572     183C  3481               	retlw	129
  2573     183D  3400               	retlw	0
  2574     183E  34C0               	retlw	192
  2575     183F                     __end_of_hid_rpt01:
  2576                           
  2577                           	psect	stringtext6
  2578     183F                     __pstringtext6:
  2579     183F                     _sd001:
  2580     183F  3434               	retlw	52
  2581     1840  3403               	retlw	3
  2582     1841  344D               	retlw	77
  2583     1842  3400               	retlw	0
  2584     1843  3469               	retlw	105
  2585     1844  3400               	retlw	0
  2586     1845  3463               	retlw	99
  2587     1846  3400               	retlw	0
  2588     1847  3472               	retlw	114
  2589     1848  3400               	retlw	0
  2590     1849  346F               	retlw	111
  2591     184A  3400               	retlw	0
  2592     184B  3463               	retlw	99
  2593     184C  3400               	retlw	0
  2594     184D  3468               	retlw	104
  2595     184E  3400               	retlw	0
  2596     184F  3469               	retlw	105
  2597     1850  3400               	retlw	0
  2598     1851  3470               	retlw	112
  2599     1852  3400               	retlw	0
  2600     1853  3420               	retlw	32
  2601     1854  3400               	retlw	0
  2602     1855  3454               	retlw	84
  2603     1856  3400               	retlw	0
  2604     1857  3465               	retlw	101
  2605     1858  3400               	retlw	0
  2606     1859  3463               	retlw	99
  2607     185A  3400               	retlw	0
  2608     185B  3468               	retlw	104
  2609     185C  3400               	retlw	0
  2610     185D  346E               	retlw	110
  2611     185E  3400               	retlw	0
  2612     185F  346F               	retlw	111
  2613     1860  3400               	retlw	0
  2614     1861  346C               	retlw	108
  2615     1862  3400               	retlw	0
  2616     1863  346F               	retlw	111
  2617     1864  3400               	retlw	0
  2618     1865  3467               	retlw	103
  2619     1866  3400               	retlw	0
  2620     1867  3479               	retlw	121
  2621     1868  3400               	retlw	0
  2622     1869  3420               	retlw	32
  2623     186A  3400               	retlw	0
  2624     186B  3449               	retlw	73
  2625     186C  3400               	retlw	0
  2626     186D  346E               	retlw	110
  2627     186E  3400               	retlw	0
  2628     186F  3463               	retlw	99
  2629     1870  3400               	retlw	0
  2630     1871  342E               	retlw	46
  2631     1872  3400               	retlw	0
  2632     1873                     __end_of_sd001:
  2633                           
  2634                           	psect	stringtext7
  2635     1873                     __pstringtext7:
  2636     1873                     _configDescriptor1:
  2637     1873  3409               	retlw	9
  2638     1874  3402               	retlw	2
  2639     1875  3429               	retlw	41
  2640     1876  3400               	retlw	0
  2641     1877  3401               	retlw	1
  2642     1878  3401               	retlw	1
  2643     1879  3400               	retlw	0
  2644     187A  34C0               	retlw	192
  2645     187B  3432               	retlw	50
  2646     187C  3409               	retlw	9
  2647     187D  3404               	retlw	4
  2648     187E  3400               	retlw	0
  2649     187F  3400               	retlw	0
  2650     1880  3402               	retlw	2
  2651     1881  3403               	retlw	3
  2652     1882  3401               	retlw	1
  2653     1883  3401               	retlw	1
  2654     1884  3400               	retlw	0
  2655     1885  3409               	retlw	9
  2656     1886  3421               	retlw	33
  2657     1887  3411               	retlw	17
  2658     1888  3401               	retlw	1
  2659     1889  3400               	retlw	0
  2660     188A  3401               	retlw	1
  2661     188B  3422               	retlw	34
  2662     188C  343F               	retlw	63
  2663     188D  3400               	retlw	0
  2664     188E  3407               	retlw	7
  2665     188F  3405               	retlw	5
  2666     1890  3481               	retlw	129
  2667     1891  3403               	retlw	3
  2668     1892  3408               	retlw	8
  2669     1893  3400               	retlw	0
  2670     1894  3401               	retlw	1
  2671     1895  3407               	retlw	7
  2672     1896  3405               	retlw	5
  2673     1897  3401               	retlw	1
  2674     1898  3403               	retlw	3
  2675     1899  3408               	retlw	8
  2676     189A  3400               	retlw	0
  2677     189B  3401               	retlw	1
  2678     189C                     __end_of_configDescriptor1:
  2679                           
  2680                           	psect	stringtext8
  2681     189C                     __pstringtext8:
  2682     189C                     _device_dsc:
  2683     189C  3412               	retlw	18
  2684     189D  3401               	retlw	1
  2685     189E  3400               	retlw	0
  2686     189F  3402               	retlw	2
  2687     18A0  3400               	retlw	0
  2688     18A1  3400               	retlw	0
  2689     18A2  3400               	retlw	0
  2690     18A3  3408               	retlw	8
  2691     18A4  34D8               	retlw	216
  2692     18A5  3404               	retlw	4
  2693     18A6  3455               	retlw	85
  2694     18A7  3400               	retlw	0
  2695     18A8  3401               	retlw	1
  2696     18A9  3400               	retlw	0
  2697     18AA  3401               	retlw	1
  2698     18AB  3402               	retlw	2
  2699     18AC  3400               	retlw	0
  2700     18AD  3401               	retlw	1
  2701     18AE                     __end_of_device_dsc:
  2702                           
  2703                           	psect	stringtext9
  2704     18AE                     __pstringtext9:
  2705     18AE                     _sd002:
  2706     18AE  340E               	retlw	14
  2707     18AF  3403               	retlw	3
  2708     18B0  3441               	retlw	65
  2709     18B1  3400               	retlw	0
  2710     18B2  3454               	retlw	84
  2711     18B3  3400               	retlw	0
  2712     18B4  3432               	retlw	50
  2713     18B5  3400               	retlw	0
  2714     18B6  3455               	retlw	85
  2715     18B7  3400               	retlw	0
  2716     18B8  3453               	retlw	83
  2717     18B9  3400               	retlw	0
  2718     18BA  3442               	retlw	66
  2719     18BB  3400               	retlw	0
  2720     18BC                     __end_of_sd002:
  2721                           
  2722                           	psect	stringtext10
  2723     18C2                     __pstringtext10:
  2724     18C2                     _sd000:
  2725     18C2  3404               	retlw	4
  2726     18C3  3403               	retlw	3
  2727     18C4  3409               	retlw	9
  2728     18C5  3404               	retlw	4
  2729     18C6                     __end_of_sd000:
  2730                           
  2731                           	psect	nvBANK2
  2732     016D                     __pnvBANK2:
  2733     016D                     _IOCAF4_InterruptHandler:
  2734     016D                     	ds	2
  2735                           
  2736                           	psect	nvBANK3
  2737     01CD                     __pnvBANK3:
  2738     01CD                     _IOCAF5_InterruptHandler:
  2739     01CD                     	ds	2
  2740     000C                     _PORTAbits	set	12
  2741     001C                     _T2CONbits	set	28
  2742     001C                     _T2CON	set	28
  2743     001A                     _TMR2	set	26
  2744     001B                     _PR2	set	27
  2745     0011                     _PIR1bits	set	17
  2746     0012                     _PIR2bits	set	18
  2747     000B                     _INTCONbits	set	11
  2748     008C                     _TRISAbits	set	140
  2749     0091                     _PIE1bits	set	145
  2750     0092                     _PIE2bits	set	146
  2751     0097                     _WDTCON	set	151
  2752     0098                     _OSCTUNE	set	152
  2753     0099                     _OSCCON	set	153
  2754     0095                     _OPTION_REGbits	set	149
  2755     008E                     _TRISC	set	142
  2756     008C                     _TRISA	set	140
  2757     04D6                     _PLLRDY	set	1238
  2758     010C                     _LATAbits	set	268
  2759     0116                     _BORCON	set	278
  2760     011D                     _APFCON	set	285
  2761     010E                     _LATC	set	270
  2762     010C                     _LATA	set	268
  2763     0199                     _RCREG	set	409
  2764     019D                     _RCSTAbits	set	413
  2765     019A                     _TXREG	set	410
  2766     019C                     _SPBRGH	set	412
  2767     019B                     _SPBRGL	set	411
  2768     019E                     _TXSTA	set	414
  2769     019D                     _RCSTA	set	413
  2770     019F                     _BAUDCON	set	415
  2771     018C                     _ANSELA	set	396
  2772     018E                     _ANSELC	set	398
  2773     020C                     _WPUA	set	524
  2774     039B                     _ACTCON	set	923
  2775     0391                     _IOCAPbits	set	913
  2776     0392                     _IOCANbits	set	914
  2777     0393                     _IOCAFbits	set	915
  2778     0E98                     _UEP0bits	set	3736
  2779     0E8E                     _UCON	set	3726
  2780     0E8F                     _USTAT	set	3727
  2781     0E92                     _UIEbits	set	3730
  2782     0E90                     _UIRbits	set	3728
  2783     0E96                     _UADDR	set	3734
  2784     0E8E                     _UCONbits	set	3726
  2785     0E92                     _UIE	set	3730
  2786     0E97                     _UEIE	set	3735
  2787     0E91                     _UCFG	set	3729
  2788     0E90                     _UIR	set	3728
  2789     0E93                     _UEIR	set	3731
  2790     0E99                     _UEP1	set	3737
  2791     0E98                     _UEP0	set	3736
  2792                           
  2793                           	psect	cinit
  2794     003F                     start_initialization:	
  2795                           ; #config settings
  2796                           
  2797     003F                     __initialization:	;BIGRAM
  2798                           
  2799                           ; Initialize objects allocated to BANK3
  2800     003F  308C               	movlw	low __pidataBANK3
  2801     0040  0084               	movwf	4
  2802     0041  309E               	movlw	(high __pidataBANK3)| (0+128)
  2803     0042  0085               	movwf	5
  2804     0043  0023               	movlb	3	; select bank3
  2805     0044  0012               	moviw fsr0++
  2806     0045  00C7               	movwf	__pdataBANK3& (0+127)
  2807     0046  0012               	moviw fsr0++
  2808     0047  00C8               	movwf	(__pdataBANK3+1)& (0+127)
  2809     0048  0012               	moviw fsr0++
  2810     0049  00C9               	movwf	(__pdataBANK3+2)& (0+127)
  2811     004A  0012               	moviw fsr0++
  2812     004B  00CA               	movwf	(__pdataBANK3+3)& (0+127)
  2813     004C  0012               	moviw fsr0++
  2814     004D  00CB               	movwf	(__pdataBANK3+4)& (0+127)
  2815     004E  0012               	moviw fsr0++
  2816     004F  00CC               	movwf	(__pdataBANK3+5)& (0+127)
  2817                           
  2818                           ; Clear objects allocated to BIGRAM
  2819     0050  302C               	movlw	low (0+9004)
  2820     0051  0084               	movwf	4
  2821     0052  3023               	movlw	high (0+9004)
  2822     0053  0085               	movwf	5
  2823     0054  30C4               	movlw	196
  2824     0055  00FE               	movwf	btemp
  2825     0056  3000               	movlw	0
  2826     0057  00FF               	movwf	btemp+1
  2827     0058  319F  271F  3180   	fcall	clear_ram0
  2828                           
  2829                           ; Clear objects allocated to BANK0
  2830     005B  3063               	movlw	low __pbssBANK0
  2831     005C  0084               	movwf	4
  2832     005D  3000               	movlw	high __pbssBANK0
  2833     005E  0085               	movwf	5
  2834     005F  300D               	movlw	13
  2835     0060  00FE               	movwf	btemp
  2836     0061  3000               	movlw	0
  2837     0062  00FF               	movwf	btemp+1
  2838     0063  319F  271F  3180   	fcall	clear_ram0
  2839                           
  2840                           ; Clear objects allocated to BANK1
  2841     0066  0021               	movlb	1	; select bank1
  2842     0067  01E9               	clrf	__pbssBANK1& (0+127)
  2843     0068  01EA               	clrf	(__pbssBANK1+1)& (0+127)
  2844     0069  01EB               	clrf	(__pbssBANK1+2)& (0+127)
  2845     006A  01EC               	clrf	(__pbssBANK1+3)& (0+127)
  2846     006B  01ED               	clrf	(__pbssBANK1+4)& (0+127)
  2847     006C  01EE               	clrf	(__pbssBANK1+5)& (0+127)
  2848     006D  01EF               	clrf	(__pbssBANK1+6)& (0+127)
  2849                           
  2850                           ; Clear objects allocated to BANK2
  2851     006E  3021               	movlw	low __pbssBANK2
  2852     006F  0084               	movwf	4
  2853     0070  3001               	movlw	high __pbssBANK2
  2854     0071  0085               	movwf	5
  2855     0072  304C               	movlw	76
  2856     0073  00FE               	movwf	btemp
  2857     0074  3000               	movlw	0
  2858     0075  00FF               	movwf	btemp+1
  2859     0076  319F  271F  3180   	fcall	clear_ram0
  2860                           
  2861                           ; Clear objects allocated to BANK3
  2862     0079  30A0               	movlw	low __pbssBANK3
  2863     007A  0084               	movwf	4
  2864     007B  3001               	movlw	high __pbssBANK3
  2865     007C  0085               	movwf	5
  2866     007D  3027               	movlw	39
  2867     007E  00FE               	movwf	btemp
  2868     007F  3000               	movlw	0
  2869     0080  00FF               	movwf	btemp+1
  2870     0081  319F  271F         	fcall	clear_ram0
  2871     0083                     end_of_initialization:	
  2872                           ;End of C runtime variable initialization code
  2873                           
  2874     0083                     __end_of__initialization:
  2875     0083  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2876     0084  0020               	movlb	0
  2877     0085  318A  2A72         	ljmp	_main	;jump to C main() function
  2878                           
  2879                           	psect	bssBANK0
  2880     0063                     __pbssBANK0:
  2881     0063                     _pBDTEntryIn:
  2882     0063                     	ds	4
  2883     0067                     _pBDTEntryEP0OutNext:
  2884     0067                     	ds	2
  2885     0069                     _keyboardCommandCount:
  2886     0069                     	ds	1
  2887     006A                     _controlTransferState:
  2888     006A                     	ds	1
  2889     006B                     _pBDTEntryEP0OutCurrent:
  2890     006B                     	ds	1
  2891     006C                     _USBDeviceState:
  2892     006C                     	ds	1
  2893     006D                     _USTATcopy:
  2894     006D                     	ds	1
  2895     006E                     _USBAlternateInterface:
  2896     006E                     	ds	1
  2897     006F                     _USBActiveConfiguration:
  2898     006F                     	ds	1
  2899                           
  2900                           	psect	bssBANK1
  2901     00E9                     __pbssBANK1:
  2902     00E9                     _inPipes:
  2903     00E9                     	ds	5
  2904     00EE                     _eusartRxHead:
  2905     00EE                     	ds	1
  2906     00EF                     _eusartTxBufferRemaining:
  2907     00EF                     	ds	1
  2908                           
  2909                           	psect	bssBANK2
  2910     0121                     __pbssBANK2:
  2911     0121                     _outPipes:
  2912     0121                     	ds	7
  2913     0128                     _timeMs:
  2914     0128                     	ds	4
  2915     012C                     _prevTimeMs:
  2916     012C                     	ds	4
  2917     0130                     _pBDTEntryOut:
  2918     0130                     	ds	4
  2919     0134                     _OldSOFCount:
  2920     0134                     	ds	2
  2921     0136                     _LocalSOFCount:
  2922     0136                     	ds	2
  2923     0138                     _keyboardIdleRate:
  2924     0138                     	ds	2
  2925     013A                     _SOFCounter:
  2926     013A                     	ds	2
  2927     013C                     _ep_data_out:
  2928     013C                     	ds	2
  2929     013E                     _ep_data_in:
  2930     013E                     	ds	2
  2931     0140                     _EUSART_ErrorHandler:
  2932     0140                     	ds	2
  2933     0142                     _EUSART_OverrunErrorHandler:
  2934     0142                     	ds	2
  2935     0144                     _EUSART_FramingErrorHandler:
  2936     0144                     	ds	2
  2937     0146                     _TMR2_InterruptHandler:
  2938     0146                     	ds	2
  2939     0148                     _EUSART_RxDefaultInterruptHandler:
  2940     0148                     	ds	2
  2941     014A                     _EUSART_TxDefaultInterruptHandler:
  2942     014A                     	ds	2
  2943     014C                     _keyboardCommandOnes:
  2944     014C                     	ds	1
  2945     014D                     _keyboardCommandBits:
  2946     014D                     	ds	1
  2947     014E                     _keyboardCommand:
  2948     014E                     	ds	1
  2949     014F                     _keyboardIsBreak:
  2950     014F                     	ds	1
  2951     0150                     _keyboardIsExtend:
  2952     0150                     	ds	1
  2953     0151                     _keyboardData:
  2954     0151                     	ds	1
  2955     0152                     _keyboardScanCodeValid:
  2956     0152                     	ds	1
  2957     0153                     _keyboardOnesCount:
  2958     0153                     	ds	1
  2959     0154                     _keyboardIndexData:
  2960     0154                     	ds	1
  2961     0155                     _keyboardState:
  2962     0155                     	ds	1
  2963     0156                     _USBTicksSinceSuspendEnd:
  2964     0156                     	ds	1
  2965     0157                     _USBDeferOUTDataStagePackets:
  2966     0157                     	ds	1
  2967     0158                     _USBDeferINDataStagePackets:
  2968     0158                     	ds	1
  2969     0159                     _USBStatusStageEnabledFlag2:
  2970     0159                     	ds	1
  2971     015A                     _USBStatusStageEnabledFlag1:
  2972     015A                     	ds	1
  2973     015B                     _USBDeferStatusStagePacket:
  2974     015B                     	ds	1
  2975     015C                     _USBStatusStageTimeoutCounter:
  2976     015C                     	ds	1
  2977     015D                     _BothEP0OutUOWNsSet:
  2978     015D                     	ds	1
  2979     015E                     _endpoint_number:
  2980     015E                     	ds	1
  2981     015F                     _USBBusIsSuspended:
  2982     015F                     	ds	1
  2983     0160                     _RemoteWakeup:
  2984     0160                     	ds	1
  2985     0161                     _pDst:
  2986     0161                     	ds	1
  2987     0162                     _shortPacketStatus:
  2988     0162                     	ds	1
  2989     0163                     _eusartRxLastError:
  2990     0163                     	ds	1
  2991     0164                     _eusartRxCount:
  2992     0164                     	ds	1
  2993     0165                     _eusartRxTail:
  2994     0165                     	ds	1
  2995     0166                     _eusartTxTail:
  2996     0166                     	ds	1
  2997     0167                     _eusartTxHead:
  2998     0167                     	ds	1
  2999     0168                     _keyboardScanCode:
  3000     0168                     	ds	3
  3001     016B                     _active_protocol:
  3002     016B                     	ds	1
  3003     016C                     _idle_rate:
  3004     016C                     	ds	1
  3005                           
  3006                           	psect	bssBANK3
  3007     01A0                     __pbssBANK3:
  3008     01A0                     _oldInputReport:
  3009     01A0                     	ds	8
  3010     01A8                     _eusartRxStatusBuffer:
  3011     01A8                     	ds	8
  3012     01B0                     _eusartRxBuffer:
  3013     01B0                     	ds	8
  3014     01B8                     _eusartTxBuffer:
  3015     01B8                     	ds	8
  3016     01C0                     _USB1msTickCount:
  3017     01C0                     	ds	4
  3018     01C4                     main@F3300:
  3019     01C4                     	ds	3
  3020                           
  3021                           	psect	dataBANK3
  3022     01C7                     __pdataBANK3:
  3023     01C7                     main@F3304:
  3024     01C7                     	ds	6
  3025                           
  3026                           	psect	clrtext
  3027     1F1F                     clear_ram0:	
  3028                           ;	Called with FSR0 containing the base address, and
  3029                           ;	btemp/btemp+1 has the size to clear
  3030                           
  3031     1F1F  0064               	clrwdt	;clear the watchdog before getting into this loop
  3032     1F20                     clrloop0:
  3033     1F20  0180               	clrf	0	;clear RAM location pointed to by FSR
  3034     1F21  3101               	addfsr 0,1
  3035     1F22  3001               	movlw	1
  3036     1F23  02FE               	subwf	126,f
  3037     1F24  3000               	movlw	0
  3038     1F25  3BFF               	subwfb	127,f
  3039     1F26  087F               	movf	127,w
  3040     1F27  047E               	iorwf	126,w
  3041     1F28  1903               	btfsc	3,2
  3042     1F29  3400               	retlw	0	;all done for this memory range, return
  3043     1F2A  2F20               	goto	clrloop0	;have we reached the end yet?
  3044                           
  3045                           	psect	cstackBANK1
  3046     00A8                     __pcstackBANK1:
  3047     00A8                     ?_IOCAF4_SetInterruptHandler:
  3048     00A8                     ?_IOCAF5_SetInterruptHandler:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051     00A8                     ??_OSCILLATOR_Initialize:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054     00A8                     ??_WDT_Initialize:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057     00A8                     ??_USBDeviceInit:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060     00A8                     ??_USBDeviceAttach:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063     00A8                     ?_TMR2_SetInterruptHandler:	
  3064                           ; 1 bytes @ 0x0
  3065                           
  3066     00A8                     ?_EUSART_SetRxInterruptHandler:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069     00A8                     ?_EUSART_SetTxInterruptHandler:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072     00A8                     ?_EUSART_SetFramingErrorHandler:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075     00A8                     ?_EUSART_SetOverrunErrorHandler:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078     00A8                     ?_EUSART_SetErrorHandler:	
  3079                           ; 1 bytes @ 0x0
  3080                           
  3081     00A8                     ?_memset:	
  3082                           ; 1 bytes @ 0x0
  3083                           
  3084     00A8                     ?_GenericQueue_Init:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087     00A8                     ??_PS2USB_ScanCodeToUSBHID:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090     00A8                     ??_PS2Keyboard_GetLastCommand:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093     00A8                     ??_PS2Keyboard_SendCommand:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096     00A8                     ??_TMR2_StartTimer:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099     00A8                     ??_EUSART_is_tx_ready:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102     00A8                     ??_EUSART_Write:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105     00A8                     ??_hex2str:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108     00A8                     ?___bmul:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111     00A8                     ?_USBTransferOnePacket:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114     00A8                     ?_GenericQueue_IsEmpty:	
  3115                           ; 2 bytes @ 0x0
  3116                           
  3117     00A8                     ?_GenericQueue_IsFull:	
  3118                           ; 2 bytes @ 0x0
  3119                           
  3120     00A8                     ?___awmod:	
  3121                           ; 2 bytes @ 0x0
  3122                           
  3123     00A8                     USBTransferOnePacket@dir:	
  3124                           ; 2 bytes @ 0x0
  3125                           
  3126     00A8                     PS2Keyboard_SendCommand@cmd:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129     00A8                     PS2USB_ScanCodeToUSBHID@scanCode:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132     00A8                     hex2str@val:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135     00A8                     ___bmul@multiplicand:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138     00A8                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  3139                           ; 1 bytes @ 0x0
  3140                           
  3141     00A8                     IOCAF5_SetInterruptHandler@InterruptHandler:	
  3142                           ; 2 bytes @ 0x0
  3143                           
  3144     00A8                     TMR2_SetInterruptHandler@InterruptHandler:	
  3145                           ; 2 bytes @ 0x0
  3146                           
  3147     00A8                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3148                           ; 2 bytes @ 0x0
  3149                           
  3150     00A8                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3151                           ; 2 bytes @ 0x0
  3152                           
  3153     00A8                     EUSART_SetErrorHandler@interruptHandler:	
  3154                           ; 2 bytes @ 0x0
  3155                           
  3156     00A8                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3157                           ; 2 bytes @ 0x0
  3158                           
  3159     00A8                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3160                           ; 2 bytes @ 0x0
  3161                           
  3162     00A8                     GenericQueue_Init@q:	
  3163                           ; 2 bytes @ 0x0
  3164                           
  3165     00A8                     GenericQueue_IsEmpty@q:	
  3166                           ; 2 bytes @ 0x0
  3167                           
  3168     00A8                     GenericQueue_IsFull@q:	
  3169                           ; 2 bytes @ 0x0
  3170                           
  3171     00A8                     ___awmod@divisor:	
  3172                           ; 2 bytes @ 0x0
  3173                           
  3174     00A8                     memset@c:	
  3175                           ; 2 bytes @ 0x0
  3176                           
  3177                           
  3178                           ; 2 bytes @ 0x0
  3179     00A8                     	ds	1
  3180     00A9                     ??_APP_KeyboardProcessOutputReport:
  3181     00A9                     ??___bmul:	
  3182                           ; 1 bytes @ 0x1
  3183                           
  3184     00A9                     EUSART_Write@txData:	
  3185                           ; 1 bytes @ 0x1
  3186                           
  3187     00A9                     USBTransferOnePacket@data:	
  3188                           ; 1 bytes @ 0x1
  3189                           
  3190                           
  3191                           ; 2 bytes @ 0x1
  3192     00A9                     	ds	1
  3193     00AA                     ??_IOCAF4_SetInterruptHandler:
  3194     00AA                     ??_IOCAF5_SetInterruptHandler:	
  3195                           ; 1 bytes @ 0x2
  3196                           
  3197     00AA                     ??_TMR2_Initialize:	
  3198                           ; 1 bytes @ 0x2
  3199                           
  3200     00AA                     ??_EUSART_Initialize:	
  3201                           ; 1 bytes @ 0x2
  3202                           
  3203     00AA                     ??_TMR2_SetInterruptHandler:	
  3204                           ; 1 bytes @ 0x2
  3205                           
  3206     00AA                     ??_EUSART_SetRxInterruptHandler:	
  3207                           ; 1 bytes @ 0x2
  3208                           
  3209     00AA                     ??_EUSART_SetTxInterruptHandler:	
  3210                           ; 1 bytes @ 0x2
  3211                           
  3212     00AA                     ??_EUSART_SetFramingErrorHandler:	
  3213                           ; 1 bytes @ 0x2
  3214                           
  3215     00AA                     ??_EUSART_SetOverrunErrorHandler:	
  3216                           ; 1 bytes @ 0x2
  3217                           
  3218     00AA                     ??_EUSART_SetErrorHandler:	
  3219                           ; 1 bytes @ 0x2
  3220                           
  3221     00AA                     ??_SysTime_Init:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224     00AA                     ?_Log_Message:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227     00AA                     ??_GenericQueue_IsEmpty:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230     00AA                     ??_PIN_MANAGER_Initialize:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233     00AA                     ??_GenericQueue_IsFull:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236     00AA                     Log_Message@bufSize:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239     00AA                     ___bmul@product:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242     00AA                     GenericQueue_Init@element_size:	
  3243                           ; 1 bytes @ 0x2
  3244                           
  3245     00AA                     ___awmod@dividend:	
  3246                           ; 2 bytes @ 0x2
  3247                           
  3248     00AA                     memset@n:	
  3249                           ; 2 bytes @ 0x2
  3250                           
  3251                           
  3252                           ; 2 bytes @ 0x2
  3253     00AA                     	ds	1
  3254     00AB                     ??_Log_Message:
  3255     00AB                     USBTransferOnePacket@len:	
  3256                           ; 1 bytes @ 0x3
  3257                           
  3258     00AB                     ___bmul@multiplier:	
  3259                           ; 1 bytes @ 0x3
  3260                           
  3261                           
  3262                           ; 1 bytes @ 0x3
  3263     00AB                     	ds	1
  3264     00AC                     ??_memset:
  3265     00AC                     ??_USBTransferOnePacket:	
  3266                           ; 1 bytes @ 0x4
  3267                           
  3268     00AC                     ??_PS2Keyboard_Init:	
  3269                           ; 1 bytes @ 0x4
  3270                           
  3271     00AC                     ?_Log_UtilityConvertByteToHex:	
  3272                           ; 1 bytes @ 0x4
  3273                           
  3274     00AC                     ??_GenericQueue_Init:	
  3275                           ; 1 bytes @ 0x4
  3276                           
  3277     00AC                     ??___awmod:	
  3278                           ; 1 bytes @ 0x4
  3279                           
  3280     00AC                     Log_UtilityConvertByteToHex@buf:	
  3281                           ; 1 bytes @ 0x4
  3282                           
  3283     00AC                     Log_Message@buf:	
  3284                           ; 1 bytes @ 0x4
  3285                           
  3286     00AC                     USBDeviceInit@p:	
  3287                           ; 1 bytes @ 0x4
  3288                           
  3289                           
  3290                           ; 2 bytes @ 0x4
  3291     00AC                     	ds	1
  3292     00AD                     Log_UtilityConvertByteToHex@bufSize:
  3293     00AD                     Log_Message@i:	
  3294                           ; 1 bytes @ 0x5
  3295                           
  3296     00AD                     ___awmod@counter:	
  3297                           ; 1 bytes @ 0x5
  3298                           
  3299     00AD                     memset@p:	
  3300                           ; 1 bytes @ 0x5
  3301                           
  3302                           
  3303                           ; 1 bytes @ 0x5
  3304     00AD                     	ds	1
  3305     00AE                     ??_Log_UtilityConvertByteToHex:
  3306     00AE                     USBDeviceInit@i_1324:	
  3307                           ; 1 bytes @ 0x6
  3308                           
  3309     00AE                     ___awmod@sign:	
  3310                           ; 1 bytes @ 0x6
  3311                           
  3312     00AE                     memset@dest:	
  3313                           ; 1 bytes @ 0x6
  3314                           
  3315                           
  3316                           ; 1 bytes @ 0x6
  3317     00AE                     	ds	1
  3318     00AF                     ?___wmul:
  3319     00AF                     USBDeviceInit@i:	
  3320                           ; 2 bytes @ 0x7
  3321                           
  3322     00AF                     Log_UtilityConvertByteToHex@d0:	
  3323                           ; 1 bytes @ 0x7
  3324                           
  3325     00AF                     ___wmul@multiplier:	
  3326                           ; 1 bytes @ 0x7
  3327                           
  3328                           
  3329                           ; 2 bytes @ 0x7
  3330     00AF                     	ds	1
  3331     00B0                     ??_SYSTEM_Initialize:
  3332     00B0                     USBTransferOnePacket@ep:	
  3333                           ; 1 bytes @ 0x8
  3334                           
  3335     00B0                     Log_UtilityConvertByteToHex@byte:	
  3336                           ; 1 bytes @ 0x8
  3337                           
  3338                           
  3339                           ; 1 bytes @ 0x8
  3340     00B0                     	ds	1
  3341     00B1                     Log_UtilityConvertByteToHex@d1:
  3342     00B1                     USBTransferOnePacket@handle:	
  3343                           ; 1 bytes @ 0x9
  3344                           
  3345     00B1                     ___wmul@multiplicand:	
  3346                           ; 2 bytes @ 0x9
  3347                           
  3348                           
  3349                           ; 2 bytes @ 0x9
  3350     00B1                     	ds	2
  3351     00B3                     ??___wmul:
  3352     00B3                     ___wmul@product:	
  3353                           ; 1 bytes @ 0xB
  3354                           
  3355                           
  3356                           ; 2 bytes @ 0xB
  3357     00B3                     	ds	2
  3358     00B5                     ?_memcpy:
  3359     00B5                     ?_memcmp:	
  3360                           ; 2 bytes @ 0xD
  3361                           
  3362     00B5                     memcmp@vl:	
  3363                           ; 2 bytes @ 0xD
  3364                           
  3365     00B5                     memcpy@d1:	
  3366                           ; 2 bytes @ 0xD
  3367                           
  3368                           
  3369                           ; 2 bytes @ 0xD
  3370     00B5                     	ds	2
  3371     00B7                     memcmp@vr:
  3372     00B7                     memcpy@s1:	
  3373                           ; 1 bytes @ 0xF
  3374                           
  3375                           
  3376                           ; 2 bytes @ 0xF
  3377     00B7                     	ds	1
  3378     00B8                     memcmp@n:
  3379                           
  3380                           ; 2 bytes @ 0x10
  3381     00B8                     	ds	1
  3382     00B9                     memcpy@n:
  3383                           
  3384                           ; 2 bytes @ 0x11
  3385     00B9                     	ds	1
  3386     00BA                     ??_memcmp:
  3387                           
  3388                           ; 1 bytes @ 0x12
  3389     00BA                     	ds	1
  3390     00BB                     ??_memcpy:
  3391     00BB                     memcmp@l:	
  3392                           ; 1 bytes @ 0x13
  3393                           
  3394     00BB                     memcpy@d:	
  3395                           ; 2 bytes @ 0x13
  3396                           
  3397                           
  3398                           ; 2 bytes @ 0x13
  3399     00BB                     	ds	2
  3400     00BD                     memcmp@r:
  3401     00BD                     memcpy@s:	
  3402                           ; 1 bytes @ 0x15
  3403                           
  3404                           
  3405                           ; 2 bytes @ 0x15
  3406     00BD                     	ds	1
  3407     00BE                     ?_GenericQueue_Contains:
  3408     00BE                     GenericQueue_Contains@q:	
  3409                           ; 1 bytes @ 0x16
  3410                           
  3411                           
  3412                           ; 2 bytes @ 0x16
  3413     00BE                     	ds	1
  3414     00BF                     memcpy@tmp:
  3415                           
  3416                           ; 1 bytes @ 0x17
  3417     00BF                     	ds	1
  3418     00C0                     ?_GenericQueue_CopyToArray:
  3419     00C0                     ?_GenericQueue_Remove:	
  3420                           ; 1 bytes @ 0x18
  3421                           
  3422     00C0                     ?_GenericQueue_Enqueue:	
  3423                           ; 1 bytes @ 0x18
  3424                           
  3425     00C0                     ?_GenericQueue_Dequeue:	
  3426                           ; 1 bytes @ 0x18
  3427                           
  3428     00C0                     GenericQueue_Contains@item:	
  3429                           ; 1 bytes @ 0x18
  3430                           
  3431     00C0                     GenericQueue_Enqueue@q:	
  3432                           ; 1 bytes @ 0x18
  3433                           
  3434     00C0                     GenericQueue_Dequeue@q:	
  3435                           ; 2 bytes @ 0x18
  3436                           
  3437     00C0                     GenericQueue_Remove@q:	
  3438                           ; 2 bytes @ 0x18
  3439                           
  3440     00C0                     GenericQueue_CopyToArray@q:	
  3441                           ; 2 bytes @ 0x18
  3442                           
  3443                           
  3444                           ; 2 bytes @ 0x18
  3445     00C0                     	ds	1
  3446     00C1                     ??_GenericQueue_Contains:
  3447                           
  3448                           ; 1 bytes @ 0x19
  3449     00C1                     	ds	1
  3450     00C2                     GenericQueue_Dequeue@item:
  3451     00C2                     GenericQueue_Remove@item:	
  3452                           ; 1 bytes @ 0x1A
  3453                           
  3454     00C2                     GenericQueue_CopyToArray@array:	
  3455                           ; 1 bytes @ 0x1A
  3456                           
  3457     00C2                     GenericQueue_Enqueue@item:	
  3458                           ; 1 bytes @ 0x1A
  3459                           
  3460                           
  3461                           ; 2 bytes @ 0x1A
  3462     00C2                     	ds	1
  3463     00C3                     ??_GenericQueue_CopyToArray:
  3464     00C3                     ??_GenericQueue_Remove:	
  3465                           ; 1 bytes @ 0x1B
  3466                           
  3467     00C3                     ??_GenericQueue_Dequeue:	
  3468                           ; 1 bytes @ 0x1B
  3469                           
  3470                           
  3471                           ; 1 bytes @ 0x1B
  3472     00C3                     	ds	1
  3473     00C4                     ??_GenericQueue_Enqueue:
  3474                           
  3475                           ; 1 bytes @ 0x1C
  3476     00C4                     	ds	1
  3477     00C5                     GenericQueue_Contains@i:
  3478                           
  3479                           ; 1 bytes @ 0x1D
  3480     00C5                     	ds	2
  3481     00C7                     ??_PS2Keyboard_GetScanCode:
  3482     00C7                     PS2Keyboard_GetScanCode@scanCode:	
  3483                           ; 1 bytes @ 0x1F
  3484                           
  3485     00C7                     GenericQueue_Remove@i:	
  3486                           ; 1 bytes @ 0x1F
  3487                           
  3488     00C7                     GenericQueue_CopyToArray@index:	
  3489                           ; 1 bytes @ 0x1F
  3490                           
  3491                           
  3492                           ; 1 bytes @ 0x1F
  3493     00C7                     	ds	1
  3494     00C8                     PS2Keyboard_GetScanCode@ret:
  3495     00C8                     GenericQueue_Remove@j:	
  3496                           ; 1 bytes @ 0x20
  3497                           
  3498     00C8                     GenericQueue_CopyToArray@count:	
  3499                           ; 1 bytes @ 0x20
  3500                           
  3501                           
  3502                           ; 1 bytes @ 0x20
  3503     00C8                     	ds	1
  3504     00C9                     ??_APP_KeyboardUpdateState:
  3505                           
  3506                           ; 1 bytes @ 0x21
  3507     00C9                     	ds	2
  3508     00CB                     APP_KeyboardUpdateState@leds:
  3509                           
  3510                           ; 1 bytes @ 0x23
  3511     00CB                     	ds	1
  3512     00CC                     APP_KeyboardUpdateState@usbHidCode:
  3513                           
  3514                           ; 1 bytes @ 0x24
  3515     00CC                     	ds	1
  3516     00CD                     APP_KeyboardUpdateState@usbHidCode_2856:
  3517                           
  3518                           ; 1 bytes @ 0x25
  3519     00CD                     	ds	1
  3520     00CE                     APP_KeyboardUpdateState@usbHidCode_2855:
  3521                           
  3522                           ; 1 bytes @ 0x26
  3523     00CE                     	ds	1
  3524     00CF                     APP_KeyboardUpdateState@usbHidCode_2864:
  3525                           
  3526                           ; 1 bytes @ 0x27
  3527     00CF                     	ds	1
  3528     00D0                     APP_KeyboardUpdateState@scanCode:
  3529                           
  3530                           ; 1 bytes @ 0x28
  3531     00D0                     	ds	1
  3532     00D1                     ??_APP_KeyboardTasks:
  3533                           
  3534                           ; 1 bytes @ 0x29
  3535     00D1                     	ds	2
  3536     00D3                     APP_KeyboardTasks@scanCode:
  3537                           
  3538                           ; 1 bytes @ 0x2B
  3539     00D3                     	ds	1
  3540     00D4                     APP_KeyboardTasks@needToSendNewReportPacket:
  3541                           
  3542                           ; 1 bytes @ 0x2C
  3543     00D4                     	ds	1
  3544     00D5                     APP_KeyboardTasks@TimeDeltaMilliseconds:
  3545                           
  3546                           ; 2 bytes @ 0x2D
  3547     00D5                     	ds	2
  3548     00D7                     APP_KeyboardTasks@i:
  3549                           
  3550                           ; 1 bytes @ 0x2F
  3551     00D7                     	ds	1
  3552     00D8                     ??_main:
  3553                           
  3554                           ; 1 bytes @ 0x30
  3555     00D8                     	ds	2
  3556     00DA                     main@scanCodeStr:
  3557                           
  3558                           ; 6 bytes @ 0x32
  3559     00DA                     	ds	6
  3560     00E0                     _main$2579:
  3561                           
  3562                           ; 2 bytes @ 0x38
  3563     00E0                     	ds	2
  3564     00E2                     _main$2580:
  3565                           
  3566                           ; 2 bytes @ 0x3A
  3567     00E2                     	ds	2
  3568     00E4                     main@scanCodeValid:
  3569                           
  3570                           ; 1 bytes @ 0x3C
  3571     00E4                     	ds	1
  3572     00E5                     main@hndlScanCode:
  3573                           
  3574                           ; 1 bytes @ 0x3D
  3575     00E5                     	ds	1
  3576     00E6                     main@scanCode:
  3577                           
  3578                           ; 3 bytes @ 0x3E
  3579     00E6                     	ds	3
  3580                           
  3581                           	psect	cstackCOMMON
  3582     0070                     __pcstackCOMMON:
  3583     0070                     ?_IOCAF4_DefaultInterruptHandler:
  3584     0070                     ??_IOCAF4_DefaultInterruptHandler:	
  3585                           ; 1 bytes @ 0x0
  3586                           
  3587     0070                     ?_IOCAF5_DefaultInterruptHandler:	
  3588                           ; 1 bytes @ 0x0
  3589                           
  3590     0070                     ??_IOCAF5_DefaultInterruptHandler:	
  3591                           ; 1 bytes @ 0x0
  3592                           
  3593     0070                     ?_IOCAF4_ISR:	
  3594                           ; 1 bytes @ 0x0
  3595                           
  3596     0070                     ?_IOCAF5_ISR:	
  3597                           ; 1 bytes @ 0x0
  3598                           
  3599     0070                     ?_OSCILLATOR_Initialize:	
  3600                           ; 1 bytes @ 0x0
  3601                           
  3602     0070                     ?_WDT_Initialize:	
  3603                           ; 1 bytes @ 0x0
  3604                           
  3605     0070                     ?_TMR2_Initialize:	
  3606                           ; 1 bytes @ 0x0
  3607                           
  3608     0070                     ?_EUSART_Initialize:	
  3609                           ; 1 bytes @ 0x0
  3610                           
  3611     0070                     ?_USBDeviceInit:	
  3612                           ; 1 bytes @ 0x0
  3613                           
  3614     0070                     ?_USBDeviceAttach:	
  3615                           ; 1 bytes @ 0x0
  3616                           
  3617     0070                     ?_USBDeviceTasks:	
  3618                           ; 1 bytes @ 0x0
  3619                           
  3620     0070                     ?_TMR2_ISR:	
  3621                           ; 1 bytes @ 0x0
  3622                           
  3623     0070                     ??_TMR2_ISR:	
  3624                           ; 1 bytes @ 0x0
  3625                           
  3626     0070                     ?_TMR2_DefaultInterruptHandler:	
  3627                           ; 1 bytes @ 0x0
  3628                           
  3629     0070                     ??_TMR2_DefaultInterruptHandler:	
  3630                           ; 1 bytes @ 0x0
  3631                           
  3632     0070                     ?_EUSART_Receive_ISR:	
  3633                           ; 1 bytes @ 0x0
  3634                           
  3635     0070                     ?_EUSART_Transmit_ISR:	
  3636                           ; 1 bytes @ 0x0
  3637                           
  3638     0070                     ??_EUSART_Transmit_ISR:	
  3639                           ; 1 bytes @ 0x0
  3640                           
  3641     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3642                           ; 1 bytes @ 0x0
  3643                           
  3644     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3645                           ; 1 bytes @ 0x0
  3646                           
  3647     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3648                           ; 1 bytes @ 0x0
  3649                           
  3650     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3651                           ; 1 bytes @ 0x0
  3652                           
  3653     0070                     ?_EUSART_DefaultErrorHandler:	
  3654                           ; 1 bytes @ 0x0
  3655                           
  3656     0070                     ?_EUSART_RxDataHandler:	
  3657                           ; 1 bytes @ 0x0
  3658                           
  3659     0070                     ??_EUSART_RxDataHandler:	
  3660                           ; 1 bytes @ 0x0
  3661                           
  3662     0070                     ?_USBWakeFromSuspend:	
  3663                           ; 1 bytes @ 0x0
  3664                           
  3665     0070                     ?_USBSuspend:	
  3666                           ; 1 bytes @ 0x0
  3667                           
  3668     0070                     ?_USBIncrement1msInternalTimers:	
  3669                           ; 1 bytes @ 0x0
  3670                           
  3671     0070                     ??_USBIncrement1msInternalTimers:	
  3672                           ; 1 bytes @ 0x0
  3673                           
  3674     0070                     ?_USBCtrlEPAllowStatusStage:	
  3675                           ; 1 bytes @ 0x0
  3676                           
  3677     0070                     ??_USBCtrlEPAllowStatusStage:	
  3678                           ; 1 bytes @ 0x0
  3679                           
  3680     0070                     ?_USBStallHandler:	
  3681                           ; 1 bytes @ 0x0
  3682                           
  3683     0070                     ??_USBStallHandler:	
  3684                           ; 1 bytes @ 0x0
  3685                           
  3686     0070                     ?_USBCtrlEPService:	
  3687                           ; 1 bytes @ 0x0
  3688                           
  3689     0070                     ?_USBConfigureEndpoint:	
  3690                           ; 1 bytes @ 0x0
  3691                           
  3692     0070                     ?_USBCtrlTrfTxService:	
  3693                           ; 1 bytes @ 0x0
  3694                           
  3695     0070                     ??_USBCtrlTrfTxService:	
  3696                           ; 1 bytes @ 0x0
  3697                           
  3698     0070                     ?_USBCtrlTrfSetupHandler:	
  3699                           ; 1 bytes @ 0x0
  3700                           
  3701     0070                     ?_USBCtrlTrfOutHandler:	
  3702                           ; 1 bytes @ 0x0
  3703                           
  3704     0070                     ?_USBCtrlTrfInHandler:	
  3705                           ; 1 bytes @ 0x0
  3706                           
  3707     0070                     ?_USBCheckStdRequest:	
  3708                           ; 1 bytes @ 0x0
  3709                           
  3710     0070                     ?_USBStdFeatureReqHandler:	
  3711                           ; 1 bytes @ 0x0
  3712                           
  3713     0070                     ?_USBHIDCBSetReportHandler:	
  3714                           ; 1 bytes @ 0x0
  3715                           
  3716     0070                     ??_USBHIDCBSetReportHandler:	
  3717                           ; 1 bytes @ 0x0
  3718                           
  3719     0070                     ?_USBHIDCBSetIdleRateHandler:	
  3720                           ; 1 bytes @ 0x0
  3721                           
  3722     0070                     ?_APP_KeyboardInit:	
  3723                           ; 1 bytes @ 0x0
  3724                           
  3725     0070                     ?_SysTime_Init:	
  3726                           ; 1 bytes @ 0x0
  3727                           
  3728     0070                     ?_PS2Keyboard_Init:	
  3729                           ; 1 bytes @ 0x0
  3730                           
  3731     0070                     ?_PS2Keyboard_GetScanCode:	
  3732                           ; 1 bytes @ 0x0
  3733                           
  3734     0070                     ?_APP_KeyboardTasks:	
  3735                           ; 1 bytes @ 0x0
  3736                           
  3737     0070                     ?_APP_KeyboardUpdateState:	
  3738                           ; 1 bytes @ 0x0
  3739                           
  3740     0070                     ?_APP_KeyboardProcessOutputReport:	
  3741                           ; 1 bytes @ 0x0
  3742                           
  3743     0070                     ?_PS2USB_ScanCodeToUSBHID:	
  3744                           ; 1 bytes @ 0x0
  3745                           
  3746     0070                     ?_PS2Keyboard_GetLastCommand:	
  3747                           ; 1 bytes @ 0x0
  3748                           
  3749     0070                     ?_PS2Keyboard_SendCommand:	
  3750                           ; 1 bytes @ 0x0
  3751                           
  3752     0070                     ?_PS2Keyboard_ClockInterrupt:	
  3753                           ; 1 bytes @ 0x0
  3754                           
  3755     0070                     ?_PS2Keyboard_DataInterrupt:	
  3756                           ; 1 bytes @ 0x0
  3757                           
  3758     0070                     ?_SysTimeInterrupt:	
  3759                           ; 1 bytes @ 0x0
  3760                           
  3761     0070                     ??_SysTimeInterrupt:	
  3762                           ; 1 bytes @ 0x0
  3763                           
  3764     0070                     ?_PIN_MANAGER_Initialize:	
  3765                           ; 1 bytes @ 0x0
  3766                           
  3767     0070                     ?_PIN_MANAGER_IOC:	
  3768                           ; 1 bytes @ 0x0
  3769                           
  3770     0070                     ?_SYSTEM_Initialize:	
  3771                           ; 1 bytes @ 0x0
  3772                           
  3773     0070                     ?_INTERRUPT_InterruptManager:	
  3774                           ; 1 bytes @ 0x0
  3775                           
  3776     0070                     ?_TMR2_StartTimer:	
  3777                           ; 1 bytes @ 0x0
  3778                           
  3779     0070                     ?_EUSART_is_tx_ready:	
  3780                           ; 1 bytes @ 0x0
  3781                           
  3782     0070                     ?_EUSART_Write:	
  3783                           ; 1 bytes @ 0x0
  3784                           
  3785     0070                     ?_USBCtrlEPAllowDataStage:	
  3786                           ; 1 bytes @ 0x0
  3787                           
  3788     0070                     ?_USBCtrlEPServiceComplete:	
  3789                           ; 1 bytes @ 0x0
  3790                           
  3791     0070                     ?_USBCtrlTrfRxService:	
  3792                           ; 1 bytes @ 0x0
  3793                           
  3794     0070                     ?_USBStdSetCfgHandler:	
  3795                           ; 1 bytes @ 0x0
  3796                           
  3797     0070                     ?_USBStdGetDscHandler:	
  3798                           ; 1 bytes @ 0x0
  3799                           
  3800     0070                     ??_USBStdGetDscHandler:	
  3801                           ; 1 bytes @ 0x0
  3802                           
  3803     0070                     ?_USBStdGetStatusHandler:	
  3804                           ; 1 bytes @ 0x0
  3805                           
  3806     0070                     ??_USBStdGetStatusHandler:	
  3807                           ; 1 bytes @ 0x0
  3808                           
  3809     0070                     ?_USBCheckHIDRequest:	
  3810                           ; 1 bytes @ 0x0
  3811                           
  3812     0070                     ?_USBHIDCBSetReportComplete:	
  3813                           ; 1 bytes @ 0x0
  3814                           
  3815     0070                     ?_hex2str:	
  3816                           ; 1 bytes @ 0x0
  3817                           
  3818     0070                     ?i1_USBDeviceInit:	
  3819                           ; 1 bytes @ 0x0
  3820                           
  3821     0070                     ??i1_USBDeviceInit:	
  3822                           ; 1 bytes @ 0x0
  3823                           
  3824     0070                     ?i1_APP_KeyboardProcessOutputReport:	
  3825                           ; 1 bytes @ 0x0
  3826                           
  3827     0070                     ?i1_PS2Keyboard_SendCommand:	
  3828                           ; 1 bytes @ 0x0
  3829                           
  3830     0070                     ??i1_PS2Keyboard_SendCommand:	
  3831                           ; 1 bytes @ 0x0
  3832                           
  3833     0070                     ?i1_GenericQueue_Init:	
  3834                           ; 1 bytes @ 0x0
  3835                           
  3836     0070                     ?_main:	
  3837                           ; 1 bytes @ 0x0
  3838                           
  3839     0070                     ?i1_USBTransferOnePacket:	
  3840                           ; 2 bytes @ 0x0
  3841                           
  3842     0070                     ?i1_GenericQueue_IsFull:	
  3843                           ; 2 bytes @ 0x0
  3844                           
  3845     0070                     ?i1___wmul:	
  3846                           ; 2 bytes @ 0x0
  3847                           
  3848     0070                     ?i1___awmod:	
  3849                           ; 2 bytes @ 0x0
  3850                           
  3851     0070                     ?i1_memset:	
  3852                           ; 2 bytes @ 0x0
  3853                           
  3854     0070                     ?_SysTime_GetCurrentTimeMs:	
  3855                           ; 2 bytes @ 0x0
  3856                           
  3857     0070                     USBConfigureEndpoint@direction:	
  3858                           ; 4 bytes @ 0x0
  3859                           
  3860     0070                     USBHIDCBSetIdleRateHandler@newIdleRate:	
  3861                           ; 1 bytes @ 0x0
  3862                           
  3863     0070                     i1USBTransferOnePacket@dir:	
  3864                           ; 1 bytes @ 0x0
  3865                           
  3866     0070                     i1PS2Keyboard_SendCommand@cmd:	
  3867                           ; 1 bytes @ 0x0
  3868                           
  3869     0070                     i1GenericQueue_Init@q:	
  3870                           ; 1 bytes @ 0x0
  3871                           
  3872     0070                     i1GenericQueue_IsFull@q:	
  3873                           ; 2 bytes @ 0x0
  3874                           
  3875     0070                     i1___wmul@multiplier:	
  3876                           ; 2 bytes @ 0x0
  3877                           
  3878     0070                     i1___awmod@divisor:	
  3879                           ; 2 bytes @ 0x0
  3880                           
  3881     0070                     i1memset@c:	
  3882                           ; 2 bytes @ 0x0
  3883                           
  3884                           
  3885                           ; 2 bytes @ 0x0
  3886     0070                     	ds	1
  3887     0071                     ??_EUSART_Receive_ISR:
  3888     0071                     ??_EUSART_DefaultErrorHandler:	
  3889                           ; 1 bytes @ 0x1
  3890                           
  3891     0071                     ??_USBConfigureEndpoint:	
  3892                           ; 1 bytes @ 0x1
  3893                           
  3894     0071                     ??_USBHIDCBSetIdleRateHandler:	
  3895                           ; 1 bytes @ 0x1
  3896                           
  3897     0071                     ??_USBHIDCBSetReportComplete:	
  3898                           ; 1 bytes @ 0x1
  3899                           
  3900     0071                     ??i1_APP_KeyboardProcessOutputReport:	
  3901                           ; 1 bytes @ 0x1
  3902                           
  3903     0071                     i1USBTransferOnePacket@data:	
  3904                           ; 1 bytes @ 0x1
  3905                           
  3906                           
  3907                           ; 2 bytes @ 0x1
  3908     0071                     	ds	1
  3909     0072                     ??i1_GenericQueue_IsFull:
  3910     0072                     USBCtrlTrfTxService@byteToSend:	
  3911                           ; 1 bytes @ 0x2
  3912                           
  3913     0072                     USBStdGetStatusHandler@p:	
  3914                           ; 1 bytes @ 0x2
  3915                           
  3916     0072                     i1GenericQueue_Init@element_size:	
  3917                           ; 2 bytes @ 0x2
  3918                           
  3919     0072                     i1___wmul@multiplicand:	
  3920                           ; 2 bytes @ 0x2
  3921                           
  3922     0072                     i1___awmod@dividend:	
  3923                           ; 2 bytes @ 0x2
  3924                           
  3925     0072                     i1memset@n:	
  3926                           ; 2 bytes @ 0x2
  3927                           
  3928                           
  3929                           ; 2 bytes @ 0x2
  3930     0072                     	ds	1
  3931     0073                     ??_USBCtrlTrfInHandler:
  3932     0073                     ??_USBCtrlEPAllowDataStage:	
  3933                           ; 1 bytes @ 0x3
  3934                           
  3935     0073                     USBHIDCBSetIdleRateHandler@reportID:	
  3936                           ; 1 bytes @ 0x3
  3937                           
  3938     0073                     i1USBTransferOnePacket@len:	
  3939                           ; 1 bytes @ 0x3
  3940                           
  3941                           
  3942                           ; 1 bytes @ 0x3
  3943     0073                     	ds	1
  3944     0074                     ??_IOCAF5_ISR:
  3945     0074                     ??_PS2Keyboard_DataInterrupt:	
  3946                           ; 1 bytes @ 0x4
  3947                           
  3948     0074                     ??_SysTime_GetCurrentTimeMs:	
  3949                           ; 1 bytes @ 0x4
  3950                           
  3951     0074                     ??_USBCtrlTrfRxService:	
  3952                           ; 1 bytes @ 0x4
  3953                           
  3954     0074                     ??_USBCheckHIDRequest:	
  3955                           ; 1 bytes @ 0x4
  3956                           
  3957     0074                     ??i1_USBTransferOnePacket:	
  3958                           ; 1 bytes @ 0x4
  3959                           
  3960     0074                     ??i1_GenericQueue_Init:	
  3961                           ; 1 bytes @ 0x4
  3962                           
  3963     0074                     ??i1___wmul:	
  3964                           ; 1 bytes @ 0x4
  3965                           
  3966     0074                     ??i1___awmod:	
  3967                           ; 1 bytes @ 0x4
  3968                           
  3969     0074                     ??i1_memset:	
  3970                           ; 1 bytes @ 0x4
  3971                           
  3972     0074                     i1USBDeviceInit@p:	
  3973                           ; 1 bytes @ 0x4
  3974                           
  3975     0074                     i1___wmul@product:	
  3976                           ; 2 bytes @ 0x4
  3977                           
  3978                           
  3979                           ; 2 bytes @ 0x4
  3980     0074                     	ds	1
  3981     0075                     USBConfigureEndpoint@EPNum:
  3982     0075                     i1___awmod@counter:	
  3983                           ; 1 bytes @ 0x5
  3984                           
  3985     0075                     i1memset@dest:	
  3986                           ; 1 bytes @ 0x5
  3987                           
  3988                           
  3989                           ; 1 bytes @ 0x5
  3990     0075                     	ds	1
  3991     0076                     ?i1_memcpy:
  3992     0076                     USBConfigureEndpoint@handle:	
  3993                           ; 2 bytes @ 0x6
  3994                           
  3995     0076                     i1USBDeviceInit@i_1324:	
  3996                           ; 1 bytes @ 0x6
  3997                           
  3998     0076                     i1___awmod@sign:	
  3999                           ; 1 bytes @ 0x6
  4000                           
  4001     0076                     i1memset@p:	
  4002                           ; 1 bytes @ 0x6
  4003                           
  4004     0076                     i1memcpy@d1:	
  4005                           ; 1 bytes @ 0x6
  4006                           
  4007                           
  4008                           ; 2 bytes @ 0x6
  4009     0076                     	ds	1
  4010     0077                     ?_USBEnableEndpoint:
  4011     0077                     ??_USBCtrlEPServiceComplete:	
  4012                           ; 1 bytes @ 0x7
  4013                           
  4014     0077                     USBEnableEndpoint@options:	
  4015                           ; 1 bytes @ 0x7
  4016                           
  4017     0077                     USBCtrlTrfInHandler@lastDTS:	
  4018                           ; 1 bytes @ 0x7
  4019                           
  4020     0077                     i1USBDeviceInit@i:	
  4021                           ; 1 bytes @ 0x7
  4022                           
  4023                           
  4024                           ; 1 bytes @ 0x7
  4025     0077                     	ds	1
  4026     0078                     ??_USBEnableEndpoint:
  4027     0078                     USBCtrlTrfRxService@i:	
  4028                           ; 1 bytes @ 0x8
  4029                           
  4030     0078                     i1USBTransferOnePacket@ep:	
  4031                           ; 1 bytes @ 0x8
  4032                           
  4033     0078                     i1memcpy@s1:	
  4034                           ; 1 bytes @ 0x8
  4035                           
  4036                           
  4037                           ; 2 bytes @ 0x8
  4038     0078                     	ds	1
  4039     0079                     USBCtrlTrfRxService@byteToRead:
  4040     0079                     i1USBTransferOnePacket@handle:	
  4041                           ; 1 bytes @ 0x9
  4042                           
  4043                           
  4044                           ; 2 bytes @ 0x9
  4045     0079                     	ds	1
  4046     007A                     ??_USBCtrlTrfOutHandler:
  4047     007A                     USBEnableEndpoint@p:	
  4048                           ; 1 bytes @ 0xA
  4049                           
  4050     007A                     i1memcpy@n:	
  4051                           ; 2 bytes @ 0xA
  4052                           
  4053                           
  4054                           ; 2 bytes @ 0xA
  4055     007A                     	ds	2
  4056     007C                     ??i1_memcpy:
  4057     007C                     USBEnableEndpoint@ep:	
  4058                           ; 1 bytes @ 0xC
  4059                           
  4060     007C                     PS2Keyboard_ClockInterrupt@bitPos:	
  4061                           ; 1 bytes @ 0xC
  4062                           
  4063                           
  4064                           ; 1 bytes @ 0xC
  4065     007C                     	ds	1
  4066     007D                     ??_USBWakeFromSuspend:
  4067     007D                     ??_USBSuspend:	
  4068                           ; 1 bytes @ 0xD
  4069                           
  4070     007D                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  4071                           ; 1 bytes @ 0xD
  4072                           
  4073     007D                     ??_APP_KeyboardInit:	
  4074                           ; 1 bytes @ 0xD
  4075                           
  4076     007D                     ??_USBStdSetCfgHandler:	
  4077                           ; 1 bytes @ 0xD
  4078                           
  4079     007D                     PS2Keyboard_ClockInterrupt@bit:	
  4080                           ; 1 bytes @ 0xD
  4081                           
  4082                           
  4083                           ; 1 bytes @ 0xD
  4084     007D                     	ds	1
  4085     007E                     ??_IOCAF4_ISR:
  4086     007E                     ??_PIN_MANAGER_IOC:	
  4087                           ; 1 bytes @ 0xE
  4088                           
  4089     007E                     ??_INTERRUPT_InterruptManager:	
  4090                           ; 1 bytes @ 0xE
  4091                           
  4092                           
  4093                           	psect	cstackBANK0
  4094     0050                     __pcstackBANK0:	
  4095                           ; 1 bytes @ 0xE
  4096                           
  4097     0050                     ?_USER_USB_CALLBACK_EVENT_HANDLER:
  4098     0050                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  4099                           ; 1 bytes @ 0x0
  4100                           
  4101     0050                     i1memcpy@d:	
  4102                           ; 2 bytes @ 0x0
  4103                           
  4104                           
  4105                           ; 2 bytes @ 0x0
  4106     0050                     	ds	2
  4107     0052                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:
  4108     0052                     i1memcpy@s:	
  4109                           ; 2 bytes @ 0x2
  4110                           
  4111                           
  4112                           ; 2 bytes @ 0x2
  4113     0052                     	ds	2
  4114     0054                     i1memcpy@tmp:
  4115     0054                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  4116                           ; 1 bytes @ 0x4
  4117                           
  4118                           
  4119                           ; 2 bytes @ 0x4
  4120     0054                     	ds	1
  4121     0055                     ?i1_GenericQueue_Enqueue:
  4122     0055                     i1GenericQueue_Enqueue@q:	
  4123                           ; 1 bytes @ 0x5
  4124                           
  4125                           
  4126                           ; 2 bytes @ 0x5
  4127     0055                     	ds	1
  4128     0056                     ??_USBStdFeatureReqHandler:
  4129     0056                     USBStdSetCfgHandler@p:	
  4130                           ; 1 bytes @ 0x6
  4131                           
  4132                           
  4133                           ; 2 bytes @ 0x6
  4134     0056                     	ds	1
  4135     0057                     i1GenericQueue_Enqueue@item:
  4136                           
  4137                           ; 2 bytes @ 0x7
  4138     0057                     	ds	1
  4139     0058                     USBStdSetCfgHandler@i_2020:
  4140     0058                     USBStdFeatureReqHandler@pUEP:	
  4141                           ; 1 bytes @ 0x8
  4142                           
  4143                           
  4144                           ; 2 bytes @ 0x8
  4145     0058                     	ds	1
  4146     0059                     ??i1_GenericQueue_Enqueue:
  4147     0059                     USBStdSetCfgHandler@i:	
  4148                           ; 1 bytes @ 0x9
  4149                           
  4150                           
  4151                           ; 1 bytes @ 0x9
  4152     0059                     	ds	1
  4153     005A                     USBStdFeatureReqHandler@current_ep_data:
  4154                           
  4155                           ; 1 bytes @ 0xA
  4156     005A                     	ds	1
  4157     005B                     USBStdFeatureReqHandler@p:
  4158                           
  4159                           ; 2 bytes @ 0xB
  4160     005B                     	ds	1
  4161     005C                     ??_PS2Keyboard_ClockInterrupt:
  4162                           
  4163                           ; 1 bytes @ 0xC
  4164     005C                     	ds	1
  4165     005D                     ??_USBCheckStdRequest:
  4166                           
  4167                           ; 1 bytes @ 0xD
  4168     005D                     	ds	2
  4169     005F                     ??_USBCtrlTrfSetupHandler:
  4170                           
  4171                           ; 1 bytes @ 0xF
  4172     005F                     	ds	1
  4173     0060                     ??_USBCtrlEPService:
  4174                           
  4175                           ; 1 bytes @ 0x10
  4176     0060                     	ds	1
  4177     0061                     ??_USBDeviceTasks:
  4178                           
  4179                           ; 1 bytes @ 0x11
  4180     0061                     	ds	1
  4181     0062                     USBDeviceTasks@i:
  4182                           
  4183                           ; 1 bytes @ 0x12
  4184     0062                     	ds	1
  4185                           
  4186                           	psect	maintext
  4187     0A72                     __pmaintext:	
  4188 ;;
  4189 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4190 ;;
  4191 ;; *************** function _main *****************
  4192 ;; Defined at:
  4193 ;;		line 11 in file "main.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;  scanCodeStr     6   50[BANK1 ] unsigned char [6]
  4198 ;;  scanCode        3   62[BANK1 ] struct PS2ScanCode
  4199 ;;  hndlScanCode    1   61[BANK1 ] PTR struct PS2ScanCode
  4200 ;;		 -> main@scanCode(3), NULL(0), 
  4201 ;;  scanCodeVali    1   60[BANK1 ] _Bool 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  2  785[None  ] int 
  4204 ;; Registers used:
  4205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4206 ;; Tracked objects:
  4207 ;;		On entry : B1F/0
  4208 ;;		On exit  : 2/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Totals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;Total ram usage:       17 bytes
  4216 ;; Hardware stack levels required when called: 14
  4217 ;; This function calls:
  4218 ;;		_APP_KeyboardTasks
  4219 ;;		_Log_Message
  4220 ;;		_Log_UtilityConvertByteToHex
  4221 ;;		_PS2Keyboard_GetScanCode
  4222 ;;		_PS2Keyboard_Init
  4223 ;;		_SYSTEM_Initialize
  4224 ;;		_SysTime_Init
  4225 ;; This function is called by:
  4226 ;;		Startup code after reset
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230     0A72                     _main:	
  4231                           ;psect for function _main
  4232                           
  4233                           
  4234                           ;main.c: 12:     SYSTEM_Initialize();
  4235                           
  4236                           ;incstack = 0
  4237                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4238     0A72  319F  27EB  318A   	fcall	_SYSTEM_Initialize
  4239                           
  4240                           ;main.c: 13:     SysTime_Init();
  4241     0A75  319F  2708  318A   	fcall	_SysTime_Init
  4242                           
  4243                           ;main.c: 14:     PS2Keyboard_Init();
  4244     0A78  3191  2180  318A   	fcall	_PS2Keyboard_Init
  4245                           
  4246                           ;main.c: 16:     _delay((unsigned long)((1000)*(48000000/4000.0)));
  4247     0A7B  303D               	movlw	61
  4248     0A7C  0021               	movlb	1	; select bank1
  4249     0A7D  00D9               	movwf	(??_main^(0+128)+1)
  4250     0A7E  30E1               	movlw	225
  4251     0A7F  00D8               	movwf	??_main^(0+128)
  4252     0A80  303F               	movlw	63
  4253     0A81                     u6417:
  4254     0A81  0B89               	decfsz	9,f
  4255     0A82  2A81               	goto	u6417
  4256     0A83  0BD8               	decfsz	??_main^(0+128),f
  4257     0A84  2A81               	goto	u6417
  4258     0A85  0BD9               	decfsz	(??_main^(0+128)+1),f
  4259     0A86  2A81               	goto	u6417
  4260     0A87  3200               	nop2
  4261                           
  4262                           ;main.c: 23:     (INTCONbits.GIE = 1);
  4263     0A88  178B               	bsf	11,7	;volatile
  4264                           
  4265                           ;main.c: 26:     (INTCONbits.PEIE = 1);
  4266     0A89  170B               	bsf	11,6	;volatile
  4267                           
  4268                           ;main.c: 31:     PS2ScanCode scanCode = {0};
  4269     0A8A  0023               	movlb	3	; select bank3
  4270     0A8B  0844               	movf	main@F3300^(0+384),w
  4271     0A8C  0021               	movlb	1	; select bank1
  4272     0A8D  00E6               	movwf	main@scanCode^(0+128)
  4273     0A8E  0023               	movlb	3	; select bank3
  4274     0A8F  0845               	movf	(main@F3300+1)^(0+384),w
  4275     0A90  0021               	movlb	1	; select bank1
  4276     0A91  00E7               	movwf	(main@scanCode+1)^(0+128)
  4277     0A92  0023               	movlb	3	; select bank3
  4278     0A93  0846               	movf	(main@F3300+2)^(0+384),w
  4279     0A94  0021               	movlb	1	; select bank1
  4280     0A95  00E8               	movwf	(main@scanCode+2)^(0+128)
  4281                           
  4282                           ;main.c: 34:     char scanCodeStr[6] = {' ', ' ', ' ', ' ', '\r', '\n'};
  4283     0A96  30C7               	movlw	low main@F3304
  4284     0A97  0086               	movwf	6
  4285     0A98  3001               	movlw	high main@F3304
  4286     0A99  0087               	movwf	7
  4287     0A9A  30DA               	movlw	low main@scanCodeStr
  4288     0A9B  0084               	movwf	4
  4289     0A9C  3000               	movlw	high main@scanCodeStr
  4290     0A9D  0085               	movwf	5
  4291     0A9E  3006               	movlw	6
  4292     0A9F  00D8               	movwf	??_main^(0+128)
  4293     0AA0                     u6360:
  4294     0AA0  0016               	moviw fsr1++
  4295     0AA1  001A               	movwi fsr0++
  4296     0AA2  0BD8               	decfsz	??_main^(0+128),f
  4297     0AA3  2AA0               	goto	u6360
  4298     0AA4                     l6375:
  4299                           
  4300                           ;main.c: 37:         scanCodeValid = PS2Keyboard_GetScanCode(&scanCode);
  4301     0AA4  30E6               	movlw	(low (main@scanCode| 0))& (0+255)
  4302     0AA5  3191  21B7  318A   	fcall	_PS2Keyboard_GetScanCode
  4303     0AA8  00E4               	movwf	main@scanCodeValid^(0+128)
  4304                           
  4305                           ;main.c: 38:         if(scanCodeValid) {
  4306     0AA9  0864               	movf	main@scanCodeValid^(0+128),w
  4307     0AAA  1903               	btfsc	3,2
  4308     0AAB  2AAF               	goto	l6381
  4309                           
  4310                           ;main.c: 39:             hndlScanCode = &scanCode;
  4311     0AAC  30E6               	movlw	(low (main@scanCode| 0))& (0+255)
  4312     0AAD  00E5               	movwf	main@hndlScanCode^(0+128)
  4313                           
  4314                           ;main.c: 40:         } else {
  4315     0AAE  2AB0               	goto	l6383
  4316     0AAF                     l6381:
  4317                           
  4318                           ;main.c: 41:             hndlScanCode = ((void*)0);
  4319     0AAF  01E5               	clrf	main@hndlScanCode^(0+128)
  4320     0AB0                     l6383:
  4321                           
  4322                           ;main.c: 43:         if(hndlScanCode != ((void*)0)) {
  4323     0AB0  0865               	movf	main@hndlScanCode^(0+128),w
  4324     0AB1  1903               	btfsc	3,2
  4325     0AB2  2AE1               	goto	l6401
  4326                           
  4327                           ;main.c: 44:             scanCodeStr[0] = hndlScanCode->isExtend ? 'e' : ' ';
  4328     0AB3  0A65               	incf	main@hndlScanCode^(0+128),w
  4329     0AB4  0086               	movwf	6
  4330     0AB5  0187               	clrf	7
  4331     0AB6  0801               	movf	1,w
  4332     0AB7  1D03               	btfss	3,2
  4333     0AB8  2ABB               	goto	l6389
  4334     0AB9  3020               	movlw	32
  4335     0ABA  2ABC               	goto	L1
  4336     0ABB                     l6389:
  4337     0ABB  3065               	movlw	101
  4338     0ABC                     L1:
  4339     0ABC  00E0               	movwf	_main$2579^(0+128)
  4340     0ABD  3000               	movlw	0
  4341     0ABE  00E1               	movwf	(_main$2579^(0+128)+1)
  4342     0ABF  0860               	movf	_main$2579^(0+128),w
  4343     0AC0  00DA               	movwf	main@scanCodeStr^(0+128)
  4344                           
  4345                           ;main.c: 45:             scanCodeStr[1] = hndlScanCode->isBreak ? 'b' : ' ';
  4346     0AC1  0865               	movf	main@hndlScanCode^(0+128),w
  4347     0AC2  3E02               	addlw	2
  4348     0AC3  0086               	movwf	6
  4349     0AC4  0187               	clrf	7
  4350     0AC5  0801               	movf	1,w
  4351     0AC6  1D03               	btfss	3,2
  4352     0AC7  2ACA               	goto	l6395
  4353     0AC8  3020               	movlw	32
  4354     0AC9  2ACB               	goto	L2
  4355     0ACA                     l6395:
  4356     0ACA  3062               	movlw	98
  4357     0ACB                     L2:
  4358     0ACB  00E2               	movwf	_main$2580^(0+128)
  4359     0ACC  3000               	movlw	0
  4360     0ACD  00E3               	movwf	(_main$2580^(0+128)+1)
  4361     0ACE  0862               	movf	_main$2580^(0+128),w
  4362     0ACF  00DB               	movwf	(main@scanCodeStr^(0+128)+1)
  4363                           
  4364                           ;main.c: 46:             Log_UtilityConvertByteToHex(hndlScanCode->value, &scanCodeStr[2
      +                          ], 2);
  4365     0AD0  30DC               	movlw	(low ((main@scanCodeStr| 0+2)))& (0+255)
  4366     0AD1  00AC               	movwf	Log_UtilityConvertByteToHex@buf^(0+128)
  4367     0AD2  3002               	movlw	2
  4368     0AD3  00AD               	movwf	Log_UtilityConvertByteToHex@bufSize^(0+128)
  4369     0AD4  0865               	movf	main@hndlScanCode^(0+128),w
  4370     0AD5  0086               	movwf	6
  4371     0AD6  0187               	clrf	7
  4372     0AD7  0801               	movf	1,w
  4373     0AD8  3192  22D3  318A   	fcall	_Log_UtilityConvertByteToHex
  4374                           
  4375                           ;main.c: 47:             Log_Message((const uint8_t*)scanCodeStr, sizeof(scanCodeStr));
  4376     0ADB  3006               	movlw	6
  4377     0ADC  00AA               	movwf	Log_Message@bufSize^(0+128)
  4378     0ADD  30DA               	movlw	(low (main@scanCodeStr| 0))& (0+255)
  4379     0ADE  3191  2165  318A   	fcall	_Log_Message
  4380     0AE1                     l6401:
  4381                           
  4382                           ;main.c: 49:         APP_KeyboardTasks(hndlScanCode);
  4383     0AE1  0865               	movf	main@hndlScanCode^(0+128),w
  4384     0AE2  3182  22F2  318A   	fcall	_APP_KeyboardTasks
  4385     0AE5  2AA4               	goto	l6375
  4386     0AE6                     __end_of_main:
  4387                           
  4388                           	psect	text1
  4389     1F08                     __ptext1:	
  4390 ;; *************** function _SysTime_Init *****************
  4391 ;; Defined at:
  4392 ;;		line 12 in file "systime.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;		None
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;		None
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  1    wreg      void 
  4399 ;; Registers used:
  4400 ;;		wreg, status,2, status,0, pclath, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 1F/0
  4403 ;;		On exit  : 1F/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;Total ram usage:        0 bytes
  4411 ;; Hardware stack levels used: 1
  4412 ;; Hardware stack levels required when called: 11
  4413 ;; This function calls:
  4414 ;;		_TMR2_SetInterruptHandler
  4415 ;;		_TMR2_StartTimer
  4416 ;; This function is called by:
  4417 ;;		_main
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421     1F08                     _SysTime_Init:	
  4422                           ;psect for function _SysTime_Init
  4423                           
  4424                           
  4425                           ;systime.c: 14:     TMR2_SetInterruptHandler(SysTimeInterrupt);
  4426                           
  4427                           ;incstack = 0
  4428                           ; Regs used in _SysTime_Init: [wreg+status,2+status,0+pclath+cstack]
  4429     1F08  30E9               	movlw	low _SysTimeInterrupt
  4430     1F09  0021               	movlb	1	; select bank1
  4431     1F0A  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4432     1F0B  301E               	movlw	high _SysTimeInterrupt
  4433     1F0C  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4434     1F0D  319E  26D8  319F   	fcall	_TMR2_SetInterruptHandler
  4435                           
  4436                           ;systime.c: 15:     TMR2_StartTimer();
  4437     1F10  319E  2689         	fcall	_TMR2_StartTimer
  4438     1F12  0008               	return
  4439     1F13                     __end_of_SysTime_Init:
  4440                           
  4441                           	psect	text2
  4442     1E89                     __ptext2:	
  4443 ;; *************** function _TMR2_StartTimer *****************
  4444 ;; Defined at:
  4445 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;		None
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;		None
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  1    wreg      void 
  4452 ;; Registers used:
  4453 ;;		None
  4454 ;; Tracked objects:
  4455 ;;		On entry : 1F/2
  4456 ;;		On exit  : 1F/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;Total ram usage:        0 bytes
  4464 ;; Hardware stack levels used: 1
  4465 ;; Hardware stack levels required when called: 10
  4466 ;; This function calls:
  4467 ;;		Nothing
  4468 ;; This function is called by:
  4469 ;;		_SysTime_Init
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473     1E89                     _TMR2_StartTimer:	
  4474                           ;psect for function _TMR2_StartTimer
  4475                           
  4476                           
  4477                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  4478                           
  4479                           ;incstack = 0
  4480                           ; Regs used in _TMR2_StartTimer: []
  4481     1E89  0020               	movlb	0	; select bank0
  4482     1E8A  151C               	bsf	28,2	;volatile
  4483     1E8B  0008               	return
  4484     1E8C                     __end_of_TMR2_StartTimer:
  4485                           
  4486                           	psect	text3
  4487     1FEB                     __ptext3:	
  4488 ;; *************** function _SYSTEM_Initialize *****************
  4489 ;; Defined at:
  4490 ;;		line 49 in file "mcc_generated_files/mcc.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;		None
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;		None
  4495 ;; Return value:  Size  Location     Type
  4496 ;;                  1    wreg      void 
  4497 ;; Registers used:
  4498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4499 ;; Tracked objects:
  4500 ;;		On entry : B1F/0
  4501 ;;		On exit  : 1F/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;Total ram usage:        0 bytes
  4509 ;; Hardware stack levels used: 1
  4510 ;; Hardware stack levels required when called: 12
  4511 ;; This function calls:
  4512 ;;		_EUSART_Initialize
  4513 ;;		_OSCILLATOR_Initialize
  4514 ;;		_PIN_MANAGER_Initialize
  4515 ;;		_TMR2_Initialize
  4516 ;;		_USBDeviceAttach
  4517 ;;		_USBDeviceInit
  4518 ;;		_WDT_Initialize
  4519 ;; This function is called by:
  4520 ;;		_main
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524     1FEB                     _SYSTEM_Initialize:	
  4525                           ;psect for function _SYSTEM_Initialize
  4526                           
  4527                           
  4528                           ;mcc_generated_files/mcc.c: 51:     PIN_MANAGER_Initialize();
  4529                           
  4530                           ;incstack = 0
  4531                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4532     1FEB  3193  2344  319F   	fcall	_PIN_MANAGER_Initialize
  4533                           
  4534                           ;mcc_generated_files/mcc.c: 52:     OSCILLATOR_Initialize();
  4535     1FEE  319F  275F  319F   	fcall	_OSCILLATOR_Initialize
  4536                           
  4537                           ;mcc_generated_files/mcc.c: 53:     WDT_Initialize();
  4538     1FF1  319E  2686  319F   	fcall	_WDT_Initialize
  4539                           
  4540                           ;mcc_generated_files/mcc.c: 54:     TMR2_Initialize();
  4541     1FF4  319F  279F  319F   	fcall	_TMR2_Initialize
  4542                           
  4543                           ;mcc_generated_files/mcc.c: 55:     EUSART_Initialize();
  4544     1FF7  3194  2497  319F   	fcall	_EUSART_Initialize
  4545                           
  4546                           ;mcc_generated_files/mcc.c: 56:     USBDeviceInit();
  4547     1FFA  318E  26A1  319F   	fcall	_USBDeviceInit
  4548                           
  4549                           ;mcc_generated_files/mcc.c: 57:     USBDeviceAttach();
  4550     1FFD  3190  20FC         	fcall	_USBDeviceAttach
  4551     1FFF  0008               	return
  4552     2000                     __end_of_SYSTEM_Initialize:
  4553                           
  4554                           	psect	text4
  4555     1E86                     __ptext4:	
  4556 ;; *************** function _WDT_Initialize *****************
  4557 ;; Defined at:
  4558 ;;		line 76 in file "mcc_generated_files/mcc.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;		None
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;		None
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		wreg
  4567 ;; Tracked objects:
  4568 ;;		On entry : 1F/1
  4569 ;;		On exit  : 1F/1
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;Total ram usage:        0 bytes
  4577 ;; Hardware stack levels used: 1
  4578 ;; Hardware stack levels required when called: 10
  4579 ;; This function calls:
  4580 ;;		Nothing
  4581 ;; This function is called by:
  4582 ;;		_SYSTEM_Initialize
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586     1E86                     _WDT_Initialize:	
  4587                           ;psect for function _WDT_Initialize
  4588                           
  4589                           
  4590                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  4591                           
  4592                           ;incstack = 0
  4593                           ; Regs used in _WDT_Initialize: [wreg]
  4594     1E86  3016               	movlw	22
  4595     1E87  0097               	movwf	23	;volatile
  4596     1E88  0008               	return
  4597     1E89                     __end_of_WDT_Initialize:
  4598                           
  4599                           	psect	text5
  4600     0EA1                     __ptext5:	
  4601 ;; *************** function _USBDeviceInit *****************
  4602 ;; Defined at:
  4603 ;;		line 281 in file "usb/usb_device.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;		None
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;  p               2    4[BANK1 ] PTR unsigned char 
  4608 ;;		 -> UEP1(1), 
  4609 ;;  i               1    6[BANK1 ] unsigned char 
  4610 ;;  i               1    7[BANK1 ] unsigned char 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      void 
  4613 ;; Registers used:
  4614 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4615 ;; Tracked objects:
  4616 ;;		On entry : 1F/1
  4617 ;;		On exit  : 1F/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4622 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4623 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  4624 ;;Total ram usage:        8 bytes
  4625 ;; Hardware stack levels used: 1
  4626 ;; Hardware stack levels required when called: 10
  4627 ;; This function calls:
  4628 ;;		Nothing
  4629 ;; This function is called by:
  4630 ;;		_SYSTEM_Initialize
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634     0EA1                     _USBDeviceInit:	
  4635                           ;psect for function _USBDeviceInit
  4636                           
  4637                           
  4638                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  4639                           
  4640                           ;incstack = 0
  4641                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  4642     0EA1  1112               	bcf	18,2	;volatile
  4643                           
  4644                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  4645     0EA2  003D               	movlb	29	; select bank29
  4646     0EA3  0193               	clrf	19	;volatile
  4647                           
  4648                           ;usb/usb_device.c: 295:     {UIR = 0;};
  4649     0EA4  0190               	clrf	16	;volatile
  4650                           
  4651                           ;usb/usb_device.c: 298:     UEP0 = 0;
  4652     0EA5  0198               	clrf	24	;volatile
  4653                           
  4654                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  4655     0EA6  300E               	movlw	14
  4656     0EA7  0021               	movlb	1	; select bank1
  4657     0EA8  00AD               	movwf	(USBDeviceInit@p+1)^(0+128)
  4658     0EA9  3099               	movlw	153
  4659     0EAA  00AC               	movwf	USBDeviceInit@p^(0+128)
  4660     0EAB  01AE               	clrf	USBDeviceInit@i_1324^(0+128)
  4661     0EAC                     l5125:
  4662     0EAC  082C               	movf	USBDeviceInit@p^(0+128),w
  4663     0EAD  0086               	movwf	6
  4664     0EAE  082D               	movf	(USBDeviceInit@p+1)^(0+128),w
  4665     0EAF  0087               	movwf	7
  4666     0EB0  0181               	clrf	1
  4667     0EB1  3001               	movlw	1
  4668     0EB2  07AC               	addwf	USBDeviceInit@p^(0+128),f
  4669     0EB3  3000               	movlw	0
  4670     0EB4  3DAD               	addwfc	(USBDeviceInit@p+1)^(0+128),f
  4671     0EB5  3001               	movlw	1
  4672     0EB6  00A8               	movwf	??_USBDeviceInit^(0+128)
  4673     0EB7  0828               	movf	??_USBDeviceInit^(0+128),w
  4674     0EB8  07AE               	addwf	USBDeviceInit@i_1324^(0+128),f
  4675     0EB9  082E               	movf	USBDeviceInit@i_1324^(0+128),w
  4676     0EBA  1903               	btfsc	3,2
  4677     0EBB  2EAC               	goto	l5125
  4678                           
  4679                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  4680     0EBC  3016               	movlw	22
  4681     0EBD  003D               	movlb	29	; select bank29
  4682     0EBE  0091               	movwf	17	;volatile
  4683     0EBF  309F               	movlw	159
  4684     0EC0  0097               	movwf	23	;volatile
  4685     0EC1  307B               	movlw	123
  4686     0EC2  0092               	movwf	18	;volatile
  4687                           
  4688                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  4689     0EC3  0021               	movlb	1	; select bank1
  4690     0EC4  01AF               	clrf	USBDeviceInit@i^(0+128)
  4691     0EC5                     l5141:
  4692                           
  4693                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
  4694     0EC5  082F               	movf	USBDeviceInit@i^(0+128),w
  4695     0EC6  00A8               	movwf	??_USBDeviceInit^(0+128)
  4696     0EC7  3001               	movlw	1
  4697     0EC8                     u4385:
  4698     0EC8  35A8               	lslf	??_USBDeviceInit^(0+128),f
  4699     0EC9  3EFF               	addlw	-1
  4700     0ECA  1D03               	skipz
  4701     0ECB  2EC8               	goto	u4385
  4702     0ECC  3528               	lslf	??_USBDeviceInit^(0+128),w
  4703     0ECD  3E20               	addlw	32
  4704     0ECE  0086               	movwf	6
  4705     0ECF  0187               	clrf	7
  4706     0ED0  3000               	movlw	0
  4707     0ED1  3FC0               	movwi [0]fsr1
  4708     0ED2  3000               	movlw	0
  4709     0ED3  3FC1               	movwi [1]fsr1
  4710     0ED4  3FC2               	movwi [2]fsr1
  4711     0ED5  3FC3               	movwi [3]fsr1
  4712                           
  4713                           ;usb/usb_device.c: 314:     }
  4714     0ED6  3001               	movlw	1
  4715     0ED7  00A8               	movwf	??_USBDeviceInit^(0+128)
  4716     0ED8  0828               	movf	??_USBDeviceInit^(0+128),w
  4717     0ED9  07AF               	addwf	USBDeviceInit@i^(0+128),f
  4718     0EDA  3008               	movlw	8
  4719     0EDB  022F               	subwf	USBDeviceInit@i^(0+128),w
  4720     0EDC  1C03               	skipc
  4721     0EDD  2EC5               	goto	l5141
  4722                           
  4723                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
  4724     0EDE  003D               	movlb	29	; select bank29
  4725     0EDF  170E               	bsf	14,6	;volatile
  4726                           
  4727                           ;usb/usb_device.c: 320:     UADDR = 0x00;
  4728     0EE0  0196               	clrf	22	;volatile
  4729                           
  4730                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
  4731     0EE1  120E               	bcf	14,4	;volatile
  4732                           
  4733                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
  4734     0EE2  130E               	bcf	14,6	;volatile
  4735     0EE3                     l5153:
  4736                           
  4737                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
  4738     0EE3  30F7               	movlw	247
  4739     0EE4  0021               	movlb	1	; select bank1
  4740     0EE5  00A8               	movwf	??_USBDeviceInit^(0+128)
  4741     0EE6  0828               	movf	??_USBDeviceInit^(0+128),w
  4742     0EE7  003D               	movlb	29	; select bank29
  4743     0EE8  0590               	andwf	16,f	;volatile
  4744                           
  4745                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
  4746     0EE9  0021               	movlb	1	; select bank1
  4747     0EEA  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
  4748                           
  4749                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
  4750     0EEB  0022               	movlb	2	; select bank2
  4751     0EEC  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
  4752                           
  4753                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
  4754     0EED  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
  4755     0EEE  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  4756                           
  4757                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
  4758     0EEF  003D               	movlb	29	; select bank29
  4759     0EF0  1990               	btfsc	16,3	;volatile
  4760     0EF1  2EE3               	goto	l5153
  4761                           
  4762                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
  4763     0EF2  3001               	movlw	1
  4764     0EF3  0022               	movlb	2	; select bank2
  4765     0EF4  00DA               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  4766                           
  4767                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
  4768     0EF5  3001               	movlw	1
  4769     0EF6  00D9               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  4770                           
  4771                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
  4772     0EF7  01D8               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  4773                           
  4774                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
  4775     0EF8  01D7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  4776                           
  4777                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
  4778     0EF9  01DF               	clrf	_USBBusIsSuspended^(0+256)	;volatile
  4779                           
  4780                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
  4781     0EFA  0021               	movlb	1	; select bank1
  4782     0EFB  01AF               	clrf	USBDeviceInit@i^(0+128)
  4783     0EFC                     l5175:
  4784                           
  4785                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
  4786     0EFC  352F               	lslf	USBDeviceInit@i^(0+128),w
  4787     0EFD  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  4788     0EFE  0086               	movwf	6
  4789     0EFF  0187               	clrf	7
  4790     0F00  3000               	movlw	0
  4791     0F01  3FC0               	movwi [0]fsr1
  4792     0F02  3FC1               	movwi [1]fsr1
  4793                           
  4794                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
  4795     0F03  352F               	lslf	USBDeviceInit@i^(0+128),w
  4796     0F04  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  4797     0F05  0086               	movwf	6
  4798     0F06  3001               	movlw	1	; select bank2/3
  4799     0F07  0087               	movwf	7
  4800     0F08  3000               	movlw	0
  4801     0F09  3FC0               	movwi [0]fsr1
  4802     0F0A  3FC1               	movwi [1]fsr1
  4803                           
  4804                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
  4805     0F0B  082F               	movf	USBDeviceInit@i^(0+128),w
  4806     0F0C  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  4807     0F0D  0086               	movwf	6
  4808     0F0E  3001               	movlw	1	; select bank2/3
  4809     0F0F  0087               	movwf	7
  4810     0F10  0181               	clrf	1
  4811                           
  4812                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
  4813     0F11  082F               	movf	USBDeviceInit@i^(0+128),w
  4814     0F12  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  4815     0F13  0086               	movwf	6
  4816     0F14  3001               	movlw	1	; select bank2/3
  4817     0F15  0087               	movwf	7
  4818     0F16  0181               	clrf	1
  4819                           
  4820                           ;usb/usb_device.c: 355:     }
  4821     0F17  3001               	movlw	1
  4822     0F18  00A8               	movwf	??_USBDeviceInit^(0+128)
  4823     0F19  0828               	movf	??_USBDeviceInit^(0+128),w
  4824     0F1A  07AF               	addwf	USBDeviceInit@i^(0+128),f
  4825     0F1B  3002               	movlw	2
  4826     0F1C  022F               	subwf	USBDeviceInit@i^(0+128),w
  4827     0F1D  1C03               	skipc
  4828     0F1E  2EFC               	goto	l5175
  4829                           
  4830                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  4831     0F1F  3028               	movlw	40
  4832     0F20  0020               	movlb	0	; select bank0
  4833     0F21  00E3               	movwf	_pBDTEntryIn
  4834     0F22  3000               	movlw	0
  4835     0F23  00E4               	movwf	_pBDTEntryIn+1
  4836                           
  4837                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
  4838     0F24  3016               	movlw	22
  4839     0F25  003D               	movlb	29	; select bank29
  4840     0F26  0098               	movwf	24	;volatile
  4841                           
  4842                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
  4843     0F27  3040               	movlw	64
  4844     0F28  0021               	movlb	1	; select bank1
  4845     0F29  00A8               	movwf	??_USBDeviceInit^(0+128)
  4846     0F2A  3000               	movlw	0
  4847     0F2B  00A9               	movwf	(??_USBDeviceInit^(0+128)+1)
  4848     0F2C  30FF               	movlw	255
  4849     0F2D  0528               	andwf	??_USBDeviceInit^(0+128),w
  4850     0F2E  00AA               	movwf	(??_USBDeviceInit+2)^(0+128)
  4851     0F2F  307F               	movlw	127
  4852     0F30  0529               	andwf	(??_USBDeviceInit+1)^(0+128),w
  4853     0F31  00AB               	movwf	(??_USBDeviceInit+3)^(0+128)
  4854     0F32  082A               	movf	(??_USBDeviceInit+2)^(0+128),w
  4855     0F33  0020               	movlb	0	; select bank0
  4856     0F34  00A2               	movwf	34	;volatile
  4857     0F35  0021               	movlb	1	; select bank1
  4858     0F36  082B               	movf	(??_USBDeviceInit+3)^(0+128),w
  4859     0F37  0020               	movlb	0	; select bank0
  4860     0F38  00A3               	movwf	35	;volatile
  4861                           
  4862                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
  4863     0F39  3008               	movlw	8
  4864     0F3A  00A1               	movwf	33	;volatile
  4865                           
  4866                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
  4867     0F3B  3004               	movlw	4
  4868     0F3C  00A0               	movwf	32	;volatile
  4869                           
  4870                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
  4871     0F3D  17A0               	bsf	32,7	;volatile
  4872                           
  4873                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
  4874     0F3E  01EF               	clrf	_USBActiveConfiguration	;volatile
  4875                           
  4876                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
  4877     0F3F  3000               	movlw	0
  4878     0F40  0023               	movlb	3	; select bank3
  4879     0F41  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
  4880     0F42  3000               	movlw	0
  4881     0F43  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
  4882     0F44  3000               	movlw	0
  4883     0F45  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
  4884     0F46  3000               	movlw	0
  4885     0F47  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
  4886                           
  4887                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
  4888     0F48  0022               	movlb	2	; select bank2
  4889     0F49  01D6               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  4890                           
  4891                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
  4892     0F4A  0020               	movlb	0	; select bank0
  4893     0F4B  01EC               	clrf	_USBDeviceState	;volatile
  4894     0F4C  0008               	return
  4895     0F4D                     __end_of_USBDeviceInit:
  4896                           
  4897                           	psect	text6
  4898     10FC                     __ptext6:	
  4899 ;; *************** function _USBDeviceAttach *****************
  4900 ;; Defined at:
  4901 ;;		line 1356 in file "usb/usb_device.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;		None
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;		None
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  1    wreg      void 
  4908 ;; Registers used:
  4909 ;;		wreg, status,2, status,0
  4910 ;; Tracked objects:
  4911 ;;		On entry : 1F/0
  4912 ;;		On exit  : 1F/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;Total ram usage:        0 bytes
  4920 ;; Hardware stack levels used: 1
  4921 ;; Hardware stack levels required when called: 10
  4922 ;; This function calls:
  4923 ;;		Nothing
  4924 ;; This function is called by:
  4925 ;;		_SYSTEM_Initialize
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929     10FC                     _USBDeviceAttach:	
  4930                           ;psect for function _USBDeviceAttach
  4931                           
  4932                           
  4933                           ;usb/usb_device.c: 1360:     {;usb/usb_device.c: 1361:         if(1 == 1)
  4934                           
  4935                           ;incstack = 0
  4936                           ; Regs used in _USBDeviceAttach: [wreg+status,2+status,0]
  4937     10FC  086C               	movf	_USBDeviceState,w
  4938     10FD  1D03               	btfss	3,2
  4939     10FE  0008               	return
  4940                           
  4941                           ;usb/usb_device.c: 1362:         {;usb/usb_device.c: 1364:             UCON = 0;
  4942     10FF  003D               	movlb	29	; select bank29
  4943     1100  018E               	clrf	14	;volatile
  4944                           
  4945                           ;usb/usb_device.c: 1367:             UIE = 0;
  4946     1101  0192               	clrf	18	;volatile
  4947                           
  4948                           ;usb/usb_device.c: 1371:             { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UI
      +                          E = 0x39 | 0x40 | 0x02; };
  4949     1102  3016               	movlw	22
  4950     1103  0091               	movwf	17	;volatile
  4951     1104  309F               	movlw	159
  4952     1105  0097               	movwf	23	;volatile
  4953     1106  307B               	movlw	123
  4954     1107  0092               	movwf	18	;volatile
  4955                           
  4956                           ;usb/usb_device.c: 1373:             {PIE2bits.USBIE = 1;INTCONbits.PEIE = 1; INTCONbits
      +                          .GIE = 1;};
  4957     1108  0021               	movlb	1	; select bank1
  4958     1109  1512               	bsf	18,2	;volatile
  4959     110A  170B               	bsf	11,6	;volatile
  4960     110B  178B               	bsf	11,7	;volatile
  4961     110C                     l491:	
  4962                           ;usb/usb_device.c: 1376:             while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  4963                           
  4964     110C  003D               	movlb	29	; select bank29
  4965     110D  198E               	btfsc	14,3	;volatile
  4966     110E  2911               	goto	l5217
  4967     110F  158E               	bsf	14,3	;volatile
  4968     1110  290C               	goto	l491
  4969     1111                     l5217:
  4970                           
  4971                           ;usb/usb_device.c: 1379:             USBDeviceState = ATTACHED_STATE;
  4972     1111  3001               	movlw	1
  4973     1112  0020               	movlb	0	; select bank0
  4974     1113  00EC               	movwf	_USBDeviceState	;volatile
  4975     1114  0008               	return
  4976     1115                     __end_of_USBDeviceAttach:
  4977                           
  4978                           	psect	text7
  4979     1F9F                     __ptext7:	
  4980 ;; *************** function _TMR2_Initialize *****************
  4981 ;; Defined at:
  4982 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;		None
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;		None
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  1    wreg      void 
  4989 ;; Registers used:
  4990 ;;		wreg, status,2, status,0, pclath, cstack
  4991 ;; Tracked objects:
  4992 ;;		On entry : 1F/1
  4993 ;;		On exit  : 1F/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;Total ram usage:        0 bytes
  5001 ;; Hardware stack levels used: 1
  5002 ;; Hardware stack levels required when called: 11
  5003 ;; This function calls:
  5004 ;;		_TMR2_SetInterruptHandler
  5005 ;; This function is called by:
  5006 ;;		_SYSTEM_Initialize
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010     1F9F                     _TMR2_Initialize:	
  5011                           ;psect for function _TMR2_Initialize
  5012                           
  5013                           
  5014                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x5D;
  5015                           
  5016                           ;incstack = 0
  5017                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5018     1F9F  305D               	movlw	93
  5019     1FA0  0020               	movlb	0	; select bank0
  5020     1FA1  009B               	movwf	27	;volatile
  5021                           
  5022                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  5023     1FA2  019A               	clrf	26	;volatile
  5024                           
  5025                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  5026     1FA3  1091               	bcf	17,1	;volatile
  5027                           
  5028                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  5029     1FA4  0021               	movlb	1	; select bank1
  5030     1FA5  1491               	bsf	17,1	;volatile
  5031                           
  5032                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  5033     1FA6  30FE               	movlw	low _TMR2_DefaultInterruptHandler
  5034     1FA7  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  5035     1FA8  3007               	movlw	high _TMR2_DefaultInterruptHandler
  5036     1FA9  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5037     1FAA  319E  26D8         	fcall	_TMR2_SetInterruptHandler
  5038                           
  5039                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x0F;
  5040     1FAC  300F               	movlw	15
  5041     1FAD  0020               	movlb	0	; select bank0
  5042     1FAE  009C               	movwf	28	;volatile
  5043     1FAF  0008               	return
  5044     1FB0                     __end_of_TMR2_Initialize:
  5045                           
  5046                           	psect	text8
  5047     1ED8                     __ptext8:	
  5048 ;; *************** function _TMR2_SetInterruptHandler *****************
  5049 ;; Defined at:
  5050 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5053 ;;		 -> SysTimeInterrupt(1), TMR2_DefaultInterruptHandler(1), 
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;		None
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  1    wreg      void 
  5058 ;; Registers used:
  5059 ;;		wreg
  5060 ;; Tracked objects:
  5061 ;;		On entry : 1F/1
  5062 ;;		On exit  : 1F/2
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5065 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;Total ram usage:        2 bytes
  5070 ;; Hardware stack levels used: 1
  5071 ;; Hardware stack levels required when called: 10
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_TMR2_Initialize
  5076 ;;		_SysTime_Init
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080     1ED8                     _TMR2_SetInterruptHandler:	
  5081                           ;psect for function _TMR2_SetInterruptHandler
  5082                           
  5083                           
  5084                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  5085                           
  5086                           ;incstack = 0
  5087                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5088     1ED8  0829               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5089     1ED9  0022               	movlb	2	; select bank2
  5090     1EDA  00C7               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
  5091     1EDB  0021               	movlb	1	; select bank1
  5092     1EDC  0828               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  5093     1EDD  0022               	movlb	2	; select bank2
  5094     1EDE  00C6               	movwf	_TMR2_InterruptHandler^(0+256)
  5095     1EDF  0008               	return
  5096     1EE0                     __end_of_TMR2_SetInterruptHandler:
  5097                           
  5098                           	psect	text9
  5099     1344                     __ptext9:	
  5100 ;; *************** function _PIN_MANAGER_Initialize *****************
  5101 ;; Defined at:
  5102 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;		None
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;		None
  5107 ;; Return value:  Size  Location     Type
  5108 ;;                  1    wreg      void 
  5109 ;; Registers used:
  5110 ;;		wreg, status,2, status,0, pclath, cstack
  5111 ;; Tracked objects:
  5112 ;;		On entry : B1F/0
  5113 ;;		On exit  : 1F/3
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5120 ;;Total ram usage:        0 bytes
  5121 ;; Hardware stack levels used: 1
  5122 ;; Hardware stack levels required when called: 11
  5123 ;; This function calls:
  5124 ;;		_IOCAF4_SetInterruptHandler
  5125 ;;		_IOCAF5_SetInterruptHandler
  5126 ;; This function is called by:
  5127 ;;		_SYSTEM_Initialize
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131     1344                     _PIN_MANAGER_Initialize:	
  5132                           ;psect for function _PIN_MANAGER_Initialize
  5133                           
  5134                           
  5135                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  5136                           
  5137                           ;incstack = 0
  5138                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5139     1344  0022               	movlb	2	; select bank2
  5140     1345  018C               	clrf	12	;volatile
  5141                           
  5142                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  5143     1346  018E               	clrf	14	;volatile
  5144                           
  5145                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x30;
  5146     1347  3030               	movlw	48
  5147     1348  0021               	movlb	1	; select bank1
  5148     1349  008C               	movwf	12	;volatile
  5149                           
  5150                           ;mcc_generated_files/pin_manager.c: 72:     TRISC = 0xFF;
  5151     134A  30FF               	movlw	255
  5152     134B  008E               	movwf	14	;volatile
  5153                           
  5154                           ;mcc_generated_files/pin_manager.c: 77:     ANSELC = 0xCF;
  5155     134C  30CF               	movlw	207
  5156     134D  0023               	movlb	3	; select bank3
  5157     134E  008E               	movwf	14	;volatile
  5158                           
  5159                           ;mcc_generated_files/pin_manager.c: 79:     ANSELA = 0x00;
  5160     134F  018C               	clrf	12	;volatile
  5161                           
  5162                           ;mcc_generated_files/pin_manager.c: 85:     WPUA = 0x30;
  5163     1350  3030               	movlw	48
  5164     1351  0024               	movlb	4	; select bank4
  5165     1352  008C               	movwf	12	;volatile
  5166                           
  5167                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 0;
  5168     1353  0021               	movlb	1	; select bank1
  5169     1354  1395               	bcf	21,7	;volatile
  5170                           
  5171                           ;mcc_generated_files/pin_manager.c: 92:     APFCON = 0x00;
  5172     1355  0022               	movlb	2	; select bank2
  5173     1356  019D               	clrf	29	;volatile
  5174                           
  5175                           ;mcc_generated_files/pin_manager.c: 98:     IOCAFbits.IOCAF4 = 0;
  5176     1357  0027               	movlb	7	; select bank7
  5177     1358  1213               	bcf	19,4	;volatile
  5178                           
  5179                           ;mcc_generated_files/pin_manager.c: 100:     IOCAFbits.IOCAF5 = 0;
  5180     1359  1293               	bcf	19,5	;volatile
  5181                           
  5182                           ;mcc_generated_files/pin_manager.c: 102:     IOCANbits.IOCAN4 = 1;
  5183     135A  1612               	bsf	18,4	;volatile
  5184                           
  5185                           ;mcc_generated_files/pin_manager.c: 104:     IOCANbits.IOCAN5 = 1;
  5186     135B  1692               	bsf	18,5	;volatile
  5187                           
  5188                           ;mcc_generated_files/pin_manager.c: 106:     IOCAPbits.IOCAP4 = 0;
  5189     135C  1211               	bcf	17,4	;volatile
  5190                           
  5191                           ;mcc_generated_files/pin_manager.c: 108:     IOCAPbits.IOCAP5 = 0;
  5192     135D  1291               	bcf	17,5	;volatile
  5193                           
  5194                           ;mcc_generated_files/pin_manager.c: 113:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  5195     135E  3003               	movlw	low _IOCAF4_DefaultInterruptHandler
  5196     135F  0021               	movlb	1	; select bank1
  5197     1360  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  5198     1361  3000               	movlw	high _IOCAF4_DefaultInterruptHandler
  5199     1362  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5200     1363  319E  26A0  3193   	fcall	_IOCAF4_SetInterruptHandler
  5201                           
  5202                           ;mcc_generated_files/pin_manager.c: 114:     IOCAF5_SetInterruptHandler(IOCAF5_DefaultIn
      +                          terruptHandler);
  5203     1366  30FF               	movlw	low _IOCAF5_DefaultInterruptHandler
  5204     1367  0021               	movlb	1	; select bank1
  5205     1368  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  5206     1369  3007               	movlw	high _IOCAF5_DefaultInterruptHandler
  5207     136A  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5208     136B  319E  26A8         	fcall	_IOCAF5_SetInterruptHandler
  5209                           
  5210                           ;mcc_generated_files/pin_manager.c: 117:     INTCONbits.IOCIE = 1;
  5211     136D  158B               	bsf	11,3	;volatile
  5212     136E  0008               	return
  5213     136F                     __end_of_PIN_MANAGER_Initialize:
  5214                           
  5215                           	psect	text10
  5216     1F5F                     __ptext10:	
  5217 ;; *************** function _OSCILLATOR_Initialize *****************
  5218 ;; Defined at:
  5219 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;		None
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;		None
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  1    wreg      void 
  5226 ;; Registers used:
  5227 ;;		wreg, status,2
  5228 ;; Tracked objects:
  5229 ;;		On entry : 1F/3
  5230 ;;		On exit  : 1F/1
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5237 ;;Total ram usage:        0 bytes
  5238 ;; Hardware stack levels used: 1
  5239 ;; Hardware stack levels required when called: 10
  5240 ;; This function calls:
  5241 ;;		Nothing
  5242 ;; This function is called by:
  5243 ;;		_SYSTEM_Initialize
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247     1F5F                     _OSCILLATOR_Initialize:	
  5248                           ;psect for function _OSCILLATOR_Initialize
  5249                           
  5250                           
  5251                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0xFC;
  5252                           
  5253                           ;incstack = 0
  5254                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5255     1F5F  30FC               	movlw	252
  5256     1F60  0021               	movlb	1	; select bank1
  5257     1F61  0099               	movwf	25	;volatile
  5258                           
  5259                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;
  5260     1F62  0198               	clrf	24	;volatile
  5261                           
  5262                           ;mcc_generated_files/mcc.c: 67:     ACTCON = 0x90;
  5263     1F63  3090               	movlw	144
  5264     1F64  0027               	movlb	7	; select bank7
  5265     1F65  009B               	movwf	27	;volatile
  5266                           
  5267                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  5268     1F66  0022               	movlb	2	; select bank2
  5269     1F67  0196               	clrf	22	;volatile
  5270     1F68                     l102:	
  5271                           ;mcc_generated_files/mcc.c: 72:     {;mcc_generated_files/mcc.c: 73:     }
  5272                           
  5273                           
  5274                           ;mcc_generated_files/mcc.c: 71:     while(PLLRDY == 0)
  5275     1F68  0021               	movlb	1	; select bank1
  5276     1F69  1B1A               	btfsc	26,6	;volatile
  5277     1F6A  0008               	return
  5278     1F6B  2F68               	goto	l102
  5279     1F6C                     __end_of_OSCILLATOR_Initialize:
  5280                           
  5281                           	psect	text11
  5282     1497                     __ptext11:	
  5283 ;; *************** function _EUSART_Initialize *****************
  5284 ;; Defined at:
  5285 ;;		line 88 in file "mcc_generated_files/eusart.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;		None
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;		None
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  1    wreg      void 
  5292 ;; Registers used:
  5293 ;;		wreg, status,2, status,0, pclath, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : 1F/0
  5296 ;;		On exit  : 1F/1
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;Total ram usage:        0 bytes
  5304 ;; Hardware stack levels used: 1
  5305 ;; Hardware stack levels required when called: 11
  5306 ;; This function calls:
  5307 ;;		_EUSART_SetErrorHandler
  5308 ;;		_EUSART_SetFramingErrorHandler
  5309 ;;		_EUSART_SetOverrunErrorHandler
  5310 ;;		_EUSART_SetRxInterruptHandler
  5311 ;;		_EUSART_SetTxInterruptHandler
  5312 ;; This function is called by:
  5313 ;;		_SYSTEM_Initialize
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317     1497                     _EUSART_Initialize:	
  5318                           ;psect for function _EUSART_Initialize
  5319                           
  5320                           
  5321                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  5322                           
  5323                           ;incstack = 0
  5324                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5325     1497  0021               	movlb	1	; select bank1
  5326     1498  1291               	bcf	17,5	;volatile
  5327                           
  5328                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5329     1499  30A6               	movlw	low _EUSART_Receive_ISR
  5330     149A  00A8               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5331     149B  3013               	movlw	high _EUSART_Receive_ISR
  5332     149C  00A9               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5333     149D  319E  26C8  3194   	fcall	_EUSART_SetRxInterruptHandler
  5334                           
  5335                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  5336     14A0  0021               	movlb	1	; select bank1
  5337     14A1  1211               	bcf	17,4	;volatile
  5338                           
  5339                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  5340     14A2  30F0               	movlw	low _EUSART_Transmit_ISR
  5341     14A3  00A8               	movwf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128)
  5342     14A4  3011               	movlw	high _EUSART_Transmit_ISR
  5343     14A5  00A9               	movwf	(EUSART_SetTxInterruptHandler@interruptHandler^(0+128)+1)
  5344     14A6  319E  26D0  3194   	fcall	_EUSART_SetTxInterruptHandler
  5345                           
  5346                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  5347     14A9  3008               	movlw	8
  5348     14AA  0023               	movlb	3	; select bank3
  5349     14AB  009F               	movwf	31	;volatile
  5350                           
  5351                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x80;
  5352     14AC  3080               	movlw	128
  5353     14AD  009D               	movwf	29	;volatile
  5354                           
  5355                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  5356     14AE  3024               	movlw	36
  5357     14AF  009E               	movwf	30	;volatile
  5358                           
  5359                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xE1;
  5360     14B0  30E1               	movlw	225
  5361     14B1  009B               	movwf	27	;volatile
  5362                           
  5363                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x04;
  5364     14B2  3004               	movlw	4
  5365     14B3  009C               	movwf	28	;volatile
  5366                           
  5367                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5368     14B4  3002               	movlw	low _EUSART_DefaultFramingErrorHandler
  5369     14B5  0021               	movlb	1	; select bank1
  5370     14B6  00A8               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5371     14B7  3000               	movlw	high _EUSART_DefaultFramingErrorHandler
  5372     14B8  00A9               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5373     14B9  319E  26B8  3194   	fcall	_EUSART_SetFramingErrorHandler
  5374                           
  5375                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5376     14BC  3085               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5377     14BD  0021               	movlb	1	; select bank1
  5378     14BE  00A8               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5379     14BF  3010               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5380     14C0  00A9               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5381     14C1  319E  26C0  3194   	fcall	_EUSART_SetOverrunErrorHandler
  5382                           
  5383                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5384     14C4  3080               	movlw	low _EUSART_DefaultErrorHandler
  5385     14C5  0021               	movlb	1	; select bank1
  5386     14C6  00A8               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5387     14C7  301E               	movlw	high _EUSART_DefaultErrorHandler
  5388     14C8  00A9               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5389     14C9  319E  26B0         	fcall	_EUSART_SetErrorHandler
  5390                           
  5391                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  5392     14CB  01E3               	clrf	_eusartRxLastError^(0+256)	;volatile
  5393                           
  5394                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  5395     14CC  01E7               	clrf	_eusartTxHead^(0+256)	;volatile
  5396                           
  5397                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  5398     14CD  01E6               	clrf	_eusartTxTail^(0+256)	;volatile
  5399                           
  5400                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  5401     14CE  3008               	movlw	8
  5402     14CF  0021               	movlb	1	; select bank1
  5403     14D0  00EF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  5404                           
  5405                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  5406     14D1  01EE               	clrf	_eusartRxHead^(0+128)	;volatile
  5407                           
  5408                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  5409     14D2  0022               	movlb	2	; select bank2
  5410     14D3  01E5               	clrf	_eusartRxTail^(0+256)	;volatile
  5411                           
  5412                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  5413     14D4  01E4               	clrf	_eusartRxCount^(0+256)	;volatile
  5414                           
  5415                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  5416     14D5  0021               	movlb	1	; select bank1
  5417     14D6  1691               	bsf	17,5	;volatile
  5418     14D7  0008               	return
  5419     14D8                     __end_of_EUSART_Initialize:
  5420                           
  5421                           	psect	text12
  5422     1ED0                     __ptext12:	
  5423 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  5424 ;; Defined at:
  5425 ;;		line 276 in file "mcc_generated_files/eusart.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5428 ;;		 -> EUSART_Transmit_ISR(1), 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;		None
  5431 ;; Return value:  Size  Location     Type
  5432 ;;                  1    wreg      void 
  5433 ;; Registers used:
  5434 ;;		wreg
  5435 ;; Tracked objects:
  5436 ;;		On entry : 1F/1
  5437 ;;		On exit  : 1F/2
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5440 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;Total ram usage:        2 bytes
  5445 ;; Hardware stack levels used: 1
  5446 ;; Hardware stack levels required when called: 10
  5447 ;; This function calls:
  5448 ;;		Nothing
  5449 ;; This function is called by:
  5450 ;;		_EUSART_Initialize
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454     1ED0                     _EUSART_SetTxInterruptHandler:	
  5455                           ;psect for function _EUSART_SetTxInterruptHandler
  5456                           
  5457                           
  5458                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  5459                           
  5460                           ;incstack = 0
  5461                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  5462     1ED0  0829               	movf	(EUSART_SetTxInterruptHandler@interruptHandler+1)^(0+128),w
  5463     1ED1  0022               	movlb	2	; select bank2
  5464     1ED2  00CB               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
  5465     1ED3  0021               	movlb	1	; select bank1
  5466     1ED4  0828               	movf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128),w
  5467     1ED5  0022               	movlb	2	; select bank2
  5468     1ED6  00CA               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
  5469     1ED7  0008               	return
  5470     1ED8                     __end_of_EUSART_SetTxInterruptHandler:
  5471                           
  5472                           	psect	text13
  5473     1EC8                     __ptext13:	
  5474 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5475 ;; Defined at:
  5476 ;;		line 280 in file "mcc_generated_files/eusart.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5479 ;;		 -> EUSART_Receive_ISR(1), 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;		None
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      void 
  5484 ;; Registers used:
  5485 ;;		wreg
  5486 ;; Tracked objects:
  5487 ;;		On entry : 1F/1
  5488 ;;		On exit  : 1F/2
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5491 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;Total ram usage:        2 bytes
  5496 ;; Hardware stack levels used: 1
  5497 ;; Hardware stack levels required when called: 10
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		_EUSART_Initialize
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505     1EC8                     _EUSART_SetRxInterruptHandler:	
  5506                           ;psect for function _EUSART_SetRxInterruptHandler
  5507                           
  5508                           
  5509                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5510                           
  5511                           ;incstack = 0
  5512                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5513     1EC8  0829               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5514     1EC9  0022               	movlb	2	; select bank2
  5515     1ECA  00C9               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
  5516     1ECB  0021               	movlb	1	; select bank1
  5517     1ECC  0828               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5518     1ECD  0022               	movlb	2	; select bank2
  5519     1ECE  00C8               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
  5520     1ECF  0008               	return
  5521     1ED0                     __end_of_EUSART_SetRxInterruptHandler:
  5522                           
  5523                           	psect	text14
  5524     1EC0                     __ptext14:	
  5525 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5526 ;; Defined at:
  5527 ;;		line 268 in file "mcc_generated_files/eusart.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5530 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;		None
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  1    wreg      void 
  5535 ;; Registers used:
  5536 ;;		wreg
  5537 ;; Tracked objects:
  5538 ;;		On entry : 1F/1
  5539 ;;		On exit  : 1F/2
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5542 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;Total ram usage:        2 bytes
  5547 ;; Hardware stack levels used: 1
  5548 ;; Hardware stack levels required when called: 10
  5549 ;; This function calls:
  5550 ;;		Nothing
  5551 ;; This function is called by:
  5552 ;;		_EUSART_Initialize
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556     1EC0                     _EUSART_SetOverrunErrorHandler:	
  5557                           ;psect for function _EUSART_SetOverrunErrorHandler
  5558                           
  5559                           
  5560                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  5561                           
  5562                           ;incstack = 0
  5563                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5564     1EC0  0829               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5565     1EC1  0022               	movlb	2	; select bank2
  5566     1EC2  00C3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  5567     1EC3  0021               	movlb	1	; select bank1
  5568     1EC4  0828               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5569     1EC5  0022               	movlb	2	; select bank2
  5570     1EC6  00C2               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  5571     1EC7  0008               	return
  5572     1EC8                     __end_of_EUSART_SetOverrunErrorHandler:
  5573                           
  5574                           	psect	text15
  5575     1EB8                     __ptext15:	
  5576 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5577 ;; Defined at:
  5578 ;;		line 264 in file "mcc_generated_files/eusart.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5581 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;		None
  5584 ;; Return value:  Size  Location     Type
  5585 ;;                  1    wreg      void 
  5586 ;; Registers used:
  5587 ;;		wreg
  5588 ;; Tracked objects:
  5589 ;;		On entry : 1F/1
  5590 ;;		On exit  : 1F/2
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5593 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;Total ram usage:        2 bytes
  5598 ;; Hardware stack levels used: 1
  5599 ;; Hardware stack levels required when called: 10
  5600 ;; This function calls:
  5601 ;;		Nothing
  5602 ;; This function is called by:
  5603 ;;		_EUSART_Initialize
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607     1EB8                     _EUSART_SetFramingErrorHandler:	
  5608                           ;psect for function _EUSART_SetFramingErrorHandler
  5609                           
  5610                           
  5611                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  5612                           
  5613                           ;incstack = 0
  5614                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5615     1EB8  0829               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5616     1EB9  0022               	movlb	2	; select bank2
  5617     1EBA  00C5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
  5618     1EBB  0021               	movlb	1	; select bank1
  5619     1EBC  0828               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5620     1EBD  0022               	movlb	2	; select bank2
  5621     1EBE  00C4               	movwf	_EUSART_FramingErrorHandler^(0+256)
  5622     1EBF  0008               	return
  5623     1EC0                     __end_of_EUSART_SetFramingErrorHandler:
  5624                           
  5625                           	psect	text16
  5626     1EB0                     __ptext16:	
  5627 ;; *************** function _EUSART_SetErrorHandler *****************
  5628 ;; Defined at:
  5629 ;;		line 272 in file "mcc_generated_files/eusart.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5632 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;		None
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  1    wreg      void 
  5637 ;; Registers used:
  5638 ;;		wreg
  5639 ;; Tracked objects:
  5640 ;;		On entry : 1F/1
  5641 ;;		On exit  : 1F/2
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5644 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;Total ram usage:        2 bytes
  5649 ;; Hardware stack levels used: 1
  5650 ;; Hardware stack levels required when called: 10
  5651 ;; This function calls:
  5652 ;;		Nothing
  5653 ;; This function is called by:
  5654 ;;		_EUSART_Initialize
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658     1EB0                     _EUSART_SetErrorHandler:	
  5659                           ;psect for function _EUSART_SetErrorHandler
  5660                           
  5661                           
  5662                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  5663                           
  5664                           ;incstack = 0
  5665                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5666     1EB0  0829               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5667     1EB1  0022               	movlb	2	; select bank2
  5668     1EB2  00C1               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  5669     1EB3  0021               	movlb	1	; select bank1
  5670     1EB4  0828               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5671     1EB5  0022               	movlb	2	; select bank2
  5672     1EB6  00C0               	movwf	_EUSART_ErrorHandler^(0+256)
  5673     1EB7  0008               	return
  5674     1EB8                     __end_of_EUSART_SetErrorHandler:
  5675                           
  5676                           	psect	text17
  5677     1180                     __ptext17:	
  5678 ;; *************** function _PS2Keyboard_Init *****************
  5679 ;; Defined at:
  5680 ;;		line 43 in file "ps2_keyboard.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;		None
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;		None
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  1    wreg      void 
  5687 ;; Registers used:
  5688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 1F/0
  5691 ;;		On exit  : 1F/3
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;Total ram usage:        0 bytes
  5699 ;; Hardware stack levels used: 1
  5700 ;; Hardware stack levels required when called: 11
  5701 ;; This function calls:
  5702 ;;		_GenericQueue_Init
  5703 ;;		_IOCAF4_SetInterruptHandler
  5704 ;;		_IOCAF5_SetInterruptHandler
  5705 ;; This function is called by:
  5706 ;;		_main
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710     1180                     _PS2Keyboard_Init:	
  5711                           ;psect for function _PS2Keyboard_Init
  5712                           
  5713                           
  5714                           ;ps2_keyboard.c: 44:     GenericQueue_Init(&keyboardScanCodeQueue, sizeof (PS2ScanCode))
      +                          ;
  5715                           
  5716                           ;incstack = 0
  5717                           ; Regs used in _PS2Keyboard_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5718     1180  3091               	movlw	145
  5719     1181  0021               	movlb	1	; select bank1
  5720     1182  00A8               	movwf	GenericQueue_Init@q^(0+128)
  5721     1183  3023               	movlw	35
  5722     1184  00A9               	movwf	(GenericQueue_Init@q^(0+128)+1)
  5723     1185  3003               	movlw	3
  5724     1186  00AA               	movwf	GenericQueue_Init@element_size^(0+128)
  5725     1187  3000               	movlw	0
  5726     1188  00AB               	movwf	(GenericQueue_Init@element_size^(0+128)+1)
  5727     1189  3192  226E  3191   	fcall	_GenericQueue_Init
  5728                           
  5729                           ;ps2_keyboard.c: 45:     IOCAF4_SetInterruptHandler(PS2Keyboard_ClockInterrupt);
  5730     118C  30FA               	movlw	low _PS2Keyboard_ClockInterrupt
  5731     118D  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  5732     118E  3004               	movlw	high _PS2Keyboard_ClockInterrupt
  5733     118F  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5734     1190  319E  26A0  3191   	fcall	_IOCAF4_SetInterruptHandler
  5735                           
  5736                           ;ps2_keyboard.c: 46:     IOCAF5_SetInterruptHandler(PS2Keyboard_DataInterrupt);
  5737     1193  306C               	movlw	low _PS2Keyboard_DataInterrupt
  5738     1194  0021               	movlb	1	; select bank1
  5739     1195  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  5740     1196  301F               	movlw	high _PS2Keyboard_DataInterrupt
  5741     1197  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5742     1198  319E  26A8         	fcall	_IOCAF5_SetInterruptHandler
  5743     119A  0008               	return
  5744     119B                     __end_of_PS2Keyboard_Init:
  5745                           
  5746                           	psect	text18
  5747     1EA8                     __ptext18:	
  5748 ;; *************** function _IOCAF5_SetInterruptHandler *****************
  5749 ;; Defined at:
  5750 ;;		line 183 in file "mcc_generated_files/pin_manager.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5753 ;;		 -> PS2Keyboard_DataInterrupt(1), IOCAF5_DefaultInterruptHandler(1), 
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;		None
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg
  5760 ;; Tracked objects:
  5761 ;;		On entry : 1F/1
  5762 ;;		On exit  : 1F/3
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5765 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;Total ram usage:        2 bytes
  5770 ;; Hardware stack levels used: 1
  5771 ;; Hardware stack levels required when called: 10
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_PIN_MANAGER_Initialize
  5776 ;;		_PS2Keyboard_Init
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780     1EA8                     _IOCAF5_SetInterruptHandler:	
  5781                           ;psect for function _IOCAF5_SetInterruptHandler
  5782                           
  5783                           
  5784                           ;mcc_generated_files/pin_manager.c: 184:     IOCAF5_InterruptHandler = InterruptHandler;
  5785                           
  5786                           ;incstack = 0
  5787                           ; Regs used in _IOCAF5_SetInterruptHandler: [wreg]
  5788     1EA8  0829               	movf	(IOCAF5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5789     1EA9  0023               	movlb	3	; select bank3
  5790     1EAA  00CE               	movwf	(_IOCAF5_InterruptHandler+1)^(0+384)
  5791     1EAB  0021               	movlb	1	; select bank1
  5792     1EAC  0828               	movf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128),w
  5793     1EAD  0023               	movlb	3	; select bank3
  5794     1EAE  00CD               	movwf	_IOCAF5_InterruptHandler^(0+384)
  5795     1EAF  0008               	return
  5796     1EB0                     __end_of_IOCAF5_SetInterruptHandler:
  5797                           
  5798                           	psect	text19
  5799     1EA0                     __ptext19:	
  5800 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  5801 ;; Defined at:
  5802 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5805 ;;		 -> PS2Keyboard_ClockInterrupt(1), IOCAF4_DefaultInterruptHandler(1), 
  5806 ;; Auto vars:     Size  Location     Type
  5807 ;;		None
  5808 ;; Return value:  Size  Location     Type
  5809 ;;                  1    wreg      void 
  5810 ;; Registers used:
  5811 ;;		wreg
  5812 ;; Tracked objects:
  5813 ;;		On entry : 1F/1
  5814 ;;		On exit  : 1F/2
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5817 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5820 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;Total ram usage:        2 bytes
  5822 ;; Hardware stack levels used: 1
  5823 ;; Hardware stack levels required when called: 10
  5824 ;; This function calls:
  5825 ;;		Nothing
  5826 ;; This function is called by:
  5827 ;;		_PIN_MANAGER_Initialize
  5828 ;;		_PS2Keyboard_Init
  5829 ;; This function uses a non-reentrant model
  5830 ;;
  5831                           
  5832     1EA0                     _IOCAF4_SetInterruptHandler:	
  5833                           ;psect for function _IOCAF4_SetInterruptHandler
  5834                           
  5835                           
  5836                           ;mcc_generated_files/pin_manager.c: 154:     IOCAF4_InterruptHandler = InterruptHandler;
  5837                           
  5838                           ;incstack = 0
  5839                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  5840     1EA0  0829               	movf	(IOCAF4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5841     1EA1  0022               	movlb	2	; select bank2
  5842     1EA2  00EE               	movwf	(_IOCAF4_InterruptHandler+1)^(0+256)
  5843     1EA3  0021               	movlb	1	; select bank1
  5844     1EA4  0828               	movf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128),w
  5845     1EA5  0022               	movlb	2	; select bank2
  5846     1EA6  00ED               	movwf	_IOCAF4_InterruptHandler^(0+256)
  5847     1EA7  0008               	return
  5848     1EA8                     __end_of_IOCAF4_SetInterruptHandler:
  5849                           
  5850                           	psect	text20
  5851     126E                     __ptext20:	
  5852 ;; *************** function _GenericQueue_Init *****************
  5853 ;; Defined at:
  5854 ;;		line 4 in file "generic_queue.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;  q               2    0[BANK1 ] PTR struct .
  5857 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  5858 ;;  element_size    2    2[BANK1 ] unsigned int 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;		None
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      void 
  5863 ;; Registers used:
  5864 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5865 ;; Tracked objects:
  5866 ;;		On entry : 1F/1
  5867 ;;		On exit  : 1F/1
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5870 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;Total ram usage:        4 bytes
  5875 ;; Hardware stack levels used: 1
  5876 ;; Hardware stack levels required when called: 10
  5877 ;; This function calls:
  5878 ;;		Nothing
  5879 ;; This function is called by:
  5880 ;;		_PS2Keyboard_Init
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884     126E                     _GenericQueue_Init:	
  5885                           ;psect for function _GenericQueue_Init
  5886                           
  5887                           
  5888                           ;generic_queue.c: 5:     q->element_size = element_size;
  5889                           
  5890                           ;incstack = 0
  5891                           ; Regs used in _GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  5892     126E  0828               	movf	GenericQueue_Init@q^(0+128),w
  5893     126F  3E5A               	addlw	90
  5894     1270  0086               	movwf	6
  5895     1271  3000               	movlw	0
  5896     1272  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5897     1273  0087               	movwf	7
  5898     1274  082A               	movf	GenericQueue_Init@element_size^(0+128),w
  5899     1275  3FC0               	movwi [0]fsr1
  5900     1276  082B               	movf	(GenericQueue_Init@element_size+1)^(0+128),w
  5901     1277  3FC1               	movwi [1]fsr1
  5902                           
  5903                           ;generic_queue.c: 6:     q->front = 0;
  5904     1278  0828               	movf	GenericQueue_Init@q^(0+128),w
  5905     1279  3E5C               	addlw	92
  5906     127A  0086               	movwf	6
  5907     127B  3000               	movlw	0
  5908     127C  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5909     127D  0087               	movwf	7
  5910     127E  0181               	clrf	1
  5911                           
  5912                           ;generic_queue.c: 7:     q->rear = 0;
  5913     127F  0828               	movf	GenericQueue_Init@q^(0+128),w
  5914     1280  3E5D               	addlw	93
  5915     1281  0086               	movwf	6
  5916     1282  3000               	movlw	0
  5917     1283  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5918     1284  0087               	movwf	7
  5919     1285  0181               	clrf	1
  5920                           
  5921                           ;generic_queue.c: 8:     q->size = 0;
  5922     1286  0828               	movf	GenericQueue_Init@q^(0+128),w
  5923     1287  3E5E               	addlw	94
  5924     1288  0086               	movwf	6
  5925     1289  3000               	movlw	0
  5926     128A  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5927     128B  0087               	movwf	7
  5928     128C  0181               	clrf	1
  5929     128D  0008               	return
  5930     128E                     __end_of_GenericQueue_Init:
  5931                           
  5932                           	psect	text21
  5933     11B7                     __ptext21:	
  5934 ;; *************** function _PS2Keyboard_GetScanCode *****************
  5935 ;; Defined at:
  5936 ;;		line 49 in file "ps2_keyboard.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;  scanCode        1    wreg     PTR struct PS2ScanCode
  5939 ;;		 -> main@scanCode(3), 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;  scanCode        1   31[BANK1 ] PTR struct PS2ScanCode
  5942 ;;		 -> main@scanCode(3), 
  5943 ;;  ret             1   32[BANK1 ] _Bool 
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  1    wreg      _Bool 
  5946 ;; Registers used:
  5947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5948 ;; Tracked objects:
  5949 ;;		On entry : 2/1
  5950 ;;		On exit  : 1F/1
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;Total ram usage:        2 bytes
  5958 ;; Hardware stack levels used: 1
  5959 ;; Hardware stack levels required when called: 12
  5960 ;; This function calls:
  5961 ;;		_GenericQueue_Dequeue
  5962 ;;		_GenericQueue_IsEmpty
  5963 ;; This function is called by:
  5964 ;;		_main
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968     11B7                     _PS2Keyboard_GetScanCode:	
  5969                           ;psect for function _PS2Keyboard_GetScanCode
  5970                           
  5971                           
  5972                           ;incstack = 0
  5973                           ; Regs used in _PS2Keyboard_GetScanCode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5974                           ;PS2Keyboard_GetScanCode@scanCode stored from wreg
  5975     11B7  0021               	movlb	1	; select bank1
  5976     11B8  00C7               	movwf	PS2Keyboard_GetScanCode@scanCode^(0+128)
  5977                           
  5978                           ;ps2_keyboard.c: 51:     if (!GenericQueue_IsEmpty(&keyboardScanCodeQueue)) {
  5979     11B9  3091               	movlw	145
  5980     11BA  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  5981     11BB  3023               	movlw	35
  5982     11BC  00A9               	movwf	(GenericQueue_IsEmpty@q^(0+128)+1)
  5983     11BD  319F  27B0  3191   	fcall	_GenericQueue_IsEmpty
  5984     11C0  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  5985     11C1  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  5986     11C2  1D03               	btfss	3,2
  5987     11C3  29D0               	goto	l5735
  5988                           
  5989                           ;ps2_keyboard.c: 52:         GenericQueue_Dequeue(&keyboardScanCodeQueue, scanCode);
  5990     11C4  3091               	movlw	145
  5991     11C5  00C0               	movwf	GenericQueue_Dequeue@q^(0+128)
  5992     11C6  3023               	movlw	35
  5993     11C7  00C1               	movwf	(GenericQueue_Dequeue@q^(0+128)+1)
  5994     11C8  0847               	movf	PS2Keyboard_GetScanCode@scanCode^(0+128),w
  5995     11C9  00C2               	movwf	GenericQueue_Dequeue@item^(0+128)
  5996     11CA  3188  20BA  3191   	fcall	_GenericQueue_Dequeue
  5997                           
  5998                           ;ps2_keyboard.c: 53:         ret = 1;
  5999     11CD  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  6000     11CE  0AC8               	incf	PS2Keyboard_GetScanCode@ret^(0+128),f
  6001                           
  6002                           ;ps2_keyboard.c: 54:     } else {
  6003     11CF  29D1               	goto	l5737
  6004     11D0                     l5735:
  6005                           
  6006                           ;ps2_keyboard.c: 55:         ret = 0;
  6007     11D0  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  6008     11D1                     l5737:
  6009                           
  6010                           ;ps2_keyboard.c: 57:     return ret;
  6011     11D1  0848               	movf	PS2Keyboard_GetScanCode@ret^(0+128),w
  6012     11D2  0008               	return
  6013     11D3                     __end_of_PS2Keyboard_GetScanCode:
  6014                           
  6015                           	psect	text22
  6016     08BA                     __ptext22:	
  6017 ;; *************** function _GenericQueue_Dequeue *****************
  6018 ;; Defined at:
  6019 ;;		line 27 in file "generic_queue.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;  q               2   24[BANK1 ] PTR struct .
  6022 ;;		 -> keyboardScanCodeQueue(95), 
  6023 ;;  item            1   26[BANK1 ] PTR void 
  6024 ;;		 -> main@scanCode(3), 
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;		None
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  1    wreg      void 
  6029 ;; Registers used:
  6030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6031 ;; Tracked objects:
  6032 ;;		On entry : 1F/1
  6033 ;;		On exit  : 1F/1
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6036 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;Total ram usage:        7 bytes
  6041 ;; Hardware stack levels used: 1
  6042 ;; Hardware stack levels required when called: 11
  6043 ;; This function calls:
  6044 ;;		_GenericQueue_IsEmpty
  6045 ;;		___awmod
  6046 ;;		___wmul
  6047 ;;		_memcpy
  6048 ;; This function is called by:
  6049 ;;		_PS2Keyboard_GetScanCode
  6050 ;; This function uses a non-reentrant model
  6051 ;;
  6052                           
  6053     08BA                     _GenericQueue_Dequeue:	
  6054                           ;psect for function _GenericQueue_Dequeue
  6055                           
  6056                           
  6057                           ;generic_queue.c: 28:     if (!GenericQueue_IsEmpty(q)) {
  6058                           
  6059                           ;incstack = 0
  6060                           ; Regs used in _GenericQueue_Dequeue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6061     08BA  0841               	movf	(GenericQueue_Dequeue@q+1)^(0+128),w
  6062     08BB  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  6063     08BC  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6064     08BD  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  6065     08BE  319F  27B0  3188   	fcall	_GenericQueue_IsEmpty
  6066     08C1  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  6067     08C2  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  6068     08C3  1D03               	btfss	3,2
  6069     08C4  0008               	return
  6070                           
  6071                           ;generic_queue.c: 29:         memcpy(item, &q->buffer[q->front * q->element_size], q->el
      +                          ement_size);
  6072     08C5  0842               	movf	GenericQueue_Dequeue@item^(0+128),w
  6073     08C6  00B5               	movwf	memcpy@d1^(0+128)
  6074     08C7  01B6               	clrf	(memcpy@d1+1)^(0+128)
  6075     08C8  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6076     08C9  3E5C               	addlw	92
  6077     08CA  0086               	movwf	6
  6078     08CB  3000               	movlw	0
  6079     08CC  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6080     08CD  0087               	movwf	7
  6081     08CE  0801               	movf	1,w
  6082     08CF  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  6083     08D0  01C4               	clrf	(??_GenericQueue_Dequeue^(0+128)+1)
  6084     08D1  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  6085     08D2  00AF               	movwf	___wmul@multiplier^(0+128)
  6086     08D3  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  6087     08D4  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  6088     08D5  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6089     08D6  3E5A               	addlw	90
  6090     08D7  0086               	movwf	6
  6091     08D8  3000               	movlw	0
  6092     08D9  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6093     08DA  0087               	movwf	7
  6094     08DB  3F40               	moviw [0]fsr1
  6095     08DC  00B1               	movwf	___wmul@multiplicand^(0+128)
  6096     08DD  3F41               	moviw [1]fsr1
  6097     08DE  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  6098     08DF  3191  214A  3188   	fcall	___wmul
  6099     08E2  082F               	movf	?___wmul^(0+128),w
  6100     08E3  0740               	addwf	GenericQueue_Dequeue@q^(0+128),w
  6101     08E4  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  6102     08E5  0830               	movf	(?___wmul+1)^(0+128),w
  6103     08E6  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6104     08E7  00C6               	movwf	(??_GenericQueue_Dequeue+3)^(0+128)
  6105     08E8  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  6106     08E9  00B7               	movwf	memcpy@s1^(0+128)
  6107     08EA  0846               	movf	(??_GenericQueue_Dequeue+3)^(0+128),w
  6108     08EB  00B8               	movwf	(memcpy@s1+1)^(0+128)
  6109     08EC  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6110     08ED  3E5A               	addlw	90
  6111     08EE  0086               	movwf	6
  6112     08EF  3000               	movlw	0
  6113     08F0  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6114     08F1  0087               	movwf	7
  6115     08F2  3F40               	moviw [0]fsr1
  6116     08F3  00B9               	movwf	memcpy@n^(0+128)
  6117     08F4  3F41               	moviw [1]fsr1
  6118     08F5  00BA               	movwf	(memcpy@n+1)^(0+128)
  6119     08F6  3193  231E  3188   	fcall	_memcpy
  6120                           
  6121                           ;generic_queue.c: 30:         q->front = (q->front + 1) % 15;
  6122     08F9  300F               	movlw	15
  6123     08FA  00A8               	movwf	___awmod@divisor^(0+128)
  6124     08FB  3000               	movlw	0
  6125     08FC  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  6126     08FD  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6127     08FE  3E5C               	addlw	92
  6128     08FF  0086               	movwf	6
  6129     0900  3000               	movlw	0
  6130     0901  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6131     0902  0087               	movwf	7
  6132     0903  0801               	movf	1,w
  6133     0904  3E01               	addlw	1
  6134     0905  00AA               	movwf	___awmod@dividend^(0+128)
  6135     0906  3000               	movlw	0
  6136     0907  1803               	skipnc
  6137     0908  3001               	movlw	1
  6138     0909  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  6139     090A  3195  251D         	fcall	___awmod
  6140     090C  0828               	movf	?___awmod^(0+128),w
  6141     090D  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  6142     090E  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6143     090F  3E5C               	addlw	92
  6144     0910  00C4               	movwf	(??_GenericQueue_Dequeue+1)^(0+128)
  6145     0911  3000               	movlw	0
  6146     0912  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6147     0913  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  6148     0914  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  6149     0915  0086               	movwf	6
  6150     0916  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  6151     0917  0087               	movwf	7
  6152     0918  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  6153     0919  0081               	movwf	1
  6154                           
  6155                           ;generic_queue.c: 31:         q->size--;
  6156     091A  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6157     091B  3E5E               	addlw	94
  6158     091C  0086               	movwf	6
  6159     091D  3000               	movlw	0
  6160     091E  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6161     091F  0087               	movwf	7
  6162     0920  3001               	movlw	1
  6163     0921  0281               	subwf	1,f
  6164     0922  0008               	return
  6165     0923                     __end_of_GenericQueue_Dequeue:
  6166                           
  6167                           	psect	text23
  6168     12D3                     __ptext23:	
  6169 ;; *************** function _Log_UtilityConvertByteToHex *****************
  6170 ;; Defined at:
  6171 ;;		line 14 in file "log.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;  byte            1    wreg     unsigned char 
  6174 ;;  buf             1    4[BANK1 ] PTR unsigned char 
  6175 ;;		 -> main@scanCodeStr(6), 
  6176 ;;  bufSize         1    5[BANK1 ] unsigned char 
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;  byte            1    8[BANK1 ] unsigned char 
  6179 ;;  d1              1    9[BANK1 ] unsigned char 
  6180 ;;  d0              1    7[BANK1 ] unsigned char 
  6181 ;; Return value:  Size  Location     Type
  6182 ;;                  1    wreg      void 
  6183 ;; Registers used:
  6184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6185 ;; Tracked objects:
  6186 ;;		On entry : 1F/1
  6187 ;;		On exit  : 1F/1
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6190 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;Total ram usage:        6 bytes
  6195 ;; Hardware stack levels used: 1
  6196 ;; Hardware stack levels required when called: 11
  6197 ;; This function calls:
  6198 ;;		___bmul
  6199 ;;		_hex2str
  6200 ;; This function is called by:
  6201 ;;		_main
  6202 ;; This function uses a non-reentrant model
  6203 ;;
  6204                           
  6205     12D3                     _Log_UtilityConvertByteToHex:	
  6206                           ;psect for function _Log_UtilityConvertByteToHex
  6207                           
  6208                           
  6209                           ;incstack = 0
  6210                           ; Regs used in _Log_UtilityConvertByteToHex: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6211                           ;Log_UtilityConvertByteToHex@byte stored from wreg
  6212     12D3  00B0               	movwf	Log_UtilityConvertByteToHex@byte^(0+128)
  6213                           
  6214                           ;log.c: 15:     if (bufSize < 2) {
  6215     12D4  3002               	movlw	2
  6216     12D5  022D               	subwf	Log_UtilityConvertByteToHex@bufSize^(0+128),w
  6217     12D6  1C03               	btfss	3,0
  6218     12D7  0008               	return
  6219                           
  6220                           ;log.c: 18:     uint8_t d1 = byte / 16;
  6221     12D8  0830               	movf	Log_UtilityConvertByteToHex@byte^(0+128),w
  6222     12D9  00AE               	movwf	??_Log_UtilityConvertByteToHex^(0+128)
  6223     12DA  3004               	movlw	4
  6224     12DB                     u5295:
  6225     12DB  36AE               	lsrf	??_Log_UtilityConvertByteToHex^(0+128),f
  6226     12DC  0B89               	decfsz	9,f
  6227     12DD  2ADB               	goto	u5295
  6228     12DE  082E               	movf	??_Log_UtilityConvertByteToHex^(0+128),w
  6229     12DF  00B1               	movwf	Log_UtilityConvertByteToHex@d1^(0+128)
  6230                           
  6231                           ;log.c: 19:     uint8_t d0 = byte - d1 * 16;
  6232     12E0  30F0               	movlw	240
  6233     12E1  00A8               	movwf	___bmul@multiplicand^(0+128)
  6234     12E2  0831               	movf	Log_UtilityConvertByteToHex@d1^(0+128),w
  6235     12E3  319F  277D  3192   	fcall	___bmul
  6236     12E6  0730               	addwf	Log_UtilityConvertByteToHex@byte^(0+128),w
  6237     12E7  00AF               	movwf	Log_UtilityConvertByteToHex@d0^(0+128)
  6238                           
  6239                           ;log.c: 20:     buf[0] = hex2str(d1);
  6240     12E8  082C               	movf	Log_UtilityConvertByteToHex@buf^(0+128),w
  6241     12E9  0086               	movwf	6
  6242     12EA  0187               	clrf	7
  6243     12EB  0831               	movf	Log_UtilityConvertByteToHex@d1^(0+128),w
  6244     12EC  319F  278E  3192   	fcall	_hex2str
  6245     12EF  0081               	movwf	1
  6246                           
  6247                           ;log.c: 21:     buf[1] = hex2str(d0);
  6248     12F0  0A2C               	incf	Log_UtilityConvertByteToHex@buf^(0+128),w
  6249     12F1  0086               	movwf	6
  6250     12F2  0187               	clrf	7
  6251     12F3  082F               	movf	Log_UtilityConvertByteToHex@d0^(0+128),w
  6252     12F4  319F  278E         	fcall	_hex2str
  6253     12F6  0081               	movwf	1
  6254     12F7  0008               	return
  6255     12F8                     __end_of_Log_UtilityConvertByteToHex:
  6256                           
  6257                           	psect	text24
  6258     1F8E                     __ptext24:	
  6259 ;; *************** function _hex2str *****************
  6260 ;; Defined at:
  6261 ;;		line 4 in file "log.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;  val             1    wreg     unsigned char 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  val             1    0[BANK1 ] unsigned char 
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      unsigned char 
  6268 ;; Registers used:
  6269 ;;		wreg, status,2, status,0
  6270 ;; Tracked objects:
  6271 ;;		On entry : 1F/1
  6272 ;;		On exit  : 1F/1
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;Total ram usage:        1 bytes
  6280 ;; Hardware stack levels used: 1
  6281 ;; Hardware stack levels required when called: 10
  6282 ;; This function calls:
  6283 ;;		Nothing
  6284 ;; This function is called by:
  6285 ;;		_Log_UtilityConvertByteToHex
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289     1F8E                     _hex2str:	
  6290                           ;psect for function _hex2str
  6291                           
  6292                           
  6293                           ;incstack = 0
  6294                           ; Regs used in _hex2str: [wreg+status,2+status,0]
  6295                           ;hex2str@val stored from wreg
  6296     1F8E  00A8               	movwf	hex2str@val^(0+128)
  6297                           
  6298                           ;log.c: 5:     if (val < 10) {
  6299     1F8F  300A               	movlw	10
  6300     1F90  0228               	subwf	hex2str@val^(0+128),w
  6301     1F91  1803               	skipnc
  6302     1F92  2F96               	goto	l5465
  6303                           
  6304                           ;log.c: 6:         return val + '0';
  6305     1F93  0828               	movf	hex2str@val^(0+128),w
  6306     1F94  3E30               	addlw	48
  6307     1F95  0008               	return
  6308     1F96                     l5465:
  6309     1F96  3010               	movlw	16
  6310     1F97  0228               	subwf	hex2str@val^(0+128),w
  6311     1F98  1803               	skipnc
  6312     1F99  2F9D               	goto	l5473
  6313                           
  6314                           ;log.c: 8:         return val - 10 + 'A';
  6315     1F9A  0828               	movf	hex2str@val^(0+128),w
  6316     1F9B  3E37               	addlw	55
  6317     1F9C  0008               	return
  6318     1F9D                     l5473:
  6319                           
  6320                           ;log.c: 10:         return 'X';
  6321     1F9D  3058               	movlw	88
  6322     1F9E  0008               	return
  6323     1F9F                     __end_of_hex2str:
  6324                           
  6325                           	psect	text25
  6326     1165                     __ptext25:	
  6327 ;; *************** function _Log_Message *****************
  6328 ;; Defined at:
  6329 ;;		line 24 in file "log.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;  buf             1    wreg     PTR const unsigned char 
  6332 ;;		 -> main@scanCodeStr(6), 
  6333 ;;  bufSize         1    2[BANK1 ] unsigned char 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  buf             1    4[BANK1 ] PTR const unsigned char 
  6336 ;;		 -> main@scanCodeStr(6), 
  6337 ;;  i               1    5[BANK1 ] unsigned char 
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  1    wreg      void 
  6340 ;; Registers used:
  6341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6342 ;; Tracked objects:
  6343 ;;		On entry : 1F/1
  6344 ;;		On exit  : 1F/1
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6347 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;Total ram usage:        4 bytes
  6352 ;; Hardware stack levels used: 1
  6353 ;; Hardware stack levels required when called: 11
  6354 ;; This function calls:
  6355 ;;		_EUSART_Write
  6356 ;;		_EUSART_is_tx_ready
  6357 ;; This function is called by:
  6358 ;;		_main
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362     1165                     _Log_Message:	
  6363                           ;psect for function _Log_Message
  6364                           
  6365                           
  6366                           ;incstack = 0
  6367                           ; Regs used in _Log_Message: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6368                           ;Log_Message@buf stored from wreg
  6369     1165  00AC               	movwf	Log_Message@buf^(0+128)
  6370                           
  6371                           ;log.c: 25:     for (uint8_t i = 0; i < bufSize; i++) {
  6372     1166  01AD               	clrf	Log_Message@i^(0+128)
  6373     1167                     l5761:
  6374     1167  082A               	movf	Log_Message@bufSize^(0+128),w
  6375     1168  022D               	subwf	Log_Message@i^(0+128),w
  6376     1169  1803               	btfsc	3,0
  6377     116A  0008               	return
  6378     116B                     l5755:
  6379     116B  319E  2699  3191   	fcall	_EUSART_is_tx_ready
  6380     116E  3A00               	xorlw	0
  6381     116F  1903               	skipnz
  6382     1170  296B               	goto	l5755
  6383                           
  6384                           ;log.c: 27:         EUSART_Write(buf[i]);
  6385     1171  082D               	movf	Log_Message@i^(0+128),w
  6386     1172  072C               	addwf	Log_Message@buf^(0+128),w
  6387     1173  00AB               	movwf	??_Log_Message^(0+128)
  6388     1174  082B               	movf	??_Log_Message^(0+128),w
  6389     1175  0086               	movwf	6
  6390     1176  0187               	clrf	7
  6391     1177  0801               	movf	1,w
  6392     1178  3192  22B0  3191   	fcall	_EUSART_Write
  6393                           
  6394                           ;log.c: 28:     }
  6395     117B  3001               	movlw	1
  6396     117C  00AB               	movwf	??_Log_Message^(0+128)
  6397     117D  082B               	movf	??_Log_Message^(0+128),w
  6398     117E  07AD               	addwf	Log_Message@i^(0+128),f
  6399     117F  2967               	goto	l5761
  6400     1180                     __end_of_Log_Message:
  6401                           
  6402                           	psect	text26
  6403     1E99                     __ptext26:	
  6404 ;; *************** function _EUSART_is_tx_ready *****************
  6405 ;; Defined at:
  6406 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;		None
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;		None
  6411 ;; Return value:  Size  Location     Type
  6412 ;;                  1    wreg      _Bool 
  6413 ;; Registers used:
  6414 ;;		wreg, status,2, status,0
  6415 ;; Tracked objects:
  6416 ;;		On entry : 1F/1
  6417 ;;		On exit  : 1F/1
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;Total ram usage:        0 bytes
  6425 ;; Hardware stack levels used: 1
  6426 ;; Hardware stack levels required when called: 10
  6427 ;; This function calls:
  6428 ;;		Nothing
  6429 ;; This function is called by:
  6430 ;;		_Log_Message
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434     1E99                     _EUSART_is_tx_ready:	
  6435                           ;psect for function _EUSART_is_tx_ready
  6436                           
  6437                           
  6438                           ;mcc_generated_files/eusart.c: 134:     return (eusartTxBufferRemaining ? 1 : 0);
  6439                           
  6440                           ;incstack = 0
  6441                           ; Regs used in _EUSART_is_tx_ready: [wreg+status,2+status,0]
  6442     1E99  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6443     1E9A  1903               	btfsc	3,2
  6444     1E9B  2E9E               	goto	u4440
  6445     1E9C  3001               	movlw	1
  6446     1E9D  0008               	return
  6447     1E9E                     u4440:
  6448     1E9E  3000               	movlw	0
  6449     1E9F  0008               	return
  6450     1EA0                     __end_of_EUSART_is_tx_ready:
  6451                           
  6452                           	psect	text27
  6453     12B0                     __ptext27:	
  6454 ;; *************** function _EUSART_Write *****************
  6455 ;; Defined at:
  6456 ;;		line 173 in file "mcc_generated_files/eusart.c"
  6457 ;; Parameters:    Size  Location     Type
  6458 ;;  txData          1    wreg     unsigned char 
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;  txData          1    1[BANK1 ] unsigned char 
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  1    wreg      void 
  6463 ;; Registers used:
  6464 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6465 ;; Tracked objects:
  6466 ;;		On entry : 1F/1
  6467 ;;		On exit  : 1F/1
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;Total ram usage:        2 bytes
  6475 ;; Hardware stack levels used: 1
  6476 ;; Hardware stack levels required when called: 10
  6477 ;; This function calls:
  6478 ;;		Nothing
  6479 ;; This function is called by:
  6480 ;;		_Log_Message
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484     12B0                     _EUSART_Write:	
  6485                           ;psect for function _EUSART_Write
  6486                           
  6487                           
  6488                           ;incstack = 0
  6489                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6490                           ;EUSART_Write@txData stored from wreg
  6491     12B0  00A9               	movwf	EUSART_Write@txData^(0+128)
  6492     12B1                     l5227:	
  6493                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  6494                           
  6495                           
  6496                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  6497     12B1  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6498     12B2  1903               	btfsc	3,2
  6499     12B3  2AB1               	goto	l5227
  6500                           
  6501                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  6502     12B4  1A11               	btfsc	17,4	;volatile
  6503     12B5  2ABA               	goto	l261
  6504                           
  6505                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  6506     12B6  0829               	movf	EUSART_Write@txData^(0+128),w
  6507     12B7  0023               	movlb	3	; select bank3
  6508     12B8  009A               	movwf	26	;volatile
  6509                           
  6510                           ;mcc_generated_files/eusart.c: 182:     }
  6511     12B9  2AD0               	goto	l5241
  6512     12BA                     l261:	
  6513                           ;mcc_generated_files/eusart.c: 183:     else
  6514                           
  6515                           
  6516                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  6517     12BA  1211               	bcf	17,4	;volatile
  6518                           
  6519                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  6520     12BB  0022               	movlb	2	; select bank2
  6521     12BC  0867               	movf	_eusartTxHead^(0+256),w
  6522     12BD  3EB8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  6523     12BE  0086               	movwf	6
  6524     12BF  3001               	movlw	1	; select bank3/4
  6525     12C0  0087               	movwf	7
  6526     12C1  0021               	movlb	1	; select bank1
  6527     12C2  0829               	movf	EUSART_Write@txData^(0+128),w
  6528     12C3  0081               	movwf	1
  6529     12C4  3001               	movlw	1
  6530     12C5  00A8               	movwf	??_EUSART_Write^(0+128)
  6531     12C6  0828               	movf	??_EUSART_Write^(0+128),w
  6532     12C7  0022               	movlb	2	; select bank2
  6533     12C8  07E7               	addwf	_eusartTxHead^(0+256),f	;volatile
  6534                           
  6535                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6536     12C9  3008               	movlw	8
  6537     12CA  0267               	subwf	_eusartTxHead^(0+256),w
  6538     12CB  1803               	btfsc	3,0
  6539                           
  6540                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  6541     12CC  01E7               	clrf	_eusartTxHead^(0+256)	;volatile
  6542                           
  6543                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  6544     12CD  3001               	movlw	1
  6545     12CE  0021               	movlb	1	; select bank1
  6546     12CF  02EF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  6547     12D0                     l5241:
  6548                           
  6549                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  6550     12D0  0021               	movlb	1	; select bank1
  6551     12D1  1611               	bsf	17,4	;volatile
  6552     12D2  0008               	return
  6553     12D3                     __end_of_EUSART_Write:
  6554                           
  6555                           	psect	text28
  6556     02F2                     __ptext28:	
  6557 ;; *************** function _APP_KeyboardTasks *****************
  6558 ;; Defined at:
  6559 ;;		line 336 in file "app_device_keyboard.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  6562 ;;		 -> main@scanCode(3), NULL(0), 
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;  scanCode        1   43[BANK1 ] PTR const struct PS2Scan
  6565 ;;		 -> main@scanCode(3), NULL(0), 
  6566 ;;  TimeDeltaMil    2   45[BANK1 ] int 
  6567 ;;  i               1   47[BANK1 ] unsigned char 
  6568 ;;  needToSendNe    1   44[BANK1 ] _Bool 
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  1    wreg      void 
  6571 ;; Registers used:
  6572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6573 ;; Tracked objects:
  6574 ;;		On entry : 1F/1
  6575 ;;		On exit  : 2/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;Total ram usage:        7 bytes
  6583 ;; Hardware stack levels used: 1
  6584 ;; Hardware stack levels required when called: 13
  6585 ;; This function calls:
  6586 ;;		_APP_KeyboardProcessOutputReport
  6587 ;;		_APP_KeyboardUpdateState
  6588 ;;		_GenericQueue_CopyToArray
  6589 ;;		_USBTransferOnePacket
  6590 ;;		_memset
  6591 ;; This function is called by:
  6592 ;;		_main
  6593 ;; This function uses a non-reentrant model
  6594 ;;
  6595                           
  6596     02F2                     _APP_KeyboardTasks:	
  6597                           ;psect for function _APP_KeyboardTasks
  6598                           
  6599                           
  6600                           ;incstack = 0
  6601                           ; Regs used in _APP_KeyboardTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6602                           ;APP_KeyboardTasks@scanCode stored from wreg
  6603     02F2  00D3               	movwf	APP_KeyboardTasks@scanCode^(0+128)
  6604                           
  6605                           ;app_device_keyboard.c: 337:     signed int TimeDeltaMilliseconds;;app_device_keyboard.c
      +                          : 338:     unsigned char i;;app_device_keyboard.c: 339:     _Bool needToSendNewReportPac
      +                          ket;;app_device_keyboard.c: 342:     APP_KeyboardUpdateState(scanCode);
  6606     02F3  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  6607     02F4  3180  2087  3182   	fcall	_APP_KeyboardUpdateState
  6608                           
  6609                           ;app_device_keyboard.c: 347:     if (USBDeviceState < CONFIGURED_STATE) {
  6610     02F7  3020               	movlw	32
  6611     02F8  0020               	movlb	0	; select bank0
  6612     02F9  026C               	subwf	_USBDeviceState,w
  6613     02FA  1C03               	btfss	3,0
  6614     02FB  0008               	return
  6615                           
  6616                           ;app_device_keyboard.c: 355:     if (UCONbits.SUSPND == 1) {
  6617                           
  6618                           ;app_device_keyboard.c: 349:     }
  6619     02FC  003D               	movlb	29	; select bank29
  6620     02FD  188E               	btfsc	14,1	;volatile
  6621     02FE  0008               	return
  6622     02FF                     l868:	
  6623                           ;app_device_keyboard.c: 371:     }
  6624                           
  6625                           
  6626                           ;app_device_keyboard.c: 369:     while (LocalSOFCount != SOFCounter) {
  6627     02FF  0022               	movlb	2	; select bank2
  6628     0300  083B               	movf	(_SOFCounter+1)^(0+256),w	;volatile
  6629     0301  0637               	xorwf	(_LocalSOFCount+1)^(0+256),w
  6630     0302  1D03               	skipz
  6631     0303  2B06               	goto	u6125
  6632     0304  083A               	movf	_SOFCounter^(0+256),w	;volatile
  6633     0305  0636               	xorwf	_LocalSOFCount^(0+256),w
  6634     0306                     u6125:
  6635     0306  1903               	btfsc	3,2
  6636     0307  2B0D               	goto	l6275
  6637                           
  6638                           ;app_device_keyboard.c: 370:         LocalSOFCount = SOFCounter;
  6639     0308  083B               	movf	(_SOFCounter+1)^(0+256),w	;volatile
  6640     0309  00B7               	movwf	(_LocalSOFCount+1)^(0+256)
  6641     030A  083A               	movf	_SOFCounter^(0+256),w	;volatile
  6642     030B  00B6               	movwf	_LocalSOFCount^(0+256)
  6643     030C  2AFF               	goto	l868
  6644     030D                     l6275:
  6645                           
  6646                           ;app_device_keyboard.c: 375:     TimeDeltaMilliseconds = LocalSOFCount - OldSOFCount;
  6647     030D  0834               	movf	_OldSOFCount^(0+256),w
  6648     030E  0236               	subwf	_LocalSOFCount^(0+256),w
  6649     030F  0021               	movlb	1	; select bank1
  6650     0310  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  6651     0311  0022               	movlb	2	; select bank2
  6652     0312  0835               	movf	(_OldSOFCount+1)^(0+256),w
  6653     0313  3B37               	subwfb	(_LocalSOFCount+1)^(0+256),w
  6654     0314  0021               	movlb	1	; select bank1
  6655     0315  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  6656                           
  6657                           ;app_device_keyboard.c: 377:     if (TimeDeltaMilliseconds < 0) {
  6658     0316  1FD6               	btfss	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),7
  6659     0317  2B28               	goto	l6281
  6660                           
  6661                           ;app_device_keyboard.c: 378:         TimeDeltaMilliseconds = (32767 - OldSOFCount) + Loc
      +                          alSOFCount;
  6662     0318  0022               	movlb	2	; select bank2
  6663     0319  0834               	movf	_OldSOFCount^(0+256),w
  6664     031A  0236               	subwf	_LocalSOFCount^(0+256),w
  6665     031B  0021               	movlb	1	; select bank1
  6666     031C  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6667     031D  0022               	movlb	2	; select bank2
  6668     031E  0835               	movf	(_OldSOFCount+1)^(0+256),w
  6669     031F  3B37               	subwfb	(_LocalSOFCount+1)^(0+256),w
  6670     0320  0021               	movlb	1	; select bank1
  6671     0321  00D2               	movwf	(??_APP_KeyboardTasks+1)^(0+128)
  6672     0322  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6673     0323  3EFF               	addlw	255
  6674     0324  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  6675     0325  307F               	movlw	127
  6676     0326  3D52               	addwfc	(??_APP_KeyboardTasks+1)^(0+128),w
  6677     0327  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  6678     0328                     l6281:
  6679                           
  6680                           ;app_device_keyboard.c: 385:     if (TimeDeltaMilliseconds > 5000) {
  6681     0328  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  6682     0329  3A80               	xorlw	128
  6683     032A  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6684     032B  3093               	movlw	147
  6685     032C  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  6686     032D  1D03               	skipz
  6687     032E  2B31               	goto	u6145
  6688     032F  3089               	movlw	137
  6689     0330  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  6690     0331                     u6145:
  6691     0331  1C03               	skipc
  6692     0332  2B3A               	goto	l6285
  6693                           
  6694                           ;app_device_keyboard.c: 386:         OldSOFCount = LocalSOFCount - 5000;
  6695     0333  0022               	movlb	2	; select bank2
  6696     0334  0836               	movf	_LocalSOFCount^(0+256),w
  6697     0335  3E78               	addlw	120
  6698     0336  00B4               	movwf	_OldSOFCount^(0+256)
  6699     0337  30EC               	movlw	236
  6700     0338  3D37               	addwfc	(_LocalSOFCount+1)^(0+256),w
  6701     0339  00B5               	movwf	(_OldSOFCount+1)^(0+256)
  6702     033A                     l6285:
  6703                           
  6704                           ;app_device_keyboard.c: 392:     if (((keyboard.lastINTransmission != 0x0000) && ((*(vol
      +                          atile uint8_t*)keyboard.lastINTransmission & 0x80) != 0x00)) == 0) {
  6705     033A  302C               	movlw	44
  6706     033B  0086               	movwf	6
  6707     033C  3023               	movlw	35
  6708     033D  0087               	movwf	7
  6709     033E  0016               	moviw fsr1++
  6710     033F  0401               	iorwf	1,w
  6711     0340  1903               	btfsc	3,2
  6712     0341  2B51               	goto	l6289
  6713     0342  302C               	movlw	44
  6714     0343  0086               	movwf	6
  6715     0344  3023               	movlw	35
  6716     0345  0087               	movwf	7
  6717     0346  3F40               	moviw [0]fsr1
  6718     0347  0021               	movlb	1	; select bank1
  6719     0348  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6720     0349  3F41               	moviw [1]fsr1
  6721     034A  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  6722     034B  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6723     034C  0086               	movwf	6
  6724     034D  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  6725     034E  0087               	movwf	7
  6726     034F  1B81               	btfsc	1,7
  6727     0350  2BCA               	goto	l6323
  6728     0351                     l6289:
  6729                           
  6730                           ;app_device_keyboard.c: 394:         memset(&inputReport, 0, sizeof (inputReport));
  6731     0351  3000               	movlw	0
  6732     0352  0021               	movlb	1	; select bank1
  6733     0353  00A8               	movwf	memset@c^(0+128)
  6734     0354  00A9               	movwf	(memset@c+1)^(0+128)
  6735     0355  3008               	movlw	8
  6736     0356  00AA               	movwf	memset@n^(0+128)
  6737     0357  3000               	movlw	0
  6738     0358  00AB               	movwf	(memset@n^(0+128)+1)
  6739     0359  30A0               	movlw	160
  6740     035A  3190  209F  3182   	fcall	_memset
  6741                           
  6742                           ;app_device_keyboard.c: 396:         GenericQueue_CopyToArray(&keyboard.keys, inputRepor
      +                          t.keys);
  6743     035D  3030               	movlw	48
  6744     035E  00C0               	movwf	GenericQueue_CopyToArray@q^(0+128)
  6745     035F  3023               	movlw	35
  6746     0360  00C1               	movwf	(GenericQueue_CopyToArray@q^(0+128)+1)
  6747     0361  30A2               	movlw	162
  6748     0362  00C2               	movwf	GenericQueue_CopyToArray@array^(0+128)
  6749     0363  3196  2668  3182   	fcall	_GenericQueue_CopyToArray
  6750                           
  6751                           ;app_device_keyboard.c: 397:         inputReport.modifiers.value = keyboard.modifiers.va
      +                          lue;
  6752     0366  308F               	movlw	143
  6753     0367  0086               	movwf	6
  6754     0368  3023               	movlw	35
  6755     0369  0087               	movwf	7
  6756     036A  0801               	movf	1,w
  6757     036B  00A0               	movwf	32
  6758                           
  6759                           ;app_device_keyboard.c: 400:         needToSendNewReportPacket = 0;
  6760     036C  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6761                           
  6762                           ;app_device_keyboard.c: 401:         for (i = 0; i < sizeof (inputReport); i++) {
  6763     036D  01D7               	clrf	APP_KeyboardTasks@i^(0+128)
  6764     036E                     l6301:
  6765                           
  6766                           ;app_device_keyboard.c: 402:             if (*((uint8_t*) & oldInputReport + i) != *((ui
      +                          nt8_t*) & inputReport + i)) {
  6767     036E  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  6768     036F  3EA0               	addlw	160
  6769     0370  0086               	movwf	6
  6770     0371  0187               	clrf	7
  6771     0372  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  6772     0373  3EA0               	addlw	(low (_oldInputReport| (0+256)))& (0+255)
  6773     0374  0084               	movwf	4
  6774     0375  3001               	movlw	1	; select bank3/4
  6775     0376  0085               	movwf	5
  6776     0377  0800               	movf	0,w
  6777     0378  0601               	xorwf	1,w
  6778     0379  1903               	skipnz
  6779     037A  2B7E               	goto	l6305
  6780                           
  6781                           ;app_device_keyboard.c: 403:                 needToSendNewReportPacket = 1;
  6782     037B  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6783     037C  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  6784                           
  6785                           ;app_device_keyboard.c: 404:                 break;
  6786     037D  2B86               	goto	l6309
  6787     037E                     l6305:
  6788                           
  6789                           ;app_device_keyboard.c: 406:         }
  6790     037E  3001               	movlw	1
  6791     037F  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6792     0380  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6793     0381  07D7               	addwf	APP_KeyboardTasks@i^(0+128),f
  6794     0382  3008               	movlw	8
  6795     0383  0257               	subwf	APP_KeyboardTasks@i^(0+128),w
  6796     0384  1C03               	skipc
  6797     0385  2B6E               	goto	l6301
  6798     0386                     l6309:
  6799                           
  6800                           ;app_device_keyboard.c: 411:         if (keyboardIdleRate != 0) {
  6801     0386  0022               	movlb	2	; select bank2
  6802     0387  0838               	movf	_keyboardIdleRate^(0+256),w
  6803     0388  0439               	iorwf	(_keyboardIdleRate+1)^(0+256),w
  6804     0389  1903               	btfsc	3,2
  6805     038A  2B9F               	goto	l6315
  6806                           
  6807                           ;app_device_keyboard.c: 413:             if (TimeDeltaMilliseconds >= keyboardIdleRate) 
      +                          {
  6808     038B  0021               	movlb	1	; select bank1
  6809     038C  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  6810     038D  3A80               	xorlw	128
  6811     038E  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6812     038F  0022               	movlb	2	; select bank2
  6813     0390  0839               	movf	(_keyboardIdleRate+1)^(0+256),w
  6814     0391  3A80               	xorlw	128
  6815     0392  0021               	movlb	1	; select bank1
  6816     0393  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  6817     0394  1D03               	skipz
  6818     0395  2B9A               	goto	u6205
  6819     0396  0022               	movlb	2	; select bank2
  6820     0397  0838               	movf	_keyboardIdleRate^(0+256),w
  6821     0398  0021               	movlb	1	; select bank1
  6822     0399  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  6823     039A                     u6205:
  6824     039A  1C03               	skipc
  6825     039B  2B9F               	goto	l6315
  6826                           
  6827                           ;app_device_keyboard.c: 414:                 needToSendNewReportPacket = 1;
  6828     039C  0021               	movlb	1	; select bank1
  6829     039D  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6830     039E  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  6831     039F                     l6315:
  6832                           
  6833                           ;app_device_keyboard.c: 420:         if (needToSendNewReportPacket == 1) {
  6834     039F  0021               	movlb	1	; select bank1
  6835     03A0  0354               	decf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),w
  6836     03A1  1D03               	btfss	3,2
  6837     03A2  2BCA               	goto	l6323
  6838                           
  6839                           ;app_device_keyboard.c: 424:             oldInputReport = inputReport;
  6840     03A3  30A0               	movlw	160
  6841     03A4  0086               	movwf	6
  6842     03A5  3000               	movlw	0
  6843     03A6  0087               	movwf	7
  6844     03A7  30A0               	movlw	low _oldInputReport
  6845     03A8  0084               	movwf	4
  6846     03A9  3001               	movlw	high _oldInputReport
  6847     03AA  0085               	movwf	5
  6848     03AB  3008               	movlw	8
  6849     03AC  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6850     03AD                     u6220:
  6851     03AD  0016               	moviw fsr1++
  6852     03AE  001A               	movwi fsr0++
  6853     03AF  0BD1               	decfsz	??_APP_KeyboardTasks^(0+128),f
  6854     03B0  2BAD               	goto	u6220
  6855                           
  6856                           ;app_device_keyboard.c: 427:             keyboard.lastINTransmission = USBTransferOnePac
      +                          ket(1,1,(uint8_t*) & inputReport,sizeof (inputReport));
  6857     03B1  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  6858     03B2  0AA8               	incf	USBTransferOnePacket@dir^(0+128),f
  6859     03B3  30A0               	movlw	160
  6860     03B4  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  6861     03B5  3000               	movlw	0
  6862     03B6  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  6863     03B7  3008               	movlw	8
  6864     03B8  00AB               	movwf	USBTransferOnePacket@len^(0+128)
  6865     03B9  3001               	movlw	1
  6866     03BA  318B  23E1  3182   	fcall	_USBTransferOnePacket
  6867     03BD  302C               	movlw	44
  6868     03BE  0086               	movwf	6
  6869     03BF  3023               	movlw	35
  6870     03C0  0087               	movwf	7
  6871     03C1  0828               	movf	?_USBTransferOnePacket^(0+128),w
  6872     03C2  3FC0               	movwi [0]fsr1
  6873     03C3  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  6874     03C4  3FC1               	movwi [1]fsr1
  6875                           
  6876                           ;app_device_keyboard.c: 428:             OldSOFCount = LocalSOFCount;
  6877     03C5  0022               	movlb	2	; select bank2
  6878     03C6  0837               	movf	(_LocalSOFCount+1)^(0+256),w
  6879     03C7  00B5               	movwf	(_OldSOFCount+1)^(0+256)
  6880     03C8  0836               	movf	_LocalSOFCount^(0+256),w
  6881     03C9  00B4               	movwf	_OldSOFCount^(0+256)
  6882     03CA                     l6323:
  6883                           
  6884                           ;app_device_keyboard.c: 440:     if (((keyboard.lastOUTTransmission != 0x0000) && ((*(vo
      +                          latile uint8_t*)keyboard.lastOUTTransmission & 0x80) != 0x00)) == 0) {
  6885     03CA  302C               	movlw	44
  6886     03CB  0086               	movwf	6
  6887     03CC  3023               	movlw	35
  6888     03CD  0087               	movwf	7
  6889     03CE  3142               	addfsr 1,2
  6890     03CF  0016               	moviw fsr1++
  6891     03D0  0401               	iorwf	1,w
  6892     03D1  1903               	btfsc	3,2
  6893     03D2  2BE3               	goto	l6327
  6894     03D3  302C               	movlw	44
  6895     03D4  0086               	movwf	6
  6896     03D5  3023               	movlw	35
  6897     03D6  0087               	movwf	7
  6898     03D7  3142               	addfsr 1,2
  6899     03D8  3F40               	moviw [0]fsr1
  6900     03D9  0021               	movlb	1	; select bank1
  6901     03DA  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6902     03DB  3F41               	moviw [1]fsr1
  6903     03DC  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  6904     03DD  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6905     03DE  0086               	movwf	6
  6906     03DF  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  6907     03E0  0087               	movwf	7
  6908     03E1  1B81               	btfsc	1,7
  6909     03E2  0008               	return
  6910     03E3                     l6327:
  6911                           
  6912                           ;app_device_keyboard.c: 441:         APP_KeyboardProcessOutputReport();
  6913     03E3  319E  26FD  3182   	fcall	_APP_KeyboardProcessOutputReport
  6914                           
  6915                           ;app_device_keyboard.c: 442:         keyboard.lastOUTTransmission = USBTransferOnePacket
      +                          (1,0,(uint8_t*) & outputReport,sizeof (outputReport));
  6916     03E6  0021               	movlb	1	; select bank1
  6917     03E7  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  6918     03E8  3020               	movlw	32
  6919     03E9  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  6920     03EA  3001               	movlw	1
  6921     03EB  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  6922     03EC  01AB               	clrf	USBTransferOnePacket@len^(0+128)
  6923     03ED  0AAB               	incf	USBTransferOnePacket@len^(0+128),f
  6924     03EE  3001               	movlw	1
  6925     03EF  318B  23E1         	fcall	_USBTransferOnePacket
  6926     03F1  302C               	movlw	44
  6927     03F2  0086               	movwf	6
  6928     03F3  3023               	movlw	35
  6929     03F4  0087               	movwf	7
  6930     03F5  3142               	addfsr 1,2
  6931     03F6  0828               	movf	?_USBTransferOnePacket^(0+128),w
  6932     03F7  3FC0               	movwi [0]fsr1
  6933     03F8  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  6934     03F9  3FC1               	movwi [1]fsr1
  6935     03FA  0008               	return
  6936     03FB                     __end_of_APP_KeyboardTasks:
  6937                           
  6938                           	psect	text29
  6939     109F                     __ptext29:	
  6940 ;; *************** function _memset *****************
  6941 ;; Defined at:
  6942 ;;		line 3 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memset.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  dest            1    wreg     PTR void 
  6945 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  6946 ;;  c               2    0[BANK1 ] int 
  6947 ;;  n               2    2[BANK1 ] unsigned int 
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;  dest            1    6[BANK1 ] PTR void 
  6950 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  6951 ;;  p               1    5[BANK1 ] PTR unsigned char 
  6952 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  6953 ;; Return value:  Size  Location     Type
  6954 ;;                  1    wreg      PTR void 
  6955 ;; Registers used:
  6956 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6957 ;; Tracked objects:
  6958 ;;		On entry : 1F/1
  6959 ;;		On exit  : 1F/1
  6960 ;;		Unchanged: 0/0
  6961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6962 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6963 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6964 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6965 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6966 ;;Total ram usage:        7 bytes
  6967 ;; Hardware stack levels used: 1
  6968 ;; Hardware stack levels required when called: 10
  6969 ;; This function calls:
  6970 ;;		Nothing
  6971 ;; This function is called by:
  6972 ;;		_APP_KeyboardTasks
  6973 ;; This function uses a non-reentrant model
  6974 ;;
  6975                           
  6976     109F                     _memset:	
  6977                           ;psect for function _memset
  6978                           
  6979                           
  6980                           ;incstack = 0
  6981                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6982                           ;memset@dest stored from wreg
  6983     109F  00AE               	movwf	memset@dest^(0+128)
  6984     10A0  082E               	movf	memset@dest^(0+128),w
  6985     10A1  00AD               	movwf	memset@p^(0+128)
  6986     10A2                     l5349:
  6987     10A2  3001               	movlw	1
  6988     10A3  02AA               	subwf	memset@n^(0+128),f
  6989     10A4  3000               	movlw	0
  6990     10A5  3BAB               	subwfb	(memset@n+1)^(0+128),f
  6991     10A6  0A2A               	incf	memset@n^(0+128),w
  6992     10A7  1903               	btfsc	3,2
  6993     10A8  0A2B               	incf	(memset@n+1)^(0+128),w
  6994     10A9  1903               	btfsc	3,2
  6995     10AA  0008               	return
  6996     10AB  082D               	movf	memset@p^(0+128),w
  6997     10AC  0086               	movwf	6
  6998     10AD  0187               	clrf	7
  6999     10AE  0828               	movf	memset@c^(0+128),w
  7000     10AF  0081               	movwf	1
  7001     10B0  3001               	movlw	1
  7002     10B1  00AC               	movwf	??_memset^(0+128)
  7003     10B2  082C               	movf	??_memset^(0+128),w
  7004     10B3  07AD               	addwf	memset@p^(0+128),f
  7005     10B4  28A2               	goto	l5349
  7006     10B5                     __end_of_memset:
  7007                           
  7008                           	psect	text30
  7009     0BE1                     __ptext30:	
  7010 ;; *************** function _USBTransferOnePacket *****************
  7011 ;; Defined at:
  7012 ;;		line 999 in file "usb/usb_device.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;  ep              1    wreg     unsigned char 
  7015 ;;  dir             1    0[BANK1 ] unsigned char 
  7016 ;;  data            2    1[BANK1 ] PTR unsigned char 
  7017 ;;		 -> inputReport(8), outputReport(1), 
  7018 ;;  len             1    3[BANK1 ] unsigned char 
  7019 ;; Auto vars:     Size  Location     Type
  7020 ;;  ep              1    8[BANK1 ] unsigned char 
  7021 ;;  handle          2    9[BANK1 ] PTR volatile struct __BD
  7022 ;;		 -> RAM(4096), NULL(0), BDT(32), 
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  2    0[BANK1 ] PTR void 
  7025 ;; Registers used:
  7026 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7027 ;; Tracked objects:
  7028 ;;		On entry : 1F/1
  7029 ;;		On exit  : 1F/1
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7032 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;Total ram usage:       11 bytes
  7037 ;; Hardware stack levels used: 1
  7038 ;; Hardware stack levels required when called: 10
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_APP_KeyboardTasks
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046     0BE1                     _USBTransferOnePacket:	
  7047                           ;psect for function _USBTransferOnePacket
  7048                           
  7049                           
  7050                           ;incstack = 0
  7051                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  7052                           ;USBTransferOnePacket@ep stored from wreg
  7053     0BE1  00B0               	movwf	USBTransferOnePacket@ep^(0+128)
  7054                           
  7055                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
  7056     0BE2  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  7057     0BE3  1903               	btfsc	3,2
  7058     0BE4  2BED               	goto	l5319
  7059                           
  7060                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
  7061     0BE5  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7062     0BE6  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7063     0BE7  0086               	movwf	6
  7064     0BE8  0187               	clrf	7
  7065     0BE9  3F40               	moviw [0]fsr1
  7066     0BEA  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  7067     0BEB  3F41               	moviw [1]fsr1
  7068     0BEC  2BF5               	goto	L3
  7069     0BED                     l5319:	
  7070                           ;usb/usb_device.c: 1008:     }
  7071                           
  7072                           
  7073                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
  7074     0BED  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7075     0BEE  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7076     0BEF  0086               	movwf	6
  7077     0BF0  3001               	movlw	1	; select bank2/3
  7078     0BF1  0087               	movwf	7
  7079     0BF2  3F40               	moviw [0]fsr1
  7080     0BF3  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  7081     0BF4  3F41               	moviw [1]fsr1
  7082     0BF5                     L3:
  7083     0BF5  00B2               	movwf	(USBTransferOnePacket@handle+1)^(0+128)
  7084                           
  7085                           ;usb/usb_device.c: 1017:     if(handle == 0)
  7086     0BF6  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7087     0BF7  0432               	iorwf	(USBTransferOnePacket@handle+1)^(0+128),w
  7088     0BF8  1D03               	btfss	3,2
  7089     0BF9  2BFD               	goto	l5327
  7090                           
  7091                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
  7092     0BFA  01A8               	clrf	?_USBTransferOnePacket^(0+128)
  7093     0BFB  01A9               	clrf	(?_USBTransferOnePacket+1)^(0+128)
  7094     0BFC  0008               	return
  7095     0BFD                     l5327:
  7096                           
  7097                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
  7098     0BFD  30FF               	movlw	255
  7099     0BFE  0529               	andwf	USBTransferOnePacket@data^(0+128),w
  7100     0BFF  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7101     0C00  307F               	movlw	127
  7102     0C01  052A               	andwf	(USBTransferOnePacket@data+1)^(0+128),w
  7103     0C02  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  7104     0C03  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7105     0C04  0086               	movwf	6
  7106     0C05  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7107     0C06  0087               	movwf	7
  7108     0C07  3142               	addfsr 1,2
  7109     0C08  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7110     0C09  3FC0               	movwi [0]fsr1
  7111     0C0A  082D               	movf	(??_USBTransferOnePacket^(0+128)+1),w
  7112     0C0B  3FC1               	movwi [1]fsr1
  7113                           
  7114                           ;usb/usb_device.c: 1034:     handle->CNT = len;
  7115     0C0C  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7116     0C0D  3E01               	addlw	1
  7117     0C0E  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7118     0C0F  3000               	movlw	0
  7119     0C10  3D32               	addwfc	(USBTransferOnePacket@handle+1)^(0+128),w
  7120     0C11  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  7121     0C12  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7122     0C13  0086               	movwf	6
  7123     0C14  082D               	movf	(??_USBTransferOnePacket+1)^(0+128),w
  7124     0C15  0087               	movwf	7
  7125     0C16  082B               	movf	USBTransferOnePacket@len^(0+128),w
  7126     0C17  0081               	movwf	1
  7127                           
  7128                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
  7129     0C18  3040               	movlw	64
  7130     0C19  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7131     0C1A  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7132     0C1B  0086               	movwf	6
  7133     0C1C  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7134     0C1D  0087               	movwf	7
  7135     0C1E  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7136     0C1F  0581               	andwf	1,f
  7137                           
  7138                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
  7139     0C20  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7140     0C21  0086               	movwf	6
  7141     0C22  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7142     0C23  0087               	movwf	7
  7143     0C24  1581               	bsf	1,3
  7144                           
  7145                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
  7146     0C25  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7147     0C26  0086               	movwf	6
  7148     0C27  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7149     0C28  0087               	movwf	7
  7150     0C29  1781               	bsf	1,7
  7151                           
  7152                           ;usb/usb_device.c: 1040:     if(dir != 0)
  7153     0C2A  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  7154     0C2B  1903               	btfsc	3,2
  7155     0C2C  2C44               	goto	l5337
  7156                           
  7157                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
  7158     0C2D  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7159     0C2E  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7160     0C2F  0086               	movwf	6
  7161     0C30  0187               	clrf	7
  7162     0C31  3F40               	moviw [0]fsr1
  7163     0C32  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7164     0C33  3F41               	moviw [1]fsr1
  7165     0C34  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  7166     0C35  3004               	movlw	4
  7167     0C36  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  7168     0C37  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  7169     0C38  3000               	movlw	0
  7170     0C39  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  7171     0C3A  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  7172     0C3B  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7173     0C3C  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7174     0C3D  0086               	movwf	6
  7175     0C3E  0187               	clrf	7
  7176     0C3F  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  7177     0C40  3FC0               	movwi [0]fsr1
  7178     0C41  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  7179     0C42  3FC1               	movwi [1]fsr1
  7180                           
  7181                           ;usb/usb_device.c: 1044:     }
  7182     0C43  2C5C               	goto	l5339
  7183     0C44                     l5337:
  7184                           
  7185                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
  7186     0C44  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7187     0C45  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7188     0C46  0086               	movwf	6
  7189     0C47  3001               	movlw	1	; select bank2/3
  7190     0C48  0087               	movwf	7
  7191     0C49  3F40               	moviw [0]fsr1
  7192     0C4A  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7193     0C4B  3F41               	moviw [1]fsr1
  7194     0C4C  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  7195     0C4D  3004               	movlw	4
  7196     0C4E  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  7197     0C4F  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  7198     0C50  3000               	movlw	0
  7199     0C51  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  7200     0C52  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  7201     0C53  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7202     0C54  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7203     0C55  0086               	movwf	6
  7204     0C56  3001               	movlw	1	; select bank2/3
  7205     0C57  0087               	movwf	7
  7206     0C58  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  7207     0C59  3FC0               	movwi [0]fsr1
  7208     0C5A  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  7209     0C5B  3FC1               	movwi [1]fsr1
  7210     0C5C                     l5339:
  7211                           
  7212                           ;usb/usb_device.c: 1050:     return (void*)handle;
  7213     0C5C  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7214     0C5D  00A9               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  7215     0C5E  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7216     0C5F  00A8               	movwf	?_USBTransferOnePacket^(0+128)
  7217     0C60  0008               	return
  7218     0C61                     __end_of_USBTransferOnePacket:
  7219                           
  7220                           	psect	text31
  7221     1668                     __ptext31:	
  7222 ;; *************** function _GenericQueue_CopyToArray *****************
  7223 ;; Defined at:
  7224 ;;		line 63 in file "generic_queue.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;  q               2   24[BANK1 ] PTR struct .
  7227 ;;		 -> keyboard(101), 
  7228 ;;  array           1   26[BANK1 ] PTR void 
  7229 ;;		 -> inputReport(8), 
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;  count           1   32[BANK1 ] unsigned char 
  7232 ;;  index           1   31[BANK1 ] unsigned char 
  7233 ;; Return value:  Size  Location     Type
  7234 ;;                  1    wreg      void 
  7235 ;; Registers used:
  7236 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7237 ;; Tracked objects:
  7238 ;;		On entry : 1F/1
  7239 ;;		On exit  : 1F/1
  7240 ;;		Unchanged: 0/0
  7241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7242 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;Total ram usage:        9 bytes
  7247 ;; Hardware stack levels used: 1
  7248 ;; Hardware stack levels required when called: 11
  7249 ;; This function calls:
  7250 ;;		___awmod
  7251 ;;		___bmul
  7252 ;;		___wmul
  7253 ;;		_memcpy
  7254 ;; This function is called by:
  7255 ;;		_APP_KeyboardTasks
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259     1668                     _GenericQueue_CopyToArray:	
  7260                           ;psect for function _GenericQueue_CopyToArray
  7261                           
  7262                           
  7263                           ;generic_queue.c: 64:     uint8_t index = q->front;
  7264                           
  7265                           ;incstack = 0
  7266                           ; Regs used in _GenericQueue_CopyToArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7267     1668  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7268     1669  3E5C               	addlw	92
  7269     166A  0086               	movwf	6
  7270     166B  3000               	movlw	0
  7271     166C  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7272     166D  0087               	movwf	7
  7273     166E  0801               	movf	1,w
  7274     166F  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  7275                           
  7276                           ;generic_queue.c: 65:     uint8_t count = 0;
  7277     1670  01C8               	clrf	GenericQueue_CopyToArray@count^(0+128)
  7278     1671                     l1132:	
  7279                           ;generic_queue.c: 72:     }
  7280                           
  7281                           ;generic_queue.c: 66:     while (count < q->size) {
  7282                           
  7283                           
  7284                           ;generic_queue.c: 66:     while (count < q->size) {
  7285     1671  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7286     1672  3E5E               	addlw	94
  7287     1673  0086               	movwf	6
  7288     1674  3000               	movlw	0
  7289     1675  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7290     1676  0087               	movwf	7
  7291     1677  0801               	movf	1,w
  7292     1678  0248               	subwf	GenericQueue_CopyToArray@count^(0+128),w
  7293     1679  1803               	btfsc	3,0
  7294     167A  0008               	return
  7295                           
  7296                           ;generic_queue.c: 67:         memcpy((char*)array + (count * q->element_size),
  7297     167B  0848               	movf	GenericQueue_CopyToArray@count^(0+128),w
  7298     167C  00A8               	movwf	___bmul@multiplicand^(0+128)
  7299     167D  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7300     167E  3E5A               	addlw	90
  7301     167F  0086               	movwf	6
  7302     1680  3000               	movlw	0
  7303     1681  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7304     1682  0087               	movwf	7
  7305     1683  0801               	movf	1,w
  7306     1684  319F  277D  3196   	fcall	___bmul
  7307     1687  0742               	addwf	GenericQueue_CopyToArray@array^(0+128),w
  7308     1688  00B5               	movwf	memcpy@d1^(0+128)
  7309     1689  01B6               	clrf	(memcpy@d1+1)^(0+128)
  7310     168A  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  7311     168B  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  7312     168C  01C4               	clrf	(??_GenericQueue_CopyToArray^(0+128)+1)
  7313     168D  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  7314     168E  00AF               	movwf	___wmul@multiplier^(0+128)
  7315     168F  0844               	movf	(??_GenericQueue_CopyToArray+1)^(0+128),w
  7316     1690  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  7317     1691  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7318     1692  3E5A               	addlw	90
  7319     1693  0086               	movwf	6
  7320     1694  3000               	movlw	0
  7321     1695  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7322     1696  0087               	movwf	7
  7323     1697  3F40               	moviw [0]fsr1
  7324     1698  00B1               	movwf	___wmul@multiplicand^(0+128)
  7325     1699  3F41               	moviw [1]fsr1
  7326     169A  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  7327     169B  3191  214A  3196   	fcall	___wmul
  7328     169E  082F               	movf	?___wmul^(0+128),w
  7329     169F  0740               	addwf	GenericQueue_CopyToArray@q^(0+128),w
  7330     16A0  00C5               	movwf	(??_GenericQueue_CopyToArray+2)^(0+128)
  7331     16A1  0830               	movf	(?___wmul+1)^(0+128),w
  7332     16A2  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7333     16A3  00C6               	movwf	(??_GenericQueue_CopyToArray+3)^(0+128)
  7334     16A4  0845               	movf	(??_GenericQueue_CopyToArray+2)^(0+128),w
  7335     16A5  00B7               	movwf	memcpy@s1^(0+128)
  7336     16A6  0846               	movf	(??_GenericQueue_CopyToArray+3)^(0+128),w
  7337     16A7  00B8               	movwf	(memcpy@s1+1)^(0+128)
  7338     16A8  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7339     16A9  3E5A               	addlw	90
  7340     16AA  0086               	movwf	6
  7341     16AB  3000               	movlw	0
  7342     16AC  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7343     16AD  0087               	movwf	7
  7344     16AE  3F40               	moviw [0]fsr1
  7345     16AF  00B9               	movwf	memcpy@n^(0+128)
  7346     16B0  3F41               	moviw [1]fsr1
  7347     16B1  00BA               	movwf	(memcpy@n+1)^(0+128)
  7348     16B2  3193  231E  3196   	fcall	_memcpy
  7349                           
  7350                           ;generic_queue.c: 70:         index = (index + 1) % 15;
  7351     16B5  300F               	movlw	15
  7352     16B6  00A8               	movwf	___awmod@divisor^(0+128)
  7353     16B7  3000               	movlw	0
  7354     16B8  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  7355     16B9  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  7356     16BA  3E01               	addlw	1
  7357     16BB  00AA               	movwf	___awmod@dividend^(0+128)
  7358     16BC  3000               	movlw	0
  7359     16BD  1803               	skipnc
  7360     16BE  3001               	movlw	1
  7361     16BF  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  7362     16C0  3195  251D  3196   	fcall	___awmod
  7363     16C3  0828               	movf	?___awmod^(0+128),w
  7364     16C4  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  7365                           
  7366                           ;generic_queue.c: 71:         count++;
  7367     16C5  3001               	movlw	1
  7368     16C6  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  7369     16C7  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  7370     16C8  07C8               	addwf	GenericQueue_CopyToArray@count^(0+128),f
  7371     16C9  2E71               	goto	l1132
  7372     16CA                     __end_of_GenericQueue_CopyToArray:
  7373                           
  7374                           	psect	text32
  7375     1F7D                     __ptext32:	
  7376 ;; *************** function ___bmul *****************
  7377 ;; Defined at:
  7378 ;;		line 4 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/Umul8.c"
  7379 ;; Parameters:    Size  Location     Type
  7380 ;;  multiplier      1    wreg     unsigned char 
  7381 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  7382 ;; Auto vars:     Size  Location     Type
  7383 ;;  multiplier      1    3[BANK1 ] unsigned char 
  7384 ;;  product         1    2[BANK1 ] unsigned char 
  7385 ;; Return value:  Size  Location     Type
  7386 ;;                  1    wreg      unsigned char 
  7387 ;; Registers used:
  7388 ;;		wreg, status,2, status,0
  7389 ;; Tracked objects:
  7390 ;;		On entry : 1F/1
  7391 ;;		On exit  : 1F/1
  7392 ;;		Unchanged: 0/0
  7393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7394 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7395 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7396 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7397 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7398 ;;Total ram usage:        4 bytes
  7399 ;; Hardware stack levels used: 1
  7400 ;; Hardware stack levels required when called: 10
  7401 ;; This function calls:
  7402 ;;		Nothing
  7403 ;; This function is called by:
  7404 ;;		_GenericQueue_CopyToArray
  7405 ;;		_Log_UtilityConvertByteToHex
  7406 ;; This function uses a non-reentrant model
  7407 ;;
  7408                           
  7409     1F7D                     ___bmul:	
  7410                           ;psect for function ___bmul
  7411                           
  7412                           
  7413                           ;incstack = 0
  7414                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7415                           ;___bmul@multiplier stored from wreg
  7416     1F7D  00AB               	movwf	___bmul@multiplier^(0+128)
  7417     1F7E  01AA               	clrf	___bmul@product^(0+128)
  7418     1F7F                     l5007:
  7419     1F7F  1C2B               	btfss	___bmul@multiplier^(0+128),0
  7420     1F80  2F85               	goto	l5011
  7421     1F81  0828               	movf	___bmul@multiplicand^(0+128),w
  7422     1F82  00A9               	movwf	??___bmul^(0+128)
  7423     1F83  0829               	movf	??___bmul^(0+128),w
  7424     1F84  07AA               	addwf	___bmul@product^(0+128),f
  7425     1F85                     l5011:
  7426     1F85  1003               	clrc
  7427     1F86  0DA8               	rlf	___bmul@multiplicand^(0+128),f
  7428     1F87  1003               	clrc
  7429     1F88  0CAB               	rrf	___bmul@multiplier^(0+128),f
  7430     1F89  082B               	movf	___bmul@multiplier^(0+128),w
  7431     1F8A  1D03               	btfss	3,2
  7432     1F8B  2F7F               	goto	l5007
  7433     1F8C  082A               	movf	___bmul@product^(0+128),w
  7434     1F8D  0008               	return
  7435     1F8E                     __end_of___bmul:
  7436                           
  7437                           	psect	text33
  7438     0087                     __ptext33:	
  7439 ;; *************** function _APP_KeyboardUpdateState *****************
  7440 ;; Defined at:
  7441 ;;		line 448 in file "app_device_keyboard.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  7444 ;;		 -> main@scanCode(3), NULL(0), 
  7445 ;; Auto vars:     Size  Location     Type
  7446 ;;  scanCode        1   40[BANK1 ] PTR const struct PS2Scan
  7447 ;;		 -> main@scanCode(3), NULL(0), 
  7448 ;;  usbHidCode      1   39[BANK1 ] unsigned char 
  7449 ;;  leds            1   35[BANK1 ] unsigned char 
  7450 ;;  usbHidCode      1   37[BANK1 ] unsigned char 
  7451 ;;  usbHidCode      1   38[BANK1 ] unsigned char 
  7452 ;;  usbHidCode      1   36[BANK1 ] unsigned char 
  7453 ;; Return value:  Size  Location     Type
  7454 ;;                  1    wreg      void 
  7455 ;; Registers used:
  7456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7457 ;; Tracked objects:
  7458 ;;		On entry : 1F/1
  7459 ;;		On exit  : 1C/0
  7460 ;;		Unchanged: 0/0
  7461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7463 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7464 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;Total ram usage:        8 bytes
  7467 ;; Hardware stack levels used: 1
  7468 ;; Hardware stack levels required when called: 12
  7469 ;; This function calls:
  7470 ;;		_GenericQueue_Contains
  7471 ;;		_GenericQueue_Enqueue
  7472 ;;		_GenericQueue_Remove
  7473 ;;		_PS2Keyboard_GetLastCommand
  7474 ;;		_PS2Keyboard_SendCommand
  7475 ;;		_PS2USB_ScanCodeToUSBHID
  7476 ;; This function is called by:
  7477 ;;		_APP_KeyboardTasks
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481     0087                     _APP_KeyboardUpdateState:	
  7482                           ;psect for function _APP_KeyboardUpdateState
  7483                           
  7484                           
  7485                           ;incstack = 0
  7486                           ; Regs used in _APP_KeyboardUpdateState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7487                           ;APP_KeyboardUpdateState@scanCode stored from wreg
  7488     0087  00D0               	movwf	APP_KeyboardUpdateState@scanCode^(0+128)
  7489                           
  7490                           ;app_device_keyboard.c: 449:     if (scanCode != ((void*)0)) {
  7491     0088  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7492     0089  1903               	btfsc	3,2
  7493     008A  0008               	return
  7494                           
  7495                           ;app_device_keyboard.c: 450:         if (scanCode->isExtend) {
  7496     008B  0A50               	incf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7497     008C  0086               	movwf	6
  7498     008D  0187               	clrf	7
  7499     008E  0801               	movf	1,w
  7500     008F  1903               	btfsc	3,2
  7501     0090  28F6               	goto	l6197
  7502                           
  7503                           ;app_device_keyboard.c: 451:             if (scanCode->isBreak) {
  7504     0091  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7505     0092  3E02               	addlw	2
  7506     0093  0086               	movwf	6
  7507     0094  0187               	clrf	7
  7508     0095  0801               	movf	1,w
  7509     0096  1903               	btfsc	3,2
  7510     0097  28C0               	goto	l6185
  7511                           
  7512                           ;app_device_keyboard.c: 452:                 if (scanCode->value == 0X14) {
  7513     0098  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7514     0099  0086               	movwf	6
  7515     009A  0187               	clrf	7
  7516     009B  3014               	movlw	20
  7517     009C  0601               	xorwf	1,w
  7518     009D  1D03               	btfss	3,2
  7519     009E  28A5               	goto	l6179
  7520                           
  7521                           ;app_device_keyboard.c: 453:                     keyboard.modifiers.bits.rightControl = 
      +                          0;
  7522     009F  308F               	movlw	143
  7523     00A0  0086               	movwf	6
  7524     00A1  3023               	movlw	35
  7525     00A2  0087               	movwf	7
  7526     00A3  1201               	bcf	1,4
  7527                           
  7528                           ;app_device_keyboard.c: 454:                 } else if (scanCode->value == 0x11) {
  7529     00A4  0008               	return
  7530     00A5                     l6179:
  7531     00A5  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7532     00A6  0086               	movwf	6
  7533     00A7  0187               	clrf	7
  7534     00A8  3011               	movlw	17
  7535     00A9  0601               	xorwf	1,w
  7536     00AA  1D03               	btfss	3,2
  7537     00AB  28B2               	goto	l6183
  7538                           
  7539                           ;app_device_keyboard.c: 455:                     keyboard.modifiers.bits.rightAlt = 0;
  7540     00AC  308F               	movlw	143
  7541     00AD  0086               	movwf	6
  7542     00AE  3023               	movlw	35
  7543     00AF  0087               	movwf	7
  7544     00B0  1301               	bcf	1,6
  7545                           
  7546                           ;app_device_keyboard.c: 456:                 } else {
  7547     00B1  0008               	return
  7548     00B2                     l6183:
  7549                           
  7550                           ;app_device_keyboard.c: 457:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7551     00B2  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7552     00B3  3192  220F  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7553     00B6  00CC               	movwf	APP_KeyboardUpdateState@usbHidCode^(0+128)
  7554                           
  7555                           ;app_device_keyboard.c: 458:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  7556     00B7  3030               	movlw	48
  7557     00B8  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  7558     00B9  3023               	movlw	35
  7559     00BA  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  7560     00BB  30CC               	movlw	(low (APP_KeyboardUpdateState@usbHidCode| 0))& (0+255)
  7561     00BC  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  7562     00BD  3185  25EF         	fcall	_GenericQueue_Remove
  7563     00BF  0008               	return
  7564     00C0                     l6185:
  7565                           
  7566                           ;app_device_keyboard.c: 461:                 if (scanCode->value == 0X14) {
  7567     00C0  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7568     00C1  0086               	movwf	6
  7569     00C2  0187               	clrf	7
  7570     00C3  3014               	movlw	20
  7571     00C4  0601               	xorwf	1,w
  7572     00C5  1D03               	btfss	3,2
  7573     00C6  28CD               	goto	l6189
  7574                           
  7575                           ;app_device_keyboard.c: 462:                     keyboard.modifiers.bits.rightControl = 
      +                          1;
  7576     00C7  308F               	movlw	143
  7577     00C8  0086               	movwf	6
  7578     00C9  3023               	movlw	35
  7579     00CA  0087               	movwf	7
  7580     00CB  1601               	bsf	1,4
  7581                           
  7582                           ;app_device_keyboard.c: 463:                 } else if (scanCode->value == 0x11) {
  7583     00CC  0008               	return
  7584     00CD                     l6189:
  7585     00CD  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7586     00CE  0086               	movwf	6
  7587     00CF  0187               	clrf	7
  7588     00D0  3011               	movlw	17
  7589     00D1  0601               	xorwf	1,w
  7590     00D2  1D03               	btfss	3,2
  7591     00D3  28DA               	goto	l6193
  7592                           
  7593                           ;app_device_keyboard.c: 464:                     keyboard.modifiers.bits.rightAlt = 1;
  7594     00D4  308F               	movlw	143
  7595     00D5  0086               	movwf	6
  7596     00D6  3023               	movlw	35
  7597     00D7  0087               	movwf	7
  7598     00D8  1701               	bsf	1,6
  7599                           
  7600                           ;app_device_keyboard.c: 465:                 } else {
  7601     00D9  0008               	return
  7602     00DA                     l6193:
  7603                           
  7604                           ;app_device_keyboard.c: 466:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7605     00DA  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7606     00DB  3192  220F  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7607     00DE  00CE               	movwf	APP_KeyboardUpdateState@usbHidCode_2855^(0+128)
  7608                           
  7609                           ;app_device_keyboard.c: 467:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  7610     00DF  3030               	movlw	48
  7611     00E0  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  7612     00E1  3023               	movlw	35
  7613     00E2  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  7614     00E3  30CE               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2855| 0))& (0+255)
  7615     00E4  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  7616     00E5  3196  2606  3180   	fcall	_GenericQueue_Contains
  7617     00E8  3A00               	xorlw	0
  7618     00E9  1D03               	skipz
  7619     00EA  0008               	return
  7620                           
  7621                           ;app_device_keyboard.c: 468:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  7622     00EB  3030               	movlw	48
  7623     00EC  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  7624     00ED  3023               	movlw	35
  7625     00EE  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  7626     00EF  30CE               	movlw	low APP_KeyboardUpdateState@usbHidCode_2855
  7627     00F0  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  7628     00F1  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2855
  7629     00F2  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  7630     00F3  3188  2052         	fcall	_GenericQueue_Enqueue
  7631                           
  7632                           ;app_device_keyboard.c: 472:         } else {
  7633                           
  7634                           ;app_device_keyboard.c: 471:             }
  7635     00F5  0008               	return
  7636     00F6                     l6197:
  7637                           
  7638                           ;app_device_keyboard.c: 473:             if (scanCode->isBreak) {
  7639     00F6  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7640     00F7  3E02               	addlw	2
  7641     00F8  0086               	movwf	6
  7642     00F9  0187               	clrf	7
  7643     00FA  0801               	movf	1,w
  7644     00FB  1903               	btfsc	3,2
  7645     00FC  293F               	goto	l6217
  7646                           
  7647                           ;app_device_keyboard.c: 475:                 if (scanCode->value == 0x12) {
  7648     00FD  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7649     00FE  0086               	movwf	6
  7650     00FF  0187               	clrf	7
  7651     0100  3012               	movlw	18
  7652     0101  0601               	xorwf	1,w
  7653     0102  1D03               	btfss	3,2
  7654     0103  290A               	goto	l6203
  7655                           
  7656                           ;app_device_keyboard.c: 476:                     keyboard.modifiers.bits.leftShift = 0;
  7657     0104  308F               	movlw	143
  7658     0105  0086               	movwf	6
  7659     0106  3023               	movlw	35
  7660     0107  0087               	movwf	7
  7661     0108  1081               	bcf	1,1
  7662                           
  7663                           ;app_device_keyboard.c: 477:                 } else if (scanCode->value == 0X14) {
  7664     0109  0008               	return
  7665     010A                     l6203:
  7666     010A  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7667     010B  0086               	movwf	6
  7668     010C  0187               	clrf	7
  7669     010D  3014               	movlw	20
  7670     010E  0601               	xorwf	1,w
  7671     010F  1D03               	btfss	3,2
  7672     0110  2917               	goto	l6207
  7673                           
  7674                           ;app_device_keyboard.c: 478:                     keyboard.modifiers.bits.leftControl = 0
      +                          ;
  7675     0111  308F               	movlw	143
  7676     0112  0086               	movwf	6
  7677     0113  3023               	movlw	35
  7678     0114  0087               	movwf	7
  7679     0115  1001               	bcf	1,0
  7680                           
  7681                           ;app_device_keyboard.c: 479:                 } else if (scanCode->value == 0x11) {
  7682     0116  0008               	return
  7683     0117                     l6207:
  7684     0117  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7685     0118  0086               	movwf	6
  7686     0119  0187               	clrf	7
  7687     011A  3011               	movlw	17
  7688     011B  0601               	xorwf	1,w
  7689     011C  1D03               	btfss	3,2
  7690     011D  2924               	goto	l6211
  7691                           
  7692                           ;app_device_keyboard.c: 480:                     keyboard.modifiers.bits.leftAlt = 0;
  7693     011E  308F               	movlw	143
  7694     011F  0086               	movwf	6
  7695     0120  3023               	movlw	35
  7696     0121  0087               	movwf	7
  7697     0122  1101               	bcf	1,2
  7698                           
  7699                           ;app_device_keyboard.c: 481:                 } else if (scanCode->value == 0x59) {
  7700     0123  0008               	return
  7701     0124                     l6211:
  7702     0124  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7703     0125  0086               	movwf	6
  7704     0126  0187               	clrf	7
  7705     0127  3059               	movlw	89
  7706     0128  0601               	xorwf	1,w
  7707     0129  1D03               	btfss	3,2
  7708     012A  2931               	goto	l6215
  7709                           
  7710                           ;app_device_keyboard.c: 482:                     keyboard.modifiers.bits.rightShift = 0;
  7711     012B  308F               	movlw	143
  7712     012C  0086               	movwf	6
  7713     012D  3023               	movlw	35
  7714     012E  0087               	movwf	7
  7715     012F  1281               	bcf	1,5
  7716                           
  7717                           ;app_device_keyboard.c: 483:                 } else {
  7718     0130  0008               	return
  7719     0131                     l6215:
  7720                           
  7721                           ;app_device_keyboard.c: 484:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7722     0131  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7723     0132  3192  220F  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7724     0135  00CD               	movwf	APP_KeyboardUpdateState@usbHidCode_2856^(0+128)
  7725                           
  7726                           ;app_device_keyboard.c: 485:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  7727     0136  3030               	movlw	48
  7728     0137  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  7729     0138  3023               	movlw	35
  7730     0139  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  7731     013A  30CD               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2856| 0))& (0+255)
  7732     013B  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  7733     013C  3185  25EF         	fcall	_GenericQueue_Remove
  7734     013E  0008               	return
  7735     013F                     l6217:
  7736     013F  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7737     0140  0086               	movwf	6
  7738     0141  0187               	clrf	7
  7739     0142  30FA               	movlw	250
  7740     0143  0601               	xorwf	1,w
  7741     0144  1D03               	btfss	3,2
  7742     0145  296E               	goto	l6225
  7743                           
  7744                           ;app_device_keyboard.c: 488:                 if (PS2Keyboard_GetLastCommand() == 0xED) {
  7745     0146  319E  2683  3180   	fcall	_PS2Keyboard_GetLastCommand
  7746     0149  3AED               	xorlw	237
  7747     014A  1D03               	skipz
  7748     014B  0008               	return
  7749                           
  7750                           ;app_device_keyboard.c: 489:                     uint8_t leds = (uint8_t)(keyboard.leds.
      +                          bits.numLock << 1)
  7751     014C  3090               	movlw	144
  7752     014D  0086               	movwf	6
  7753     014E  3023               	movlw	35
  7754     014F  0087               	movwf	7
  7755     0150  0C01               	rrf	1,w
  7756     0151  0C89               	rrf	9,f
  7757     0152  3901               	andlw	1
  7758     0153  0021               	movlb	1	; select bank1
  7759     0154  00C9               	movwf	??_APP_KeyboardUpdateState^(0+128)
  7760     0155  3090               	movlw	144
  7761     0156  0086               	movwf	6
  7762     0157  3023               	movlw	35
  7763     0158  0087               	movwf	7
  7764     0159  0C01               	rrf	1,w
  7765     015A  3901               	andlw	1
  7766     015B  00CA               	movwf	(??_APP_KeyboardUpdateState+1)^(0+128)
  7767     015C  3002               	movlw	2
  7768     015D                     u5995:
  7769     015D  35CA               	lslf	(??_APP_KeyboardUpdateState+1)^(0+128),f
  7770     015E  0B89               	decfsz	9,f
  7771     015F  295D               	goto	u5995
  7772     0160  3090               	movlw	144
  7773     0161  0086               	movwf	6
  7774     0162  3023               	movlw	35
  7775     0163  0087               	movwf	7
  7776     0164  0801               	movf	1,w
  7777     0165  3901               	andlw	1
  7778     0166  0709               	addwf	9,w
  7779     0167  044A               	iorwf	(??_APP_KeyboardUpdateState+1)^(0+128),w
  7780     0168  0449               	iorwf	??_APP_KeyboardUpdateState^(0+128),w
  7781     0169  00CB               	movwf	APP_KeyboardUpdateState@leds^(0+128)
  7782                           
  7783                           ;app_device_keyboard.c: 492:                     PS2Keyboard_SendCommand(leds);
  7784     016A  084B               	movf	APP_KeyboardUpdateState@leds^(0+128),w
  7785     016B  3191  219B         	fcall	_PS2Keyboard_SendCommand
  7786     016D  0008               	return
  7787     016E                     l6225:
  7788     016E  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7789     016F  0086               	movwf	6
  7790     0170  0187               	clrf	7
  7791     0171  30FC               	movlw	252
  7792     0172  0601               	xorwf	1,w
  7793     0173  1903               	btfsc	3,2
  7794     0174  0008               	return
  7795     0175  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7796     0176  0086               	movwf	6
  7797     0177  0187               	clrf	7
  7798     0178  0A01               	incf	1,w
  7799     0179  1903               	btfsc	3,2
  7800     017A  0008               	return
  7801     017B  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7802     017C  0086               	movwf	6
  7803     017D  0187               	clrf	7
  7804     017E  30AA               	movlw	170
  7805     017F  0601               	xorwf	1,w
  7806     0180  1903               	btfsc	3,2
  7807     0181  0008               	return
  7808                           
  7809                           ;app_device_keyboard.c: 500:                 if (scanCode->value == 0x12) {
  7810     0182  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7811     0183  0086               	movwf	6
  7812     0184  0187               	clrf	7
  7813     0185  3012               	movlw	18
  7814     0186  0601               	xorwf	1,w
  7815     0187  1D03               	btfss	3,2
  7816     0188  298F               	goto	l6235
  7817                           
  7818                           ;app_device_keyboard.c: 501:                     keyboard.modifiers.bits.leftShift = 1;
  7819     0189  308F               	movlw	143
  7820     018A  0086               	movwf	6
  7821     018B  3023               	movlw	35
  7822     018C  0087               	movwf	7
  7823     018D  1481               	bsf	1,1
  7824                           
  7825                           ;app_device_keyboard.c: 502:                 } else if (scanCode->value == 0X14) {
  7826     018E  0008               	return
  7827     018F                     l6235:
  7828     018F  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7829     0190  0086               	movwf	6
  7830     0191  0187               	clrf	7
  7831     0192  3014               	movlw	20
  7832     0193  0601               	xorwf	1,w
  7833     0194  1D03               	btfss	3,2
  7834     0195  299C               	goto	l6239
  7835                           
  7836                           ;app_device_keyboard.c: 503:                     keyboard.modifiers.bits.leftControl = 1
      +                          ;
  7837     0196  308F               	movlw	143
  7838     0197  0086               	movwf	6
  7839     0198  3023               	movlw	35
  7840     0199  0087               	movwf	7
  7841     019A  1401               	bsf	1,0
  7842                           
  7843                           ;app_device_keyboard.c: 504:                 } else if (scanCode->value == 0x11) {
  7844     019B  0008               	return
  7845     019C                     l6239:
  7846     019C  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7847     019D  0086               	movwf	6
  7848     019E  0187               	clrf	7
  7849     019F  3011               	movlw	17
  7850     01A0  0601               	xorwf	1,w
  7851     01A1  1D03               	btfss	3,2
  7852     01A2  29A9               	goto	l6243
  7853                           
  7854                           ;app_device_keyboard.c: 505:                     keyboard.modifiers.bits.leftAlt = 1;
  7855     01A3  308F               	movlw	143
  7856     01A4  0086               	movwf	6
  7857     01A5  3023               	movlw	35
  7858     01A6  0087               	movwf	7
  7859     01A7  1501               	bsf	1,2
  7860                           
  7861                           ;app_device_keyboard.c: 506:                 } else if (scanCode->value == 0x59) {
  7862     01A8  0008               	return
  7863     01A9                     l6243:
  7864     01A9  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7865     01AA  0086               	movwf	6
  7866     01AB  0187               	clrf	7
  7867     01AC  3059               	movlw	89
  7868     01AD  0601               	xorwf	1,w
  7869     01AE  1D03               	btfss	3,2
  7870     01AF  29B6               	goto	l6247
  7871                           
  7872                           ;app_device_keyboard.c: 507:                     keyboard.modifiers.bits.rightShift = 1;
  7873     01B0  308F               	movlw	143
  7874     01B1  0086               	movwf	6
  7875     01B2  3023               	movlw	35
  7876     01B3  0087               	movwf	7
  7877     01B4  1681               	bsf	1,5
  7878                           
  7879                           ;app_device_keyboard.c: 508:                 } else {
  7880     01B5  0008               	return
  7881     01B6                     l6247:
  7882                           
  7883                           ;app_device_keyboard.c: 509:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7884     01B6  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7885     01B7  3192  220F  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7886     01BA  00CF               	movwf	APP_KeyboardUpdateState@usbHidCode_2864^(0+128)
  7887                           
  7888                           ;app_device_keyboard.c: 510:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  7889     01BB  3030               	movlw	48
  7890     01BC  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  7891     01BD  3023               	movlw	35
  7892     01BE  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  7893     01BF  30CF               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2864| 0))& (0+255)
  7894     01C0  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  7895     01C1  3196  2606  3180   	fcall	_GenericQueue_Contains
  7896     01C4  3A00               	xorlw	0
  7897     01C5  1D03               	skipz
  7898     01C6  0008               	return
  7899                           
  7900                           ;app_device_keyboard.c: 511:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  7901     01C7  3030               	movlw	48
  7902     01C8  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  7903     01C9  3023               	movlw	35
  7904     01CA  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  7905     01CB  30CF               	movlw	low APP_KeyboardUpdateState@usbHidCode_2864
  7906     01CC  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  7907     01CD  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2864
  7908     01CE  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  7909     01CF  3188  2052         	fcall	_GenericQueue_Enqueue
  7910     01D1  0008               	return
  7911     01D2                     __end_of_APP_KeyboardUpdateState:
  7912                           
  7913                           	psect	text34
  7914     120F                     __ptext34:	
  7915 ;; *************** function _PS2USB_ScanCodeToUSBHID *****************
  7916 ;; Defined at:
  7917 ;;		line 801 in file "ps2usb.c"
  7918 ;; Parameters:    Size  Location     Type
  7919 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  7920 ;;		 -> main@scanCode(3), NULL(0), 
  7921 ;; Auto vars:     Size  Location     Type
  7922 ;;  scanCode        1    0[BANK1 ] PTR const struct PS2Scan
  7923 ;;		 -> main@scanCode(3), NULL(0), 
  7924 ;; Return value:  Size  Location     Type
  7925 ;;                  1    wreg      unsigned char 
  7926 ;; Registers used:
  7927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7928 ;; Tracked objects:
  7929 ;;		On entry : 1F/1
  7930 ;;		On exit  : 1F/1
  7931 ;;		Unchanged: 0/0
  7932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;Total ram usage:        1 bytes
  7938 ;; Hardware stack levels used: 1
  7939 ;; Hardware stack levels required when called: 10
  7940 ;; This function calls:
  7941 ;;		Nothing
  7942 ;; This function is called by:
  7943 ;;		_APP_KeyboardUpdateState
  7944 ;; This function uses a non-reentrant model
  7945 ;;
  7946                           
  7947     120F                     _PS2USB_ScanCodeToUSBHID:	
  7948                           ;psect for function _PS2USB_ScanCodeToUSBHID
  7949                           
  7950                           
  7951                           ;incstack = 0
  7952                           ; Regs used in _PS2USB_ScanCodeToUSBHID: [wreg-fsr1h+status,2+status,0+pclath]
  7953                           ;PS2USB_ScanCodeToUSBHID@scanCode stored from wreg
  7954     120F  00A8               	movwf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128)
  7955                           
  7956                           ;ps2usb.c: 826:     if (scanCode->isExtend) {
  7957     1210  0A28               	incf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  7958     1211  0086               	movwf	6
  7959     1212  0187               	clrf	7
  7960     1213  0801               	movf	1,w
  7961     1214  1903               	btfsc	3,2
  7962     1215  2A22               	goto	l4845
  7963                           
  7964                           ;ps2usb.c: 832:         return ps2ExtUsbMap[scanCode->value];
  7965     1216  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  7966     1217  0086               	movwf	6
  7967     1218  0187               	clrf	7
  7968     1219  0801               	movf	1,w
  7969     121A  3EFB               	addlw	low (_ps2ExtUsbMap| (0+32768))
  7970     121B  0084               	movwf	4
  7971     121C  3083               	movlw	high (_ps2ExtUsbMap| (0+32768))
  7972     121D  1803               	skipnc
  7973     121E  3E01               	addlw	1
  7974     121F  0085               	movwf	5
  7975     1220  0800               	movf	0,w	;code access
  7976     1221  0008               	return
  7977     1222                     l4845:
  7978                           
  7979                           ;ps2usb.c: 839:         return ps2UsbMap[scanCode->value];
  7980     1222  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  7981     1223  0086               	movwf	6
  7982     1224  0187               	clrf	7
  7983     1225  0801               	movf	1,w
  7984     1226  3E00               	addlw	low (_ps2UsbMap| (0+32768))
  7985     1227  0084               	movwf	4
  7986     1228  3090               	movlw	high (_ps2UsbMap| (0+32768))
  7987     1229  1803               	skipnc
  7988     122A  3E01               	addlw	1
  7989     122B  0085               	movwf	5
  7990     122C  0800               	movf	0,w	;code access
  7991     122D  0008               	return
  7992     122E                     __end_of_PS2USB_ScanCodeToUSBHID:
  7993                           
  7994                           	psect	text35
  7995     1E83                     __ptext35:	
  7996 ;; *************** function _PS2Keyboard_GetLastCommand *****************
  7997 ;; Defined at:
  7998 ;;		line 75 in file "ps2_keyboard.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;		None
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;		None
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  1    wreg      unsigned char 
  8005 ;; Registers used:
  8006 ;;		wreg
  8007 ;; Tracked objects:
  8008 ;;		On entry : 1F/1
  8009 ;;		On exit  : 1F/2
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;Total ram usage:        0 bytes
  8017 ;; Hardware stack levels used: 1
  8018 ;; Hardware stack levels required when called: 10
  8019 ;; This function calls:
  8020 ;;		Nothing
  8021 ;; This function is called by:
  8022 ;;		_APP_KeyboardUpdateState
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026     1E83                     _PS2Keyboard_GetLastCommand:	
  8027                           ;psect for function _PS2Keyboard_GetLastCommand
  8028                           
  8029                           
  8030                           ;ps2_keyboard.c: 76:     return keyboardCommand;
  8031                           
  8032                           ;incstack = 0
  8033                           ; Regs used in _PS2Keyboard_GetLastCommand: [wreg]
  8034     1E83  0022               	movlb	2	; select bank2
  8035     1E84  084E               	movf	_keyboardCommand^(0+256),w	;volatile
  8036     1E85  0008               	return
  8037     1E86                     __end_of_PS2Keyboard_GetLastCommand:
  8038                           
  8039                           	psect	text36
  8040     05EF                     __ptext36:	
  8041 ;; *************** function _GenericQueue_Remove *****************
  8042 ;; Defined at:
  8043 ;;		line 35 in file "generic_queue.c"
  8044 ;; Parameters:    Size  Location     Type
  8045 ;;  q               2   24[BANK1 ] PTR struct .
  8046 ;;		 -> keyboard(101), 
  8047 ;;  item            1   26[BANK1 ] PTR const void 
  8048 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2856(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;  j               1   32[BANK1 ] unsigned char 
  8051 ;;  i               1   31[BANK1 ] unsigned char 
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  1    wreg      void 
  8054 ;; Registers used:
  8055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8056 ;; Tracked objects:
  8057 ;;		On entry : 1F/1
  8058 ;;		On exit  : 1F/1
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8061 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8062 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8063 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;Total ram usage:        9 bytes
  8066 ;; Hardware stack levels used: 1
  8067 ;; Hardware stack levels required when called: 11
  8068 ;; This function calls:
  8069 ;;		_GenericQueue_IsEmpty
  8070 ;;		___awmod
  8071 ;;		___wmul
  8072 ;;		_memcmp
  8073 ;;		_memcpy
  8074 ;; This function is called by:
  8075 ;;		_APP_KeyboardUpdateState
  8076 ;; This function uses a non-reentrant model
  8077 ;;
  8078                           
  8079     05EF                     _GenericQueue_Remove:	
  8080                           ;psect for function _GenericQueue_Remove
  8081                           
  8082                           
  8083                           ;generic_queue.c: 36:     if (!GenericQueue_IsEmpty(q)) {
  8084                           
  8085                           ;incstack = 0
  8086                           ; Regs used in _GenericQueue_Remove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8087     05EF  0841               	movf	(GenericQueue_Remove@q+1)^(0+128),w
  8088     05F0  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  8089     05F1  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8090     05F2  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  8091     05F3  319F  27B0  3185   	fcall	_GenericQueue_IsEmpty
  8092     05F6  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  8093     05F7  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  8094     05F8  1D03               	btfss	3,2
  8095     05F9  0008               	return
  8096                           
  8097                           ;generic_queue.c: 37:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  8098     05FA  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8099     05FB  3E5C               	addlw	92
  8100     05FC  0086               	movwf	6
  8101     05FD  3000               	movlw	0
  8102     05FE  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8103     05FF  0087               	movwf	7
  8104     0600  0801               	movf	1,w
  8105     0601                     L4:
  8106     0601  00C7               	movwf	GenericQueue_Remove@i^(0+128)
  8107     0602  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8108     0603  3E5D               	addlw	93
  8109     0604  0086               	movwf	6
  8110     0605  3000               	movlw	0
  8111     0606  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8112     0607  0087               	movwf	7
  8113     0608  0801               	movf	1,w
  8114     0609  0647               	xorwf	GenericQueue_Remove@i^(0+128),w
  8115     060A  1903               	btfsc	3,2
  8116     060B  0008               	return
  8117                           
  8118                           ;generic_queue.c: 38:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  8119     060C  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8120     060D  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8121     060E  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  8122     060F  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8123     0610  00AF               	movwf	___wmul@multiplier^(0+128)
  8124     0611  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8125     0612  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8126     0613  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8127     0614  3E5A               	addlw	90
  8128     0615  0086               	movwf	6
  8129     0616  3000               	movlw	0
  8130     0617  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8131     0618  0087               	movwf	7
  8132     0619  3F40               	moviw [0]fsr1
  8133     061A  00B1               	movwf	___wmul@multiplicand^(0+128)
  8134     061B  3F41               	moviw [1]fsr1
  8135     061C  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8136     061D  3191  214A  3185   	fcall	___wmul
  8137     0620  082F               	movf	?___wmul^(0+128),w
  8138     0621  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8139     0622  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8140     0623  0830               	movf	(?___wmul+1)^(0+128),w
  8141     0624  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8142     0625  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  8143     0626  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8144     0627  00B5               	movwf	memcmp@vl^(0+128)
  8145     0628  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  8146     0629  00B6               	movwf	(memcmp@vl+1)^(0+128)
  8147     062A  0842               	movf	GenericQueue_Remove@item^(0+128),w
  8148     062B  00B7               	movwf	memcmp@vr^(0+128)
  8149     062C  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8150     062D  3E5A               	addlw	90
  8151     062E  0086               	movwf	6
  8152     062F  3000               	movlw	0
  8153     0630  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8154     0631  0087               	movwf	7
  8155     0632  3F40               	moviw [0]fsr1
  8156     0633  00B8               	movwf	memcmp@n^(0+128)
  8157     0634  3F41               	moviw [1]fsr1
  8158     0635  00B9               	movwf	(memcmp@n+1)^(0+128)
  8159     0636  3193  236F  3185   	fcall	_memcmp
  8160     0639  0835               	movf	?_memcmp^(0+128),w
  8161     063A  0436               	iorwf	(?_memcmp+1)^(0+128),w
  8162     063B  1D03               	btfss	3,2
  8163     063C  2ED3               	goto	l4867
  8164                           
  8165                           ;generic_queue.c: 39:                 for (uint8_t j = i; j != q->rear; j = (j + 1) % 15
      +                          ) {
  8166     063D  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8167     063E                     L5:
  8168     063E  00C8               	movwf	GenericQueue_Remove@j^(0+128)
  8169     063F  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8170     0640  3E5D               	addlw	93
  8171     0641  0086               	movwf	6
  8172     0642  3000               	movlw	0
  8173     0643  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8174     0644  0087               	movwf	7
  8175     0645  0801               	movf	1,w
  8176     0646  0648               	xorwf	GenericQueue_Remove@j^(0+128),w
  8177     0647  1903               	btfsc	3,2
  8178     0648  2EA9               	goto	l4863
  8179                           
  8180                           ;generic_queue.c: 40:                     memcpy(&q->buffer[j * q->element_size],
  8181     0649  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8182     064A  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8183     064B  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  8184     064C  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8185     064D  00AF               	movwf	___wmul@multiplier^(0+128)
  8186     064E  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8187     064F  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8188     0650  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8189     0651  3E5A               	addlw	90
  8190     0652  0086               	movwf	6
  8191     0653  3000               	movlw	0
  8192     0654  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8193     0655  0087               	movwf	7
  8194     0656  3F40               	moviw [0]fsr1
  8195     0657  00B1               	movwf	___wmul@multiplicand^(0+128)
  8196     0658  3F41               	moviw [1]fsr1
  8197     0659  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8198     065A  3191  214A  3185   	fcall	___wmul
  8199     065D  082F               	movf	?___wmul^(0+128),w
  8200     065E  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8201     065F  00B5               	movwf	memcpy@d1^(0+128)
  8202     0660  0830               	movf	(?___wmul+1)^(0+128),w
  8203     0661  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8204     0662  00B6               	movwf	(memcpy@d1+1)^(0+128)
  8205     0663  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8206     0664  3E01               	addlw	1
  8207     0665  00AA               	movwf	___awmod@dividend^(0+128)
  8208     0666  3000               	movlw	0
  8209     0667  1803               	skipnc
  8210     0668  3001               	movlw	1
  8211     0669  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8212     066A  300F               	movlw	15
  8213     066B  00A8               	movwf	___awmod@divisor^(0+128)
  8214     066C  3000               	movlw	0
  8215     066D  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8216     066E  3195  251D  3185   	fcall	___awmod
  8217     0671  0829               	movf	(?___awmod+1)^(0+128),w
  8218     0672  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8219     0673  0828               	movf	?___awmod^(0+128),w
  8220     0674  00AF               	movwf	___wmul@multiplier^(0+128)
  8221     0675  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8222     0676  3E5A               	addlw	90
  8223     0677  0086               	movwf	6
  8224     0678  3000               	movlw	0
  8225     0679  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8226     067A  0087               	movwf	7
  8227     067B  3F40               	moviw [0]fsr1
  8228     067C  00B1               	movwf	___wmul@multiplicand^(0+128)
  8229     067D  3F41               	moviw [1]fsr1
  8230     067E  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8231     067F  3191  214A  3185   	fcall	___wmul
  8232     0682  082F               	movf	?___wmul^(0+128),w
  8233     0683  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8234     0684  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8235     0685  0830               	movf	(?___wmul+1)^(0+128),w
  8236     0686  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8237     0687  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  8238     0688  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8239     0689  00B7               	movwf	memcpy@s1^(0+128)
  8240     068A  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  8241     068B  00B8               	movwf	(memcpy@s1+1)^(0+128)
  8242     068C  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8243     068D  3E5A               	addlw	90
  8244     068E  0086               	movwf	6
  8245     068F  3000               	movlw	0
  8246     0690  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8247     0691  0087               	movwf	7
  8248     0692  3F40               	moviw [0]fsr1
  8249     0693  00B9               	movwf	memcpy@n^(0+128)
  8250     0694  3F41               	moviw [1]fsr1
  8251     0695  00BA               	movwf	(memcpy@n+1)^(0+128)
  8252     0696  3193  231E  3185   	fcall	_memcpy
  8253                           
  8254                           ;generic_queue.c: 43:                 }
  8255     0699  300F               	movlw	15
  8256     069A  00A8               	movwf	___awmod@divisor^(0+128)
  8257     069B  3000               	movlw	0
  8258     069C  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8259     069D  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8260     069E  3E01               	addlw	1
  8261     069F  00AA               	movwf	___awmod@dividend^(0+128)
  8262     06A0  3000               	movlw	0
  8263     06A1  1803               	skipnc
  8264     06A2  3001               	movlw	1
  8265     06A3  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8266     06A4  3195  251D  3185   	fcall	___awmod
  8267     06A7  0828               	movf	?___awmod^(0+128),w
  8268     06A8  2E3E               	goto	L5
  8269     06A9                     l4863:
  8270                           
  8271                           ;generic_queue.c: 44:                 q->rear = (q->rear - 1 + 15) % 15;
  8272     06A9  300F               	movlw	15
  8273     06AA  00A8               	movwf	___awmod@divisor^(0+128)
  8274     06AB  3000               	movlw	0
  8275     06AC  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8276     06AD  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8277     06AE  3E5D               	addlw	93
  8278     06AF  0086               	movwf	6
  8279     06B0  3000               	movlw	0
  8280     06B1  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8281     06B2  0087               	movwf	7
  8282     06B3  0801               	movf	1,w
  8283     06B4  3E0E               	addlw	14
  8284     06B5  00AA               	movwf	___awmod@dividend^(0+128)
  8285     06B6  3000               	movlw	0
  8286     06B7  1803               	skipnc
  8287     06B8  3001               	movlw	1
  8288     06B9  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8289     06BA  3195  251D         	fcall	___awmod
  8290     06BC  0828               	movf	?___awmod^(0+128),w
  8291     06BD  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8292     06BE  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8293     06BF  3E5D               	addlw	93
  8294     06C0  00C4               	movwf	(??_GenericQueue_Remove+1)^(0+128)
  8295     06C1  3000               	movlw	0
  8296     06C2  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8297     06C3  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8298     06C4  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8299     06C5  0086               	movwf	6
  8300     06C6  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8301     06C7  0087               	movwf	7
  8302     06C8  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8303     06C9  0081               	movwf	1
  8304                           
  8305                           ;generic_queue.c: 45:                 q->size--;
  8306     06CA  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8307     06CB  3E5E               	addlw	94
  8308     06CC  0086               	movwf	6
  8309     06CD  3000               	movlw	0
  8310     06CE  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8311     06CF  0087               	movwf	7
  8312     06D0  3001               	movlw	1
  8313     06D1  0281               	subwf	1,f
  8314                           
  8315                           ;generic_queue.c: 46:                 break;
  8316     06D2  0008               	return
  8317     06D3                     l4867:
  8318                           
  8319                           ;generic_queue.c: 48:         }
  8320     06D3  300F               	movlw	15
  8321     06D4  00A8               	movwf	___awmod@divisor^(0+128)
  8322     06D5  3000               	movlw	0
  8323     06D6  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8324     06D7  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8325     06D8  3E01               	addlw	1
  8326     06D9  00AA               	movwf	___awmod@dividend^(0+128)
  8327     06DA  3000               	movlw	0
  8328     06DB  1803               	skipnc
  8329     06DC  3001               	movlw	1
  8330     06DD  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8331     06DE  3195  251D  3185   	fcall	___awmod
  8332     06E1  0828               	movf	?___awmod^(0+128),w
  8333     06E2  2E01               	goto	L4
  8334     06E3                     __end_of_GenericQueue_Remove:
  8335                           
  8336                           	psect	text37
  8337     0852                     __ptext37:	
  8338 ;; *************** function _GenericQueue_Enqueue *****************
  8339 ;; Defined at:
  8340 ;;		line 19 in file "generic_queue.c"
  8341 ;; Parameters:    Size  Location     Type
  8342 ;;  q               2   24[BANK1 ] PTR struct .
  8343 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  8344 ;;  item            2   26[BANK1 ] PTR const void 
  8345 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2855(1), 
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;		None
  8348 ;; Return value:  Size  Location     Type
  8349 ;;                  1    wreg      void 
  8350 ;; Registers used:
  8351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8352 ;; Tracked objects:
  8353 ;;		On entry : 1F/1
  8354 ;;		On exit  : 1F/1
  8355 ;;		Unchanged: 0/0
  8356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8357 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8359 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8360 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  8361 ;;Total ram usage:        7 bytes
  8362 ;; Hardware stack levels used: 1
  8363 ;; Hardware stack levels required when called: 11
  8364 ;; This function calls:
  8365 ;;		_GenericQueue_IsFull
  8366 ;;		___awmod
  8367 ;;		___wmul
  8368 ;;		_memcpy
  8369 ;; This function is called by:
  8370 ;;		_APP_KeyboardUpdateState
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374     0852                     _GenericQueue_Enqueue:	
  8375                           ;psect for function _GenericQueue_Enqueue
  8376                           
  8377                           
  8378                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
  8379                           
  8380                           ;incstack = 0
  8381                           ; Regs used in _GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8382     0852  0841               	movf	(GenericQueue_Enqueue@q+1)^(0+128),w
  8383     0853  00A9               	movwf	(GenericQueue_IsFull@q+1)^(0+128)
  8384     0854  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8385     0855  00A8               	movwf	GenericQueue_IsFull@q^(0+128)
  8386     0856  319F  27D7  3188   	fcall	_GenericQueue_IsFull
  8387     0859  0828               	movf	?_GenericQueue_IsFull^(0+128),w
  8388     085A  0429               	iorwf	(?_GenericQueue_IsFull+1)^(0+128),w
  8389     085B  1D03               	btfss	3,2
  8390     085C  0008               	return
  8391                           
  8392                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
  8393     085D  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8394     085E  3E5D               	addlw	93
  8395     085F  0086               	movwf	6
  8396     0860  3000               	movlw	0
  8397     0861  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8398     0862  0087               	movwf	7
  8399     0863  0801               	movf	1,w
  8400     0864  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8401     0865  01C5               	clrf	(??_GenericQueue_Enqueue^(0+128)+1)
  8402     0866  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8403     0867  00AF               	movwf	___wmul@multiplier^(0+128)
  8404     0868  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  8405     0869  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8406     086A  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8407     086B  3E5A               	addlw	90
  8408     086C  0086               	movwf	6
  8409     086D  3000               	movlw	0
  8410     086E  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8411     086F  0087               	movwf	7
  8412     0870  3F40               	moviw [0]fsr1
  8413     0871  00B1               	movwf	___wmul@multiplicand^(0+128)
  8414     0872  3F41               	moviw [1]fsr1
  8415     0873  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8416     0874  3191  214A  3188   	fcall	___wmul
  8417     0877  082F               	movf	?___wmul^(0+128),w
  8418     0878  0740               	addwf	GenericQueue_Enqueue@q^(0+128),w
  8419     0879  00B5               	movwf	memcpy@d1^(0+128)
  8420     087A  0830               	movf	(?___wmul+1)^(0+128),w
  8421     087B  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8422     087C  00B6               	movwf	(memcpy@d1+1)^(0+128)
  8423     087D  0843               	movf	(GenericQueue_Enqueue@item+1)^(0+128),w
  8424     087E  00B8               	movwf	(memcpy@s1+1)^(0+128)
  8425     087F  0842               	movf	GenericQueue_Enqueue@item^(0+128),w
  8426     0880  00B7               	movwf	memcpy@s1^(0+128)
  8427     0881  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8428     0882  3E5A               	addlw	90
  8429     0883  0086               	movwf	6
  8430     0884  3000               	movlw	0
  8431     0885  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8432     0886  0087               	movwf	7
  8433     0887  3F40               	moviw [0]fsr1
  8434     0888  00B9               	movwf	memcpy@n^(0+128)
  8435     0889  3F41               	moviw [1]fsr1
  8436     088A  00BA               	movwf	(memcpy@n+1)^(0+128)
  8437     088B  3193  231E  3188   	fcall	_memcpy
  8438                           
  8439                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
  8440     088E  300F               	movlw	15
  8441     088F  00A8               	movwf	___awmod@divisor^(0+128)
  8442     0890  3000               	movlw	0
  8443     0891  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8444     0892  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8445     0893  3E5D               	addlw	93
  8446     0894  0086               	movwf	6
  8447     0895  3000               	movlw	0
  8448     0896  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8449     0897  0087               	movwf	7
  8450     0898  0801               	movf	1,w
  8451     0899  3E01               	addlw	1
  8452     089A  00AA               	movwf	___awmod@dividend^(0+128)
  8453     089B  3000               	movlw	0
  8454     089C  1803               	skipnc
  8455     089D  3001               	movlw	1
  8456     089E  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8457     089F  3195  251D         	fcall	___awmod
  8458     08A1  0828               	movf	?___awmod^(0+128),w
  8459     08A2  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8460     08A3  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8461     08A4  3E5D               	addlw	93
  8462     08A5  00C5               	movwf	(??_GenericQueue_Enqueue+1)^(0+128)
  8463     08A6  3000               	movlw	0
  8464     08A7  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8465     08A8  00C6               	movwf	(??_GenericQueue_Enqueue+2)^(0+128)
  8466     08A9  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  8467     08AA  0086               	movwf	6
  8468     08AB  0846               	movf	(??_GenericQueue_Enqueue+2)^(0+128),w
  8469     08AC  0087               	movwf	7
  8470     08AD  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8471     08AE  0081               	movwf	1
  8472                           
  8473                           ;generic_queue.c: 23:         q->size++;
  8474     08AF  3001               	movlw	1
  8475     08B0  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8476     08B1  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8477     08B2  3E5E               	addlw	94
  8478     08B3  0086               	movwf	6
  8479     08B4  3000               	movlw	0
  8480     08B5  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8481     08B6  0087               	movwf	7
  8482     08B7  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8483     08B8  0781               	addwf	1,f
  8484     08B9  0008               	return
  8485     08BA                     __end_of_GenericQueue_Enqueue:
  8486                           
  8487                           	psect	text38
  8488     131E                     __ptext38:	
  8489 ;; *************** function _memcpy *****************
  8490 ;; Defined at:
  8491 ;;		line 4 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memcpy.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;  d1              2   13[BANK1 ] PTR void 
  8494 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  8495 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
  8496 ;;  s1              2   15[BANK1 ] PTR const void 
  8497 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  8498 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2855(1), keyboard(101), CtrlTrfDa
      +ta(8), 
  8499 ;;		 -> SetupPkt(8), 
  8500 ;;  n               2   17[BANK1 ] unsigned int 
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;  s               2   21[BANK1 ] PTR const unsigned char 
  8503 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  8504 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2855(1), keyboard(101), CtrlTrfDa
      +ta(8), 
  8505 ;;		 -> SetupPkt(8), 
  8506 ;;  d               2   19[BANK1 ] PTR unsigned char 
  8507 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  8508 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
  8509 ;;  tmp             1   23[BANK1 ] unsigned char 
  8510 ;; Return value:  Size  Location     Type
  8511 ;;                  2   13[BANK1 ] PTR void 
  8512 ;; Registers used:
  8513 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8514 ;; Tracked objects:
  8515 ;;		On entry : 1F/1
  8516 ;;		On exit  : 1F/1
  8517 ;;		Unchanged: 0/0
  8518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8519 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;Total ram usage:       11 bytes
  8524 ;; Hardware stack levels used: 1
  8525 ;; Hardware stack levels required when called: 10
  8526 ;; This function calls:
  8527 ;;		Nothing
  8528 ;; This function is called by:
  8529 ;;		_GenericQueue_Enqueue
  8530 ;;		_GenericQueue_Dequeue
  8531 ;;		_GenericQueue_Remove
  8532 ;;		_GenericQueue_CopyToArray
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536     131E                     _memcpy:	
  8537                           ;psect for function _memcpy
  8538                           
  8539                           
  8540                           ;incstack = 0
  8541                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  8542     131E  0838               	movf	(memcpy@s1+1)^(0+128),w
  8543     131F  00BE               	movwf	(memcpy@s+1)^(0+128)
  8544     1320  0837               	movf	memcpy@s1^(0+128),w
  8545     1321  00BD               	movwf	memcpy@s^(0+128)
  8546     1322  0836               	movf	(memcpy@d1+1)^(0+128),w
  8547     1323  00BC               	movwf	(memcpy@d+1)^(0+128)
  8548     1324  0835               	movf	memcpy@d1^(0+128),w
  8549     1325  00BB               	movwf	memcpy@d^(0+128)
  8550     1326                     l4597:
  8551     1326  3001               	movlw	1
  8552     1327  02B9               	subwf	memcpy@n^(0+128),f
  8553     1328  3000               	movlw	0
  8554     1329  3BBA               	subwfb	(memcpy@n+1)^(0+128),f
  8555     132A  0A39               	incf	memcpy@n^(0+128),w
  8556     132B  1903               	btfsc	3,2
  8557     132C  0A3A               	incf	(memcpy@n+1)^(0+128),w
  8558     132D  1903               	btfsc	3,2
  8559     132E  0008               	return
  8560     132F  083D               	movf	memcpy@s^(0+128),w
  8561     1330  0086               	movwf	6
  8562     1331  083E               	movf	(memcpy@s+1)^(0+128),w
  8563     1332  0087               	movwf	7
  8564     1333  0801               	movf	1,w
  8565     1334  00BF               	movwf	memcpy@tmp^(0+128)
  8566     1335  3001               	movlw	1
  8567     1336  07BD               	addwf	memcpy@s^(0+128),f
  8568     1337  3000               	movlw	0
  8569     1338  3DBE               	addwfc	(memcpy@s+1)^(0+128),f
  8570     1339  083B               	movf	memcpy@d^(0+128),w
  8571     133A  0086               	movwf	6
  8572     133B  083C               	movf	(memcpy@d+1)^(0+128),w
  8573     133C  0087               	movwf	7
  8574     133D  083F               	movf	memcpy@tmp^(0+128),w
  8575     133E  0081               	movwf	1
  8576     133F  3001               	movlw	1
  8577     1340  07BB               	addwf	memcpy@d^(0+128),f
  8578     1341  3000               	movlw	0
  8579     1342  3DBC               	addwfc	(memcpy@d+1)^(0+128),f
  8580     1343  2B26               	goto	l4597
  8581     1344                     __end_of_memcpy:
  8582                           
  8583                           	psect	text39
  8584     1FD7                     __ptext39:	
  8585 ;; *************** function _GenericQueue_IsFull *****************
  8586 ;; Defined at:
  8587 ;;		line 15 in file "generic_queue.c"
  8588 ;; Parameters:    Size  Location     Type
  8589 ;;  q               2    0[BANK1 ] PTR struct .
  8590 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  8591 ;; Auto vars:     Size  Location     Type
  8592 ;;		None
  8593 ;; Return value:  Size  Location     Type
  8594 ;;                  2    0[BANK1 ] int 
  8595 ;; Registers used:
  8596 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8597 ;; Tracked objects:
  8598 ;;		On entry : 1F/1
  8599 ;;		On exit  : 1F/1
  8600 ;;		Unchanged: 0/0
  8601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8602 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8606 ;;Total ram usage:        4 bytes
  8607 ;; Hardware stack levels used: 1
  8608 ;; Hardware stack levels required when called: 10
  8609 ;; This function calls:
  8610 ;;		Nothing
  8611 ;; This function is called by:
  8612 ;;		_GenericQueue_Enqueue
  8613 ;; This function uses a non-reentrant model
  8614 ;;
  8615                           
  8616     1FD7                     _GenericQueue_IsFull:	
  8617                           ;psect for function _GenericQueue_IsFull
  8618                           
  8619                           
  8620                           ;generic_queue.c: 16:     return (q->size == 15);
  8621                           
  8622                           ;incstack = 0
  8623                           ; Regs used in _GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
  8624     1FD7  0828               	movf	GenericQueue_IsFull@q^(0+128),w
  8625     1FD8  3E5E               	addlw	94
  8626     1FD9  0086               	movwf	6
  8627     1FDA  3000               	movlw	0
  8628     1FDB  3D29               	addwfc	(GenericQueue_IsFull@q+1)^(0+128),w
  8629     1FDC  0087               	movwf	7
  8630     1FDD  300F               	movlw	15
  8631     1FDE  0601               	xorwf	1,w
  8632     1FDF  1D03               	btfss	3,2
  8633     1FE0  2FE3               	goto	u3750
  8634     1FE1  3001               	movlw	1
  8635     1FE2  2FE4               	goto	u3760
  8636     1FE3                     u3750:
  8637     1FE3  3000               	movlw	0
  8638     1FE4                     u3760:
  8639     1FE4  00AA               	movwf	??_GenericQueue_IsFull^(0+128)
  8640     1FE5  01AB               	clrf	(??_GenericQueue_IsFull^(0+128)+1)
  8641     1FE6  082A               	movf	??_GenericQueue_IsFull^(0+128),w
  8642     1FE7  00A8               	movwf	?_GenericQueue_IsFull^(0+128)
  8643     1FE8  082B               	movf	(??_GenericQueue_IsFull+1)^(0+128),w
  8644     1FE9  00A9               	movwf	(?_GenericQueue_IsFull+1)^(0+128)
  8645     1FEA  0008               	return
  8646     1FEB                     __end_of_GenericQueue_IsFull:
  8647                           
  8648                           	psect	text40
  8649     1606                     __ptext40:	
  8650 ;; *************** function _GenericQueue_Contains *****************
  8651 ;; Defined at:
  8652 ;;		line 52 in file "generic_queue.c"
  8653 ;; Parameters:    Size  Location     Type
  8654 ;;  q               2   22[BANK1 ] PTR struct .
  8655 ;;		 -> keyboard(101), 
  8656 ;;  item            1   24[BANK1 ] PTR const void 
  8657 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2855(1), 
  8658 ;; Auto vars:     Size  Location     Type
  8659 ;;  i               1   29[BANK1 ] unsigned char 
  8660 ;; Return value:  Size  Location     Type
  8661 ;;                  1    wreg      _Bool 
  8662 ;; Registers used:
  8663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8664 ;; Tracked objects:
  8665 ;;		On entry : 1F/1
  8666 ;;		On exit  : 1F/1
  8667 ;;		Unchanged: 0/0
  8668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8669 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8670 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8671 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;Total ram usage:        8 bytes
  8674 ;; Hardware stack levels used: 1
  8675 ;; Hardware stack levels required when called: 11
  8676 ;; This function calls:
  8677 ;;		_GenericQueue_IsEmpty
  8678 ;;		___awmod
  8679 ;;		___wmul
  8680 ;;		_memcmp
  8681 ;; This function is called by:
  8682 ;;		_APP_KeyboardUpdateState
  8683 ;; This function uses a non-reentrant model
  8684 ;;
  8685                           
  8686     1606                     _GenericQueue_Contains:	
  8687                           ;psect for function _GenericQueue_Contains
  8688                           
  8689                           
  8690                           ;generic_queue.c: 53:     if (!GenericQueue_IsEmpty(q)) {
  8691                           
  8692                           ;incstack = 0
  8693                           ; Regs used in _GenericQueue_Contains: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8694     1606  083F               	movf	(GenericQueue_Contains@q+1)^(0+128),w
  8695     1607  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  8696     1608  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8697     1609  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  8698     160A  319F  27B0  3196   	fcall	_GenericQueue_IsEmpty
  8699     160D  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  8700     160E  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  8701     160F  1D03               	btfss	3,2
  8702     1610  2E66               	goto	l4885
  8703                           
  8704                           ;generic_queue.c: 54:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  8705     1611  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8706     1612  3E5C               	addlw	92
  8707     1613  0086               	movwf	6
  8708     1614  3000               	movlw	0
  8709     1615  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8710     1616  0087               	movwf	7
  8711     1617  0801               	movf	1,w
  8712     1618                     L6:
  8713     1618  00C5               	movwf	GenericQueue_Contains@i^(0+128)
  8714     1619  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8715     161A  3E5D               	addlw	93
  8716     161B  0086               	movwf	6
  8717     161C  3000               	movlw	0
  8718     161D  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8719     161E  0087               	movwf	7
  8720     161F  0801               	movf	1,w
  8721     1620  0645               	xorwf	GenericQueue_Contains@i^(0+128),w
  8722     1621  1903               	btfsc	3,2
  8723     1622  2E66               	goto	l4885
  8724                           
  8725                           ;generic_queue.c: 55:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  8726     1623  0845               	movf	GenericQueue_Contains@i^(0+128),w
  8727     1624  00C1               	movwf	??_GenericQueue_Contains^(0+128)
  8728     1625  01C2               	clrf	(??_GenericQueue_Contains^(0+128)+1)
  8729     1626  0841               	movf	??_GenericQueue_Contains^(0+128),w
  8730     1627  00AF               	movwf	___wmul@multiplier^(0+128)
  8731     1628  0842               	movf	(??_GenericQueue_Contains+1)^(0+128),w
  8732     1629  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8733     162A  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8734     162B  3E5A               	addlw	90
  8735     162C  0086               	movwf	6
  8736     162D  3000               	movlw	0
  8737     162E  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8738     162F  0087               	movwf	7
  8739     1630  3F40               	moviw [0]fsr1
  8740     1631  00B1               	movwf	___wmul@multiplicand^(0+128)
  8741     1632  3F41               	moviw [1]fsr1
  8742     1633  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8743     1634  3191  214A  3196   	fcall	___wmul
  8744     1637  082F               	movf	?___wmul^(0+128),w
  8745     1638  073E               	addwf	GenericQueue_Contains@q^(0+128),w
  8746     1639  00C3               	movwf	(??_GenericQueue_Contains+2)^(0+128)
  8747     163A  0830               	movf	(?___wmul+1)^(0+128),w
  8748     163B  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8749     163C  00C4               	movwf	(??_GenericQueue_Contains+3)^(0+128)
  8750     163D  0843               	movf	(??_GenericQueue_Contains+2)^(0+128),w
  8751     163E  00B5               	movwf	memcmp@vl^(0+128)
  8752     163F  0844               	movf	(??_GenericQueue_Contains+3)^(0+128),w
  8753     1640  00B6               	movwf	(memcmp@vl+1)^(0+128)
  8754     1641  0840               	movf	GenericQueue_Contains@item^(0+128),w
  8755     1642  00B7               	movwf	memcmp@vr^(0+128)
  8756     1643  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8757     1644  3E5A               	addlw	90
  8758     1645  0086               	movwf	6
  8759     1646  3000               	movlw	0
  8760     1647  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8761     1648  0087               	movwf	7
  8762     1649  3F40               	moviw [0]fsr1
  8763     164A  00B8               	movwf	memcmp@n^(0+128)
  8764     164B  3F41               	moviw [1]fsr1
  8765     164C  00B9               	movwf	(memcmp@n+1)^(0+128)
  8766     164D  3193  236F  3196   	fcall	_memcmp
  8767     1650  0835               	movf	?_memcmp^(0+128),w
  8768     1651  0436               	iorwf	(?_memcmp+1)^(0+128),w
  8769     1652  1D03               	btfss	3,2
  8770     1653  2E56               	goto	l4881
  8771                           
  8772                           ;generic_queue.c: 56:                 return 1;
  8773     1654  3001               	movlw	1
  8774     1655  0008               	return
  8775     1656                     l4881:
  8776                           
  8777                           ;generic_queue.c: 58:         }
  8778     1656  300F               	movlw	15
  8779     1657  00A8               	movwf	___awmod@divisor^(0+128)
  8780     1658  3000               	movlw	0
  8781     1659  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8782     165A  0845               	movf	GenericQueue_Contains@i^(0+128),w
  8783     165B  3E01               	addlw	1
  8784     165C  00AA               	movwf	___awmod@dividend^(0+128)
  8785     165D  3000               	movlw	0
  8786     165E  1803               	skipnc
  8787     165F  3001               	movlw	1
  8788     1660  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8789     1661  3195  251D  3196   	fcall	___awmod
  8790     1664  0828               	movf	?___awmod^(0+128),w
  8791     1665  2E18               	goto	L6
  8792     1666                     l4885:
  8793                           
  8794                           ;generic_queue.c: 60:     return 0;
  8795     1666  3000               	movlw	0
  8796     1667  0008               	return
  8797     1668                     __end_of_GenericQueue_Contains:
  8798                           
  8799                           	psect	text41
  8800     136F                     __ptext41:	
  8801 ;; *************** function _memcmp *****************
  8802 ;; Defined at:
  8803 ;;		line 3 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memcmp.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;  vl              2   13[BANK1 ] PTR const void 
  8806 ;;		 -> keyboard$buffer(90), keyboard(101), 
  8807 ;;  vr              1   15[BANK1 ] PTR const void 
  8808 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2856(1), APP_KeyboardUpdateState@
      +usbHidCode_2855(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8809 ;;  n               2   16[BANK1 ] unsigned int 
  8810 ;; Auto vars:     Size  Location     Type
  8811 ;;  l               2   19[BANK1 ] PTR const unsigned char 
  8812 ;;		 -> keyboard$buffer(90), keyboard(101), 
  8813 ;;  r               1   21[BANK1 ] PTR const unsigned char 
  8814 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2856(1), APP_KeyboardUpdateState@
      +usbHidCode_2855(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8815 ;; Return value:  Size  Location     Type
  8816 ;;                  2   13[BANK1 ] int 
  8817 ;; Registers used:
  8818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8819 ;; Tracked objects:
  8820 ;;		On entry : 1F/1
  8821 ;;		On exit  : 1F/1
  8822 ;;		Unchanged: 0/0
  8823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8824 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;Total ram usage:        9 bytes
  8829 ;; Hardware stack levels used: 1
  8830 ;; Hardware stack levels required when called: 10
  8831 ;; This function calls:
  8832 ;;		Nothing
  8833 ;; This function is called by:
  8834 ;;		_GenericQueue_Remove
  8835 ;;		_GenericQueue_Contains
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839     136F                     _memcmp:	
  8840                           ;psect for function _memcmp
  8841                           
  8842                           
  8843                           ;incstack = 0
  8844                           ; Regs used in _memcmp: [wreg-fsr1h+status,2+status,0]
  8845     136F  0836               	movf	(memcmp@vl+1)^(0+128),w
  8846     1370  00BC               	movwf	(memcmp@l+1)^(0+128)
  8847     1371  0835               	movf	memcmp@vl^(0+128),w
  8848     1372  00BB               	movwf	memcmp@l^(0+128)
  8849     1373  0837               	movf	memcmp@vr^(0+128),w
  8850     1374  00BD               	movwf	memcmp@r^(0+128)
  8851     1375  2B8D               	goto	l4659
  8852     1376                     l4661:
  8853     1376  083D               	movf	memcmp@r^(0+128),w
  8854     1377  0086               	movwf	6
  8855     1378  0187               	clrf	7
  8856     1379  083B               	movf	memcmp@l^(0+128),w
  8857     137A  0084               	movwf	4
  8858     137B  083C               	movf	(memcmp@l+1)^(0+128),w
  8859     137C  0085               	movwf	5
  8860     137D  0800               	movf	0,w
  8861     137E  0601               	xorwf	1,w
  8862     137F  1D03               	btfss	3,2
  8863     1380  2B91               	goto	l4663
  8864     1381  3001               	movlw	1
  8865     1382  02B8               	subwf	memcmp@n^(0+128),f
  8866     1383  3000               	movlw	0
  8867     1384  3BB9               	subwfb	(memcmp@n+1)^(0+128),f
  8868     1385  3001               	movlw	1
  8869     1386  07BB               	addwf	memcmp@l^(0+128),f
  8870     1387  3000               	movlw	0
  8871     1388  3DBC               	addwfc	(memcmp@l+1)^(0+128),f
  8872     1389  3001               	movlw	1
  8873     138A  00BA               	movwf	??_memcmp^(0+128)
  8874     138B  083A               	movf	??_memcmp^(0+128),w
  8875     138C  07BD               	addwf	memcmp@r^(0+128),f
  8876     138D                     l4659:
  8877     138D  0838               	movf	memcmp@n^(0+128),w
  8878     138E  0439               	iorwf	(memcmp@n+1)^(0+128),w
  8879     138F  1D03               	btfss	3,2
  8880     1390  2B76               	goto	l4661
  8881     1391                     l4663:
  8882     1391  0838               	movf	memcmp@n^(0+128),w
  8883     1392  0439               	iorwf	(memcmp@n+1)^(0+128),w
  8884     1393  1D03               	btfss	3,2
  8885     1394  2B98               	goto	l4667
  8886     1395  01B5               	clrf	?_memcmp^(0+128)
  8887     1396  01B6               	clrf	(?_memcmp+1)^(0+128)
  8888     1397  0008               	return
  8889     1398                     l4667:
  8890     1398  083B               	movf	memcmp@l^(0+128),w
  8891     1399  0086               	movwf	6
  8892     139A  083C               	movf	(memcmp@l+1)^(0+128),w
  8893     139B  0087               	movwf	7
  8894     139C  083D               	movf	memcmp@r^(0+128),w
  8895     139D  0084               	movwf	4
  8896     139E  0185               	clrf	5
  8897     139F  0800               	movf	0,w
  8898     13A0  0201               	subwf	1,w
  8899     13A1  00B5               	movwf	?_memcmp^(0+128)
  8900     13A2  01B6               	clrf	(?_memcmp^(0+128)+1)
  8901     13A3  1C03               	skipc
  8902     13A4  03B6               	decf	(?_memcmp+1)^(0+128),f
  8903     13A5  0008               	return
  8904     13A6                     __end_of_memcmp:
  8905                           
  8906                           	psect	text42
  8907     114A                     __ptext42:	
  8908 ;; *************** function ___wmul *****************
  8909 ;; Defined at:
  8910 ;;		line 15 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/Umul16.c"
  8911 ;; Parameters:    Size  Location     Type
  8912 ;;  multiplier      2    7[BANK1 ] unsigned int 
  8913 ;;  multiplicand    2    9[BANK1 ] unsigned int 
  8914 ;; Auto vars:     Size  Location     Type
  8915 ;;  product         2   11[BANK1 ] unsigned int 
  8916 ;; Return value:  Size  Location     Type
  8917 ;;                  2    7[BANK1 ] unsigned int 
  8918 ;; Registers used:
  8919 ;;		wreg, status,2, status,0
  8920 ;; Tracked objects:
  8921 ;;		On entry : 1F/1
  8922 ;;		On exit  : 1F/1
  8923 ;;		Unchanged: 0/0
  8924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8925 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;Total ram usage:        6 bytes
  8930 ;; Hardware stack levels used: 1
  8931 ;; Hardware stack levels required when called: 10
  8932 ;; This function calls:
  8933 ;;		Nothing
  8934 ;; This function is called by:
  8935 ;;		_GenericQueue_Enqueue
  8936 ;;		_GenericQueue_Dequeue
  8937 ;;		_GenericQueue_Remove
  8938 ;;		_GenericQueue_Contains
  8939 ;;		_GenericQueue_CopyToArray
  8940 ;; This function uses a non-reentrant model
  8941 ;;
  8942                           
  8943     114A                     ___wmul:	
  8944                           ;psect for function ___wmul
  8945                           
  8946                           
  8947                           ;incstack = 0
  8948                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8949     114A  01B3               	clrf	___wmul@product^(0+128)
  8950     114B  01B4               	clrf	(___wmul@product+1)^(0+128)
  8951     114C                     l4673:
  8952     114C  1C2F               	btfss	___wmul@multiplier^(0+128),0
  8953     114D  2952               	goto	l1227
  8954     114E  0831               	movf	___wmul@multiplicand^(0+128),w
  8955     114F  07B3               	addwf	___wmul@product^(0+128),f
  8956     1150  0832               	movf	(___wmul@multiplicand+1)^(0+128),w
  8957     1151  3DB4               	addwfc	(___wmul@product+1)^(0+128),f
  8958     1152                     l1227:
  8959     1152  3001               	movlw	1
  8960     1153                     u3815:
  8961     1153  35B1               	lslf	___wmul@multiplicand^(0+128),f
  8962     1154  0DB2               	rlf	(___wmul@multiplicand+1)^(0+128),f
  8963     1155  0B89               	decfsz	9,f
  8964     1156  2953               	goto	u3815
  8965     1157  3001               	movlw	1
  8966     1158                     u3825:
  8967     1158  36B0               	lsrf	(___wmul@multiplier+1)^(0+128),f
  8968     1159  0CAF               	rrf	___wmul@multiplier^(0+128),f
  8969     115A  0B89               	decfsz	9,f
  8970     115B  2958               	goto	u3825
  8971     115C  082F               	movf	___wmul@multiplier^(0+128),w
  8972     115D  0430               	iorwf	(___wmul@multiplier+1)^(0+128),w
  8973     115E  1D03               	btfss	3,2
  8974     115F  294C               	goto	l4673
  8975     1160  0834               	movf	(___wmul@product+1)^(0+128),w
  8976     1161  00B0               	movwf	(?___wmul+1)^(0+128)
  8977     1162  0833               	movf	___wmul@product^(0+128),w
  8978     1163  00AF               	movwf	?___wmul^(0+128)
  8979     1164  0008               	return
  8980     1165                     __end_of___wmul:
  8981                           
  8982                           	psect	text43
  8983     151D                     __ptext43:	
  8984 ;; *************** function ___awmod *****************
  8985 ;; Defined at:
  8986 ;;		line 5 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/awmod.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;  divisor         2    0[BANK1 ] int 
  8989 ;;  dividend        2    2[BANK1 ] int 
  8990 ;; Auto vars:     Size  Location     Type
  8991 ;;  sign            1    6[BANK1 ] unsigned char 
  8992 ;;  counter         1    5[BANK1 ] unsigned char 
  8993 ;; Return value:  Size  Location     Type
  8994 ;;                  2    0[BANK1 ] int 
  8995 ;; Registers used:
  8996 ;;		wreg, status,2, status,0
  8997 ;; Tracked objects:
  8998 ;;		On entry : 1F/1
  8999 ;;		On exit  : 1F/1
  9000 ;;		Unchanged: 0/0
  9001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9002 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;Total ram usage:        7 bytes
  9007 ;; Hardware stack levels used: 1
  9008 ;; Hardware stack levels required when called: 10
  9009 ;; This function calls:
  9010 ;;		Nothing
  9011 ;; This function is called by:
  9012 ;;		_GenericQueue_Enqueue
  9013 ;;		_GenericQueue_Dequeue
  9014 ;;		_GenericQueue_Remove
  9015 ;;		_GenericQueue_Contains
  9016 ;;		_GenericQueue_CopyToArray
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020     151D                     ___awmod:	
  9021                           ;psect for function ___awmod
  9022                           
  9023                           
  9024                           ;incstack = 0
  9025                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  9026     151D  01AE               	clrf	___awmod@sign^(0+128)
  9027     151E  1FAB               	btfss	(___awmod@dividend+1)^(0+128),7
  9028     151F  2D27               	goto	l4693
  9029     1520  09AA               	comf	___awmod@dividend^(0+128),f
  9030     1521  09AB               	comf	(___awmod@dividend+1)^(0+128),f
  9031     1522  0AAA               	incf	___awmod@dividend^(0+128),f
  9032     1523  1903               	skipnz
  9033     1524  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
  9034     1525  01AE               	clrf	___awmod@sign^(0+128)
  9035     1526  0AAE               	incf	___awmod@sign^(0+128),f
  9036     1527                     l4693:
  9037     1527  1FA9               	btfss	(___awmod@divisor+1)^(0+128),7
  9038     1528  2D2E               	goto	l4697
  9039     1529  09A8               	comf	___awmod@divisor^(0+128),f
  9040     152A  09A9               	comf	(___awmod@divisor+1)^(0+128),f
  9041     152B  0AA8               	incf	___awmod@divisor^(0+128),f
  9042     152C  1903               	skipnz
  9043     152D  0AA9               	incf	(___awmod@divisor+1)^(0+128),f
  9044     152E                     l4697:
  9045     152E  0828               	movf	___awmod@divisor^(0+128),w
  9046     152F  0429               	iorwf	(___awmod@divisor+1)^(0+128),w
  9047     1530  1903               	btfsc	3,2
  9048     1531  2D55               	goto	l4715
  9049     1532  01AD               	clrf	___awmod@counter^(0+128)
  9050     1533  0AAD               	incf	___awmod@counter^(0+128),f
  9051     1534                     l4705:
  9052     1534  1BA9               	btfsc	(___awmod@divisor+1)^(0+128),7
  9053     1535  2D40               	goto	l4707
  9054     1536  3001               	movlw	1
  9055     1537                     u3875:
  9056     1537  35A8               	lslf	___awmod@divisor^(0+128),f
  9057     1538  0DA9               	rlf	(___awmod@divisor+1)^(0+128),f
  9058     1539  0B89               	decfsz	9,f
  9059     153A  2D37               	goto	u3875
  9060     153B  3001               	movlw	1
  9061     153C  00AC               	movwf	??___awmod^(0+128)
  9062     153D  082C               	movf	??___awmod^(0+128),w
  9063     153E  07AD               	addwf	___awmod@counter^(0+128),f
  9064     153F  2D34               	goto	l4705
  9065     1540                     l4707:
  9066     1540  0829               	movf	(___awmod@divisor+1)^(0+128),w
  9067     1541  022B               	subwf	(___awmod@dividend+1)^(0+128),w
  9068     1542  1D03               	skipz
  9069     1543  2D46               	goto	u3895
  9070     1544  0828               	movf	___awmod@divisor^(0+128),w
  9071     1545  022A               	subwf	___awmod@dividend^(0+128),w
  9072     1546                     u3895:
  9073     1546  1C03               	skipc
  9074     1547  2D4C               	goto	l4711
  9075     1548  0828               	movf	___awmod@divisor^(0+128),w
  9076     1549  02AA               	subwf	___awmod@dividend^(0+128),f
  9077     154A  0829               	movf	(___awmod@divisor+1)^(0+128),w
  9078     154B  3BAB               	subwfb	(___awmod@dividend+1)^(0+128),f
  9079     154C                     l4711:
  9080     154C  3001               	movlw	1
  9081     154D                     u3905:
  9082     154D  36A9               	lsrf	(___awmod@divisor+1)^(0+128),f
  9083     154E  0CA8               	rrf	___awmod@divisor^(0+128),f
  9084     154F  0B89               	decfsz	9,f
  9085     1550  2D4D               	goto	u3905
  9086     1551  3001               	movlw	1
  9087     1552  02AD               	subwf	___awmod@counter^(0+128),f
  9088     1553  1D03               	btfss	3,2
  9089     1554  2D40               	goto	l4707
  9090     1555                     l4715:
  9091     1555  082E               	movf	___awmod@sign^(0+128),w
  9092     1556  1903               	btfsc	3,2
  9093     1557  2D5D               	goto	l4719
  9094     1558  09AA               	comf	___awmod@dividend^(0+128),f
  9095     1559  09AB               	comf	(___awmod@dividend+1)^(0+128),f
  9096     155A  0AAA               	incf	___awmod@dividend^(0+128),f
  9097     155B  1903               	skipnz
  9098     155C  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
  9099     155D                     l4719:
  9100     155D  082B               	movf	(___awmod@dividend+1)^(0+128),w
  9101     155E  00A9               	movwf	(?___awmod+1)^(0+128)
  9102     155F  082A               	movf	___awmod@dividend^(0+128),w
  9103     1560  00A8               	movwf	?___awmod^(0+128)
  9104     1561  0008               	return
  9105     1562                     __end_of___awmod:
  9106                           
  9107                           	psect	text44
  9108     1FB0                     __ptext44:	
  9109 ;; *************** function _GenericQueue_IsEmpty *****************
  9110 ;; Defined at:
  9111 ;;		line 11 in file "generic_queue.c"
  9112 ;; Parameters:    Size  Location     Type
  9113 ;;  q               2    0[BANK1 ] PTR struct .
  9114 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  9115 ;; Auto vars:     Size  Location     Type
  9116 ;;		None
  9117 ;; Return value:  Size  Location     Type
  9118 ;;                  2    0[BANK1 ] int 
  9119 ;; Registers used:
  9120 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9121 ;; Tracked objects:
  9122 ;;		On entry : 1F/1
  9123 ;;		On exit  : 1F/1
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9126 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;Total ram usage:        4 bytes
  9131 ;; Hardware stack levels used: 1
  9132 ;; Hardware stack levels required when called: 10
  9133 ;; This function calls:
  9134 ;;		Nothing
  9135 ;; This function is called by:
  9136 ;;		_PS2Keyboard_GetScanCode
  9137 ;;		_GenericQueue_Dequeue
  9138 ;;		_GenericQueue_Remove
  9139 ;;		_GenericQueue_Contains
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143     1FB0                     _GenericQueue_IsEmpty:	
  9144                           ;psect for function _GenericQueue_IsEmpty
  9145                           
  9146                           
  9147                           ;generic_queue.c: 12:     return (q->size == 0);
  9148                           
  9149                           ;incstack = 0
  9150                           ; Regs used in _GenericQueue_IsEmpty: [wreg+fsr1l+fsr1h+status,2+status,0]
  9151     1FB0  0828               	movf	GenericQueue_IsEmpty@q^(0+128),w
  9152     1FB1  3E5E               	addlw	94
  9153     1FB2  0086               	movwf	6
  9154     1FB3  3000               	movlw	0
  9155     1FB4  3D29               	addwfc	(GenericQueue_IsEmpty@q+1)^(0+128),w
  9156     1FB5  0087               	movwf	7
  9157     1FB6  0801               	movf	1,w
  9158     1FB7  1D03               	btfss	3,2
  9159     1FB8  2FBB               	goto	u3730
  9160     1FB9  3001               	movlw	1
  9161     1FBA  2FBC               	goto	u3740
  9162     1FBB                     u3730:
  9163     1FBB  3000               	movlw	0
  9164     1FBC                     u3740:
  9165     1FBC  00AA               	movwf	??_GenericQueue_IsEmpty^(0+128)
  9166     1FBD  01AB               	clrf	(??_GenericQueue_IsEmpty^(0+128)+1)
  9167     1FBE  082A               	movf	??_GenericQueue_IsEmpty^(0+128),w
  9168     1FBF  00A8               	movwf	?_GenericQueue_IsEmpty^(0+128)
  9169     1FC0  082B               	movf	(??_GenericQueue_IsEmpty+1)^(0+128),w
  9170     1FC1  00A9               	movwf	(?_GenericQueue_IsEmpty+1)^(0+128)
  9171     1FC2  0008               	return
  9172     1FC3                     __end_of_GenericQueue_IsEmpty:
  9173                           
  9174                           	psect	text45
  9175     1EFD                     __ptext45:	
  9176 ;; *************** function _APP_KeyboardProcessOutputReport *****************
  9177 ;; Defined at:
  9178 ;;		line 519 in file "app_device_keyboard.c"
  9179 ;; Parameters:    Size  Location     Type
  9180 ;;		None
  9181 ;; Auto vars:     Size  Location     Type
  9182 ;;		None
  9183 ;; Return value:  Size  Location     Type
  9184 ;;                  1    wreg      void 
  9185 ;; Registers used:
  9186 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9187 ;; Tracked objects:
  9188 ;;		On entry : 1C/1
  9189 ;;		On exit  : 1F/2
  9190 ;;		Unchanged: 0/0
  9191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;Total ram usage:        0 bytes
  9197 ;; Hardware stack levels used: 1
  9198 ;; Hardware stack levels required when called: 11
  9199 ;; This function calls:
  9200 ;;		_PS2Keyboard_SendCommand
  9201 ;; This function is called by:
  9202 ;;		_APP_KeyboardTasks
  9203 ;; This function uses a non-reentrant model
  9204 ;;
  9205                           
  9206     1EFD                     _APP_KeyboardProcessOutputReport:	
  9207                           ;psect for function _APP_KeyboardProcessOutputReport
  9208                           
  9209                           
  9210                           ;app_device_keyboard.c: 520:     keyboard.leds.value = outputReport.value;
  9211                           
  9212                           ;incstack = 0
  9213                           ; Regs used in _APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  9214     1EFD  3090               	movlw	144
  9215     1EFE  0086               	movwf	6
  9216     1EFF  3023               	movlw	35
  9217     1F00  0087               	movwf	7
  9218     1F01  0022               	movlb	2	; select bank2
  9219     1F02  0820               	movf	32,w	;volatile
  9220     1F03  0081               	movwf	1
  9221                           
  9222                           ;app_device_keyboard.c: 521:     PS2Keyboard_SendCommand(0xED);
  9223     1F04  30ED               	movlw	237
  9224     1F05  3191  219B         	fcall	_PS2Keyboard_SendCommand
  9225     1F07  0008               	return
  9226     1F08                     __end_of_APP_KeyboardProcessOutputReport:
  9227                           
  9228                           	psect	text46
  9229     119B                     __ptext46:	
  9230 ;; *************** function _PS2Keyboard_SendCommand *****************
  9231 ;; Defined at:
  9232 ;;		line 60 in file "ps2_keyboard.c"
  9233 ;; Parameters:    Size  Location     Type
  9234 ;;  cmd             1    wreg     unsigned char 
  9235 ;; Auto vars:     Size  Location     Type
  9236 ;;  cmd             1    0[BANK1 ] unsigned char 
  9237 ;; Return value:  Size  Location     Type
  9238 ;;                  1    wreg      void 
  9239 ;; Registers used:
  9240 ;;		wreg, status,2
  9241 ;; Tracked objects:
  9242 ;;		On entry : 1C/1
  9243 ;;		On exit  : 1F/2
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;Total ram usage:        1 bytes
  9251 ;; Hardware stack levels used: 1
  9252 ;; Hardware stack levels required when called: 10
  9253 ;; This function calls:
  9254 ;;		Nothing
  9255 ;; This function is called by:
  9256 ;;		_APP_KeyboardUpdateState
  9257 ;;		_APP_KeyboardProcessOutputReport
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261     119B                     _PS2Keyboard_SendCommand:	
  9262                           ;psect for function _PS2Keyboard_SendCommand
  9263                           
  9264                           
  9265                           ;incstack = 0
  9266                           ; Regs used in _PS2Keyboard_SendCommand: [wreg+status,2]
  9267                           ;PS2Keyboard_SendCommand@cmd stored from wreg
  9268     119B  0021               	movlb	1	; select bank1
  9269     119C  00A8               	movwf	PS2Keyboard_SendCommand@cmd^(0+128)
  9270                           
  9271                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
  9272     119D  0828               	movf	PS2Keyboard_SendCommand@cmd^(0+128),w
  9273     119E  0022               	movlb	2	; select bank2
  9274     119F  00CE               	movwf	_keyboardCommand^(0+256)	;volatile
  9275                           
  9276                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
  9277     11A0  138B               	bcf	11,7	;volatile
  9278     11A1  0021               	movlb	1	; select bank1
  9279     11A2  120C               	bcf	12,4	;volatile
  9280     11A3  0022               	movlb	2	; select bank2
  9281     11A4  120C               	bcf	12,4	;volatile
  9282                           
  9283                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
  9284     11A5  30F0               	movlw	240
  9285     11A6                     u6427:
  9286     11A6  3200               	nop2
  9287     11A7  0B89               	decfsz	9,f
  9288     11A8  29A6               	goto	u6427
  9289     11A9  0021               	movlb	1	; select bank1
  9290     11AA  160C               	bsf	12,4	;volatile
  9291                           
  9292                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
  9293     11AB  0020               	movlb	0	; select bank0
  9294     11AC  01E9               	clrf	_keyboardCommandCount	;volatile
  9295                           
  9296                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
  9297     11AD  300C               	movlw	12
  9298     11AE  0022               	movlb	2	; select bank2
  9299     11AF  00CD               	movwf	_keyboardCommandBits^(0+256)	;volatile
  9300                           
  9301                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
  9302     11B0  01CC               	clrf	_keyboardCommandOnes^(0+256)	;volatile
  9303     11B1  0021               	movlb	1	; select bank1
  9304     11B2  128C               	bcf	12,5	;volatile
  9305     11B3  0022               	movlb	2	; select bank2
  9306     11B4  128C               	bcf	12,5	;volatile
  9307                           
  9308                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
  9309     11B5  178B               	bsf	11,7	;volatile
  9310     11B6  0008               	return
  9311     11B7                     __end_of_PS2Keyboard_SendCommand:
  9312                           
  9313                           	psect	intentry
  9314     0004                     __pintentry:	
  9315 ;; *************** function _INTERRUPT_InterruptManager *****************
  9316 ;; Defined at:
  9317 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  9318 ;; Parameters:    Size  Location     Type
  9319 ;;		None
  9320 ;; Auto vars:     Size  Location     Type
  9321 ;;		None
  9322 ;; Return value:  Size  Location     Type
  9323 ;;                  1    wreg      void 
  9324 ;; Registers used:
  9325 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9326 ;; Tracked objects:
  9327 ;;		On entry : 0/0
  9328 ;;		On exit  : 0/0
  9329 ;;		Unchanged: 0/0
  9330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;Total ram usage:        0 bytes
  9336 ;; Hardware stack levels used: 1
  9337 ;; Hardware stack levels required when called: 9
  9338 ;; This function calls:
  9339 ;;		NULL
  9340 ;;		_EUSART_Receive_ISR
  9341 ;;		_EUSART_Transmit_ISR
  9342 ;;		_PIN_MANAGER_IOC
  9343 ;;		_TMR2_ISR
  9344 ;;		_USBDeviceTasks
  9345 ;; This function is called by:
  9346 ;;		Interrupt level 1
  9347 ;; This function uses a non-reentrant model
  9348 ;;
  9349                           
  9350     0004                     _INTERRUPT_InterruptManager:
  9351                           
  9352                           ;incstack = 0
  9353     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9354                           
  9355                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9356     0005  3180               	pagesel	$
  9357                           
  9358                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  9359     0006  198B               	btfsc	11,3	;volatile
  9360     0007  1C0B               	btfss	11,0	;volatile
  9361     0008  280D               	goto	i1l133
  9362                           
  9363                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  9364     0009  319E  26F2  3180   	fcall	_PIN_MANAGER_IOC
  9365                           
  9366                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  9367     000C  283B               	goto	i1l145
  9368     000D                     i1l133:	
  9369                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  9370                           
  9371     000D  1F0B               	btfss	11,6	;volatile
  9372     000E  283B               	goto	i1l145
  9373                           
  9374                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.USBIE == 1 && PIR2bits.USBIF == 1)
  9375     000F  0021               	movlb	1	; select bank1
  9376     0010  1D12               	btfss	18,2	;volatile
  9377     0011  2819               	goto	i1l136
  9378     0012  0020               	movlb	0	; select bank0
  9379     0013  1D12               	btfss	18,2	;volatile
  9380     0014  2819               	goto	i1l136
  9381                           
  9382                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             USBDeviceTasks();
  9383     0015  3186  26E3  3180   	fcall	_USBDeviceTasks
  9384                           
  9385                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  9386     0018  283B               	goto	i1l145
  9387     0019                     i1l136:	
  9388                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
  9389                           
  9390     0019  0021               	movlb	1	; select bank1
  9391     001A  1E11               	btfss	17,4	;volatile
  9392     001B  2826               	goto	i1l138
  9393     001C  0020               	movlb	0	; select bank0
  9394     001D  1E11               	btfss	17,4	;volatile
  9395     001E  2826               	goto	i1l138
  9396                           
  9397                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_TxDefaultInterruptHandler();
  9398     001F  0022               	movlb	2	; select bank2
  9399     0020  084B               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
  9400     0021  008A               	movwf	10
  9401     0022  084A               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
  9402     0023  000A               	callw
  9403     0024  3180               	pagesel	$
  9404                           
  9405                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  9406     0025  283B               	goto	i1l145
  9407     0026                     i1l138:	
  9408                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  9409                           
  9410     0026  0021               	movlb	1	; select bank1
  9411     0027  1E91               	btfss	17,5	;volatile
  9412     0028  2833               	goto	i1l140
  9413     0029  0020               	movlb	0	; select bank0
  9414     002A  1E91               	btfss	17,5	;volatile
  9415     002B  2833               	goto	i1l140
  9416                           
  9417                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             EUSART_RxDefaultInterruptHandler();
  9418     002C  0022               	movlb	2	; select bank2
  9419     002D  0849               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
  9420     002E  008A               	movwf	10
  9421     002F  0848               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
  9422     0030  000A               	callw
  9423     0031  3180               	pagesel	$
  9424                           
  9425                           ;mcc_generated_files/interrupt_manager.c: 72:         }
  9426     0032  283B               	goto	i1l145
  9427     0033                     i1l140:	
  9428                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
  9429                           
  9430     0033  0021               	movlb	1	; select bank1
  9431     0034  1C91               	btfss	17,1	;volatile
  9432     0035  283B               	goto	i1l145
  9433     0036  0020               	movlb	0	; select bank0
  9434     0037  1C91               	btfss	17,1	;volatile
  9435     0038  283B               	goto	i1l145
  9436                           
  9437                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR2_ISR();
  9438     0039  319F  2713         	fcall	_TMR2_ISR
  9439     003B                     i1l145:	
  9440                           ;mcc_generated_files/interrupt_manager.c: 76:         }
  9441                           
  9442     003B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9443     003C  0009               	retfie
  9444     003D                     __end_of_INTERRUPT_InterruptManager:
  9445                           
  9446                           	psect	text48
  9447     06E3                     __ptext48:	
  9448 ;; *************** function _USBDeviceTasks *****************
  9449 ;; Defined at:
  9450 ;;		line 481 in file "usb/usb_device.c"
  9451 ;; Parameters:    Size  Location     Type
  9452 ;;		None
  9453 ;; Auto vars:     Size  Location     Type
  9454 ;;  i               1   18[BANK0 ] unsigned char 
  9455 ;; Return value:  Size  Location     Type
  9456 ;;                  1    wreg      void 
  9457 ;; Registers used:
  9458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9459 ;; Tracked objects:
  9460 ;;		On entry : 1F/0
  9461 ;;		On exit  : 1F/0
  9462 ;;		Unchanged: 0/0
  9463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9467 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9468 ;;Total ram usage:        2 bytes
  9469 ;; Hardware stack levels used: 1
  9470 ;; Hardware stack levels required when called: 8
  9471 ;; This function calls:
  9472 ;;		_USBCtrlEPAllowStatusStage
  9473 ;;		_USBCtrlEPService
  9474 ;;		_USBIncrement1msInternalTimers
  9475 ;;		_USBStallHandler
  9476 ;;		_USBSuspend
  9477 ;;		_USBWakeFromSuspend
  9478 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9479 ;;		i1_USBDeviceInit
  9480 ;; This function is called by:
  9481 ;;		_INTERRUPT_InterruptManager
  9482 ;; This function uses a non-reentrant model
  9483 ;;
  9484                           
  9485     06E3                     _USBDeviceTasks:	
  9486                           ;psect for function _USBDeviceTasks
  9487                           
  9488                           
  9489                           ;usb/usb_device.c: 483:     uint8_t i;;usb/usb_device.c: 594:     if(USBDeviceState == A
      +                          TTACHED_STATE)
  9490                           
  9491                           ;incstack = 0
  9492                           ; Regs used in _USBDeviceTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9493     06E3  036C               	decf	_USBDeviceState,w
  9494     06E4  1D03               	btfss	3,2
  9495     06E5  2EEF               	goto	i1l5589
  9496                           
  9497                           ;usb/usb_device.c: 595:     {;usb/usb_device.c: 605:         if(!UCONbits.SE0)
  9498     06E6  003D               	movlb	29	; select bank29
  9499     06E7  1A8E               	btfsc	14,5	;volatile
  9500     06E8  2EEF               	goto	i1l5589
  9501                           
  9502                           ;usb/usb_device.c: 606:         {;usb/usb_device.c: 612:                 {UIR = 0;};
  9503     06E9  0190               	clrf	16	;volatile
  9504                           
  9505                           ;usb/usb_device.c: 618:             UIEbits.URSTIE = 1;
  9506     06EA  1412               	bsf	18,0	;volatile
  9507                           
  9508                           ;usb/usb_device.c: 619:             UIEbits.IDLEIE = 1;
  9509     06EB  1612               	bsf	18,4	;volatile
  9510                           
  9511                           ;usb/usb_device.c: 620:             USBDeviceState = POWERED_STATE;
  9512     06EC  3002               	movlw	2
  9513     06ED  0020               	movlb	0	; select bank0
  9514     06EE  00EC               	movwf	_USBDeviceState	;volatile
  9515     06EF                     i1l5589:
  9516                           
  9517                           ;usb/usb_device.c: 638:     if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  9518     06EF  003D               	movlb	29	; select bank29
  9519     06F0  1910               	btfsc	16,2	;volatile
  9520     06F1  1D12               	btfss	18,2	;volatile
  9521     06F2  2EFC               	goto	i1l5597
  9522                           
  9523                           ;usb/usb_device.c: 639:     {;usb/usb_device.c: 640:         (UIR &= 0xFB);
  9524     06F3  30FB               	movlw	251
  9525     06F4  0020               	movlb	0	; select bank0
  9526     06F5  00E1               	movwf	??_USBDeviceTasks
  9527     06F6  0861               	movf	??_USBDeviceTasks,w
  9528     06F7  003D               	movlb	29	; select bank29
  9529     06F8  0590               	andwf	16,f	;volatile
  9530                           
  9531                           ;usb/usb_device.c: 644:             USBWakeFromSuspend();
  9532     06F9  3191  21D3  3186   	fcall	_USBWakeFromSuspend
  9533     06FC                     i1l5597:
  9534                           
  9535                           ;usb/usb_device.c: 651:     if(UCONbits.SUSPND==1)
  9536     06FC  003D               	movlb	29	; select bank29
  9537     06FD  1C8E               	btfss	14,1	;volatile
  9538     06FE  2F02               	goto	i1l454
  9539                           
  9540                           ;usb/usb_device.c: 652:     {;usb/usb_device.c: 653:         PIR2bits.USBIF = 0;;
  9541     06FF  0020               	movlb	0	; select bank0
  9542     0700  1112               	bcf	18,2	;volatile
  9543                           
  9544                           ;usb/usb_device.c: 654:         return;
  9545     0701  0008               	return
  9546     0702                     i1l454:	
  9547                           ;usb/usb_device.c: 655:     }
  9548                           
  9549                           
  9550                           ;usb/usb_device.c: 667:     if(UIRbits.URSTIF && UIEbits.URSTIE)
  9551     0702  1810               	btfsc	16,0	;volatile
  9552     0703  1C12               	btfss	18,0	;volatile
  9553     0704  2F12               	goto	i1l5611
  9554                           
  9555                           ;usb/usb_device.c: 668:     {;usb/usb_device.c: 669:         USBDeviceInit();
  9556     0705  318D  25FE  3186   	fcall	i1_USBDeviceInit
  9557                           
  9558                           ;usb/usb_device.c: 673:         {PIE2bits.USBIE = 1;};
  9559     0708  0021               	movlb	1	; select bank1
  9560     0709  1512               	bsf	18,2	;volatile
  9561                           
  9562                           ;usb/usb_device.c: 675:         USBDeviceState = DEFAULT_STATE;
  9563     070A  3004               	movlw	4
  9564     070B  0020               	movlb	0	; select bank0
  9565     070C  00EC               	movwf	_USBDeviceState	;volatile
  9566                           
  9567                           ;usb/usb_device.c: 685:         (UIR &= 0xFE);
  9568     070D  30FE               	movlw	254
  9569     070E  00E1               	movwf	??_USBDeviceTasks
  9570     070F  0861               	movf	??_USBDeviceTasks,w
  9571     0710  003D               	movlb	29	; select bank29
  9572     0711  0590               	andwf	16,f	;volatile
  9573     0712                     i1l5611:
  9574                           
  9575                           ;usb/usb_device.c: 691:     if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  9576     0712  1A10               	btfsc	16,4	;volatile
  9577     0713  1E12               	btfss	18,4	;volatile
  9578     0714  2F18               	goto	i1l5617
  9579                           
  9580                           ;usb/usb_device.c: 692:     {;usb/usb_device.c: 698:             USBSuspend();
  9581     0715  3190  20E4  3186   	fcall	_USBSuspend
  9582     0718                     i1l5617:
  9583                           
  9584                           ;usb/usb_device.c: 712:     if(UIRbits.SOFIF)
  9585     0718  003D               	movlb	29	; select bank29
  9586     0719  1F10               	btfss	16,6	;volatile
  9587     071A  2F40               	goto	i1l5633
  9588                           
  9589                           ;usb/usb_device.c: 713:     {;usb/usb_device.c: 715:         if(UIEbits.SOFIE)
  9590     071B  1F12               	btfss	18,6	;volatile
  9591     071C  2F2C               	goto	i1l5623
  9592                           
  9593                           ;usb/usb_device.c: 716:         {;usb/usb_device.c: 717:             USER_USB_CALLBACK_E
      +                          VENT_HANDLER((USB_EVENT)EVENT_SOF,0,1);
  9594     071D  3073               	movlw	115
  9595     071E  0020               	movlb	0	; select bank0
  9596     071F  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9597     0720  3000               	movlw	0
  9598     0721  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9599     0722  3000               	movlw	0
  9600     0723  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9601     0724  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9602     0725  3001               	movlw	1
  9603     0726  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9604     0727  3000               	movlw	0
  9605     0728  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9606     0729  3194  241A  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9607     072C                     i1l5623:
  9608                           
  9609                           ;usb/usb_device.c: 719:         (UIR &= 0xBF);
  9610     072C  30BF               	movlw	191
  9611     072D  0020               	movlb	0	; select bank0
  9612     072E  00E1               	movwf	??_USBDeviceTasks
  9613     072F  0861               	movf	??_USBDeviceTasks,w
  9614     0730  003D               	movlb	29	; select bank29
  9615     0731  0590               	andwf	16,f	;volatile
  9616                           
  9617                           ;usb/usb_device.c: 722:             USBIncrement1msInternalTimers();
  9618     0732  3190  20B5  3186   	fcall	_USBIncrement1msInternalTimers
  9619                           
  9620                           ;usb/usb_device.c: 739:             if(USBStatusStageTimeoutCounter != 0u)
  9621     0735  085C               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  9622     0736  1903               	btfsc	3,2
  9623     0737  2F3A               	goto	i1l460
  9624                           
  9625                           ;usb/usb_device.c: 740:             {;usb/usb_device.c: 741:                 USBStatusSt
      +                          ageTimeoutCounter--;
  9626     0738  3001               	movlw	1
  9627     0739  02DC               	subwf	_USBStatusStageTimeoutCounter^(0+256),f	;volatile
  9628     073A                     i1l460:	
  9629                           ;usb/usb_device.c: 742:             }
  9630                           
  9631                           
  9632                           ;usb/usb_device.c: 748:             if(USBStatusStageTimeoutCounter == 0)
  9633     073A  085C               	movf	_USBStatusStageTimeoutCounter^(0+256),w	;volatile
  9634     073B  1D03               	btfss	3,2
  9635     073C  2F40               	goto	i1l5633
  9636                           
  9637                           ;usb/usb_device.c: 749:             {;usb/usb_device.c: 750:                 USBCtrlEPAl
      +                          lowStatusStage();
  9638     073D  318A  2200  3186   	fcall	_USBCtrlEPAllowStatusStage
  9639     0740                     i1l5633:
  9640                           
  9641                           ;usb/usb_device.c: 755:     if(UIRbits.STALLIF && UIEbits.STALLIE)
  9642     0740  003D               	movlb	29	; select bank29
  9643     0741  1A90               	btfsc	16,5	;volatile
  9644     0742  1E92               	btfss	18,5	;volatile
  9645     0743  2F47               	goto	i1l5639
  9646                           
  9647                           ;usb/usb_device.c: 756:     {;usb/usb_device.c: 757:         USBStallHandler();
  9648     0744  3192  228E  3186   	fcall	_USBStallHandler
  9649     0747                     i1l5639:
  9650                           
  9651                           ;usb/usb_device.c: 760:     if(UIRbits.UERRIF && UIEbits.UERRIE)
  9652     0747  1890               	btfsc	16,1	;volatile
  9653     0748  1C92               	btfss	18,1	;volatile
  9654     0749  2F5B               	goto	i1l5647
  9655                           
  9656                           ;usb/usb_device.c: 761:     {;usb/usb_device.c: 762:         USER_USB_CALLBACK_EVENT_HAN
      +                          DLER((USB_EVENT)EVENT_BUS_ERROR,0,1);
  9657     074A  30FF               	movlw	255
  9658     074B  0020               	movlb	0	; select bank0
  9659     074C  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9660     074D  307F               	movlw	127
  9661     074E  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9662     074F  3000               	movlw	0
  9663     0750  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9664     0751  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9665     0752  3001               	movlw	1
  9666     0753  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9667     0754  3000               	movlw	0
  9668     0755  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9669     0756  3194  241A  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9670                           
  9671                           ;usb/usb_device.c: 763:         {UEIR = 0;};
  9672     0759  003D               	movlb	29	; select bank29
  9673     075A  0193               	clrf	19	;volatile
  9674     075B                     i1l5647:
  9675                           
  9676                           ;usb/usb_device.c: 778:     if(USBDeviceState < DEFAULT_STATE)
  9677     075B  3004               	movlw	4
  9678     075C  0020               	movlb	0	; select bank0
  9679     075D  026C               	subwf	_USBDeviceState,w
  9680     075E  1803               	skipnc
  9681     075F  2F62               	goto	i1l464
  9682                           
  9683                           ;usb/usb_device.c: 779:     {;usb/usb_device.c: 780:         PIR2bits.USBIF = 0;;
  9684     0760  1112               	bcf	18,2	;volatile
  9685                           
  9686                           ;usb/usb_device.c: 781:         return;
  9687     0761  0008               	return
  9688     0762                     i1l464:	
  9689                           ;usb/usb_device.c: 782:     }
  9690                           
  9691                           
  9692                           ;usb/usb_device.c: 787:     if(UIEbits.TRNIE)
  9693     0762  003D               	movlb	29	; select bank29
  9694     0763  1D92               	btfss	18,3	;volatile
  9695     0764  2FB3               	goto	i1l465
  9696                           
  9697                           ;usb/usb_device.c: 788:     {;usb/usb_device.c: 789:         for(i = 0; i < 4u; i++)
  9698     0765  0020               	movlb	0	; select bank0
  9699     0766  01E2               	clrf	USBDeviceTasks@i
  9700     0767  2FB0               	goto	i1l466
  9701     0768                     i1l5657:
  9702                           
  9703                           ;usb/usb_device.c: 792:             {;usb/usb_device.c: 794:                 USTATcopy.V
      +                          al = USTAT;
  9704     0768  080F               	movf	15,w	;volatile
  9705     0769  0020               	movlb	0	; select bank0
  9706     076A  00ED               	movwf	_USTATcopy	;volatile
  9707                           
  9708                           ;usb/usb_device.c: 795:                 endpoint_number = USTATcopy.endpoint_number;
  9709     076B  0C6D               	rrf	_USTATcopy,w	;volatile
  9710     076C  00E1               	movwf	??_USBDeviceTasks
  9711     076D  0CE1               	rrf	??_USBDeviceTasks,f
  9712     076E  0C61               	rrf	??_USBDeviceTasks,w
  9713     076F  390F               	andlw	15
  9714     0770  0022               	movlb	2	; select bank2
  9715     0771  00DE               	movwf	_endpoint_number^(0+256)	;volatile
  9716                           
  9717                           ;usb/usb_device.c: 797:                 (UIR &= 0xF7);
  9718     0772  30F7               	movlw	247
  9719     0773  0020               	movlb	0	; select bank0
  9720     0774  00E1               	movwf	??_USBDeviceTasks
  9721     0775  0861               	movf	??_USBDeviceTasks,w
  9722     0776  003D               	movlb	29	; select bank29
  9723     0777  0590               	andwf	16,f	;volatile
  9724                           
  9725                           ;usb/usb_device.c: 802:                 if(USTATcopy.direction == 0)
  9726     0778  0020               	movlb	0	; select bank0
  9727     0779  196D               	btfsc	_USTATcopy,2	;volatile
  9728     077A  2F7F               	goto	i1l5667
  9729                           
  9730                           ;usb/usb_device.c: 803:                 {;usb/usb_device.c: 804:                     ep_
      +                          data_out[endpoint_number].bits.ping_pong_state ^= 1;
  9731     077B  0022               	movlb	2	; select bank2
  9732     077C  085E               	movf	_endpoint_number^(0+256),w	;volatile
  9733     077D  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  9734     077E  2F82               	goto	L7
  9735     077F                     i1l5667:	
  9736                           ;usb/usb_device.c: 805:                 }
  9737                           
  9738                           
  9739                           ;usb/usb_device.c: 807:                 {;usb/usb_device.c: 808:                     ep_
      +                          data_in[endpoint_number].bits.ping_pong_state ^= 1;
  9740     077F  0022               	movlb	2	; select bank2
  9741     0780  085E               	movf	_endpoint_number^(0+256),w	;volatile
  9742     0781  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  9743     0782                     L7:
  9744     0782  0086               	movwf	6
  9745     0783  3001               	movlw	1	; select bank2/3
  9746     0784  0087               	movwf	7
  9747     0785  0801               	movf	1,w
  9748     0786  3901               	andlw	1
  9749     0787  0020               	movlb	0	; select bank0
  9750     0788  00E1               	movwf	??_USBDeviceTasks
  9751     0789  3001               	movlw	1
  9752     078A  06E1               	xorwf	??_USBDeviceTasks,f
  9753     078B  0801               	movf	1,w
  9754     078C  0661               	xorwf	??_USBDeviceTasks,w
  9755     078D  39FE               	andlw	-2
  9756     078E  0661               	xorwf	??_USBDeviceTasks,w
  9757     078F  0081               	movwf	1
  9758                           
  9759                           ;usb/usb_device.c: 814:                 if(endpoint_number == 0)
  9760     0790  0022               	movlb	2	; select bank2
  9761     0791  085E               	movf	_endpoint_number^(0+256),w	;volatile
  9762     0792  1D03               	btfss	3,2
  9763     0793  2F98               	goto	i1l5673
  9764                           
  9765                           ;usb/usb_device.c: 815:                 {;usb/usb_device.c: 816:                     USB
      +                          CtrlEPService();
  9766     0794  3195  2562  3186   	fcall	_USBCtrlEPService
  9767                           
  9768                           ;usb/usb_device.c: 817:                 }
  9769     0797  2FA7               	goto	i1l5675
  9770     0798                     i1l5673:
  9771                           
  9772                           ;usb/usb_device.c: 819:                 {;usb/usb_device.c: 820:                     USE
      +                          R_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_TRANSFER,(uint8_t*)&USTATcopy.Val,0);
  9773     0798  3072               	movlw	114
  9774     0799  0020               	movlb	0	; select bank0
  9775     079A  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9776     079B  3000               	movlw	0
  9777     079C  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9778     079D  306D               	movlw	low _USTATcopy
  9779     079E  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9780     079F  3000               	movlw	high _USTATcopy
  9781     07A0  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9782     07A1  3000               	movlw	0
  9783     07A2  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9784     07A3  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9785     07A4  3194  241A  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9786     07A7                     i1l5675:
  9787                           
  9788                           ;usb/usb_device.c: 827:         }
  9789     07A7  3001               	movlw	1
  9790     07A8  0020               	movlb	0	; select bank0
  9791     07A9  00E1               	movwf	??_USBDeviceTasks
  9792     07AA  0861               	movf	??_USBDeviceTasks,w
  9793     07AB  07E2               	addwf	USBDeviceTasks@i,f
  9794     07AC  3004               	movlw	4
  9795     07AD  0262               	subwf	USBDeviceTasks@i,w
  9796     07AE  1803               	btfsc	3,0
  9797     07AF  2FB3               	goto	i1l465
  9798     07B0                     i1l466:
  9799                           
  9800                           ;usb/usb_device.c: 790:         {;usb/usb_device.c: 791:             if(UIRbits.TRNIF)
  9801     07B0  003D               	movlb	29	; select bank29
  9802     07B1  1990               	btfsc	16,3	;volatile
  9803     07B2  2F68               	goto	i1l5657
  9804     07B3                     i1l465:	
  9805                           ;usb/usb_device.c: 828:     }
  9806                           
  9807                           
  9808                           ;usb/usb_device.c: 830:     PIR2bits.USBIF = 0;;
  9809     07B3  0020               	movlb	0	; select bank0
  9810     07B4  1112               	bcf	18,2	;volatile
  9811     07B5  0008               	return
  9812     07B6                     __end_of_USBDeviceTasks:
  9813                           
  9814                           	psect	text49
  9815     0DFE                     __ptext49:	
  9816 ;; *************** function i1_USBDeviceInit *****************
  9817 ;; Defined at:
  9818 ;;		line 281 in file "usb/usb_device.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;		None
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;  p               2    4[COMMON] PTR unsigned char 
  9823 ;;		 -> UEP1(1), 
  9824 ;;  i               1    7[COMMON] unsigned char 
  9825 ;;  i               1    6[COMMON] unsigned char 
  9826 ;; Return value:  Size  Location     Type
  9827 ;;                  1    wreg      void 
  9828 ;; Registers used:
  9829 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9830 ;; Tracked objects:
  9831 ;;		On entry : 1F/1D
  9832 ;;		On exit  : 1F/0
  9833 ;;		Unchanged: 0/0
  9834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;Total ram usage:        8 bytes
  9840 ;; Hardware stack levels used: 1
  9841 ;; This function calls:
  9842 ;;		Nothing
  9843 ;; This function is called by:
  9844 ;;		_USBDeviceTasks
  9845 ;; This function uses a non-reentrant model
  9846 ;;
  9847                           
  9848     0DFE                     i1_USBDeviceInit:	
  9849                           ;psect for function i1_USBDeviceInit
  9850                           
  9851                           
  9852                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  9853                           
  9854                           ;incstack = 0
  9855                           ; Regs used in i1_USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  9856     0DFE  0021               	movlb	1	; select bank1
  9857     0DFF  1112               	bcf	18,2	;volatile
  9858                           
  9859                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  9860     0E00  003D               	movlb	29	; select bank29
  9861     0E01  0193               	clrf	19	;volatile
  9862                           
  9863                           ;usb/usb_device.c: 295:     {UIR = 0;};
  9864     0E02  0190               	clrf	16	;volatile
  9865                           
  9866                           ;usb/usb_device.c: 298:     UEP0 = 0;
  9867     0E03  0198               	clrf	24	;volatile
  9868                           
  9869                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  9870     0E04  300E               	movlw	14
  9871     0E05  00F5               	movwf	i1USBDeviceInit@p+1
  9872     0E06  3099               	movlw	153
  9873     0E07  00F4               	movwf	i1USBDeviceInit@p
  9874     0E08  01F6               	clrf	i1USBDeviceInit@i_1324
  9875     0E09                     i1l5487:
  9876     0E09  0874               	movf	i1USBDeviceInit@p,w
  9877     0E0A  0086               	movwf	6
  9878     0E0B  0875               	movf	i1USBDeviceInit@p+1,w
  9879     0E0C  0087               	movwf	7
  9880     0E0D  0181               	clrf	1
  9881     0E0E  3001               	movlw	1
  9882     0E0F  07F4               	addwf	i1USBDeviceInit@p,f
  9883     0E10  3000               	movlw	0
  9884     0E11  3DF5               	addwfc	i1USBDeviceInit@p+1,f
  9885     0E12  3001               	movlw	1
  9886     0E13  00F0               	movwf	??i1_USBDeviceInit
  9887     0E14  0870               	movf	??i1_USBDeviceInit,w
  9888     0E15  07F6               	addwf	i1USBDeviceInit@i_1324,f
  9889     0E16  0876               	movf	i1USBDeviceInit@i_1324,w
  9890     0E17  1903               	btfsc	3,2
  9891     0E18  2E09               	goto	i1l5487
  9892                           
  9893                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  9894     0E19  3016               	movlw	22
  9895     0E1A  0091               	movwf	17	;volatile
  9896     0E1B  309F               	movlw	159
  9897     0E1C  0097               	movwf	23	;volatile
  9898     0E1D  307B               	movlw	123
  9899     0E1E  0092               	movwf	18	;volatile
  9900                           
  9901                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  9902     0E1F  01F7               	clrf	i1USBDeviceInit@i
  9903     0E20                     i1l5503:
  9904                           
  9905                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
  9906     0E20  0877               	movf	i1USBDeviceInit@i,w
  9907     0E21  00F0               	movwf	??i1_USBDeviceInit
  9908     0E22  3001               	movlw	1
  9909     0E23                     u492_25:
  9910     0E23  35F0               	lslf	??i1_USBDeviceInit,f
  9911     0E24  3EFF               	addlw	-1
  9912     0E25  1D03               	skipz
  9913     0E26  2E23               	goto	u492_25
  9914     0E27  3570               	lslf	??i1_USBDeviceInit,w
  9915     0E28  3E20               	addlw	32
  9916     0E29  0086               	movwf	6
  9917     0E2A  0187               	clrf	7
  9918     0E2B  3000               	movlw	0
  9919     0E2C  3FC0               	movwi [0]fsr1
  9920     0E2D  3000               	movlw	0
  9921     0E2E  3FC1               	movwi [1]fsr1
  9922     0E2F  3FC2               	movwi [2]fsr1
  9923     0E30  3FC3               	movwi [3]fsr1
  9924                           
  9925                           ;usb/usb_device.c: 314:     }
  9926     0E31  3001               	movlw	1
  9927     0E32  00F0               	movwf	??i1_USBDeviceInit
  9928     0E33  0870               	movf	??i1_USBDeviceInit,w
  9929     0E34  07F7               	addwf	i1USBDeviceInit@i,f
  9930     0E35  3008               	movlw	8
  9931     0E36  0277               	subwf	i1USBDeviceInit@i,w
  9932     0E37  1C03               	skipc
  9933     0E38  2E20               	goto	i1l5503
  9934                           
  9935                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
  9936     0E39  170E               	bsf	14,6	;volatile
  9937                           
  9938                           ;usb/usb_device.c: 320:     UADDR = 0x00;
  9939     0E3A  0196               	clrf	22	;volatile
  9940                           
  9941                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
  9942     0E3B  120E               	bcf	14,4	;volatile
  9943                           
  9944                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
  9945     0E3C  130E               	bcf	14,6	;volatile
  9946     0E3D                     i1l5515:
  9947                           
  9948                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
  9949     0E3D  30F7               	movlw	247
  9950     0E3E  00F0               	movwf	??i1_USBDeviceInit
  9951     0E3F  0870               	movf	??i1_USBDeviceInit,w
  9952     0E40  0590               	andwf	16,f	;volatile
  9953                           
  9954                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
  9955     0E41  0021               	movlb	1	; select bank1
  9956     0E42  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
  9957                           
  9958                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
  9959     0E43  0022               	movlb	2	; select bank2
  9960     0E44  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
  9961                           
  9962                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
  9963     0E45  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
  9964     0E46  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  9965                           
  9966                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
  9967     0E47  003D               	movlb	29	; select bank29
  9968     0E48  1990               	btfsc	16,3	;volatile
  9969     0E49  2E3D               	goto	i1l5515
  9970                           
  9971                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
  9972     0E4A  3001               	movlw	1
  9973     0E4B  0022               	movlb	2	; select bank2
  9974     0E4C  00DA               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  9975                           
  9976                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
  9977     0E4D  3001               	movlw	1
  9978     0E4E  00D9               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  9979                           
  9980                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
  9981     0E4F  01D8               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  9982                           
  9983                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
  9984     0E50  01D7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  9985                           
  9986                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
  9987     0E51  01DF               	clrf	_USBBusIsSuspended^(0+256)	;volatile
  9988                           
  9989                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
  9990     0E52  01F7               	clrf	i1USBDeviceInit@i
  9991     0E53                     i1l5537:
  9992                           
  9993                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
  9994     0E53  3577               	lslf	i1USBDeviceInit@i,w
  9995     0E54  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  9996     0E55  0086               	movwf	6
  9997     0E56  0187               	clrf	7
  9998     0E57  3000               	movlw	0
  9999     0E58  3FC0               	movwi [0]fsr1
 10000     0E59  3FC1               	movwi [1]fsr1
 10001                           
 10002                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
 10003     0E5A  3577               	lslf	i1USBDeviceInit@i,w
 10004     0E5B  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 10005     0E5C  0086               	movwf	6
 10006     0E5D  3001               	movlw	1	; select bank2/3
 10007     0E5E  0087               	movwf	7
 10008     0E5F  3000               	movlw	0
 10009     0E60  3FC0               	movwi [0]fsr1
 10010     0E61  3FC1               	movwi [1]fsr1
 10011                           
 10012                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
 10013     0E62  0877               	movf	i1USBDeviceInit@i,w
 10014     0E63  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 10015     0E64  0086               	movwf	6
 10016     0E65  3001               	movlw	1	; select bank2/3
 10017     0E66  0087               	movwf	7
 10018     0E67  0181               	clrf	1
 10019                           
 10020                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
 10021     0E68  0877               	movf	i1USBDeviceInit@i,w
 10022     0E69  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 10023     0E6A  0086               	movwf	6
 10024     0E6B  3001               	movlw	1	; select bank2/3
 10025     0E6C  0087               	movwf	7
 10026     0E6D  0181               	clrf	1
 10027                           
 10028                           ;usb/usb_device.c: 355:     }
 10029     0E6E  3001               	movlw	1
 10030     0E6F  00F0               	movwf	??i1_USBDeviceInit
 10031     0E70  0870               	movf	??i1_USBDeviceInit,w
 10032     0E71  07F7               	addwf	i1USBDeviceInit@i,f
 10033     0E72  3002               	movlw	2
 10034     0E73  0277               	subwf	i1USBDeviceInit@i,w
 10035     0E74  1C03               	skipc
 10036     0E75  2E53               	goto	i1l5537
 10037                           
 10038                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 10039     0E76  3028               	movlw	40
 10040     0E77  0020               	movlb	0	; select bank0
 10041     0E78  00E3               	movwf	_pBDTEntryIn
 10042     0E79  3000               	movlw	0
 10043     0E7A  00E4               	movwf	_pBDTEntryIn+1
 10044                           
 10045                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
 10046     0E7B  3016               	movlw	22
 10047     0E7C  003D               	movlb	29	; select bank29
 10048     0E7D  0098               	movwf	24	;volatile
 10049                           
 10050                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
 10051     0E7E  3040               	movlw	64
 10052     0E7F  00F0               	movwf	??i1_USBDeviceInit
 10053     0E80  3000               	movlw	0
 10054     0E81  00F1               	movwf	??i1_USBDeviceInit+1
 10055     0E82  30FF               	movlw	255
 10056     0E83  0570               	andwf	??i1_USBDeviceInit,w
 10057     0E84  00F2               	movwf	??i1_USBDeviceInit+2
 10058     0E85  307F               	movlw	127
 10059     0E86  0571               	andwf	??i1_USBDeviceInit+1,w
 10060     0E87  00F3               	movwf	??i1_USBDeviceInit+3
 10061     0E88  0872               	movf	??i1_USBDeviceInit+2,w
 10062     0E89  0020               	movlb	0	; select bank0
 10063     0E8A  00A2               	movwf	34	;volatile
 10064     0E8B  0873               	movf	??i1_USBDeviceInit+3,w
 10065     0E8C  00A3               	movwf	35	;volatile
 10066                           
 10067                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
 10068     0E8D  3008               	movlw	8
 10069     0E8E  00A1               	movwf	33	;volatile
 10070                           
 10071                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
 10072     0E8F  3004               	movlw	4
 10073     0E90  00A0               	movwf	32	;volatile
 10074                           
 10075                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
 10076     0E91  17A0               	bsf	32,7	;volatile
 10077                           
 10078                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
 10079     0E92  01EF               	clrf	_USBActiveConfiguration	;volatile
 10080                           
 10081                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
 10082     0E93  3000               	movlw	0
 10083     0E94  0023               	movlb	3	; select bank3
 10084     0E95  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
 10085     0E96  3000               	movlw	0
 10086     0E97  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
 10087     0E98  3000               	movlw	0
 10088     0E99  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
 10089     0E9A  3000               	movlw	0
 10090     0E9B  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
 10091                           
 10092                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
 10093     0E9C  0022               	movlb	2	; select bank2
 10094     0E9D  01D6               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10095                           
 10096                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
 10097     0E9E  0020               	movlb	0	; select bank0
 10098     0E9F  01EC               	clrf	_USBDeviceState	;volatile
 10099     0EA0  0008               	return
 10100     0EA1                     __end_ofi1_USBDeviceInit:
 10101                           
 10102                           	psect	text50
 10103     11D3                     __ptext50:	
 10104 ;; *************** function _USBWakeFromSuspend *****************
 10105 ;; Defined at:
 10106 ;;		line 2310 in file "usb/usb_device.c"
 10107 ;; Parameters:    Size  Location     Type
 10108 ;;		None
 10109 ;; Auto vars:     Size  Location     Type
 10110 ;;		None
 10111 ;; Return value:  Size  Location     Type
 10112 ;;                  1    wreg      void 
 10113 ;; Registers used:
 10114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10115 ;; Tracked objects:
 10116 ;;		On entry : 1F/1D
 10117 ;;		On exit  : 1F/2
 10118 ;;		Unchanged: 0/0
 10119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10124 ;;Total ram usage:        1 bytes
 10125 ;; Hardware stack levels used: 1
 10126 ;; Hardware stack levels required when called: 4
 10127 ;; This function calls:
 10128 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10129 ;; This function is called by:
 10130 ;;		_USBDeviceTasks
 10131 ;; This function uses a non-reentrant model
 10132 ;;
 10133                           
 10134     11D3                     _USBWakeFromSuspend:	
 10135                           ;psect for function _USBWakeFromSuspend
 10136                           
 10137                           
 10138                           ;usb/usb_device.c: 2312:     USBBusIsSuspended = 0;
 10139                           
 10140                           ;incstack = 0
 10141                           ; Regs used in _USBWakeFromSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10142     11D3  0022               	movlb	2	; select bank2
 10143     11D4  01DF               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 10144                           
 10145                           ;usb/usb_device.c: 2318:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_RESUME,0,0
      +                          );
 10146     11D5  3074               	movlw	116
 10147     11D6  0020               	movlb	0	; select bank0
 10148     11D7  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10149     11D8  3000               	movlw	0
 10150     11D9  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10151     11DA  3000               	movlw	0
 10152     11DB  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10153     11DC  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10154     11DD  3000               	movlw	0
 10155     11DE  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10156     11DF  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10157     11E0  3194  241A  3191   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10158                           
 10159                           ;usb/usb_device.c: 2325:         UCONbits.SUSPND = 0;
 10160     11E3  003D               	movlb	29	; select bank29
 10161     11E4  108E               	bcf	14,1	;volatile
 10162                           
 10163                           ;usb/usb_device.c: 2330:     UIEbits.ACTVIE = 0;
 10164     11E5  1112               	bcf	18,2	;volatile
 10165     11E6                     i1l5257:	
 10166                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 10167                           
 10168                           
 10169                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 10170     11E6  1D10               	btfss	16,2	;volatile
 10171     11E7  29ED               	goto	i1l5259
 10172                           
 10173                           ;usb/usb_device.c: 2350:     {;usb/usb_device.c: 2351:         (UIR &= 0xFB);
 10174     11E8  30FB               	movlw	251
 10175     11E9  00FD               	movwf	??_USBWakeFromSuspend
 10176     11EA  087D               	movf	??_USBWakeFromSuspend,w
 10177     11EB  0590               	andwf	16,f	;volatile
 10178     11EC  29E6               	goto	i1l5257
 10179     11ED                     i1l5259:
 10180                           
 10181                           ;usb/usb_device.c: 2354:     USBTicksSinceSuspendEnd = 0;
 10182     11ED  0022               	movlb	2	; select bank2
 10183     11EE  01D6               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10184     11EF  0008               	return
 10185     11F0                     __end_of_USBWakeFromSuspend:
 10186                           
 10187                           	psect	text51
 10188     10E4                     __ptext51:	
 10189 ;; *************** function _USBSuspend *****************
 10190 ;; Defined at:
 10191 ;;		line 2252 in file "usb/usb_device.c"
 10192 ;; Parameters:    Size  Location     Type
 10193 ;;		None
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;		None
 10196 ;; Return value:  Size  Location     Type
 10197 ;;                  1    wreg      void 
 10198 ;; Registers used:
 10199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10200 ;; Tracked objects:
 10201 ;;		On entry : 1F/1D
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;Total ram usage:        1 bytes
 10210 ;; Hardware stack levels used: 1
 10211 ;; Hardware stack levels required when called: 4
 10212 ;; This function calls:
 10213 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10214 ;; This function is called by:
 10215 ;;		_USBDeviceTasks
 10216 ;; This function uses a non-reentrant model
 10217 ;;
 10218                           
 10219     10E4                     _USBSuspend:	
 10220                           ;psect for function _USBSuspend
 10221                           
 10222                           
 10223                           ;usb/usb_device.c: 2277:     UIEbits.ACTVIE = 1;
 10224                           
 10225                           ;incstack = 0
 10226                           ; Regs used in _USBSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10227     10E4  1512               	bsf	18,2	;volatile
 10228                           
 10229                           ;usb/usb_device.c: 2278:     (UIR &= 0xEF);
 10230     10E5  30EF               	movlw	239
 10231     10E6  00FD               	movwf	??_USBSuspend
 10232     10E7  087D               	movf	??_USBSuspend,w
 10233     10E8  0590               	andwf	16,f	;volatile
 10234                           
 10235                           ;usb/usb_device.c: 2281:         UCONbits.SUSPND = 1;
 10236     10E9  148E               	bsf	14,1	;volatile
 10237                           
 10238                           ;usb/usb_device.c: 2284:     USBBusIsSuspended = 1;
 10239     10EA  3001               	movlw	1
 10240     10EB  0022               	movlb	2	; select bank2
 10241     10EC  00DF               	movwf	_USBBusIsSuspended^(0+256)	;volatile
 10242                           
 10243                           ;usb/usb_device.c: 2285:     USBTicksSinceSuspendEnd = 0;
 10244     10ED  01D6               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10245                           
 10246                           ;usb/usb_device.c: 2292:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SUSPEND,0,
      +                          0);
 10247     10EE  3075               	movlw	117
 10248     10EF  0020               	movlb	0	; select bank0
 10249     10F0  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10250     10F1  3000               	movlw	0
 10251     10F2  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10252     10F3  3000               	movlw	0
 10253     10F4  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10254     10F5  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10255     10F6  3000               	movlw	0
 10256     10F7  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10257     10F8  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10258     10F9  3194  241A         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10259     10FB  0008               	return
 10260     10FC                     __end_of_USBSuspend:
 10261                           
 10262                           	psect	text52
 10263     128E                     __ptext52:	
 10264 ;; *************** function _USBStallHandler *****************
 10265 ;; Defined at:
 10266 ;;		line 2209 in file "usb/usb_device.c"
 10267 ;; Parameters:    Size  Location     Type
 10268 ;;		None
 10269 ;; Auto vars:     Size  Location     Type
 10270 ;;		None
 10271 ;; Return value:  Size  Location     Type
 10272 ;;                  1    wreg      void 
 10273 ;; Registers used:
 10274 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10275 ;; Tracked objects:
 10276 ;;		On entry : 1F/1D
 10277 ;;		On exit  : 1F/1D
 10278 ;;		Unchanged: 0/0
 10279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10282 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10283 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10284 ;;Total ram usage:        1 bytes
 10285 ;; Hardware stack levels used: 1
 10286 ;; This function calls:
 10287 ;;		Nothing
 10288 ;; This function is called by:
 10289 ;;		_USBDeviceTasks
 10290 ;; This function uses a non-reentrant model
 10291 ;;
 10292                           
 10293     128E                     _USBStallHandler:	
 10294                           ;psect for function _USBStallHandler
 10295                           
 10296                           
 10297                           ;usb/usb_device.c: 2221:     if(UEP0bits.EPSTALL == 1)
 10298                           
 10299                           ;incstack = 0
 10300                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10301     128E  1C18               	btfss	24,0	;volatile
 10302     128F  2AAB               	goto	i1l5291
 10303                           
 10304                           ;usb/usb_device.c: 2222:     {;usb/usb_device.c: 2224:         if((pBDTEntryEP0OutCurren
      +                          t->STAT.Val == 0x80) && (pBDTEntryIn[0]->STAT.Val == (0x80|0x04)))
 10305     1290  0020               	movlb	0	; select bank0
 10306     1291  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10307     1292  0086               	movwf	6
 10308     1293  0187               	clrf	7
 10309     1294  3080               	movlw	128
 10310     1295  0601               	xorwf	1,w
 10311     1296  1D03               	btfss	3,2
 10312     1297  2AA9               	goto	i1l5289
 10313     1298  0863               	movf	_pBDTEntryIn,w
 10314     1299  0086               	movwf	6
 10315     129A  0864               	movf	_pBDTEntryIn+1,w
 10316     129B  0087               	movwf	7
 10317     129C  3084               	movlw	132
 10318     129D  0601               	xorwf	1,w
 10319     129E  1D03               	btfss	3,2
 10320     129F  2AA9               	goto	i1l5289
 10321                           
 10322                           ;usb/usb_device.c: 2225:         {;usb/usb_device.c: 2227:             pBDTEntryEP0OutCu
      +                          rrent->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 10323     12A0  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10324     12A1  0086               	movwf	6
 10325     12A2  0187               	clrf	7
 10326     12A3  300C               	movlw	12
 10327     12A4  0081               	movwf	1
 10328                           
 10329                           ;usb/usb_device.c: 2228:             pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 10330     12A5  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10331     12A6  0086               	movwf	6
 10332     12A7  0187               	clrf	7
 10333     12A8  1781               	bsf	1,7
 10334     12A9                     i1l5289:
 10335                           
 10336                           ;usb/usb_device.c: 2230:         UEP0bits.EPSTALL = 0;
 10337     12A9  003D               	movlb	29	; select bank29
 10338     12AA  1018               	bcf	24,0	;volatile
 10339     12AB                     i1l5291:
 10340                           
 10341                           ;usb/usb_device.c: 2233:     (UIR &= 0xDF);
 10342     12AB  30DF               	movlw	223
 10343     12AC  00F0               	movwf	??_USBStallHandler
 10344     12AD  0870               	movf	??_USBStallHandler,w
 10345     12AE  0590               	andwf	16,f	;volatile
 10346     12AF  0008               	return
 10347     12B0                     __end_of_USBStallHandler:
 10348                           
 10349                           	psect	text53
 10350     10B5                     __ptext53:	
 10351 ;; *************** function _USBIncrement1msInternalTimers *****************
 10352 ;; Defined at:
 10353 ;;		line 2998 in file "usb/usb_device.c"
 10354 ;; Parameters:    Size  Location     Type
 10355 ;;		None
 10356 ;; Auto vars:     Size  Location     Type
 10357 ;;		None
 10358 ;; Return value:  Size  Location     Type
 10359 ;;                  1    wreg      void 
 10360 ;; Registers used:
 10361 ;;		wreg, status,2, status,0
 10362 ;; Tracked objects:
 10363 ;;		On entry : 1F/1D
 10364 ;;		On exit  : 1F/2
 10365 ;;		Unchanged: 0/0
 10366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10370 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;Total ram usage:        1 bytes
 10372 ;; Hardware stack levels used: 1
 10373 ;; This function calls:
 10374 ;;		Nothing
 10375 ;; This function is called by:
 10376 ;;		_USBDeviceTasks
 10377 ;; This function uses a non-reentrant model
 10378 ;;
 10379                           
 10380     10B5                     _USBIncrement1msInternalTimers:	
 10381                           ;psect for function _USBIncrement1msInternalTimers
 10382                           
 10383                           
 10384                           ;usb/usb_device.c: 3006:     USB1msTickCount++;
 10385                           
 10386                           ;incstack = 0
 10387                           ; Regs used in _USBIncrement1msInternalTimers: [wreg+status,2+status,0]
 10388     10B5  3001               	movlw	1
 10389     10B6  0023               	movlb	3	; select bank3
 10390     10B7  07C0               	addwf	_USB1msTickCount^(0+384),f	;volatile
 10391     10B8  3000               	movlw	0
 10392     10B9  3DC1               	addwfc	(_USB1msTickCount+1)^(0+384),f	;volatile
 10393     10BA  3000               	movlw	0
 10394     10BB  3DC2               	addwfc	(_USB1msTickCount+2)^(0+384),f	;volatile
 10395     10BC  3000               	movlw	0
 10396     10BD  3DC3               	addwfc	(_USB1msTickCount+3)^(0+384),f	;volatile
 10397                           
 10398                           ;usb/usb_device.c: 3007:     if(USBBusIsSuspended == 0)
 10399     10BE  0022               	movlb	2	; select bank2
 10400     10BF  085F               	movf	_USBBusIsSuspended^(0+256),w	;volatile
 10401     10C0  1D03               	btfss	3,2
 10402     10C1  0008               	return
 10403                           
 10404                           ;usb/usb_device.c: 3008:     {;usb/usb_device.c: 3009:         USBTicksSinceSuspendEnd++
      +                          ;
 10405     10C2  3001               	movlw	1
 10406     10C3  00F0               	movwf	??_USBIncrement1msInternalTimers
 10407     10C4  0870               	movf	??_USBIncrement1msInternalTimers,w
 10408     10C5  07D6               	addwf	_USBTicksSinceSuspendEnd^(0+256),f	;volatile
 10409                           
 10410                           ;usb/usb_device.c: 3011:         if(USBTicksSinceSuspendEnd == 0)
 10411     10C6  0856               	movf	_USBTicksSinceSuspendEnd^(0+256),w	;volatile
 10412     10C7  1D03               	btfss	3,2
 10413     10C8  0008               	return
 10414                           
 10415                           ;usb/usb_device.c: 3012:         {;usb/usb_device.c: 3013:             USBTicksSinceSusp
      +                          endEnd = 255;
 10416     10C9  30FF               	movlw	255
 10417     10CA  00D6               	movwf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10418     10CB  0008               	return
 10419     10CC                     __end_of_USBIncrement1msInternalTimers:
 10420                           
 10421                           	psect	text54
 10422     1562                     __ptext54:	
 10423 ;; *************** function _USBCtrlEPService *****************
 10424 ;; Defined at:
 10425 ;;		line 2379 in file "usb/usb_device.c"
 10426 ;; Parameters:    Size  Location     Type
 10427 ;;		None
 10428 ;; Auto vars:     Size  Location     Type
 10429 ;;		None
 10430 ;; Return value:  Size  Location     Type
 10431 ;;                  1    wreg      void 
 10432 ;; Registers used:
 10433 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10434 ;; Tracked objects:
 10435 ;;		On entry : 1F/2
 10436 ;;		On exit  : 1D/0
 10437 ;;		Unchanged: 0/0
 10438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;Total ram usage:        1 bytes
 10444 ;; Hardware stack levels used: 1
 10445 ;; Hardware stack levels required when called: 7
 10446 ;; This function calls:
 10447 ;;		_USBCtrlTrfInHandler
 10448 ;;		_USBCtrlTrfOutHandler
 10449 ;;		_USBCtrlTrfSetupHandler
 10450 ;;		i1_memcpy
 10451 ;; This function is called by:
 10452 ;;		_USBDeviceTasks
 10453 ;; This function uses a non-reentrant model
 10454 ;;
 10455                           
 10456     1562                     _USBCtrlEPService:	
 10457                           ;psect for function _USBCtrlEPService
 10458                           
 10459                           
 10460                           ;usb/usb_device.c: 2385:         USBStatusStageTimeoutCounter = (uint8_t)45;
 10461                           
 10462                           ;incstack = 0
 10463                           ; Regs used in _USBCtrlEPService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10464     1562  302D               	movlw	45
 10465     1563  00DC               	movwf	_USBStatusStageTimeoutCounter^(0+256)	;volatile
 10466                           
 10467                           ;usb/usb_device.c: 2389:     if((USTATcopy.Val & ~0x02) == 0x00)
 10468     1564  0020               	movlb	0	; select bank0
 10469     1565  086D               	movf	_USTATcopy,w	;volatile
 10470     1566  39FD               	andlw	253
 10471     1567  1D03               	btfss	3,2
 10472     1568  2D9F               	goto	i1l5311
 10473                           
 10474                           ;usb/usb_device.c: 2390:     {;usb/usb_device.c: 2393:             pBDTEntryEP0OutCurren
      +                          t = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val & 0x7E)>>1];
 10475     1569  366D               	lsrf	_USTATcopy,w	;volatile
 10476     156A  393F               	andlw	63
 10477     156B  00E0               	movwf	??_USBCtrlEPService
 10478     156C  3001               	movlw	1
 10479     156D                     u456_25:
 10480     156D  35E0               	lslf	??_USBCtrlEPService,f
 10481     156E  3EFF               	addlw	-1
 10482     156F  1D03               	skipz
 10483     1570  2D6D               	goto	u456_25
 10484     1571  3560               	lslf	??_USBCtrlEPService,w
 10485     1572  3E20               	addlw	32
 10486     1573  00EB               	movwf	_pBDTEntryEP0OutCurrent
 10487                           
 10488                           ;usb/usb_device.c: 2401:         pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 10489     1574  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10490     1575  00E7               	movwf	_pBDTEntryEP0OutNext
 10491     1576  01E8               	clrf	_pBDTEntryEP0OutNext+1
 10492                           
 10493                           ;usb/usb_device.c: 2403:         pBDTEntryEP0OutNext = (volatile BDT_ENTRY*)(((uint16_t)
      +                          pBDTEntryEP0OutNext) ^ 0x0004);
 10494     1577  3004               	movlw	4
 10495     1578  0667               	xorwf	_pBDTEntryEP0OutNext,w
 10496     1579  00E7               	movwf	_pBDTEntryEP0OutNext
 10497     157A  3000               	movlw	0
 10498     157B  0668               	xorwf	_pBDTEntryEP0OutNext+1,w
 10499     157C  00E8               	movwf	_pBDTEntryEP0OutNext+1
 10500                           
 10501                           ;usb/usb_device.c: 2406:         if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
 10502     157D  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10503     157E  0086               	movwf	6
 10504     157F  0187               	clrf	7
 10505     1580  0C01               	rrf	1,w
 10506     1581  0C89               	rrf	9,f
 10507     1582  390F               	andlw	15
 10508     1583  3A0D               	xorlw	13
 10509     1584  1D03               	skipz
 10510     1585  2D9C               	goto	i1l5309
 10511                           
 10512                           ;usb/usb_device.c: 2407:         {;usb/usb_device.c: 2412:             memcpy((uint8_t*)
      +                          &SetupPkt, (uint8_t*)((void *)(pBDTEntryEP0OutCurrent->ADR)), 8);
 10513     1586  3040               	movlw	64
 10514     1587  00F6               	movwf	i1memcpy@d1
 10515     1588  3000               	movlw	0
 10516     1589  00F7               	movwf	i1memcpy@d1+1
 10517     158A  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10518     158B  3E02               	addlw	2
 10519     158C  0086               	movwf	6
 10520     158D  0187               	clrf	7
 10521     158E  3F40               	moviw [0]fsr1
 10522     158F  00F8               	movwf	i1memcpy@s1
 10523     1590  3F41               	moviw [1]fsr1
 10524     1591  00F9               	movwf	i1memcpy@s1+1
 10525     1592  3008               	movlw	8
 10526     1593  00FA               	movwf	i1memcpy@n
 10527     1594  3000               	movlw	0
 10528     1595  00FB               	movwf	i1memcpy@n+1
 10529     1596  3192  22F8  3195   	fcall	i1_memcpy
 10530                           
 10531                           ;usb/usb_device.c: 2415:             USBCtrlTrfSetupHandler();
 10532     1599  3187  27B6         	fcall	_USBCtrlTrfSetupHandler
 10533                           
 10534                           ;usb/usb_device.c: 2416:         }
 10535     159B  0008               	return
 10536     159C                     i1l5309:
 10537                           
 10538                           ;usb/usb_device.c: 2418:         {;usb/usb_device.c: 2420:             USBCtrlTrfOutHand
      +                          ler();
 10539     159C  3193  23E0         	fcall	_USBCtrlTrfOutHandler
 10540     159E  0008               	return
 10541     159F                     i1l5311:
 10542     159F  30FD               	movlw	253
 10543     15A0  056D               	andwf	_USTATcopy,w	;volatile
 10544     15A1  00E0               	movwf	??_USBCtrlEPService
 10545     15A2  3004               	movlw	4
 10546     15A3  0660               	xorwf	??_USBCtrlEPService,w
 10547     15A4  1D03               	btfss	3,2
 10548     15A5  0008               	return
 10549                           
 10550                           ;usb/usb_device.c: 2424:     {;usb/usb_device.c: 2427:         USBCtrlTrfInHandler();
 10551     15A6  318A  22E6         	fcall	_USBCtrlTrfInHandler
 10552     15A8  0008               	return
 10553     15A9                     __end_of_USBCtrlEPService:
 10554                           
 10555                           	psect	text55
 10556     07B6                     __ptext55:	
 10557 ;; *************** function _USBCtrlTrfSetupHandler *****************
 10558 ;; Defined at:
 10559 ;;		line 2472 in file "usb/usb_device.c"
 10560 ;; Parameters:    Size  Location     Type
 10561 ;;		None
 10562 ;; Auto vars:     Size  Location     Type
 10563 ;;		None
 10564 ;; Return value:  Size  Location     Type
 10565 ;;                  1    wreg      void 
 10566 ;; Registers used:
 10567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10568 ;; Tracked objects:
 10569 ;;		On entry : 1F/0
 10570 ;;		On exit  : 1D/0
 10571 ;;		Unchanged: 0/0
 10572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10576 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10577 ;;Total ram usage:        1 bytes
 10578 ;; Hardware stack levels used: 1
 10579 ;; Hardware stack levels required when called: 6
 10580 ;; This function calls:
 10581 ;;		_USBCheckStdRequest
 10582 ;;		_USBCtrlEPServiceComplete
 10583 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10584 ;; This function is called by:
 10585 ;;		_USBCtrlEPService
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589     07B6                     _USBCtrlTrfSetupHandler:	
 10590                           ;psect for function _USBCtrlTrfSetupHandler
 10591                           
 10592                           
 10593                           ;usb/usb_device.c: 2477:     shortPacketStatus = 0;
 10594                           
 10595                           ;incstack = 0
 10596                           ; Regs used in _USBCtrlTrfSetupHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10597     07B6  0022               	movlb	2	; select bank2
 10598     07B7  01E2               	clrf	_shortPacketStatus^(0+256)	;volatile
 10599                           
 10600                           ;usb/usb_device.c: 2478:     USBDeferStatusStagePacket = 0;
 10601     07B8  01DB               	clrf	_USBDeferStatusStagePacket^(0+256)	;volatile
 10602                           
 10603                           ;usb/usb_device.c: 2479:     USBDeferINDataStagePackets = 0;
 10604     07B9  01D8               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10605                           
 10606                           ;usb/usb_device.c: 2480:     USBDeferOUTDataStagePackets = 0;
 10607     07BA  01D7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10608                           
 10609                           ;usb/usb_device.c: 2481:     BothEP0OutUOWNsSet = 0;
 10610     07BB  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 10611                           
 10612                           ;usb/usb_device.c: 2482:     controlTransferState = 0;
 10613     07BC  0020               	movlb	0	; select bank0
 10614     07BD  01EA               	clrf	_controlTransferState	;volatile
 10615                           
 10616                           ;usb/usb_device.c: 2491:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 10617     07BE  307F               	movlw	127
 10618     07BF  00DF               	movwf	??_USBCtrlTrfSetupHandler
 10619     07C0  0863               	movf	_pBDTEntryIn,w
 10620     07C1  0086               	movwf	6
 10621     07C2  0864               	movf	_pBDTEntryIn+1,w
 10622     07C3  0087               	movwf	7
 10623     07C4  085F               	movf	??_USBCtrlTrfSetupHandler,w
 10624     07C5  0581               	andwf	1,f
 10625                           
 10626                           ;usb/usb_device.c: 2493:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 10627     07C6  3004               	movlw	4
 10628     07C7  0663               	xorwf	_pBDTEntryIn,w
 10629     07C8  00E3               	movwf	_pBDTEntryIn
 10630     07C9  3000               	movlw	0
 10631     07CA  0664               	xorwf	_pBDTEntryIn+1,w
 10632     07CB  00E4               	movwf	_pBDTEntryIn+1
 10633                           
 10634                           ;usb/usb_device.c: 2494:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 10635     07CC  307F               	movlw	127
 10636     07CD  00DF               	movwf	??_USBCtrlTrfSetupHandler
 10637     07CE  0863               	movf	_pBDTEntryIn,w
 10638     07CF  0086               	movwf	6
 10639     07D0  0864               	movf	_pBDTEntryIn+1,w
 10640     07D1  0087               	movwf	7
 10641     07D2  085F               	movf	??_USBCtrlTrfSetupHandler,w
 10642     07D3  0581               	andwf	1,f
 10643                           
 10644                           ;usb/usb_device.c: 2495:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 10645     07D4  3004               	movlw	4
 10646     07D5  0663               	xorwf	_pBDTEntryIn,w
 10647     07D6  00E3               	movwf	_pBDTEntryIn
 10648     07D7  3000               	movlw	0
 10649     07D8  0664               	xorwf	_pBDTEntryIn+1,w
 10650     07D9  00E4               	movwf	_pBDTEntryIn+1
 10651                           
 10652                           ;usb/usb_device.c: 2496:     pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
 10653     07DA  307F               	movlw	127
 10654     07DB  00DF               	movwf	??_USBCtrlTrfSetupHandler
 10655     07DC  0867               	movf	_pBDTEntryEP0OutNext,w
 10656     07DD  0086               	movwf	6
 10657     07DE  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10658     07DF  0087               	movwf	7
 10659     07E0  085F               	movf	??_USBCtrlTrfSetupHandler,w
 10660     07E1  0581               	andwf	1,f
 10661                           
 10662                           ;usb/usb_device.c: 2498:     inPipes[0].info.Val = 0;
 10663     07E2  0021               	movlb	1	; select bank1
 10664     07E3  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 10665                           
 10666                           ;usb/usb_device.c: 2499:     inPipes[0].wCount.Val = 0;
 10667     07E4  01EC               	clrf	(_inPipes^(0+128)+3)	;volatile
 10668     07E5  01ED               	clrf	((_inPipes+1)^(0+128)+3)	;volatile
 10669                           
 10670                           ;usb/usb_device.c: 2500:     outPipes[0].info.Val = 0;
 10671     07E6  0022               	movlb	2	; select bank2
 10672     07E7  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 10673                           
 10674                           ;usb/usb_device.c: 2501:     outPipes[0].wCount.Val = 0;
 10675     07E8  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 10676     07E9  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 10677                           
 10678                           ;usb/usb_device.c: 2507:     USBCheckStdRequest();
 10679     07EA  3189  218F  3187   	fcall	_USBCheckStdRequest
 10680                           
 10681                           ;usb/usb_device.c: 2508:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_EP0_REQUES
      +                          T,0,0);
 10682     07ED  3003               	movlw	3
 10683     07EE  0020               	movlb	0	; select bank0
 10684     07EF  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10685     07F0  3000               	movlw	0
 10686     07F1  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10687     07F2  3000               	movlw	0
 10688     07F3  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10689     07F4  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10690     07F5  3000               	movlw	0
 10691     07F6  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10692     07F7  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10693     07F8  3194  241A  3187   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10694                           
 10695                           ;usb/usb_device.c: 2521:     USBCtrlEPServiceComplete();
 10696     07FB  318D  2570         	fcall	_USBCtrlEPServiceComplete
 10697     07FD  0008               	return
 10698     07FE                     __end_of_USBCtrlTrfSetupHandler:
 10699                           
 10700                           	psect	text56
 10701     0D70                     __ptext56:	
 10702 ;; *************** function _USBCtrlEPServiceComplete *****************
 10703 ;; Defined at:
 10704 ;;		line 1620 in file "usb/usb_device.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;		None
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;		None
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  1    wreg      void 
 10711 ;; Registers used:
 10712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/2
 10715 ;;		On exit  : 1D/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;Total ram usage:        4 bytes
 10723 ;; Hardware stack levels used: 1
 10724 ;; Hardware stack levels required when called: 2
 10725 ;; This function calls:
 10726 ;;		_USBCtrlEPAllowDataStage
 10727 ;;		_USBCtrlEPAllowStatusStage
 10728 ;; This function is called by:
 10729 ;;		_USBCtrlTrfSetupHandler
 10730 ;; This function uses a non-reentrant model
 10731 ;;
 10732                           
 10733     0D70                     _USBCtrlEPServiceComplete:	
 10734                           ;psect for function _USBCtrlEPServiceComplete
 10735                           
 10736                           
 10737                           ;usb/usb_device.c: 1626:     UCONbits.PKTDIS = 0;
 10738                           
 10739                           ;incstack = 0
 10740                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10741     0D70  003D               	movlb	29	; select bank29
 10742     0D71  120E               	bcf	14,4	;volatile
 10743                           
 10744                           ;usb/usb_device.c: 1632:     if(inPipes[0].info.bits.busy == 0)
 10745     0D72  0021               	movlb	1	; select bank1
 10746     0D73  1BEB               	btfsc	(_inPipes^(0+128)+2),7	;volatile
 10747     0D74  2DBC               	goto	i1l516
 10748                           
 10749                           ;usb/usb_device.c: 1633:     {;usb/usb_device.c: 1634:         if(outPipes[0].info.bits.
      +                          busy == 1)
 10750     0D75  0022               	movlb	2	; select bank2
 10751     0D76  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 10752     0D77  2D85               	goto	i1l4501
 10753                           
 10754                           ;usb/usb_device.c: 1635:         {;usb/usb_device.c: 1636:             controlTransferSt
      +                          ate = 2;
 10755     0D78  3002               	movlw	2
 10756     0D79  0020               	movlb	0	; select bank0
 10757     0D7A  00EA               	movwf	_controlTransferState	;volatile
 10758                           
 10759                           ;usb/usb_device.c: 1647:             if(USBDeferOUTDataStagePackets == 0)
 10760     0D7B  0022               	movlb	2	; select bank2
 10761     0D7C  0857               	movf	_USBDeferOUTDataStagePackets^(0+256),w	;volatile
 10762     0D7D  1D03               	btfss	3,2
 10763     0D7E  2D81               	goto	i1l4497
 10764                           
 10765                           ;usb/usb_device.c: 1648:             {;usb/usb_device.c: 1649:                 USBCtrlEP
      +                          AllowDataStage();
 10766     0D7F  3197  2731         	fcall	_USBCtrlEPAllowDataStage
 10767     0D81                     i1l4497:
 10768                           
 10769                           ;usb/usb_device.c: 1654:             USBStatusStageEnabledFlag2 = 0;
 10770     0D81  0022               	movlb	2	; select bank2
 10771     0D82  01D9               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10772                           
 10773                           ;usb/usb_device.c: 1655:             USBStatusStageEnabledFlag1 = 0;
 10774     0D83  01DA               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10775                           
 10776                           ;usb/usb_device.c: 1656:         }
 10777     0D84  0008               	return
 10778     0D85                     i1l4501:
 10779                           
 10780                           ;usb/usb_device.c: 1658:         {;usb/usb_device.c: 1663:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 10781     0D85  0020               	movlb	0	; select bank0
 10782     0D86  0867               	movf	_pBDTEntryEP0OutNext,w
 10783     0D87  3E01               	addlw	1
 10784     0D88  00F7               	movwf	??_USBCtrlEPServiceComplete
 10785     0D89  3000               	movlw	0
 10786     0D8A  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 10787     0D8B  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10788     0D8C  0877               	movf	??_USBCtrlEPServiceComplete,w
 10789     0D8D  0086               	movwf	6
 10790     0D8E  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 10791     0D8F  0087               	movwf	7
 10792     0D90  3008               	movlw	8
 10793     0D91  0081               	movwf	1
 10794                           
 10795                           ;usb/usb_device.c: 1664:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 10796     0D92  3040               	movlw	64
 10797     0D93  00F7               	movwf	??_USBCtrlEPServiceComplete
 10798     0D94  3000               	movlw	0
 10799     0D95  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10800     0D96  30FF               	movlw	255
 10801     0D97  0577               	andwf	??_USBCtrlEPServiceComplete,w
 10802     0D98  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 10803     0D99  307F               	movlw	127
 10804     0D9A  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 10805     0D9B  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 10806     0D9C  0867               	movf	_pBDTEntryEP0OutNext,w
 10807     0D9D  0086               	movwf	6
 10808     0D9E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10809     0D9F  0087               	movwf	7
 10810     0DA0  3142               	addfsr 1,2
 10811     0DA1  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 10812     0DA2  3FC0               	movwi [0]fsr1
 10813     0DA3  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 10814     0DA4  3FC1               	movwi [1]fsr1
 10815                           
 10816                           ;usb/usb_device.c: 1665:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 10817     0DA5  0867               	movf	_pBDTEntryEP0OutNext,w
 10818     0DA6  0086               	movwf	6
 10819     0DA7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10820     0DA8  0087               	movwf	7
 10821     0DA9  300C               	movlw	12
 10822     0DAA  0081               	movwf	1
 10823                           
 10824                           ;usb/usb_device.c: 1666:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 10825     0DAB  0867               	movf	_pBDTEntryEP0OutNext,w
 10826     0DAC  0086               	movwf	6
 10827     0DAD  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10828     0DAE  0087               	movwf	7
 10829     0DAF  1781               	bsf	1,7
 10830                           
 10831                           ;usb/usb_device.c: 1667:             pBDTEntryIn[0]->STAT.Val = 0x04;
 10832     0DB0  0863               	movf	_pBDTEntryIn,w
 10833     0DB1  0086               	movwf	6
 10834     0DB2  0864               	movf	_pBDTEntryIn+1,w
 10835     0DB3  0087               	movwf	7
 10836     0DB4  3004               	movlw	4
 10837     0DB5  0081               	movwf	1
 10838                           
 10839                           ;usb/usb_device.c: 1668:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 10840     0DB6  0863               	movf	_pBDTEntryIn,w
 10841     0DB7  0086               	movwf	6
 10842     0DB8  0864               	movf	_pBDTEntryIn+1,w
 10843     0DB9  0087               	movwf	7
 10844     0DBA  1781               	bsf	1,7
 10845     0DBB  0008               	return
 10846     0DBC                     i1l516:	
 10847                           ;usb/usb_device.c: 1671:     else
 10848                           
 10849                           
 10850                           ;usb/usb_device.c: 1672:     {;usb/usb_device.c: 1673:   if(SetupPkt.DataDir == (0x80>>7
      +                          ))
 10851     0DBC  0020               	movlb	0	; select bank0
 10852     0DBD  1FC0               	btfss	64,7	;volatile
 10853     0DBE  2DD1               	goto	i1l4527
 10854                           
 10855                           ;usb/usb_device.c: 1674:   {;usb/usb_device.c: 1675:    controlTransferState = 1;
 10856     0DBF  3001               	movlw	1
 10857     0DC0  00EA               	movwf	_controlTransferState	;volatile
 10858                           
 10859                           ;usb/usb_device.c: 1689:    if(USBDeferINDataStagePackets == 0)
 10860     0DC1  0022               	movlb	2	; select bank2
 10861     0DC2  0858               	movf	_USBDeferINDataStagePackets^(0+256),w	;volatile
 10862     0DC3  1D03               	btfss	3,2
 10863     0DC4  2DC8               	goto	i1l4519
 10864                           
 10865                           ;usb/usb_device.c: 1690:             {;usb/usb_device.c: 1691:                 USBCtrlEP
      +                          AllowDataStage();
 10866     0DC5  3197  2731  318D   	fcall	_USBCtrlEPAllowDataStage
 10867     0DC8                     i1l4519:
 10868                           
 10869                           ;usb/usb_device.c: 1714:             USBStatusStageEnabledFlag2 = 0;
 10870     0DC8  0022               	movlb	2	; select bank2
 10871     0DC9  01D9               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10872                           
 10873                           ;usb/usb_device.c: 1715:             USBStatusStageEnabledFlag1 = 0;
 10874     0DCA  01DA               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10875                           
 10876                           ;usb/usb_device.c: 1716:             if(USBDeferStatusStagePacket == 0)
 10877     0DCB  085B               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 10878     0DCC  1D03               	btfss	3,2
 10879     0DCD  0008               	return
 10880                           
 10881                           ;usb/usb_device.c: 1717:             {;usb/usb_device.c: 1718:                 USBCtrlEP
      +                          AllowStatusStage();
 10882     0DCE  318A  2200         	fcall	_USBCtrlEPAllowStatusStage
 10883     0DD0  0008               	return
 10884     0DD1                     i1l4527:
 10885                           
 10886                           ;usb/usb_device.c: 1722:   {;usb/usb_device.c: 1733:    controlTransferState = 2;
 10887     0DD1  3002               	movlw	2
 10888     0DD2  00EA               	movwf	_controlTransferState	;volatile
 10889                           
 10890                           ;usb/usb_device.c: 1736:    pBDTEntryEP0OutNext->CNT = 8;
 10891     0DD3  0867               	movf	_pBDTEntryEP0OutNext,w
 10892     0DD4  3E01               	addlw	1
 10893     0DD5  00F7               	movwf	??_USBCtrlEPServiceComplete
 10894     0DD6  3000               	movlw	0
 10895     0DD7  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 10896     0DD8  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10897     0DD9  0877               	movf	??_USBCtrlEPServiceComplete,w
 10898     0DDA  0086               	movwf	6
 10899     0DDB  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 10900     0DDC  0087               	movwf	7
 10901     0DDD  3008               	movlw	8
 10902     0DDE  0081               	movwf	1
 10903                           
 10904                           ;usb/usb_device.c: 1737:    pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF
      +                          );
 10905     0DDF  3040               	movlw	64
 10906     0DE0  00F7               	movwf	??_USBCtrlEPServiceComplete
 10907     0DE1  3000               	movlw	0
 10908     0DE2  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10909     0DE3  30FF               	movlw	255
 10910     0DE4  0577               	andwf	??_USBCtrlEPServiceComplete,w
 10911     0DE5  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 10912     0DE6  307F               	movlw	127
 10913     0DE7  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 10914     0DE8  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 10915     0DE9  0867               	movf	_pBDTEntryEP0OutNext,w
 10916     0DEA  0086               	movwf	6
 10917     0DEB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10918     0DEC  0087               	movwf	7
 10919     0DED  3142               	addfsr 1,2
 10920     0DEE  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 10921     0DEF  3FC0               	movwi [0]fsr1
 10922     0DF0  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 10923     0DF1  3FC1               	movwi [1]fsr1
 10924                           
 10925                           ;usb/usb_device.c: 1738:    pBDTEntryEP0OutNext->STAT.Val = 0x04;
 10926     0DF2  0867               	movf	_pBDTEntryEP0OutNext,w
 10927     0DF3  0086               	movwf	6
 10928     0DF4  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10929     0DF5  0087               	movwf	7
 10930     0DF6  3004               	movlw	4
 10931     0DF7  0081               	movwf	1
 10932                           
 10933                           ;usb/usb_device.c: 1739:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 10934     0DF8  0867               	movf	_pBDTEntryEP0OutNext,w
 10935     0DF9  0086               	movwf	6
 10936     0DFA  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10937     0DFB  0087               	movwf	7
 10938     0DFC  1781               	bsf	1,7
 10939     0DFD  2DC8               	goto	i1l4519
 10940     0DFE                     __end_of_USBCtrlEPServiceComplete:	
 10941                           ;usb/usb_device.c: 1744:    if(USBDeferStatusStagePacket == 0)
 10942                           
 10943                           ;usb/usb_device.c: 1743:             USBStatusStageEnabledFlag1 = 0;
 10944                           
 10945                           ;usb/usb_device.c: 1742:             USBStatusStageEnabledFlag2 = 0;
 10946                           
 10947                           
 10948                           	psect	text57
 10949     1731                     __ptext57:	
 10950 ;; *************** function _USBCtrlEPAllowDataStage *****************
 10951 ;; Defined at:
 10952 ;;		line 1492 in file "usb/usb_device.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;		None
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;		None
 10957 ;; Return value:  Size  Location     Type
 10958 ;;                  1    wreg      void 
 10959 ;; Registers used:
 10960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10961 ;; Tracked objects:
 10962 ;;		On entry : 1F/2
 10963 ;;		On exit  : 1F/0
 10964 ;;		Unchanged: 0/0
 10965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10970 ;;Total ram usage:        4 bytes
 10971 ;; Hardware stack levels used: 1
 10972 ;; Hardware stack levels required when called: 1
 10973 ;; This function calls:
 10974 ;;		_USBCtrlTrfTxService
 10975 ;; This function is called by:
 10976 ;;		_USBCtrlEPServiceComplete
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980     1731                     _USBCtrlEPAllowDataStage:	
 10981                           ;psect for function _USBCtrlEPAllowDataStage
 10982                           
 10983                           
 10984                           ;usb/usb_device.c: 1494:     USBDeferINDataStagePackets = 0;
 10985                           
 10986                           ;incstack = 0
 10987                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10988     1731  01D8               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10989                           
 10990                           ;usb/usb_device.c: 1495:     USBDeferOUTDataStagePackets = 0;
 10991     1732  01D7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10992                           
 10993                           ;usb/usb_device.c: 1497:     if(controlTransferState == 2)
 10994     1733  3002               	movlw	2
 10995     1734  0020               	movlb	0	; select bank0
 10996     1735  066A               	xorwf	_controlTransferState,w	;volatile
 10997     1736  1D03               	btfss	3,2
 10998     1737  2F63               	goto	i1l4197
 10999                           
 11000                           ;usb/usb_device.c: 1498:     {;usb/usb_device.c: 1500:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 11001     1738  0867               	movf	_pBDTEntryEP0OutNext,w
 11002     1739  3E01               	addlw	1
 11003     173A  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11004     173B  3000               	movlw	0
 11005     173C  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 11006     173D  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11007     173E  0873               	movf	??_USBCtrlEPAllowDataStage,w
 11008     173F  0086               	movwf	6
 11009     1740  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 11010     1741  0087               	movwf	7
 11011     1742  3008               	movlw	8
 11012     1743  0081               	movwf	1
 11013                           
 11014                           ;usb/usb_device.c: 1501:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 11015     1744  3048               	movlw	72
 11016     1745  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11017     1746  3000               	movlw	0
 11018     1747  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11019     1748  30FF               	movlw	255
 11020     1749  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 11021     174A  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 11022     174B  307F               	movlw	127
 11023     174C  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 11024     174D  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 11025     174E  0867               	movf	_pBDTEntryEP0OutNext,w
 11026     174F  0086               	movwf	6
 11027     1750  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11028     1751  0087               	movwf	7
 11029     1752  3142               	addfsr 1,2
 11030     1753  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 11031     1754  3FC0               	movwi [0]fsr1
 11032     1755  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 11033     1756  3FC1               	movwi [1]fsr1
 11034                           
 11035                           ;usb/usb_device.c: 1502:         pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 0x08);
 11036     1757  0867               	movf	_pBDTEntryEP0OutNext,w
 11037     1758  0086               	movwf	6
 11038     1759  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11039     175A  0087               	movwf	7
 11040     175B  3048               	movlw	72
 11041     175C  0081               	movwf	1
 11042                           
 11043                           ;usb/usb_device.c: 1503:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 11044     175D  0867               	movf	_pBDTEntryEP0OutNext,w
 11045     175E  0086               	movwf	6
 11046     175F  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11047     1760  0087               	movwf	7
 11048     1761  1781               	bsf	1,7
 11049                           
 11050                           ;usb/usb_device.c: 1504:     }
 11051     1762  0008               	return
 11052     1763                     i1l4197:
 11053                           
 11054                           ;usb/usb_device.c: 1506:     {;usb/usb_device.c: 1509:   if(SetupPkt.wLength < inPipes[0
      +                          ].wCount.Val)
 11055     1763  0021               	movlb	1	; select bank1
 11056     1764  086D               	movf	((_inPipes+1)^(0+128)+3),w	;volatile
 11057     1765  0020               	movlb	0	; select bank0
 11058     1766  0247               	subwf	71,w	;volatile
 11059     1767  1D03               	skipz
 11060     1768  2F6D               	goto	u311_25
 11061     1769  0021               	movlb	1	; select bank1
 11062     176A  086C               	movf	(_inPipes^(0+128)+3),w	;volatile
 11063     176B  0020               	movlb	0	; select bank0
 11064     176C  0246               	subwf	70,w	;volatile
 11065     176D                     u311_25:
 11066     176D  1803               	skipnc
 11067     176E  2F76               	goto	i1l4201
 11068                           
 11069                           ;usb/usb_device.c: 1510:   {;usb/usb_device.c: 1511:    inPipes[0].wCount.Val = SetupPkt
      +                          .wLength;
 11070     176F  0847               	movf	71,w	;volatile
 11071     1770  0021               	movlb	1	; select bank1
 11072     1771  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11073     1772  0020               	movlb	0	; select bank0
 11074     1773  0846               	movf	70,w	;volatile
 11075     1774  0021               	movlb	1	; select bank1
 11076     1775  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11077     1776                     i1l4201:
 11078                           
 11079                           ;usb/usb_device.c: 1513:   USBCtrlTrfTxService();
 11080     1776  3196  26CA         	fcall	_USBCtrlTrfTxService
 11081                           
 11082                           ;usb/usb_device.c: 1518:   pBDTEntryIn[0]->ADR = (((uint16_t)(&CtrlTrfData)) & 0x7FFF);
 11083     1778  3048               	movlw	72
 11084     1779  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11085     177A  3000               	movlw	0
 11086     177B  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11087     177C  30FF               	movlw	255
 11088     177D  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 11089     177E  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 11090     177F  307F               	movlw	127
 11091     1780  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 11092     1781  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 11093     1782  0020               	movlb	0	; select bank0
 11094     1783  0863               	movf	_pBDTEntryIn,w
 11095     1784  0086               	movwf	6
 11096     1785  0864               	movf	_pBDTEntryIn+1,w
 11097     1786  0087               	movwf	7
 11098     1787  3142               	addfsr 1,2
 11099     1788  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 11100     1789  3FC0               	movwi [0]fsr1
 11101     178A  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 11102     178B  3FC1               	movwi [1]fsr1
 11103                           
 11104                           ;usb/usb_device.c: 1519:   pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 11105     178C  0863               	movf	_pBDTEntryIn,w
 11106     178D  0086               	movwf	6
 11107     178E  0864               	movf	_pBDTEntryIn+1,w
 11108     178F  0087               	movwf	7
 11109     1790  3048               	movlw	72
 11110     1791  0081               	movwf	1
 11111                           
 11112                           ;usb/usb_device.c: 1520:         pBDTEntryIn[0]->STAT.Val |= 0x80;
 11113     1792  0863               	movf	_pBDTEntryIn,w
 11114     1793  0086               	movwf	6
 11115     1794  0864               	movf	_pBDTEntryIn+1,w
 11116     1795  0087               	movwf	7
 11117     1796  1781               	bsf	1,7
 11118     1797  0008               	return
 11119     1798                     __end_of_USBCtrlEPAllowDataStage:
 11120                           
 11121                           	psect	text58
 11122     098F                     __ptext58:	
 11123 ;; *************** function _USBCheckStdRequest *****************
 11124 ;; Defined at:
 11125 ;;		line 2693 in file "usb/usb_device.c"
 11126 ;; Parameters:    Size  Location     Type
 11127 ;;		None
 11128 ;; Auto vars:     Size  Location     Type
 11129 ;;		None
 11130 ;; Return value:  Size  Location     Type
 11131 ;;                  1    wreg      void 
 11132 ;; Registers used:
 11133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11134 ;; Tracked objects:
 11135 ;;		On entry : 1F/2
 11136 ;;		On exit  : 0/0
 11137 ;;		Unchanged: 0/0
 11138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;Total ram usage:        2 bytes
 11144 ;; Hardware stack levels used: 1
 11145 ;; Hardware stack levels required when called: 5
 11146 ;; This function calls:
 11147 ;;		_USBStdFeatureReqHandler
 11148 ;;		_USBStdGetDscHandler
 11149 ;;		_USBStdGetStatusHandler
 11150 ;;		_USBStdSetCfgHandler
 11151 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11152 ;; This function is called by:
 11153 ;;		_USBCtrlTrfSetupHandler
 11154 ;; This function uses a non-reentrant model
 11155 ;;
 11156                           
 11157     098F                     _USBCheckStdRequest:	
 11158                           ;psect for function _USBCheckStdRequest
 11159                           
 11160                           
 11161                           ;usb/usb_device.c: 2695:     if(SetupPkt.RequestType != (0x00>>5)) return;
 11162                           
 11163                           ;incstack = 0
 11164                           ; Regs used in _USBCheckStdRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11165     098F  0020               	movlb	0	; select bank0
 11166     0990  0E40               	swapf	64,w	;volatile
 11167     0991  0C89               	rrf	9,f
 11168     0992  3903               	andlw	3
 11169     0993  3A00               	xorlw	0
 11170     0994  1D03               	btfss	3,2
 11171     0995  0008               	return
 11172     0996  29D4               	goto	i1l4635
 11173     0997                     i1l644:	
 11174                           ;usb/usb_device.c: 2698:     {;usb/usb_device.c: 2699:         case 5:
 11175                           
 11176                           
 11177                           ;usb/usb_device.c: 2700:             inPipes[0].info.bits.busy = 1;
 11178     0997  0021               	movlb	1	; select bank1
 11179     0998  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11180                           
 11181                           ;usb/usb_device.c: 2701:             USBDeviceState = ADR_PENDING_STATE;
 11182     0999  3008               	movlw	8
 11183     099A  0020               	movlb	0	; select bank0
 11184     099B  00EC               	movwf	_USBDeviceState	;volatile
 11185                           
 11186                           ;usb/usb_device.c: 2703:             break;
 11187     099C  0008               	return
 11188     099D                     i1l4605:
 11189                           
 11190                           ;usb/usb_device.c: 2705:             USBStdGetDscHandler();
 11191     099D  318C  2461         	fcall	_USBStdGetDscHandler
 11192                           
 11193                           ;usb/usb_device.c: 2706:             break;
 11194     099F  0008               	return
 11195     09A0                     i1l4607:
 11196                           
 11197                           ;usb/usb_device.c: 2708:             USBStdSetCfgHandler();
 11198     09A0  3189  2123         	fcall	_USBStdSetCfgHandler
 11199                           
 11200                           ;usb/usb_device.c: 2709:             break;
 11201     09A2  0008               	return
 11202     09A3                     i1l4609:
 11203                           
 11204                           ;usb/usb_device.c: 2711:             inPipes[0].pSrc.bRam = (uint8_t*)&USBActiveConfigur
      +                          ation;
 11205     09A3  306F               	movlw	low _USBActiveConfiguration
 11206     09A4  0021               	movlb	1	; select bank1
 11207     09A5  00E9               	movwf	_inPipes^(0+128)	;volatile
 11208     09A6  3000               	movlw	high _USBActiveConfiguration
 11209     09A7  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 11210                           
 11211                           ;usb/usb_device.c: 2712:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11212     09A8  146B               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11213                           
 11214                           ;usb/usb_device.c: 2713:             inPipes[0].wCount.v[0] = 1;
 11215     09A9  3001               	movlw	1
 11216     09AA  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11217                           
 11218                           ;usb/usb_device.c: 2714:             inPipes[0].info.bits.busy = 1;
 11219     09AB  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11220                           
 11221                           ;usb/usb_device.c: 2715:             break;
 11222     09AC  0008               	return
 11223     09AD                     i1l4617:
 11224                           
 11225                           ;usb/usb_device.c: 2717:             USBStdGetStatusHandler();
 11226     09AD  3195  25A9         	fcall	_USBStdGetStatusHandler
 11227                           
 11228                           ;usb/usb_device.c: 2718:             break;
 11229     09AF  0008               	return
 11230     09B0                     i1l4619:
 11231                           
 11232                           ;usb/usb_device.c: 2721:             USBStdFeatureReqHandler();
 11233     09B0  3181  21D2         	fcall	_USBStdFeatureReqHandler
 11234                           
 11235                           ;usb/usb_device.c: 2722:             break;
 11236     09B2  0008               	return
 11237     09B3                     i1l4621:
 11238                           
 11239                           ;usb/usb_device.c: 2724:             inPipes[0].pSrc.bRam = (uint8_t*)&USBAlternateInter
      +                          face[SetupPkt.bIntfID];
 11240     09B3  0844               	movf	68,w	;volatile
 11241     09B4  3E6E               	addlw	(low (_USBAlternateInterface| 0))& (0+255)
 11242     09B5  0021               	movlb	1	; select bank1
 11243     09B6  00E9               	movwf	_inPipes^(0+128)	;volatile
 11244     09B7  01EA               	clrf	(_inPipes+1)^(0+128)	;volatile
 11245                           
 11246                           ;usb/usb_device.c: 2725:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11247     09B8  146B               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11248                           
 11249                           ;usb/usb_device.c: 2726:             inPipes[0].wCount.v[0] = 1;
 11250     09B9  3001               	movlw	1
 11251     09BA  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11252                           
 11253                           ;usb/usb_device.c: 2727:             inPipes[0].info.bits.busy = 1;
 11254     09BB  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11255                           
 11256                           ;usb/usb_device.c: 2728:             break;
 11257     09BC  0008               	return
 11258     09BD                     i1l653:	
 11259                           ;usb/usb_device.c: 2729:         case 11:
 11260                           
 11261                           
 11262                           ;usb/usb_device.c: 2730:             inPipes[0].info.bits.busy = 1;
 11263     09BD  0021               	movlb	1	; select bank1
 11264     09BE  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11265                           
 11266                           ;usb/usb_device.c: 2731:             USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.
      +                          bAltID;
 11267     09BF  0020               	movlb	0	; select bank0
 11268     09C0  0844               	movf	68,w	;volatile
 11269     09C1  3E6E               	addlw	(low (_USBAlternateInterface| 0))& (0+255)
 11270     09C2  0086               	movwf	6
 11271     09C3  0187               	clrf	7
 11272     09C4  0842               	movf	66,w	;volatile
 11273     09C5  0081               	movwf	1
 11274                           
 11275                           ;usb/usb_device.c: 2732:             break;
 11276     09C6  0008               	return
 11277     09C7                     i1l4631:
 11278                           
 11279                           ;usb/usb_device.c: 2734:             USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SE
      +                          T_DESCRIPTOR,0,0);
 11280     09C7  3002               	movlw	2
 11281     09C8  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11282     09C9  3000               	movlw	0
 11283     09CA  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11284     09CB  3000               	movlw	0
 11285     09CC  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11286     09CD  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11287     09CE  3000               	movlw	0
 11288     09CF  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11289     09D0  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11290     09D1  3194  241A         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11291                           
 11292                           ;usb/usb_device.c: 2735:             break;
 11293     09D3  0008               	return
 11294     09D4                     i1l4635:
 11295     09D4  0841               	movf	65,w	;volatile
 11296     09D5  00DD               	movwf	??_USBCheckStdRequest
 11297     09D6  01DE               	clrf	??_USBCheckStdRequest+1
 11298                           
 11299                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11300                           ; Switch size 1, requested type "simple"
 11301                           ; Number of cases is 1, Range of values is 0 to 0
 11302                           ; switch strategies available:
 11303                           ; Name         Instructions Cycles
 11304                           ; simple_byte            4     3 (average)
 11305                           ; direct_byte            8     6 (fixed)
 11306                           ; jumptable            260     6 (fixed)
 11307                           ;	Chosen strategy is simple_byte
 11308     09D7  085E               	movf	??_USBCheckStdRequest+1,w
 11309     09D8  3A00               	xorlw	0	; case 0
 11310     09D9  1903               	skipnz
 11311     09DA  29DC               	goto	i1l6573
 11312     09DB  29FF               	goto	i1l642
 11313     09DC                     i1l6573:
 11314                           
 11315                           ; Switch size 1, requested type "simple"
 11316                           ; Number of cases is 11, Range of values is 0 to 12
 11317                           ; switch strategies available:
 11318                           ; Name         Instructions Cycles
 11319                           ; direct_byte           32     6 (fixed)
 11320                           ; simple_byte           34    18 (average)
 11321                           ; jumptable            260     6 (fixed)
 11322                           ;	Chosen strategy is simple_byte
 11323     09DC  085D               	movf	??_USBCheckStdRequest,w
 11324     09DD  3A00               	xorlw	0	; case 0
 11325     09DE  1903               	skipnz
 11326     09DF  29AD               	goto	i1l4617
 11327     09E0  3A01               	xorlw	1	; case 1
 11328     09E1  1903               	skipnz
 11329     09E2  29B0               	goto	i1l4619
 11330     09E3  3A02               	xorlw	2	; case 3
 11331     09E4  1903               	skipnz
 11332     09E5  29B0               	goto	i1l4619
 11333     09E6  3A06               	xorlw	6	; case 5
 11334     09E7  1903               	skipnz
 11335     09E8  2997               	goto	i1l644
 11336     09E9  3A03               	xorlw	3	; case 6
 11337     09EA  1903               	skipnz
 11338     09EB  299D               	goto	i1l4605
 11339     09EC  3A01               	xorlw	1	; case 7
 11340     09ED  1903               	skipnz
 11341     09EE  29C7               	goto	i1l4631
 11342     09EF  3A0F               	xorlw	15	; case 8
 11343     09F0  1903               	skipnz
 11344     09F1  29A3               	goto	i1l4609
 11345     09F2  3A01               	xorlw	1	; case 9
 11346     09F3  1903               	skipnz
 11347     09F4  29A0               	goto	i1l4607
 11348     09F5  3A03               	xorlw	3	; case 10
 11349     09F6  1903               	skipnz
 11350     09F7  29B3               	goto	i1l4621
 11351     09F8  3A01               	xorlw	1	; case 11
 11352     09F9  1903               	skipnz
 11353     09FA  29BD               	goto	i1l653
 11354     09FB  3A07               	xorlw	7	; case 12
 11355     09FC  1903               	skipnz
 11356     09FD  29FF               	goto	i1l642
 11357     09FE  29FF               	goto	i1l642
 11358     09FF                     i1l642:
 11359     09FF  0008               	return
 11360     0A00                     __end_of_USBCheckStdRequest:
 11361                           
 11362                           	psect	text59
 11363     0923                     __ptext59:	
 11364 ;; *************** function _USBStdSetCfgHandler *****************
 11365 ;; Defined at:
 11366 ;;		line 1972 in file "usb/usb_device.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;		None
 11369 ;; Auto vars:     Size  Location     Type
 11370 ;;  p               2    6[BANK0 ] PTR unsigned char 
 11371 ;;		 -> UEP1(1), 
 11372 ;;  i               1    8[BANK0 ] unsigned char 
 11373 ;;  i               1    9[BANK0 ] unsigned char 
 11374 ;; Return value:  Size  Location     Type
 11375 ;;                  1    wreg      void 
 11376 ;; Registers used:
 11377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11378 ;; Tracked objects:
 11379 ;;		On entry : 1D/0
 11380 ;;		On exit  : 1F/0
 11381 ;;		Unchanged: 0/0
 11382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11386 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;Total ram usage:        5 bytes
 11388 ;; Hardware stack levels used: 1
 11389 ;; Hardware stack levels required when called: 4
 11390 ;; This function calls:
 11391 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11392 ;;		i1_memset
 11393 ;; This function is called by:
 11394 ;;		_USBCheckStdRequest
 11395 ;; This function uses a non-reentrant model
 11396 ;;
 11397                           
 11398     0923                     _USBStdSetCfgHandler:	
 11399                           ;psect for function _USBStdSetCfgHandler
 11400                           
 11401                           
 11402                           ;usb/usb_device.c: 1974:     uint8_t i;;usb/usb_device.c: 1977:     inPipes[0].info.bits
      +                          .busy = 1;
 11403                           
 11404                           ;incstack = 0
 11405                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11406     0923  0021               	movlb	1	; select bank1
 11407     0924  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11408                           
 11409                           ;usb/usb_device.c: 1980:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++)
      +                           *p++ = 0; };
 11410     0925  300E               	movlw	14
 11411     0926  0020               	movlb	0	; select bank0
 11412     0927  00D7               	movwf	USBStdSetCfgHandler@p+1
 11413     0928  3099               	movlw	153
 11414     0929  00D6               	movwf	USBStdSetCfgHandler@p
 11415     092A  01D8               	clrf	USBStdSetCfgHandler@i_2020
 11416     092B                     i1l4217:
 11417     092B  0856               	movf	USBStdSetCfgHandler@p,w
 11418     092C  0086               	movwf	6
 11419     092D  0857               	movf	USBStdSetCfgHandler@p+1,w
 11420     092E  0087               	movwf	7
 11421     092F  0181               	clrf	1
 11422     0930  3001               	movlw	1
 11423     0931  07D6               	addwf	USBStdSetCfgHandler@p,f
 11424     0932  3000               	movlw	0
 11425     0933  3DD7               	addwfc	USBStdSetCfgHandler@p+1,f
 11426     0934  3001               	movlw	1
 11427     0935  00FD               	movwf	??_USBStdSetCfgHandler
 11428     0936  087D               	movf	??_USBStdSetCfgHandler,w
 11429     0937  07D8               	addwf	USBStdSetCfgHandler@i_2020,f
 11430     0938  0858               	movf	USBStdSetCfgHandler@i_2020,w
 11431     0939  1903               	btfsc	3,2
 11432     093A  292B               	goto	i1l4217
 11433                           
 11434                           ;usb/usb_device.c: 1983:     memset((void*)&BDT[0], 0x00, sizeof(BDT));
 11435     093B  3000               	movlw	0
 11436     093C  00F0               	movwf	i1memset@c
 11437     093D  00F1               	movwf	i1memset@c+1
 11438     093E  3020               	movlw	32
 11439     093F  00F2               	movwf	i1memset@n
 11440     0940  3000               	movlw	0
 11441     0941  00F3               	movwf	i1memset@n+1
 11442     0942  3020               	movlw	32
 11443     0943  3190  2089  3189   	fcall	i1_memset
 11444                           
 11445                           ;usb/usb_device.c: 1986:     UCONbits.PPBRST = 1;
 11446     0946  003D               	movlb	29	; select bank29
 11447     0947  170E               	bsf	14,6	;volatile
 11448                           
 11449                           ;usb/usb_device.c: 1991:  for(i = 0; i < (uint8_t)(1 +1u); i++)
 11450     0948  0020               	movlb	0	; select bank0
 11451     0949  01D9               	clrf	USBStdSetCfgHandler@i
 11452     094A                     i1l4235:
 11453                           
 11454                           ;usb/usb_device.c: 1992:  {;usb/usb_device.c: 1993:   ep_data_in[i].Val = 0u;
 11455     094A  0859               	movf	USBStdSetCfgHandler@i,w
 11456     094B  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11457     094C  0086               	movwf	6
 11458     094D  3001               	movlw	1	; select bank2/3
 11459     094E  0087               	movwf	7
 11460     094F  0181               	clrf	1
 11461                           
 11462                           ;usb/usb_device.c: 1994:         ep_data_out[i].Val = 0u;
 11463     0950  0859               	movf	USBStdSetCfgHandler@i,w
 11464     0951  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11465     0952  0086               	movwf	6
 11466     0953  3001               	movlw	1	; select bank2/3
 11467     0954  0087               	movwf	7
 11468     0955  0181               	clrf	1
 11469                           
 11470                           ;usb/usb_device.c: 1995:  }
 11471     0956  3001               	movlw	1
 11472     0957  00FD               	movwf	??_USBStdSetCfgHandler
 11473     0958  087D               	movf	??_USBStdSetCfgHandler,w
 11474     0959  07D9               	addwf	USBStdSetCfgHandler@i,f
 11475     095A  3002               	movlw	2
 11476     095B  0259               	subwf	USBStdSetCfgHandler@i,w
 11477     095C  1C03               	skipc
 11478     095D  294A               	goto	i1l4235
 11479                           
 11480                           ;usb/usb_device.c: 1998:     memset((void*)&USBAlternateInterface,0x00,1);
 11481     095E  3000               	movlw	0
 11482     095F  00F0               	movwf	i1memset@c
 11483     0960  00F1               	movwf	i1memset@c+1
 11484     0961  3001               	movlw	1
 11485     0962  00F2               	movwf	i1memset@n
 11486     0963  3000               	movlw	0
 11487     0964  00F3               	movwf	i1memset@n+1
 11488     0965  306E               	movlw	(low (_USBAlternateInterface| 0))& (0+255)
 11489     0966  3190  2089  3189   	fcall	i1_memset
 11490                           
 11491                           ;usb/usb_device.c: 2001:     UCONbits.PPBRST = 0;
 11492     0969  003D               	movlb	29	; select bank29
 11493     096A  130E               	bcf	14,6	;volatile
 11494                           
 11495                           ;usb/usb_device.c: 2003:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 11496     096B  3028               	movlw	40
 11497     096C  0020               	movlb	0	; select bank0
 11498     096D  00E3               	movwf	_pBDTEntryIn
 11499     096E  3000               	movlw	0
 11500     096F  00E4               	movwf	_pBDTEntryIn+1
 11501                           
 11502                           ;usb/usb_device.c: 2006:     pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 11503     0970  3020               	movlw	32
 11504     0971  00EB               	movwf	_pBDTEntryEP0OutCurrent
 11505                           
 11506                           ;usb/usb_device.c: 2007:     pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 11507     0972  086B               	movf	_pBDTEntryEP0OutCurrent,w
 11508     0973  00E7               	movwf	_pBDTEntryEP0OutNext
 11509     0974  01E8               	clrf	_pBDTEntryEP0OutNext+1
 11510                           
 11511                           ;usb/usb_device.c: 2010:     USBActiveConfiguration = SetupPkt.bConfigurationValue;
 11512     0975  0842               	movf	66,w	;volatile
 11513     0976  00EF               	movwf	_USBActiveConfiguration	;volatile
 11514                           
 11515                           ;usb/usb_device.c: 2013:     if(USBActiveConfiguration == 0)
 11516     0977  086F               	movf	_USBActiveConfiguration,w	;volatile
 11517     0978  1D03               	btfss	3,2
 11518     0979  297D               	goto	i1l4257
 11519                           
 11520                           ;usb/usb_device.c: 2014:     {;usb/usb_device.c: 2016:         USBDeviceState = ADDRESS_
      +                          STATE;
 11521     097A  3010               	movlw	16
 11522     097B  00EC               	movwf	_USBDeviceState	;volatile
 11523                           
 11524                           ;usb/usb_device.c: 2017:     }
 11525     097C  0008               	return
 11526     097D                     i1l4257:
 11527                           
 11528                           ;usb/usb_device.c: 2019:     {;usb/usb_device.c: 2021:         USER_USB_CALLBACK_EVENT_H
      +                          ANDLER((USB_EVENT)EVENT_CONFIGURED,(void*)&USBActiveConfiguration,1);
 11529     097D  3001               	movlw	1
 11530     097E  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11531     097F  3000               	movlw	0
 11532     0980  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11533     0981  306F               	movlw	low _USBActiveConfiguration
 11534     0982  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11535     0983  3000               	movlw	high _USBActiveConfiguration
 11536     0984  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11537     0985  3001               	movlw	1
 11538     0986  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11539     0987  3000               	movlw	0
 11540     0988  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11541     0989  3194  241A         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11542                           
 11543                           ;usb/usb_device.c: 2026:         USBDeviceState = CONFIGURED_STATE;
 11544     098B  3020               	movlw	32
 11545     098C  0020               	movlb	0	; select bank0
 11546     098D  00EC               	movwf	_USBDeviceState	;volatile
 11547     098E  0008               	return
 11548     098F                     __end_of_USBStdSetCfgHandler:
 11549                           
 11550                           	psect	text60
 11551     1089                     __ptext60:	
 11552 ;; *************** function i1_memset *****************
 11553 ;; Defined at:
 11554 ;;		line 3 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memset.c"
 11555 ;; Parameters:    Size  Location     Type
 11556 ;;  dest            1    wreg     PTR void 
 11557 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11558 ;;  c               2    0[COMMON] int 
 11559 ;;  n               2    2[COMMON] unsigned int 
 11560 ;; Auto vars:     Size  Location     Type
 11561 ;;  dest            1    5[COMMON] PTR void 
 11562 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11563 ;;  p               1    6[COMMON] PTR unsigned char 
 11564 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11565 ;; Return value:  Size  Location     Type
 11566 ;;                  2    0[COMMON] PTR void 
 11567 ;; Registers used:
 11568 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11569 ;; Tracked objects:
 11570 ;;		On entry : 1F/0
 11571 ;;		On exit  : 1F/0
 11572 ;;		Unchanged: 1F/0
 11573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11574 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;Total ram usage:        7 bytes
 11579 ;; Hardware stack levels used: 1
 11580 ;; This function calls:
 11581 ;;		Nothing
 11582 ;; This function is called by:
 11583 ;;		_USBStdSetCfgHandler
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587     1089                     i1_memset:	
 11588                           ;psect for function i1_memset
 11589                           
 11590                           
 11591                           ;incstack = 0
 11592                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11593                           ;i1memset@dest stored from wreg
 11594     1089  00F5               	movwf	i1memset@dest
 11595     108A  0875               	movf	i1memset@dest,w
 11596     108B  00F6               	movwf	i1memset@p
 11597     108C                     i1l4147:
 11598     108C  3001               	movlw	1
 11599     108D  02F2               	subwf	i1memset@n,f
 11600     108E  3000               	movlw	0
 11601     108F  3BF3               	subwfb	i1memset@n+1,f
 11602     1090  0A72               	incf	i1memset@n,w
 11603     1091  1903               	btfsc	3,2
 11604     1092  0A73               	incf	i1memset@n+1,w
 11605     1093  1903               	btfsc	3,2
 11606     1094  0008               	return
 11607     1095  0876               	movf	i1memset@p,w
 11608     1096  0086               	movwf	6
 11609     1097  0187               	clrf	7
 11610     1098  0870               	movf	i1memset@c,w
 11611     1099  0081               	movwf	1
 11612     109A  3001               	movlw	1
 11613     109B  00F4               	movwf	??i1_memset
 11614     109C  0874               	movf	??i1_memset,w
 11615     109D  07F6               	addwf	i1memset@p,f
 11616     109E  288C               	goto	i1l4147
 11617     109F                     __end_ofi1_memset:
 11618                           
 11619                           	psect	text61
 11620     15A9                     __ptext61:	
 11621 ;; *************** function _USBStdGetStatusHandler *****************
 11622 ;; Defined at:
 11623 ;;		line 2133 in file "usb/usb_device.c"
 11624 ;; Parameters:    Size  Location     Type
 11625 ;;		None
 11626 ;; Auto vars:     Size  Location     Type
 11627 ;;  p               2    2[COMMON] PTR struct __BDT
 11628 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 11629 ;; Return value:  Size  Location     Type
 11630 ;;                  1    wreg      void 
 11631 ;; Registers used:
 11632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11633 ;; Tracked objects:
 11634 ;;		On entry : 1D/0
 11635 ;;		On exit  : 1F/1
 11636 ;;		Unchanged: 0/0
 11637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;Total ram usage:        4 bytes
 11643 ;; Hardware stack levels used: 1
 11644 ;; This function calls:
 11645 ;;		Nothing
 11646 ;; This function is called by:
 11647 ;;		_USBCheckStdRequest
 11648 ;; This function uses a non-reentrant model
 11649 ;;
 11650                           
 11651     15A9                     _USBStdGetStatusHandler:	
 11652                           ;psect for function _USBStdGetStatusHandler
 11653                           
 11654                           
 11655                           ;usb/usb_device.c: 2135:     CtrlTrfData[0] = 0;
 11656                           
 11657                           ;incstack = 0
 11658                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
 11659     15A9  0020               	movlb	0	; select bank0
 11660     15AA  01C8               	clrf	72	;volatile
 11661                           
 11662                           ;usb/usb_device.c: 2136:     CtrlTrfData[1] = 0;
 11663     15AB  01C9               	clrf	73	;volatile
 11664                           
 11665                           ;usb/usb_device.c: 2138:     switch(SetupPkt.Recipient)
 11666     15AC  2DE7               	goto	i1l4321
 11667     15AD                     i1l581:	
 11668                           ;usb/usb_device.c: 2139:     {;usb/usb_device.c: 2140:         case (0x00):
 11669                           
 11670                           
 11671                           ;usb/usb_device.c: 2141:             inPipes[0].info.bits.busy = 1;
 11672     15AD  0021               	movlb	1	; select bank1
 11673     15AE  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11674                           
 11675                           ;usb/usb_device.c: 2151:             if(RemoteWakeup == 1)
 11676                           
 11677                           ;usb/usb_device.c: 2146:             if(0 == 1)
 11678     15AF  0022               	movlb	2	; select bank2
 11679     15B0  0360               	decf	_RemoteWakeup^(0+256),w	;volatile
 11680     15B1  1D03               	btfss	3,2
 11681     15B2  2DFB               	goto	i1l584
 11682                           
 11683                           ;usb/usb_device.c: 2152:             {;usb/usb_device.c: 2153:                 CtrlTrfDa
      +                          ta[0]|=0x02;
 11684     15B3  0020               	movlb	0	; select bank0
 11685     15B4  14C8               	bsf	72,1	;volatile
 11686     15B5  2DFB               	goto	i1l584
 11687     15B6                     i1l585:	
 11688                           ;usb/usb_device.c: 2156:         case (0x01):
 11689                           
 11690                           
 11691                           ;usb/usb_device.c: 2157:             inPipes[0].info.bits.busy = 1;
 11692     15B6  0021               	movlb	1	; select bank1
 11693     15B7  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11694                           
 11695                           ;usb/usb_device.c: 2158:             break;
 11696     15B8  2DFB               	goto	i1l584
 11697     15B9                     i1l586:	
 11698                           ;usb/usb_device.c: 2159:         case (0x02):
 11699                           
 11700                           
 11701                           ;usb/usb_device.c: 2160:             inPipes[0].info.bits.busy = 1;
 11702     15B9  0021               	movlb	1	; select bank1
 11703     15BA  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11704                           
 11705                           ;usb/usb_device.c: 2164:             if(SetupPkt.EPNum != 0)
 11706     15BB  0020               	movlb	0	; select bank0
 11707     15BC  0844               	movf	68,w	;volatile
 11708     15BD  390F               	andlw	15
 11709     15BE  3A00               	xorlw	0
 11710     15BF  1903               	skipnz
 11711     15C0  2DFB               	goto	i1l584
 11712                           
 11713                           ;usb/usb_device.c: 2165:             {;usb/usb_device.c: 2166:                 BDT_ENTRY
      +                           *p;;usb/usb_device.c: 2168:                 if(SetupPkt.EPDir == 0)
 11714     15C1  1BC4               	btfsc	68,7	;volatile
 11715     15C2  2DCE               	goto	i1l4311
 11716                           
 11717                           ;usb/usb_device.c: 2169:                 {;usb/usb_device.c: 2170:                     p
      +                           = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 11718     15C3  0844               	movf	68,w	;volatile
 11719     15C4  390F               	andlw	15
 11720     15C5  0709               	addwf	9,w
 11721     15C6  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 11722     15C7  0086               	movwf	6
 11723     15C8  3001               	movlw	1	; select bank2/3
 11724     15C9  0087               	movwf	7
 11725     15CA  3F40               	moviw [0]fsr1
 11726     15CB  00F2               	movwf	USBStdGetStatusHandler@p
 11727     15CC  3F41               	moviw [1]fsr1
 11728     15CD  2DD7               	goto	L8
 11729     15CE                     i1l4311:	
 11730                           ;usb/usb_device.c: 2171:                 }
 11731                           
 11732                           
 11733                           ;usb/usb_device.c: 2173:                 {;usb/usb_device.c: 2174:                     p
      +                           = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 11734     15CE  0844               	movf	68,w	;volatile
 11735     15CF  390F               	andlw	15
 11736     15D0  0709               	addwf	9,w
 11737     15D1  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 11738     15D2  0086               	movwf	6
 11739     15D3  0187               	clrf	7
 11740     15D4  3F40               	moviw [0]fsr1
 11741     15D5  00F2               	movwf	USBStdGetStatusHandler@p
 11742     15D6  3F41               	moviw [1]fsr1
 11743     15D7                     L8:
 11744     15D7  00F3               	movwf	USBStdGetStatusHandler@p+1
 11745                           
 11746                           ;usb/usb_device.c: 2177:                 if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1)
      +                          )
 11747     15D8  0872               	movf	USBStdGetStatusHandler@p,w
 11748     15D9  0086               	movwf	6
 11749     15DA  0873               	movf	USBStdGetStatusHandler@p+1,w
 11750     15DB  0087               	movwf	7
 11751     15DC  1F81               	btfss	1,7
 11752     15DD  2DFB               	goto	i1l584
 11753     15DE  0872               	movf	USBStdGetStatusHandler@p,w
 11754     15DF  0086               	movwf	6
 11755     15E0  0873               	movf	USBStdGetStatusHandler@p+1,w
 11756     15E1  0087               	movwf	7
 11757     15E2  1D01               	btfss	1,2
 11758     15E3  2DFB               	goto	i1l584
 11759                           
 11760                           ;usb/usb_device.c: 2178:                 {;usb/usb_device.c: 2179:                     C
      +                          trlTrfData[0]=0x01;
 11761     15E4  3001               	movlw	1
 11762     15E5  00C8               	movwf	72	;volatile
 11763     15E6  2DFB               	goto	i1l584
 11764     15E7                     i1l4321:
 11765     15E7  0840               	movf	64,w	;volatile
 11766     15E8  391F               	andlw	31
 11767     15E9  00F0               	movwf	??_USBStdGetStatusHandler
 11768     15EA  01F1               	clrf	??_USBStdGetStatusHandler+1
 11769                           
 11770                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11771                           ; Switch size 1, requested type "simple"
 11772                           ; Number of cases is 1, Range of values is 0 to 0
 11773                           ; switch strategies available:
 11774                           ; Name         Instructions Cycles
 11775                           ; simple_byte            4     3 (average)
 11776                           ; direct_byte            8     6 (fixed)
 11777                           ; jumptable            260     6 (fixed)
 11778                           ;	Chosen strategy is simple_byte
 11779     15EB  0871               	movf	??_USBStdGetStatusHandler+1,w
 11780     15EC  3A00               	xorlw	0	; case 0
 11781     15ED  1903               	skipnz
 11782     15EE  2DF0               	goto	i1l6575
 11783     15EF  2DFB               	goto	i1l584
 11784     15F0                     i1l6575:
 11785                           
 11786                           ; Switch size 1, requested type "simple"
 11787                           ; Number of cases is 3, Range of values is 0 to 2
 11788                           ; switch strategies available:
 11789                           ; Name         Instructions Cycles
 11790                           ; simple_byte           10     6 (average)
 11791                           ; direct_byte           12     6 (fixed)
 11792                           ; jumptable            260     6 (fixed)
 11793                           ;	Chosen strategy is simple_byte
 11794     15F0  0870               	movf	??_USBStdGetStatusHandler,w
 11795     15F1  3A00               	xorlw	0	; case 0
 11796     15F2  1903               	skipnz
 11797     15F3  2DAD               	goto	i1l581
 11798     15F4  3A01               	xorlw	1	; case 1
 11799     15F5  1903               	skipnz
 11800     15F6  2DB6               	goto	i1l585
 11801     15F7  3A03               	xorlw	3	; case 2
 11802     15F8  1903               	skipnz
 11803     15F9  2DB9               	goto	i1l586
 11804     15FA  2DFB               	goto	i1l584
 11805     15FB                     i1l584:
 11806                           
 11807                           ;usb/usb_device.c: 2185:     if(inPipes[0].info.bits.busy == 1)
 11808     15FB  0021               	movlb	1	; select bank1
 11809     15FC  1FEB               	btfss	(_inPipes^(0+128)+2),7	;volatile
 11810     15FD  0008               	return
 11811                           
 11812                           ;usb/usb_device.c: 2186:     {;usb/usb_device.c: 2187:         inPipes[0].pSrc.bRam = (u
      +                          int8_t*)&CtrlTrfData;
 11813     15FE  3048               	movlw	72
 11814     15FF  00E9               	movwf	_inPipes^(0+128)	;volatile
 11815     1600  3000               	movlw	0
 11816     1601  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 11817                           
 11818                           ;usb/usb_device.c: 2188:         inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11819     1602  146B               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11820                           
 11821                           ;usb/usb_device.c: 2189:         inPipes[0].wCount.v[0] = 2;
 11822     1603  3002               	movlw	2
 11823     1604  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11824     1605  0008               	return
 11825     1606                     __end_of_USBStdGetStatusHandler:
 11826                           
 11827                           	psect	text62
 11828     0C61                     __ptext62:	
 11829 ;; *************** function _USBStdGetDscHandler *****************
 11830 ;; Defined at:
 11831 ;;		line 2047 in file "usb/usb_device.c"
 11832 ;; Parameters:    Size  Location     Type
 11833 ;;		None
 11834 ;; Auto vars:     Size  Location     Type
 11835 ;;		None
 11836 ;; Return value:  Size  Location     Type
 11837 ;;                  1    wreg      void 
 11838 ;; Registers used:
 11839 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11840 ;; Tracked objects:
 11841 ;;		On entry : 1D/0
 11842 ;;		On exit  : 1E/0
 11843 ;;		Unchanged: 0/0
 11844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11847 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11848 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11849 ;;Total ram usage:        3 bytes
 11850 ;; Hardware stack levels used: 1
 11851 ;; This function calls:
 11852 ;;		Nothing
 11853 ;; This function is called by:
 11854 ;;		_USBCheckStdRequest
 11855 ;; This function uses a non-reentrant model
 11856 ;;
 11857                           
 11858     0C61                     _USBStdGetDscHandler:	
 11859                           ;psect for function _USBStdGetDscHandler
 11860                           
 11861                           
 11862                           ;usb/usb_device.c: 2049:     if(SetupPkt.bmRequestType == 0x80)
 11863                           
 11864                           ;incstack = 0
 11865                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 11866     0C61  3080               	movlw	128
 11867     0C62  0020               	movlb	0	; select bank0
 11868     0C63  0640               	xorwf	64,w	;volatile
 11869     0C64  1D03               	btfss	3,2
 11870     0C65  0008               	return
 11871                           
 11872                           ;usb/usb_device.c: 2050:     {;usb/usb_device.c: 2051:         inPipes[0].info.Val = 0x0
      +                          0 | 0x80 | 0x40;
 11873     0C66  30C0               	movlw	192
 11874     0C67  0021               	movlb	1	; select bank1
 11875     0C68  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 11876                           
 11877                           ;usb/usb_device.c: 2053:         switch(SetupPkt.bDescriptorType)
 11878     0C69  2CCD               	goto	i1l4291
 11879     0C6A                     i1l4265:
 11880                           
 11881                           ;usb/usb_device.c: 2057:                     inPipes[0].pSrc.bRom = (const uint8_t*)&dev
      +                          ice_dsc;
 11882     0C6A  309C               	movlw	low (_device_dsc| (0+32768))
 11883     0C6B  0021               	movlb	1	; select bank1
 11884     0C6C  00E9               	movwf	_inPipes^(0+128)	;volatile
 11885     0C6D  3098               	movlw	high (_device_dsc| (0+32768))
 11886     0C6E  00EA               	movwf	(_inPipes^(0+128)+1)	;volatile
 11887                           
 11888                           ;usb/usb_device.c: 2061:                 inPipes[0].wCount.Val = sizeof(device_dsc);
 11889     0C6F  3000               	movlw	0
 11890     0C70  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11891     0C71  3012               	movlw	18
 11892     0C72  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11893                           
 11894                           ;usb/usb_device.c: 2062:                 break;
 11895     0C73  0008               	return
 11896     0C74                     i1l4269:
 11897                           
 11898                           ;usb/usb_device.c: 2067:                 if(SetupPkt.bDscIndex < 1)
 11899     0C74  0842               	movf	66,w	;volatile
 11900     0C75  1D03               	btfss	3,2
 11901     0C76  2CA3               	goto	i1l4277
 11902                           
 11903                           ;usb/usb_device.c: 2068:                 {;usb/usb_device.c: 2070:                      
      +                             inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 11904     0C77  0842               	movf	66,w	;volatile
 11905     0C78  00F0               	movwf	??_USBStdGetDscHandler
 11906     0C79  01F1               	clrf	??_USBStdGetDscHandler+1
 11907     0C7A  35F0               	lslf	??_USBStdGetDscHandler,f
 11908     0C7B  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 11909     0C7C  30C6               	movlw	low _USB_CD_Ptr
 11910     0C7D  0770               	addwf	??_USBStdGetDscHandler,w
 11911     0C7E  0084               	movwf	4
 11912     0C7F  3018               	movlw	high _USB_CD_Ptr
 11913     0C80  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 11914     0C81  3880               	iorlw	128
 11915     0C82  0085               	movwf	5
 11916     0C83  3F00               	moviw [0]fsr0
 11917     0C84  0021               	movlb	1	; select bank1
 11918     0C85  00E9               	movwf	_inPipes^(0+128)	;volatile
 11919     0C86  3F01               	moviw [1]fsr0
 11920     0C87  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 11921                           
 11922                           ;usb/usb_device.c: 2078:                     inPipes[0].wCount.byte.LB = *(inPipes[0].pS
      +                          rc.bRom+2);
 11923     0C88  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 11924     0C89  00F1               	movwf	??_USBStdGetDscHandler+1
 11925     0C8A  0869               	movf	_inPipes^(0+128),w	;volatile
 11926     0C8B  00F0               	movwf	??_USBStdGetDscHandler
 11927     0C8C  3002               	movlw	2
 11928     0C8D  0770               	addwf	??_USBStdGetDscHandler,w
 11929     0C8E  0084               	movwf	4
 11930     0C8F  0871               	movf	??_USBStdGetDscHandler+1,w
 11931     0C90  1803               	skipnc
 11932     0C91  0A71               	incf	??_USBStdGetDscHandler+1,w
 11933     0C92  0085               	movwf	5
 11934     0C93  0800               	movf	0,w	;code access
 11935     0C94  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11936                           
 11937                           ;usb/usb_device.c: 2079:                     inPipes[0].wCount.byte.HB = *(inPipes[0].pS
      +                          rc.bRom+3);
 11938     0C95  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 11939     0C96  00F1               	movwf	??_USBStdGetDscHandler+1
 11940     0C97  0869               	movf	_inPipes^(0+128),w	;volatile
 11941     0C98  00F0               	movwf	??_USBStdGetDscHandler
 11942     0C99  3003               	movlw	3
 11943     0C9A  0770               	addwf	??_USBStdGetDscHandler,w
 11944     0C9B  0084               	movwf	4
 11945     0C9C  0871               	movf	??_USBStdGetDscHandler+1,w
 11946     0C9D  1803               	skipnc
 11947     0C9E  0A71               	incf	??_USBStdGetDscHandler+1,w
 11948     0C9F  0085               	movwf	5
 11949     0CA0  0800               	movf	0,w	;code access
 11950     0CA1  00ED               	movwf	(_inPipes^(0+128)+4)	;volatile
 11951                           
 11952                           ;usb/usb_device.c: 2080:                 }
 11953     0CA2  0008               	return
 11954     0CA3                     i1l4277:
 11955                           
 11956                           ;usb/usb_device.c: 2082:     {;usb/usb_device.c: 2083:      inPipes[0].info.Val = 0;
 11957     0CA3  0021               	movlb	1	; select bank1
 11958     0CA4  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 11959     0CA5  0008               	return
 11960     0CA6                     i1l4279:
 11961                           
 11962                           ;usb/usb_device.c: 2090:                 if(SetupPkt.bDscIndex<3)
 11963     0CA6  3003               	movlw	3
 11964     0CA7  0242               	subwf	66,w	;volatile
 11965     0CA8  1803               	skipnc
 11966     0CA9  2CC7               	goto	i1l4285
 11967                           
 11968                           ;usb/usb_device.c: 2091:                 {;usb/usb_device.c: 2093:                     i
      +                          nPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 11969     0CAA  0842               	movf	66,w	;volatile
 11970     0CAB  00F0               	movwf	??_USBStdGetDscHandler
 11971     0CAC  01F1               	clrf	??_USBStdGetDscHandler+1
 11972     0CAD  35F0               	lslf	??_USBStdGetDscHandler,f
 11973     0CAE  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 11974     0CAF  30BC               	movlw	low _USB_SD_Ptr
 11975     0CB0  0770               	addwf	??_USBStdGetDscHandler,w
 11976     0CB1  0084               	movwf	4
 11977     0CB2  3018               	movlw	high _USB_SD_Ptr
 11978     0CB3  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 11979     0CB4  3880               	iorlw	128
 11980     0CB5  0085               	movwf	5
 11981     0CB6  3F00               	moviw [0]fsr0
 11982     0CB7  0021               	movlb	1	; select bank1
 11983     0CB8  00E9               	movwf	_inPipes^(0+128)	;volatile
 11984     0CB9  3F01               	moviw [1]fsr0
 11985     0CBA  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 11986                           
 11987                           ;usb/usb_device.c: 2095:                     inPipes[0].wCount.Val = *inPipes[0].pSrc.bR
      +                          om;
 11988     0CBB  0869               	movf	_inPipes^(0+128),w	;volatile
 11989     0CBC  0084               	movwf	4
 11990     0CBD  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 11991     0CBE  0085               	movwf	5
 11992     0CBF  0800               	movf	0,w	;code access
 11993     0CC0  00F0               	movwf	??_USBStdGetDscHandler
 11994     0CC1  01F1               	clrf	??_USBStdGetDscHandler+1
 11995     0CC2  0870               	movf	??_USBStdGetDscHandler,w
 11996     0CC3  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11997     0CC4  0871               	movf	??_USBStdGetDscHandler+1,w
 11998     0CC5  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11999                           
 12000                           ;usb/usb_device.c: 2096:                 }
 12001     0CC6  0008               	return
 12002     0CC7                     i1l4285:
 12003                           
 12004                           ;usb/usb_device.c: 2107:                 {;usb/usb_device.c: 2108:                     i
      +                          nPipes[0].info.Val = 0;
 12005     0CC7  0021               	movlb	1	; select bank1
 12006     0CC8  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 12007     0CC9  0008               	return
 12008     0CCA                     i1l4287:
 12009                           
 12010                           ;usb/usb_device.c: 2112:                 inPipes[0].info.Val = 0;
 12011     0CCA  0021               	movlb	1	; select bank1
 12012     0CCB  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 12013                           
 12014                           ;usb/usb_device.c: 2113:                 break;
 12015     0CCC  0008               	return
 12016     0CCD                     i1l4291:
 12017     0CCD  0020               	movlb	0	; select bank0
 12018     0CCE  0843               	movf	67,w	;volatile
 12019     0CCF  00F0               	movwf	??_USBStdGetDscHandler
 12020     0CD0  01F1               	clrf	??_USBStdGetDscHandler+1
 12021                           
 12022                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12023                           ; Switch size 1, requested type "simple"
 12024                           ; Number of cases is 1, Range of values is 0 to 0
 12025                           ; switch strategies available:
 12026                           ; Name         Instructions Cycles
 12027                           ; simple_byte            4     3 (average)
 12028                           ; direct_byte            8     6 (fixed)
 12029                           ; jumptable            260     6 (fixed)
 12030                           ;	Chosen strategy is simple_byte
 12031     0CD1  0871               	movf	??_USBStdGetDscHandler+1,w
 12032     0CD2  3A00               	xorlw	0	; case 0
 12033     0CD3  1903               	skipnz
 12034     0CD4  2CD6               	goto	i1l6577
 12035     0CD5  2CCA               	goto	i1l4287
 12036     0CD6                     i1l6577:
 12037                           
 12038                           ; Switch size 1, requested type "simple"
 12039                           ; Number of cases is 3, Range of values is 1 to 3
 12040                           ; switch strategies available:
 12041                           ; Name         Instructions Cycles
 12042                           ; simple_byte           10     6 (average)
 12043                           ; direct_byte           15     9 (fixed)
 12044                           ; jumptable            263     9 (fixed)
 12045                           ;	Chosen strategy is simple_byte
 12046     0CD6  0870               	movf	??_USBStdGetDscHandler,w
 12047     0CD7  3A01               	xorlw	1	; case 1
 12048     0CD8  1903               	skipnz
 12049     0CD9  2C6A               	goto	i1l4265
 12050     0CDA  3A03               	xorlw	3	; case 2
 12051     0CDB  1903               	skipnz
 12052     0CDC  2C74               	goto	i1l4269
 12053     0CDD  3A01               	xorlw	1	; case 3
 12054     0CDE  1903               	skipnz
 12055     0CDF  2CA6               	goto	i1l4279
 12056     0CE0  2CCA               	goto	i1l4287
 12057     0CE1  0008               	return
 12058     0CE2                     __end_of_USBStdGetDscHandler:
 12059                           
 12060                           	psect	text63
 12061     01D2                     __ptext63:	
 12062 ;; *************** function _USBStdFeatureReqHandler *****************
 12063 ;; Defined at:
 12064 ;;		line 2761 in file "usb/usb_device.c"
 12065 ;; Parameters:    Size  Location     Type
 12066 ;;		None
 12067 ;; Auto vars:     Size  Location     Type
 12068 ;;  p               2   11[BANK0 ] PTR struct __BDT
 12069 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 12070 ;;  pUEP            2    8[BANK0 ] PTR unsigned char 
 12071 ;;		 -> UEP0(1), 
 12072 ;;  current_ep_d    1   10[BANK0 ] struct .
 12073 ;; Return value:  Size  Location     Type
 12074 ;;                  1    wreg      void 
 12075 ;; Registers used:
 12076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12077 ;; Tracked objects:
 12078 ;;		On entry : 1D/0
 12079 ;;		On exit  : 1F/0
 12080 ;;		Unchanged: 0/0
 12081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12083 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12084 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12085 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12086 ;;Total ram usage:        7 bytes
 12087 ;; Hardware stack levels used: 1
 12088 ;; Hardware stack levels required when called: 4
 12089 ;; This function calls:
 12090 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12091 ;; This function is called by:
 12092 ;;		_USBCheckStdRequest
 12093 ;; This function uses a non-reentrant model
 12094 ;;
 12095                           
 12096     01D2                     _USBStdFeatureReqHandler:	
 12097                           ;psect for function _USBStdFeatureReqHandler
 12098                           
 12099                           
 12100                           ;usb/usb_device.c: 2763:     BDT_ENTRY *p;;usb/usb_device.c: 2764:     EP_STATUS current
      +                          _ep_data;;usb/usb_device.c: 2768:         unsigned char* pUEP;;usb/usb_device.c: 2772:  
      +                             if((SetupPkt.bFeature == 1)&&
 12101                           
 12102                           ;incstack = 0
 12103                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12104     01D2  0020               	movlb	0	; select bank0
 12105     01D3  0342               	decf	66,w	;volatile
 12106     01D4  1D03               	btfss	3,2
 12107     01D5  29E8               	goto	i1l4345
 12108     01D6  0840               	movf	64,w	;volatile
 12109     01D7  391F               	andlw	31
 12110     01D8  3A00               	xorlw	0
 12111     01D9  1D03               	skipz
 12112     01DA  29E8               	goto	i1l4345
 12113                           
 12114                           ;usb/usb_device.c: 2774:     {;usb/usb_device.c: 2775:         inPipes[0].info.bits.busy
      +                           = 1;
 12115     01DB  0021               	movlb	1	; select bank1
 12116     01DC  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12117                           
 12118                           ;usb/usb_device.c: 2776:         if(SetupPkt.bRequest == 3)
 12119     01DD  3003               	movlw	3
 12120     01DE  0020               	movlb	0	; select bank0
 12121     01DF  0641               	xorwf	65,w	;volatile
 12122     01E0  1D03               	btfss	3,2
 12123     01E1  29E6               	goto	i1l4343
 12124                           
 12125                           ;usb/usb_device.c: 2777:             RemoteWakeup = 1;
 12126     01E2  3001               	movlw	1
 12127     01E3  0022               	movlb	2	; select bank2
 12128     01E4  00E0               	movwf	_RemoteWakeup^(0+256)	;volatile
 12129     01E5  29E8               	goto	i1l4345
 12130     01E6                     i1l4343:
 12131                           
 12132                           ;usb/usb_device.c: 2779:             RemoteWakeup = 0;
 12133     01E6  0022               	movlb	2	; select bank2
 12134     01E7  01E0               	clrf	_RemoteWakeup^(0+256)	;volatile
 12135     01E8                     i1l4345:
 12136                           
 12137                           ;usb/usb_device.c: 2783:     if((SetupPkt.bFeature == 0)&&
 12138     01E8  0020               	movlb	0	; select bank0
 12139     01E9  0842               	movf	66,w	;volatile
 12140     01EA  1D03               	btfss	3,2
 12141     01EB  0008               	return
 12142     01EC  0840               	movf	64,w	;volatile
 12143     01ED  391F               	andlw	31
 12144     01EE  3A02               	xorlw	2
 12145     01EF  1D03               	skipz
 12146     01F0  0008               	return
 12147     01F1  0844               	movf	68,w	;volatile
 12148     01F2  390F               	andlw	15
 12149     01F3  3A00               	xorlw	0
 12150     01F4  1903               	skipnz
 12151     01F5  0008               	return
 12152     01F6  0844               	movf	68,w	;volatile
 12153     01F7  390F               	andlw	15
 12154     01F8  00D6               	movwf	??_USBStdFeatureReqHandler
 12155     01F9  3002               	movlw	2
 12156     01FA  0256               	subwf	??_USBStdFeatureReqHandler,w
 12157     01FB  1803               	skipnc
 12158     01FC  0008               	return
 12159     01FD  3020               	movlw	32
 12160     01FE  066C               	xorwf	_USBDeviceState,w
 12161     01FF  1D03               	btfss	3,2
 12162     0200  0008               	return
 12163                           
 12164                           ;usb/usb_device.c: 2787:     {;usb/usb_device.c: 2790:   inPipes[0].info.bits.busy = 1;
 12165     0201  0021               	movlb	1	; select bank1
 12166     0202  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12167                           
 12168                           ;usb/usb_device.c: 2793:         if(SetupPkt.EPDir == 0)
 12169     0203  0020               	movlb	0	; select bank0
 12170     0204  1BC4               	btfsc	68,7	;volatile
 12171     0205  2A15               	goto	i1l4359
 12172                           
 12173                           ;usb/usb_device.c: 2794:         {;usb/usb_device.c: 2795:             p = (BDT_ENTRY*)p
      +                          BDTEntryOut[SetupPkt.EPNum];
 12174     0206  0844               	movf	68,w	;volatile
 12175     0207  390F               	andlw	15
 12176     0208  0709               	addwf	9,w
 12177     0209  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12178     020A  0086               	movwf	6
 12179     020B  3001               	movlw	1	; select bank2/3
 12180     020C  0087               	movwf	7
 12181     020D  3F40               	moviw [0]fsr1
 12182     020E  00DB               	movwf	USBStdFeatureReqHandler@p
 12183     020F  3F41               	moviw [1]fsr1
 12184     0210  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12185                           
 12186                           ;usb/usb_device.c: 2796:             current_ep_data.Val = ep_data_out[SetupPkt.EPNum].V
      +                          al;
 12187     0211  0844               	movf	68,w	;volatile
 12188     0212  390F               	andlw	15
 12189     0213  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12190     0214  2A22               	goto	L9
 12191     0215                     i1l4359:	
 12192                           ;usb/usb_device.c: 2797:         }
 12193                           
 12194                           
 12195                           ;usb/usb_device.c: 2799:         {;usb/usb_device.c: 2800:             p = (BDT_ENTRY*)p
      +                          BDTEntryIn[SetupPkt.EPNum];
 12196     0215  0844               	movf	68,w	;volatile
 12197     0216  390F               	andlw	15
 12198     0217  0709               	addwf	9,w
 12199     0218  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12200     0219  0086               	movwf	6
 12201     021A  0187               	clrf	7
 12202     021B  3F40               	moviw [0]fsr1
 12203     021C  00DB               	movwf	USBStdFeatureReqHandler@p
 12204     021D  3F41               	moviw [1]fsr1
 12205     021E  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12206                           
 12207                           ;usb/usb_device.c: 2801:             current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Va
      +                          l;
 12208     021F  0844               	movf	68,w	;volatile
 12209     0220  390F               	andlw	15
 12210     0221  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12211     0222                     L9:
 12212     0222  0086               	movwf	6
 12213     0223  3001               	movlw	1	; select bank2/3
 12214     0224  0087               	movwf	7
 12215     0225  0801               	movf	1,w
 12216     0226  00DA               	movwf	USBStdFeatureReqHandler@current_ep_data
 12217                           
 12218                           ;usb/usb_device.c: 2808:             if(current_ep_data.bits.ping_pong_state == 0)
 12219     0227  185A               	btfsc	USBStdFeatureReqHandler@current_ep_data,0
 12220     0228  2A33               	goto	i1l4365
 12221                           
 12222                           ;usb/usb_device.c: 2809:             {;usb/usb_device.c: 2810:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) & (~0x0004));
 12223     0229  30FB               	movlw	251
 12224     022A  00D6               	movwf	??_USBStdFeatureReqHandler
 12225     022B  30FF               	movlw	255
 12226     022C  00D7               	movwf	??_USBStdFeatureReqHandler+1
 12227     022D  085B               	movf	USBStdFeatureReqHandler@p,w
 12228     022E  0556               	andwf	??_USBStdFeatureReqHandler,w
 12229     022F  00DB               	movwf	USBStdFeatureReqHandler@p
 12230     0230  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12231     0231  0557               	andwf	??_USBStdFeatureReqHandler+1,w
 12232     0232  2A38               	goto	L10
 12233     0233                     i1l4365:	
 12234                           ;usb/usb_device.c: 2811:             }
 12235                           
 12236                           
 12237                           ;usb/usb_device.c: 2813:             {;usb/usb_device.c: 2814:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) | 0x0004);
 12238     0233  3004               	movlw	4
 12239     0234  045B               	iorwf	USBStdFeatureReqHandler@p,w
 12240     0235  00DB               	movwf	USBStdFeatureReqHandler@p
 12241     0236  3000               	movlw	0
 12242     0237  045C               	iorwf	USBStdFeatureReqHandler@p+1,w
 12243     0238                     L10:
 12244     0238  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12245                           
 12246                           ;usb/usb_device.c: 2820:         if(SetupPkt.EPDir == 0)
 12247     0239  1BC4               	btfsc	68,7	;volatile
 12248     023A  2A47               	goto	i1l4371
 12249                           
 12250                           ;usb/usb_device.c: 2821:         {;usb/usb_device.c: 2822:             pBDTEntryOut[Setu
      +                          pPkt.EPNum] = (volatile BDT_ENTRY *)p;
 12251     023B  0844               	movf	68,w	;volatile
 12252     023C  390F               	andlw	15
 12253     023D  0709               	addwf	9,w
 12254     023E  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12255     023F  0086               	movwf	6
 12256     0240  3001               	movlw	1	; select bank2/3
 12257     0241  0087               	movwf	7
 12258     0242  085B               	movf	USBStdFeatureReqHandler@p,w
 12259     0243  3FC0               	movwi [0]fsr1
 12260     0244  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12261     0245  3FC1               	movwi [1]fsr1
 12262                           
 12263                           ;usb/usb_device.c: 2823:         }
 12264     0246  2A51               	goto	i1l4373
 12265     0247                     i1l4371:
 12266                           
 12267                           ;usb/usb_device.c: 2825:         {;usb/usb_device.c: 2826:             pBDTEntryIn[Setup
      +                          Pkt.EPNum] = (volatile BDT_ENTRY *)p;
 12268     0247  0844               	movf	68,w	;volatile
 12269     0248  390F               	andlw	15
 12270     0249  0709               	addwf	9,w
 12271     024A  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12272     024B  0086               	movwf	6
 12273     024C  0187               	clrf	7
 12274     024D  085B               	movf	USBStdFeatureReqHandler@p,w
 12275     024E  3FC0               	movwi [0]fsr1
 12276     024F  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12277     0250  3FC1               	movwi [1]fsr1
 12278     0251                     i1l4373:
 12279                           
 12280                           ;usb/usb_device.c: 2830:         if(SetupPkt.bRequest == 3)
 12281     0251  3003               	movlw	3
 12282     0252  0641               	xorwf	65,w	;volatile
 12283     0253  1D03               	btfss	3,2
 12284     0254  2A73               	goto	i1l4387
 12285                           
 12286                           ;usb/usb_device.c: 2831:         {;usb/usb_device.c: 2832:             if(p->STAT.UOWN =
      +                          = 1)
 12287     0255  085B               	movf	USBStdFeatureReqHandler@p,w
 12288     0256  0086               	movwf	6
 12289     0257  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12290     0258  0087               	movwf	7
 12291     0259  1F81               	btfss	1,7
 12292     025A  2A68               	goto	i1l4383
 12293                           
 12294                           ;usb/usb_device.c: 2833:             {;usb/usb_device.c: 2836:                 if(SetupP
      +                          kt.EPDir == 0)
 12295     025B  1BC4               	btfsc	68,7	;volatile
 12296     025C  2A61               	goto	i1l4381
 12297                           
 12298                           ;usb/usb_device.c: 2837:                 {;usb/usb_device.c: 2838:                     e
      +                          p_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 12299     025D  0844               	movf	68,w	;volatile
 12300     025E  390F               	andlw	15
 12301     025F  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12302     0260  2A64               	goto	L11
 12303     0261                     i1l4381:	
 12304                           ;usb/usb_device.c: 2839:                 }
 12305                           
 12306                           
 12307                           ;usb/usb_device.c: 2841:                 {;usb/usb_device.c: 2842:                     e
      +                          p_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 12308     0261  0844               	movf	68,w	;volatile
 12309     0262  390F               	andlw	15
 12310     0263  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12311     0264                     L11:
 12312     0264  0086               	movwf	6
 12313     0265  3001               	movlw	1	; select bank2/3
 12314     0266  0087               	movwf	7
 12315     0267  1481               	bsf	1,1
 12316     0268                     i1l4383:
 12317                           
 12318                           ;usb/usb_device.c: 2847:             p->STAT.Val |= 0x04;
 12319     0268  085B               	movf	USBStdFeatureReqHandler@p,w
 12320     0269  0086               	movwf	6
 12321     026A  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12322     026B  0087               	movwf	7
 12323     026C  1501               	bsf	1,2
 12324                           
 12325                           ;usb/usb_device.c: 2848:             p->STAT.Val |= 0x80;
 12326     026D  085B               	movf	USBStdFeatureReqHandler@p,w
 12327     026E  0086               	movwf	6
 12328     026F  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12329     0270  0087               	movwf	7
 12330     0271  1781               	bsf	1,7
 12331                           
 12332                           ;usb/usb_device.c: 2849:         }
 12333     0272  0008               	return
 12334     0273                     i1l4387:
 12335                           
 12336                           ;usb/usb_device.c: 2851:         {;usb/usb_device.c: 2855:                 p = (BDT_ENTR
      +                          Y*)(((uint16_t)p) ^ 0x0004);
 12337     0273  3004               	movlw	4
 12338     0274  065B               	xorwf	USBStdFeatureReqHandler@p,w
 12339     0275  00DB               	movwf	USBStdFeatureReqHandler@p
 12340     0276  3000               	movlw	0
 12341     0277  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 12342     0278  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12343                           
 12344                           ;usb/usb_device.c: 2857:                 if(p->STAT.UOWN == 1)
 12345     0279  085B               	movf	USBStdFeatureReqHandler@p,w
 12346     027A  0086               	movwf	6
 12347     027B  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12348     027C  0087               	movwf	7
 12349     027D  1F81               	btfss	1,7
 12350     027E  2A9C               	goto	i1l4397
 12351                           
 12352                           ;usb/usb_device.c: 2858:                 {;usb/usb_device.c: 2861:                     p
      +                          ->STAT.Val &= (~0x80);
 12353     027F  307F               	movlw	127
 12354     0280  00D6               	movwf	??_USBStdFeatureReqHandler
 12355     0281  085B               	movf	USBStdFeatureReqHandler@p,w
 12356     0282  0086               	movwf	6
 12357     0283  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12358     0284  0087               	movwf	7
 12359     0285  0856               	movf	??_USBStdFeatureReqHandler,w
 12360     0286  0581               	andwf	1,f
 12361                           
 12362                           ;usb/usb_device.c: 2862:                     p->STAT.Val |= 0x40;
 12363     0287  085B               	movf	USBStdFeatureReqHandler@p,w
 12364     0288  0086               	movwf	6
 12365     0289  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12366     028A  0087               	movwf	7
 12367     028B  1701               	bsf	1,6
 12368                           
 12369                           ;usb/usb_device.c: 2863:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 12370     028C  3005               	movlw	5
 12371     028D  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12372     028E  3000               	movlw	0
 12373     028F  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12374     0290  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12375     0291  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12376     0292  085B               	movf	USBStdFeatureReqHandler@p,w
 12377     0293  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12378     0294  3002               	movlw	2
 12379     0295  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12380     0296  3000               	movlw	0
 12381     0297  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12382     0298  3194  241A  3181   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12383                           
 12384                           ;usb/usb_device.c: 2864:                 }
 12385     029B  2AA1               	goto	i1l4399
 12386     029C                     i1l4397:
 12387                           
 12388                           ;usb/usb_device.c: 2866:                 {;usb/usb_device.c: 2868:      p->STAT.Val |= 0
      +                          x40;
 12389     029C  085B               	movf	USBStdFeatureReqHandler@p,w
 12390     029D  0086               	movwf	6
 12391     029E  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12392     029F  0087               	movwf	7
 12393     02A0  1701               	bsf	1,6
 12394     02A1                     i1l4399:
 12395                           
 12396                           ;usb/usb_device.c: 2873:                 p = (BDT_ENTRY*)(((uint16_t)p) ^ 0x0004);
 12397     02A1  3004               	movlw	4
 12398     02A2  0020               	movlb	0	; select bank0
 12399     02A3  065B               	xorwf	USBStdFeatureReqHandler@p,w
 12400     02A4  00DB               	movwf	USBStdFeatureReqHandler@p
 12401     02A5  3000               	movlw	0
 12402     02A6  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 12403     02A7  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12404                           
 12405                           ;usb/usb_device.c: 2879:                 if((current_ep_data.bits.transfer_terminated !=
      +                           0) || (p->STAT.UOWN == 1))
 12406     02A8  18DA               	btfsc	USBStdFeatureReqHandler@current_ep_data,1
 12407     02A9  2AB0               	goto	i1l678
 12408     02AA  085B               	movf	USBStdFeatureReqHandler@p,w
 12409     02AB  0086               	movwf	6
 12410     02AC  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12411     02AD  0087               	movwf	7
 12412     02AE  1F81               	btfss	1,7
 12413     02AF  2AD5               	goto	i1l4411
 12414     02B0                     i1l678:
 12415                           
 12416                           ;usb/usb_device.c: 2880:                 {;usb/usb_device.c: 2881:                     i
      +                          f(SetupPkt.EPDir == 0)
 12417     02B0  1BC4               	btfsc	68,7	;volatile
 12418     02B1  2AB6               	goto	i1l4407
 12419                           
 12420                           ;usb/usb_device.c: 2882:                     {;usb/usb_device.c: 2883:                  
      +                                 ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 12421     02B2  0844               	movf	68,w	;volatile
 12422     02B3  390F               	andlw	15
 12423     02B4  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12424     02B5  2AB9               	goto	L12
 12425     02B6                     i1l4407:	
 12426                           ;usb/usb_device.c: 2884:                     }
 12427                           
 12428                           
 12429                           ;usb/usb_device.c: 2886:                     {;usb/usb_device.c: 2887:                  
      +                                 ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 12430     02B6  0844               	movf	68,w	;volatile
 12431     02B7  390F               	andlw	15
 12432     02B8  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12433     02B9                     L12:
 12434     02B9  0086               	movwf	6
 12435     02BA  3001               	movlw	1	; select bank2/3
 12436     02BB  0087               	movwf	7
 12437     02BC  1081               	bcf	1,1
 12438                           
 12439                           ;usb/usb_device.c: 2890:                     p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 12440                           
 12441                           ;usb/usb_device.c: 2888:                     }
 12442     02BD  303B               	movlw	59
 12443     02BE  00D6               	movwf	??_USBStdFeatureReqHandler
 12444     02BF  085B               	movf	USBStdFeatureReqHandler@p,w
 12445     02C0  0086               	movwf	6
 12446     02C1  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12447     02C2  0087               	movwf	7
 12448     02C3  0856               	movf	??_USBStdFeatureReqHandler,w
 12449     02C4  0581               	andwf	1,f
 12450                           
 12451                           ;usb/usb_device.c: 2893:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 12452     02C5  3005               	movlw	5
 12453     02C6  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12454     02C7  3000               	movlw	0
 12455     02C8  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12456     02C9  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12457     02CA  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12458     02CB  085B               	movf	USBStdFeatureReqHandler@p,w
 12459     02CC  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12460     02CD  3002               	movlw	2
 12461     02CE  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12462     02CF  3000               	movlw	0
 12463     02D0  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12464     02D1  3194  241A  3181   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12465                           
 12466                           ;usb/usb_device.c: 2894:                 }
 12467     02D4  2ADD               	goto	i1l4413
 12468     02D5                     i1l4411:
 12469                           
 12470                           ;usb/usb_device.c: 2896:                 {;usb/usb_device.c: 2898:                     p
      +                          ->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 12471     02D5  303B               	movlw	59
 12472     02D6  00D6               	movwf	??_USBStdFeatureReqHandler
 12473     02D7  085B               	movf	USBStdFeatureReqHandler@p,w
 12474     02D8  0086               	movwf	6
 12475     02D9  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12476     02DA  0087               	movwf	7
 12477     02DB  0856               	movf	??_USBStdFeatureReqHandler,w
 12478     02DC  0581               	andwf	1,f
 12479     02DD                     i1l4413:
 12480                           
 12481                           ;usb/usb_device.c: 2946:                 pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 12482     02DD  0020               	movlb	0	; select bank0
 12483     02DE  0844               	movf	68,w	;volatile
 12484     02DF  390F               	andlw	15
 12485     02E0  3E98               	addlw	152
 12486     02E1  00D6               	movwf	??_USBStdFeatureReqHandler
 12487     02E2  01D7               	clrf	??_USBStdFeatureReqHandler+1
 12488     02E3  300E               	movlw	14
 12489     02E4  3DD7               	addwfc	??_USBStdFeatureReqHandler+1,f
 12490     02E5  0856               	movf	??_USBStdFeatureReqHandler,w
 12491     02E6  00D8               	movwf	USBStdFeatureReqHandler@pUEP
 12492     02E7  0857               	movf	??_USBStdFeatureReqHandler+1,w
 12493     02E8  00D9               	movwf	USBStdFeatureReqHandler@pUEP+1
 12494                           
 12495                           ;usb/usb_device.c: 2950:             *pUEP &= ~0x0001;
 12496     02E9  30FE               	movlw	254
 12497     02EA  00D6               	movwf	??_USBStdFeatureReqHandler
 12498     02EB  0858               	movf	USBStdFeatureReqHandler@pUEP,w
 12499     02EC  0086               	movwf	6
 12500     02ED  0859               	movf	USBStdFeatureReqHandler@pUEP+1,w
 12501     02EE  0087               	movwf	7
 12502     02EF  0856               	movf	??_USBStdFeatureReqHandler,w
 12503     02F0  0581               	andwf	1,f
 12504     02F1  0008               	return
 12505     02F2                     __end_of_USBStdFeatureReqHandler:
 12506                           
 12507                           	psect	text64
 12508     141A                     __ptext64:	
 12509 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 12510 ;; Defined at:
 12511 ;;		line 66 in file "usb/usb_events.c"
 12512 ;; Parameters:    Size  Location     Type
 12513 ;;  event           2    0[BANK0 ] enum E238
 12514 ;;  pdata           2    2[BANK0 ] PTR void 
 12515 ;;		 -> RAM(4096), USTATcopy(1), USBActiveConfiguration(1), NULL(0), 
 12516 ;;		 -> BDT(32), 
 12517 ;;  size            2    4[BANK0 ] unsigned short 
 12518 ;; Auto vars:     Size  Location     Type
 12519 ;;		None
 12520 ;; Return value:  Size  Location     Type
 12521 ;;                  1    wreg      _Bool 
 12522 ;; Registers used:
 12523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12524 ;; Tracked objects:
 12525 ;;		On entry : 1F/0
 12526 ;;		On exit  : 0/0
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12529 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12532 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12533 ;;Total ram usage:        6 bytes
 12534 ;; Hardware stack levels used: 1
 12535 ;; Hardware stack levels required when called: 3
 12536 ;; This function calls:
 12537 ;;		_APP_KeyboardInit
 12538 ;;		_USBCheckHIDRequest
 12539 ;; This function is called by:
 12540 ;;		_USBDeviceTasks
 12541 ;;		_USBStdSetCfgHandler
 12542 ;;		_USBSuspend
 12543 ;;		_USBWakeFromSuspend
 12544 ;;		_USBCtrlTrfSetupHandler
 12545 ;;		_USBCheckStdRequest
 12546 ;;		_USBStdFeatureReqHandler
 12547 ;; This function uses a non-reentrant model
 12548 ;;
 12549                           
 12550     141A                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 12551                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 12552                           
 12553                           
 12554                           ;usb/usb_events.c: 66: _Bool USER_USB_CALLBACK_EVENT_HANDLER(USB_EVENT event, void *pdat
      +                          a, uint16_t size);usb/usb_events.c: 67: {;usb/usb_events.c: 68:     switch((int)event)
 12555                           
 12556                           ;incstack = 0
 12557                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12558     141A  2C30               	goto	i1l4083
 12559     141B                     i1l4071:
 12560                           
 12561                           ;usb/usb_events.c: 77:             if(SOFCounter < 32767)
 12562     141B  0022               	movlb	2	; select bank2
 12563     141C  0A3A               	incf	_SOFCounter^(0+256),w	;volatile
 12564     141D  307F               	movlw	127
 12565     141E  1903               	skipnz
 12566     141F  063B               	xorwf	(_SOFCounter+1)^(0+256),w	;volatile
 12567     1420  1903               	btfsc	3,2
 12568     1421  2C27               	goto	i1l4075
 12569                           
 12570                           ;usb/usb_events.c: 78:             {;usb/usb_events.c: 79:                 SOFCounter++;
 12571     1422  3001               	movlw	1
 12572     1423  07BA               	addwf	_SOFCounter^(0+256),f	;volatile
 12573     1424  3000               	movlw	0
 12574     1425  3DBB               	addwfc	(_SOFCounter+1)^(0+256),f	;volatile
 12575                           
 12576                           ;usb/usb_events.c: 80:             }
 12577     1426  0008               	return
 12578     1427                     i1l4075:
 12579                           
 12580                           ;usb/usb_events.c: 82:             {;usb/usb_events.c: 83:                 SOFCounter = 
      +                          0;
 12581     1427  01BA               	clrf	_SOFCounter^(0+256)	;volatile
 12582     1428  01BB               	clrf	(_SOFCounter+1)^(0+256)	;volatile
 12583     1429  0008               	return
 12584     142A                     i1l4077:
 12585                           
 12586                           ;usb/usb_events.c: 114:             APP_KeyboardInit();
 12587     142A  3188  200A         	fcall	_APP_KeyboardInit
 12588                           
 12589                           ;usb/usb_events.c: 115:             break;
 12590     142C  0008               	return
 12591     142D                     i1l4079:
 12592                           
 12593                           ;usb/usb_events.c: 123:             USBCheckHIDRequest();
 12594     142D  318C  24E2         	fcall	_USBCheckHIDRequest
 12595                           
 12596                           ;usb/usb_events.c: 124:             break;
 12597     142F  0008               	return
 12598     1430                     i1l4083:
 12599                           
 12600                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12601                           ; Switch size 1, requested type "simple"
 12602                           ; Number of cases is 2, Range of values is 0 to 127
 12603                           ; switch strategies available:
 12604                           ; Name         Instructions Cycles
 12605                           ; simple_byte            7     4 (average)
 12606                           ; direct_byte          262     6 (fixed)
 12607                           ; jumptable            260     6 (fixed)
 12608                           ;	Chosen strategy is simple_byte
 12609     1430  0851               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
 12610     1431  3A00               	xorlw	0	; case 0
 12611     1432  1903               	skipnz
 12612     1433  2C38               	goto	i1l6579
 12613     1434  3A7F               	xorlw	127	; case 127
 12614     1435  1903               	skipnz
 12615     1436  2C52               	goto	i1l6581
 12616     1437  2C57               	goto	i1l763
 12617     1438                     i1l6579:
 12618                           
 12619                           ; Switch size 1, requested type "simple"
 12620                           ; Number of cases is 8, Range of values is 1 to 117
 12621                           ; switch strategies available:
 12622                           ; Name         Instructions Cycles
 12623                           ; simple_byte           25    13 (average)
 12624                           ; direct_byte          243     9 (fixed)
 12625                           ; jumptable            263     9 (fixed)
 12626                           ;	Chosen strategy is simple_byte
 12627     1438  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 12628     1439  3A01               	xorlw	1	; case 1
 12629     143A  1903               	skipnz
 12630     143B  2C2A               	goto	i1l4077
 12631     143C  3A03               	xorlw	3	; case 2
 12632     143D  1903               	skipnz
 12633     143E  2C57               	goto	i1l763
 12634     143F  3A01               	xorlw	1	; case 3
 12635     1440  1903               	skipnz
 12636     1441  2C2D               	goto	i1l4079
 12637     1442  3A06               	xorlw	6	; case 5
 12638     1443  1903               	skipnz
 12639     1444  2C57               	goto	i1l763
 12640     1445  3A77               	xorlw	119	; case 114
 12641     1446  1903               	skipnz
 12642     1447  2C57               	goto	i1l763
 12643     1448  3A01               	xorlw	1	; case 115
 12644     1449  1903               	skipnz
 12645     144A  2C1B               	goto	i1l4071
 12646     144B  3A07               	xorlw	7	; case 116
 12647     144C  1903               	skipnz
 12648     144D  2C57               	goto	i1l763
 12649     144E  3A01               	xorlw	1	; case 117
 12650     144F  1903               	skipnz
 12651     1450  2C57               	goto	i1l763
 12652     1451  2C57               	goto	i1l763
 12653     1452                     i1l6581:
 12654                           
 12655                           ; Switch size 1, requested type "simple"
 12656                           ; Number of cases is 1, Range of values is 255 to 255
 12657                           ; switch strategies available:
 12658                           ; Name         Instructions Cycles
 12659                           ; simple_byte            4     3 (average)
 12660                           ; direct_byte            7     5 (fixed)
 12661                           ; jumptable            263     9 (fixed)
 12662                           ;	Chosen strategy is simple_byte
 12663     1452  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 12664     1453  3AFF               	xorlw	255	; case 255
 12665     1454  1903               	skipnz
 12666     1455  2C57               	goto	i1l763
 12667     1456  2C57               	goto	i1l763
 12668     1457                     i1l763:
 12669     1457  0008               	return
 12670     1458                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:
 12671                           
 12672                           	psect	text65
 12673     0CE2                     __ptext65:	
 12674 ;; *************** function _USBCheckHIDRequest *****************
 12675 ;; Defined at:
 12676 ;;		line 161 in file "usb/usb_device_hid.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;		None
 12679 ;; Auto vars:     Size  Location     Type
 12680 ;;		None
 12681 ;; Return value:  Size  Location     Type
 12682 ;;                  1    wreg      void 
 12683 ;; Registers used:
 12684 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12685 ;; Tracked objects:
 12686 ;;		On entry : 1F/0
 12687 ;;		On exit  : 1C/0
 12688 ;;		Unchanged: 0/0
 12689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12692 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12693 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12694 ;;Total ram usage:        2 bytes
 12695 ;; Hardware stack levels used: 1
 12696 ;; Hardware stack levels required when called: 1
 12697 ;; This function calls:
 12698 ;;		_USBHIDCBSetIdleRateHandler
 12699 ;;		_USBHIDCBSetReportHandler
 12700 ;; This function is called by:
 12701 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12702 ;; This function uses a non-reentrant model
 12703 ;;
 12704                           
 12705     0CE2                     _USBCheckHIDRequest:	
 12706                           ;psect for function _USBCheckHIDRequest
 12707                           
 12708                           
 12709                           ;usb/usb_device_hid.c: 163:     if(SetupPkt.Recipient != (0x01)) return;
 12710                           
 12711                           ;incstack = 0
 12712                           ; Regs used in _USBCheckHIDRequest: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12713     0CE2  0840               	movf	64,w	;volatile
 12714     0CE3  391F               	andlw	31
 12715     0CE4  3A01               	xorlw	1
 12716     0CE5  1D03               	btfss	3,2
 12717     0CE6  0008               	return
 12718                           
 12719                           ;usb/usb_device_hid.c: 164:     if(SetupPkt.bIntfID != 0x00) return;
 12720     0CE7  0844               	movf	68,w	;volatile
 12721     0CE8  1D03               	btfss	3,2
 12722     0CE9  0008               	return
 12723                           
 12724                           ;usb/usb_device_hid.c: 171:     if(SetupPkt.bRequest == 6)
 12725     0CEA  3006               	movlw	6
 12726     0CEB  0641               	xorwf	65,w	;volatile
 12727     0CEC  1903               	btfsc	3,2
 12728     0CED  2D07               	goto	i1l3997
 12729     0CEE  2D1A               	goto	i1l3999
 12730     0CEF                     i1l3985:
 12731                           
 12732                           ;usb/usb_device_hid.c: 176:                 if(USBActiveConfiguration == 1)
 12733     0CEF  036F               	decf	_USBActiveConfiguration,w	;volatile
 12734     0CF0  1D03               	btfss	3,2
 12735     0CF1  2D1A               	goto	i1l3999
 12736                           
 12737                           ;usb/usb_device_hid.c: 177:                 {;usb/usb_device_hid.c: 178:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&configDescriptor1 + 18; inPipes[0].wCount
      +                          .Val = sizeof(USB_HID_DSC)+3; inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 12738     0CF2  3085               	movlw	low ((_configDescriptor1| (0+32768)+18))
 12739     0CF3  0021               	movlb	1	; select bank1
 12740     0CF4  00E9               	movwf	_inPipes^(0+128)	;volatile
 12741     0CF5  3098               	movlw	high ((_configDescriptor1| (0+32768)+18))
 12742     0CF6  00EA               	movwf	(_inPipes^(0+128)+1)	;volatile
 12743     0CF7  3000               	movlw	0
 12744     0CF8  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12745     0CF9  3009               	movlw	9
 12746     0CFA  2D03               	goto	L14
 12747     0CFB                     i1l3991:
 12748                           
 12749                           ;usb/usb_device_hid.c: 186:                 {;usb/usb_device_hid.c: 187:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&hid_rpt01; inPipes[0].wCount.Val = 63; in
      +                          Pipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 12750     0CFB  3000               	movlw	low (_hid_rpt01| (0+32768))
 12751     0CFC  0021               	movlb	1	; select bank1
 12752     0CFD  00E9               	movwf	_inPipes^(0+128)	;volatile
 12753     0CFE  3098               	movlw	high (_hid_rpt01| (0+32768))
 12754     0CFF  00EA               	movwf	(_inPipes^(0+128)+1)	;volatile
 12755     0D00  3000               	movlw	0
 12756     0D01  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12757     0D02  303F               	movlw	63
 12758     0D03                     L14:
 12759     0D03  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12760     0D04  30C0               	movlw	192
 12761     0D05  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12762                           
 12763                           ;usb/usb_device_hid.c: 191:                 };usb/usb_device_hid.c: 192:                
      +                           break;
 12764     0D06  2D1A               	goto	i1l3999
 12765     0D07                     i1l3997:
 12766     0D07  0843               	movf	67,w	;volatile
 12767     0D08  00F4               	movwf	??_USBCheckHIDRequest
 12768     0D09  01F5               	clrf	??_USBCheckHIDRequest+1
 12769                           
 12770                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12771                           ; Switch size 1, requested type "simple"
 12772                           ; Number of cases is 1, Range of values is 0 to 0
 12773                           ; switch strategies available:
 12774                           ; Name         Instructions Cycles
 12775                           ; simple_byte            4     3 (average)
 12776                           ; direct_byte            8     6 (fixed)
 12777                           ; jumptable            260     6 (fixed)
 12778                           ;	Chosen strategy is simple_byte
 12779     0D0A  0875               	movf	??_USBCheckHIDRequest+1,w
 12780     0D0B  3A00               	xorlw	0	; case 0
 12781     0D0C  1903               	skipnz
 12782     0D0D  2D0F               	goto	i1l6583
 12783     0D0E  2D1A               	goto	i1l3999
 12784     0D0F                     i1l6583:
 12785                           
 12786                           ; Switch size 1, requested type "simple"
 12787                           ; Number of cases is 3, Range of values is 33 to 35
 12788                           ; switch strategies available:
 12789                           ; Name         Instructions Cycles
 12790                           ; simple_byte           10     6 (average)
 12791                           ; direct_byte           15     9 (fixed)
 12792                           ; jumptable            263     9 (fixed)
 12793                           ;	Chosen strategy is simple_byte
 12794     0D0F  0874               	movf	??_USBCheckHIDRequest,w
 12795     0D10  3A21               	xorlw	33	; case 33
 12796     0D11  1903               	skipnz
 12797     0D12  2CEF               	goto	i1l3985
 12798     0D13  3A03               	xorlw	3	; case 34
 12799     0D14  1903               	skipnz
 12800     0D15  2CFB               	goto	i1l3991
 12801     0D16  3A01               	xorlw	1	; case 35
 12802     0D17  1903               	skipnz
 12803     0D18  2D1A               	goto	i1l3999
 12804     0D19  2D1A               	goto	i1l3999
 12805     0D1A                     i1l3999:
 12806                           
 12807                           ;usb/usb_device_hid.c: 209:     if(SetupPkt.RequestType != (0x20>>5))
 12808     0D1A  0020               	movlb	0	; select bank0
 12809     0D1B  0E40               	swapf	64,w	;volatile
 12810     0D1C  0C89               	rrf	9,f
 12811     0D1D  3903               	andlw	3
 12812     0D1E  3A01               	xorlw	1
 12813     0D1F  1D03               	btfss	3,2
 12814     0D20  0008               	return
 12815     0D21  2D53               	goto	i1l4025
 12816     0D22                     i1l4003:
 12817                           
 12818                           ;usb/usb_device_hid.c: 223:                 USBHIDCBSetReportHandler();
 12819     0D22  319F  2752         	fcall	_USBHIDCBSetReportHandler
 12820                           
 12821                           ;usb/usb_device_hid.c: 225:             break;
 12822     0D24  0008               	return
 12823     0D25                     i1l4005:
 12824                           
 12825                           ;usb/usb_device_hid.c: 227:             { inPipes[0].pSrc.bRam = (uint8_t*)&idle_rate; i
      +                          nPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 12826     0D25  306C               	movlw	low _idle_rate
 12827     0D26  0021               	movlb	1	; select bank1
 12828     0D27  00E9               	movwf	_inPipes^(0+128)	;volatile
 12829     0D28  3001               	movlw	high _idle_rate
 12830     0D29  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12831     0D2A  3000               	movlw	0
 12832     0D2B  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12833     0D2C  3001               	movlw	1
 12834     0D2D  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12835     0D2E  30C1               	movlw	193
 12836     0D2F  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12837                           
 12838                           ;usb/usb_device_hid.c: 231:             break;
 12839     0D30  0008               	return
 12840     0D31                     i1l4011:
 12841                           
 12842                           ;usb/usb_device_hid.c: 233:             inPipes[0].info.Val = 0x00 | 0x80;
 12843     0D31  3080               	movlw	128
 12844     0D32  0021               	movlb	1	; select bank1
 12845     0D33  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12846                           
 12847                           ;usb/usb_device_hid.c: 234:             idle_rate = SetupPkt.W_Value.byte.HB;
 12848     0D34  0020               	movlb	0	; select bank0
 12849     0D35  0843               	movf	67,w	;volatile
 12850     0D36  0022               	movlb	2	; select bank2
 12851     0D37  00EC               	movwf	_idle_rate^(0+256)
 12852                           
 12853                           ;usb/usb_device_hid.c: 235:             USBHIDCBSetIdleRateHandler(SetupPkt.W_Value.byte
      +                          .LB, idle_rate);
 12854     0D38  086C               	movf	_idle_rate^(0+256),w
 12855     0D39  00F0               	movwf	USBHIDCBSetIdleRateHandler@newIdleRate
 12856     0D3A  0020               	movlb	0	; select bank0
 12857     0D3B  0842               	movf	66,w	;volatile
 12858     0D3C  319F  2745         	fcall	_USBHIDCBSetIdleRateHandler
 12859                           
 12860                           ;usb/usb_device_hid.c: 236:             break;
 12861     0D3E  0008               	return
 12862     0D3F                     i1l4015:
 12863                           
 12864                           ;usb/usb_device_hid.c: 238:             { inPipes[0].pSrc.bRam = (uint8_t*)&active_proto
      +                          col; inPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
 12865     0D3F  306B               	movlw	low _active_protocol
 12866     0D40  0021               	movlb	1	; select bank1
 12867     0D41  00E9               	movwf	_inPipes^(0+128)	;volatile
 12868     0D42  3001               	movlw	high _active_protocol
 12869     0D43  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12870     0D44  3000               	movlw	0
 12871     0D45  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12872     0D46  3001               	movlw	1
 12873     0D47  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12874     0D48  3081               	movlw	129
 12875     0D49  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12876                           
 12877                           ;usb/usb_device_hid.c: 242:             break;
 12878     0D4A  0008               	return
 12879     0D4B                     i1l4021:
 12880                           
 12881                           ;usb/usb_device_hid.c: 244:             inPipes[0].info.Val = 0x00 | 0x80;
 12882     0D4B  3080               	movlw	128
 12883     0D4C  0021               	movlb	1	; select bank1
 12884     0D4D  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12885                           
 12886                           ;usb/usb_device_hid.c: 245:             active_protocol = SetupPkt.W_Value.byte.LB;
 12887     0D4E  0020               	movlb	0	; select bank0
 12888     0D4F  0842               	movf	66,w	;volatile
 12889     0D50  0022               	movlb	2	; select bank2
 12890     0D51  00EB               	movwf	_active_protocol^(0+256)
 12891                           
 12892                           ;usb/usb_device_hid.c: 246:             break;
 12893     0D52  0008               	return
 12894     0D53                     i1l4025:
 12895     0D53  0841               	movf	65,w	;volatile
 12896     0D54  00F4               	movwf	??_USBCheckHIDRequest
 12897     0D55  01F5               	clrf	??_USBCheckHIDRequest+1
 12898                           
 12899                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12900                           ; Switch size 1, requested type "simple"
 12901                           ; Number of cases is 1, Range of values is 0 to 0
 12902                           ; switch strategies available:
 12903                           ; Name         Instructions Cycles
 12904                           ; simple_byte            4     3 (average)
 12905                           ; direct_byte            8     6 (fixed)
 12906                           ; jumptable            260     6 (fixed)
 12907                           ;	Chosen strategy is simple_byte
 12908     0D56  0875               	movf	??_USBCheckHIDRequest+1,w
 12909     0D57  3A00               	xorlw	0	; case 0
 12910     0D58  1903               	skipnz
 12911     0D59  2D5B               	goto	i1l6585
 12912     0D5A  2D6F               	goto	i1l709
 12913     0D5B                     i1l6585:
 12914                           
 12915                           ; Switch size 1, requested type "simple"
 12916                           ; Number of cases is 6, Range of values is 1 to 11
 12917                           ; switch strategies available:
 12918                           ; Name         Instructions Cycles
 12919                           ; simple_byte           19    10 (average)
 12920                           ; direct_byte           31     9 (fixed)
 12921                           ; jumptable            263     9 (fixed)
 12922                           ;	Chosen strategy is simple_byte
 12923     0D5B  0874               	movf	??_USBCheckHIDRequest,w
 12924     0D5C  3A01               	xorlw	1	; case 1
 12925     0D5D  1903               	skipnz
 12926     0D5E  2D6F               	goto	i1l709
 12927     0D5F  3A03               	xorlw	3	; case 2
 12928     0D60  1903               	skipnz
 12929     0D61  2D25               	goto	i1l4005
 12930     0D62  3A01               	xorlw	1	; case 3
 12931     0D63  1903               	skipnz
 12932     0D64  2D3F               	goto	i1l4015
 12933     0D65  3A0A               	xorlw	10	; case 9
 12934     0D66  1903               	skipnz
 12935     0D67  2D22               	goto	i1l4003
 12936     0D68  3A03               	xorlw	3	; case 10
 12937     0D69  1903               	skipnz
 12938     0D6A  2D31               	goto	i1l4011
 12939     0D6B  3A01               	xorlw	1	; case 11
 12940     0D6C  1903               	skipnz
 12941     0D6D  2D4B               	goto	i1l4021
 12942     0D6E  2D6F               	goto	i1l709
 12943     0D6F                     i1l709:
 12944     0D6F  0008               	return
 12945     0D70                     __end_of_USBCheckHIDRequest:
 12946                           
 12947                           	psect	text66
 12948     1F52                     __ptext66:	
 12949 ;; *************** function _USBHIDCBSetReportHandler *****************
 12950 ;; Defined at:
 12951 ;;		line 533 in file "app_device_keyboard.c"
 12952 ;; Parameters:    Size  Location     Type
 12953 ;;		None
 12954 ;; Auto vars:     Size  Location     Type
 12955 ;;		None
 12956 ;; Return value:  Size  Location     Type
 12957 ;;                  1    wreg      void 
 12958 ;; Registers used:
 12959 ;;		wreg
 12960 ;; Tracked objects:
 12961 ;;		On entry : 1F/0
 12962 ;;		On exit  : 1F/2
 12963 ;;		Unchanged: 0/0
 12964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12969 ;;Total ram usage:        0 bytes
 12970 ;; Hardware stack levels used: 1
 12971 ;; This function calls:
 12972 ;;		Nothing
 12973 ;; This function is called by:
 12974 ;;		_USBCheckHIDRequest
 12975 ;; This function uses a non-reentrant model
 12976 ;;
 12977                           
 12978     1F52                     _USBHIDCBSetReportHandler:	
 12979                           ;psect for function _USBHIDCBSetReportHandler
 12980                           
 12981                           
 12982                           ;app_device_keyboard.c: 537:     {outPipes[0].pDst.bRam = (uint8_t*) & CtrlTrfData;outPi
      +                          pes[0].wCount.Val = 8;outPipes[0].pFunc = USBHIDCBSetReportComplete;outPipes[0].info.bit
      +                          s.busy = 1; };
 12983                           
 12984                           ;incstack = 0
 12985                           ; Regs used in _USBHIDCBSetReportHandler: [wreg]
 12986     1F52  3048               	movlw	72
 12987     1F53  0022               	movlb	2	; select bank2
 12988     1F54  00A1               	movwf	_outPipes^(0+256)	;volatile
 12989     1F55  3000               	movlw	0
 12990     1F56  00A5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 12991     1F57  3008               	movlw	8
 12992     1F58  00A4               	movwf	(_outPipes^(0+256)+3)	;volatile
 12993     1F59  301E               	movlw	high _USBHIDCBSetReportComplete
 12994     1F5A  00A7               	movwf	((low ((_outPipes| (0+256)+5))+1))^0	;volatile
 12995     1F5B  3092               	movlw	low _USBHIDCBSetReportComplete
 12996     1F5C  00A6               	movwf	(low ((_outPipes| (0+256)+5)))^0	;volatile
 12997     1F5D  17A3               	bsf	(_outPipes^(0+256)+2),7	;volatile
 12998     1F5E  0008               	return
 12999     1F5F                     __end_of_USBHIDCBSetReportHandler:
 13000                           
 13001                           	psect	text67
 13002     1F45                     __ptext67:	
 13003 ;; *************** function _USBHIDCBSetIdleRateHandler *****************
 13004 ;; Defined at:
 13005 ;;		line 544 in file "app_device_keyboard.c"
 13006 ;; Parameters:    Size  Location     Type
 13007 ;;  reportID        1    wreg     unsigned char 
 13008 ;;  newIdleRate     1    0[COMMON] unsigned char 
 13009 ;; Auto vars:     Size  Location     Type
 13010 ;;  reportID        1    3[COMMON] unsigned char 
 13011 ;; Return value:  Size  Location     Type
 13012 ;;                  1    wreg      void 
 13013 ;; Registers used:
 13014 ;;		wreg, status,2, status,0
 13015 ;; Tracked objects:
 13016 ;;		On entry : 1F/0
 13017 ;;		On exit  : 1D/0
 13018 ;;		Unchanged: 0/0
 13019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13020 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13022 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;Total ram usage:        4 bytes
 13025 ;; Hardware stack levels used: 1
 13026 ;; This function calls:
 13027 ;;		Nothing
 13028 ;; This function is called by:
 13029 ;;		_USBCheckHIDRequest
 13030 ;; This function uses a non-reentrant model
 13031 ;;
 13032                           
 13033     1F45                     _USBHIDCBSetIdleRateHandler:	
 13034                           ;psect for function _USBHIDCBSetIdleRateHandler
 13035                           
 13036                           
 13037                           ;incstack = 0
 13038                           ; Regs used in _USBHIDCBSetIdleRateHandler: [wreg+status,2+status,0]
 13039                           ;USBHIDCBSetIdleRateHandler@reportID stored from wreg
 13040     1F45  00F3               	movwf	USBHIDCBSetIdleRateHandler@reportID
 13041                           
 13042                           ;app_device_keyboard.c: 548:     if (reportID == 0) {
 13043     1F46  0873               	movf	USBHIDCBSetIdleRateHandler@reportID,w
 13044     1F47  1D03               	btfss	3,2
 13045     1F48  0008               	return
 13046                           
 13047                           ;app_device_keyboard.c: 549:         keyboardIdleRate = newIdleRate;
 13048     1F49  0870               	movf	USBHIDCBSetIdleRateHandler@newIdleRate,w
 13049     1F4A  00F1               	movwf	??_USBHIDCBSetIdleRateHandler
 13050     1F4B  01F2               	clrf	??_USBHIDCBSetIdleRateHandler+1
 13051     1F4C  0871               	movf	??_USBHIDCBSetIdleRateHandler,w
 13052     1F4D  0022               	movlb	2	; select bank2
 13053     1F4E  00B8               	movwf	_keyboardIdleRate^(0+256)
 13054     1F4F  0872               	movf	??_USBHIDCBSetIdleRateHandler+1,w
 13055     1F50  00B9               	movwf	(_keyboardIdleRate+1)^(0+256)
 13056     1F51  0008               	return
 13057     1F52                     __end_of_USBHIDCBSetIdleRateHandler:
 13058                           
 13059                           	psect	text68
 13060     080A                     __ptext68:	
 13061 ;; *************** function _APP_KeyboardInit *****************
 13062 ;; Defined at:
 13063 ;;		line 311 in file "app_device_keyboard.c"
 13064 ;; Parameters:    Size  Location     Type
 13065 ;;		None
 13066 ;; Auto vars:     Size  Location     Type
 13067 ;;		None
 13068 ;; Return value:  Size  Location     Type
 13069 ;;                  1    wreg      void 
 13070 ;; Registers used:
 13071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13072 ;; Tracked objects:
 13073 ;;		On entry : 1F/0
 13074 ;;		On exit  : 0/0
 13075 ;;		Unchanged: 0/0
 13076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;Total ram usage:        0 bytes
 13082 ;; Hardware stack levels used: 1
 13083 ;; Hardware stack levels required when called: 2
 13084 ;; This function calls:
 13085 ;;		_USBEnableEndpoint
 13086 ;;		i1_GenericQueue_Init
 13087 ;;		i1_USBTransferOnePacket
 13088 ;; This function is called by:
 13089 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13090 ;; This function uses a non-reentrant model
 13091 ;;
 13092                           
 13093     080A                     _APP_KeyboardInit:	
 13094                           ;psect for function _APP_KeyboardInit
 13095                           
 13096                           
 13097                           ;app_device_keyboard.c: 312:     GenericQueue_Init(&keyboard.keys, sizeof (uint8_t));
 13098                           
 13099                           ;incstack = 0
 13100                           ; Regs used in _APP_KeyboardInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13101     080A  3030               	movlw	48
 13102     080B  00F0               	movwf	i1GenericQueue_Init@q
 13103     080C  3023               	movlw	35
 13104     080D  00F1               	movwf	i1GenericQueue_Init@q+1
 13105     080E  3001               	movlw	1
 13106     080F  00F2               	movwf	i1GenericQueue_Init@element_size
 13107     0810  3000               	movlw	0
 13108     0811  00F3               	movwf	i1GenericQueue_Init@element_size+1
 13109     0812  3192  224E  3188   	fcall	i1_GenericQueue_Init
 13110                           
 13111                           ;app_device_keyboard.c: 313:     keyboard.modifiers.value = 0;
 13112     0815  308F               	movlw	143
 13113     0816  0086               	movwf	6
 13114     0817  3023               	movlw	35
 13115     0818  0087               	movwf	7
 13116     0819  0181               	clrf	1
 13117                           
 13118                           ;app_device_keyboard.c: 314:     keyboard.leds.value = 0;
 13119     081A  3090               	movlw	144
 13120     081B  0086               	movwf	6
 13121     081C  3023               	movlw	35
 13122     081D  0087               	movwf	7
 13123     081E  0181               	clrf	1
 13124                           
 13125                           ;app_device_keyboard.c: 317:     keyboard.lastINTransmission = 0;
 13126     081F  302C               	movlw	44
 13127     0820  0086               	movwf	6
 13128     0821  3023               	movlw	35
 13129     0822  0087               	movwf	7
 13130     0823  3000               	movlw	0
 13131     0824  3FC0               	movwi [0]fsr1
 13132     0825  3FC1               	movwi [1]fsr1
 13133                           
 13134                           ;app_device_keyboard.c: 320:     keyboardIdleRate = 250;
 13135     0826  30FA               	movlw	250
 13136     0827  0022               	movlb	2	; select bank2
 13137     0828  00B8               	movwf	_keyboardIdleRate^(0+256)
 13138     0829  3000               	movlw	0
 13139     082A  00B9               	movwf	(_keyboardIdleRate^(0+256)+1)
 13140     082B                     i1l859:	
 13141                           ;app_device_keyboard.c: 327:     }
 13142                           
 13143                           ;app_device_keyboard.c: 325:     while (OldSOFCount != SOFCounter) {
 13144                           
 13145                           
 13146                           ;app_device_keyboard.c: 325:     while (OldSOFCount != SOFCounter) {
 13147     082B  083B               	movf	(_SOFCounter+1)^(0+256),w	;volatile
 13148     082C  0635               	xorwf	(_OldSOFCount+1)^(0+256),w
 13149     082D  1D03               	skipz
 13150     082E  2831               	goto	u297_25
 13151     082F  083A               	movf	_SOFCounter^(0+256),w	;volatile
 13152     0830  0634               	xorwf	_OldSOFCount^(0+256),w
 13153     0831                     u297_25:
 13154     0831  1903               	btfsc	3,2
 13155     0832  2838               	goto	i1l4047
 13156                           
 13157                           ;app_device_keyboard.c: 326:         OldSOFCount = SOFCounter;
 13158     0833  083B               	movf	(_SOFCounter+1)^(0+256),w	;volatile
 13159     0834  00B5               	movwf	(_OldSOFCount+1)^(0+256)
 13160     0835  083A               	movf	_SOFCounter^(0+256),w	;volatile
 13161     0836  00B4               	movwf	_OldSOFCount^(0+256)
 13162     0837  282B               	goto	i1l859
 13163     0838                     i1l4047:
 13164                           
 13165                           ;app_device_keyboard.c: 330:     USBEnableEndpoint(1, 0x02 | 0x04 | 0x10 | 0x08);
 13166     0838  301E               	movlw	30
 13167     0839  00F7               	movwf	USBEnableEndpoint@options
 13168     083A  3001               	movlw	1
 13169     083B  3192  222E  3188   	fcall	_USBEnableEndpoint
 13170                           
 13171                           ;app_device_keyboard.c: 333:     keyboard.lastOUTTransmission = USBTransferOnePacket(1,0
      +                          ,(uint8_t*) & outputReport,sizeof (outputReport));
 13172     083E  01F0               	clrf	i1USBTransferOnePacket@dir
 13173     083F  3020               	movlw	32
 13174     0840  00F1               	movwf	i1USBTransferOnePacket@data
 13175     0841  3001               	movlw	1
 13176     0842  00F2               	movwf	i1USBTransferOnePacket@data+1
 13177     0843  01F3               	clrf	i1USBTransferOnePacket@len
 13178     0844  0AF3               	incf	i1USBTransferOnePacket@len,f
 13179     0845  3001               	movlw	1
 13180     0846  318B  2361         	fcall	i1_USBTransferOnePacket
 13181     0848  302C               	movlw	44
 13182     0849  0086               	movwf	6
 13183     084A  3023               	movlw	35
 13184     084B  0087               	movwf	7
 13185     084C  3142               	addfsr 1,2
 13186     084D  0870               	movf	?i1_USBTransferOnePacket,w
 13187     084E  3FC0               	movwi [0]fsr1
 13188     084F  0871               	movf	?i1_USBTransferOnePacket+1,w
 13189     0850  3FC1               	movwi [1]fsr1
 13190     0851  0008               	return
 13191     0852                     __end_of_APP_KeyboardInit:
 13192                           
 13193                           	psect	text69
 13194     0B61                     __ptext69:	
 13195 ;; *************** function i1_USBTransferOnePacket *****************
 13196 ;; Defined at:
 13197 ;;		line 999 in file "usb/usb_device.c"
 13198 ;; Parameters:    Size  Location     Type
 13199 ;;  ep              1    wreg     unsigned char 
 13200 ;;  dir             1    0[COMMON] unsigned char 
 13201 ;;  data            2    1[COMMON] PTR unsigned char 
 13202 ;;		 -> inputReport(8), outputReport(1), 
 13203 ;;  len             1    3[COMMON] unsigned char 
 13204 ;; Auto vars:     Size  Location     Type
 13205 ;;  ep              1    8[COMMON] unsigned char 
 13206 ;;  handle          2    9[COMMON] PTR volatile struct __BD
 13207 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 13208 ;; Return value:  Size  Location     Type
 13209 ;;                  2    0[COMMON] PTR void 
 13210 ;; Registers used:
 13211 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13212 ;; Tracked objects:
 13213 ;;		On entry : 0/2
 13214 ;;		On exit  : 0/0
 13215 ;;		Unchanged: 0/0
 13216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13218 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13219 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13220 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13221 ;;Total ram usage:       11 bytes
 13222 ;; Hardware stack levels used: 1
 13223 ;; This function calls:
 13224 ;;		Nothing
 13225 ;; This function is called by:
 13226 ;;		_APP_KeyboardInit
 13227 ;; This function uses a non-reentrant model
 13228 ;;
 13229                           
 13230     0B61                     i1_USBTransferOnePacket:	
 13231                           ;psect for function i1_USBTransferOnePacket
 13232                           
 13233                           
 13234                           ;incstack = 0
 13235                           ; Regs used in i1_USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 13236                           ;i1USBTransferOnePacket@ep stored from wreg
 13237     0B61  00F8               	movwf	i1USBTransferOnePacket@ep
 13238                           
 13239                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
 13240     0B62  0870               	movf	i1USBTransferOnePacket@dir,w
 13241     0B63  1903               	btfsc	3,2
 13242     0B64  2B6D               	goto	i1l3947
 13243                           
 13244                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
 13245     0B65  3578               	lslf	i1USBTransferOnePacket@ep,w
 13246     0B66  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13247     0B67  0086               	movwf	6
 13248     0B68  0187               	clrf	7
 13249     0B69  3F40               	moviw [0]fsr1
 13250     0B6A  00F9               	movwf	i1USBTransferOnePacket@handle
 13251     0B6B  3F41               	moviw [1]fsr1
 13252     0B6C  2B75               	goto	L15
 13253     0B6D                     i1l3947:	
 13254                           ;usb/usb_device.c: 1008:     }
 13255                           
 13256                           
 13257                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
 13258     0B6D  3578               	lslf	i1USBTransferOnePacket@ep,w
 13259     0B6E  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13260     0B6F  0086               	movwf	6
 13261     0B70  3001               	movlw	1	; select bank2/3
 13262     0B71  0087               	movwf	7
 13263     0B72  3F40               	moviw [0]fsr1
 13264     0B73  00F9               	movwf	i1USBTransferOnePacket@handle
 13265     0B74  3F41               	moviw [1]fsr1
 13266     0B75                     L15:
 13267     0B75  00FA               	movwf	i1USBTransferOnePacket@handle+1
 13268                           
 13269                           ;usb/usb_device.c: 1017:     if(handle == 0)
 13270     0B76  0879               	movf	i1USBTransferOnePacket@handle,w
 13271     0B77  047A               	iorwf	i1USBTransferOnePacket@handle+1,w
 13272     0B78  1D03               	btfss	3,2
 13273     0B79  2B7D               	goto	i1l3955
 13274                           
 13275                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
 13276     0B7A  01F0               	clrf	?i1_USBTransferOnePacket
 13277     0B7B  01F1               	clrf	?i1_USBTransferOnePacket+1
 13278     0B7C  0008               	return
 13279     0B7D                     i1l3955:
 13280                           
 13281                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
 13282     0B7D  30FF               	movlw	255
 13283     0B7E  0571               	andwf	i1USBTransferOnePacket@data,w
 13284     0B7F  00F4               	movwf	??i1_USBTransferOnePacket
 13285     0B80  307F               	movlw	127
 13286     0B81  0572               	andwf	i1USBTransferOnePacket@data+1,w
 13287     0B82  00F5               	movwf	??i1_USBTransferOnePacket+1
 13288     0B83  0879               	movf	i1USBTransferOnePacket@handle,w
 13289     0B84  0086               	movwf	6
 13290     0B85  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13291     0B86  0087               	movwf	7
 13292     0B87  3142               	addfsr 1,2
 13293     0B88  0874               	movf	??i1_USBTransferOnePacket,w
 13294     0B89  3FC0               	movwi [0]fsr1
 13295     0B8A  0875               	movf	??i1_USBTransferOnePacket+1,w
 13296     0B8B  3FC1               	movwi [1]fsr1
 13297                           
 13298                           ;usb/usb_device.c: 1034:     handle->CNT = len;
 13299     0B8C  0879               	movf	i1USBTransferOnePacket@handle,w
 13300     0B8D  3E01               	addlw	1
 13301     0B8E  00F4               	movwf	??i1_USBTransferOnePacket
 13302     0B8F  3000               	movlw	0
 13303     0B90  3D7A               	addwfc	i1USBTransferOnePacket@handle+1,w
 13304     0B91  00F5               	movwf	??i1_USBTransferOnePacket+1
 13305     0B92  0874               	movf	??i1_USBTransferOnePacket,w
 13306     0B93  0086               	movwf	6
 13307     0B94  0875               	movf	??i1_USBTransferOnePacket+1,w
 13308     0B95  0087               	movwf	7
 13309     0B96  0873               	movf	i1USBTransferOnePacket@len,w
 13310     0B97  0081               	movwf	1
 13311                           
 13312                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
 13313     0B98  3040               	movlw	64
 13314     0B99  00F4               	movwf	??i1_USBTransferOnePacket
 13315     0B9A  0879               	movf	i1USBTransferOnePacket@handle,w
 13316     0B9B  0086               	movwf	6
 13317     0B9C  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13318     0B9D  0087               	movwf	7
 13319     0B9E  0874               	movf	??i1_USBTransferOnePacket,w
 13320     0B9F  0581               	andwf	1,f
 13321                           
 13322                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
 13323     0BA0  0879               	movf	i1USBTransferOnePacket@handle,w
 13324     0BA1  0086               	movwf	6
 13325     0BA2  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13326     0BA3  0087               	movwf	7
 13327     0BA4  1581               	bsf	1,3
 13328                           
 13329                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
 13330     0BA5  0879               	movf	i1USBTransferOnePacket@handle,w
 13331     0BA6  0086               	movwf	6
 13332     0BA7  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13333     0BA8  0087               	movwf	7
 13334     0BA9  1781               	bsf	1,7
 13335                           
 13336                           ;usb/usb_device.c: 1040:     if(dir != 0)
 13337     0BAA  0870               	movf	i1USBTransferOnePacket@dir,w
 13338     0BAB  1903               	btfsc	3,2
 13339     0BAC  2BC4               	goto	i1l3965
 13340                           
 13341                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
 13342     0BAD  3578               	lslf	i1USBTransferOnePacket@ep,w
 13343     0BAE  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13344     0BAF  0086               	movwf	6
 13345     0BB0  0187               	clrf	7
 13346     0BB1  3F40               	moviw [0]fsr1
 13347     0BB2  00F4               	movwf	??i1_USBTransferOnePacket
 13348     0BB3  3F41               	moviw [1]fsr1
 13349     0BB4  00F5               	movwf	??i1_USBTransferOnePacket+1
 13350     0BB5  3004               	movlw	4
 13351     0BB6  0674               	xorwf	??i1_USBTransferOnePacket,w
 13352     0BB7  00F6               	movwf	??i1_USBTransferOnePacket+2
 13353     0BB8  3000               	movlw	0
 13354     0BB9  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 13355     0BBA  00F7               	movwf	??i1_USBTransferOnePacket+3
 13356     0BBB  3578               	lslf	i1USBTransferOnePacket@ep,w
 13357     0BBC  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13358     0BBD  0086               	movwf	6
 13359     0BBE  0187               	clrf	7
 13360     0BBF  0876               	movf	??i1_USBTransferOnePacket+2,w
 13361     0BC0  3FC0               	movwi [0]fsr1
 13362     0BC1  0877               	movf	??i1_USBTransferOnePacket+3,w
 13363     0BC2  3FC1               	movwi [1]fsr1
 13364                           
 13365                           ;usb/usb_device.c: 1044:     }
 13366     0BC3  2BDC               	goto	i1l3967
 13367     0BC4                     i1l3965:
 13368                           
 13369                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
 13370     0BC4  3578               	lslf	i1USBTransferOnePacket@ep,w
 13371     0BC5  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13372     0BC6  0086               	movwf	6
 13373     0BC7  3001               	movlw	1	; select bank2/3
 13374     0BC8  0087               	movwf	7
 13375     0BC9  3F40               	moviw [0]fsr1
 13376     0BCA  00F4               	movwf	??i1_USBTransferOnePacket
 13377     0BCB  3F41               	moviw [1]fsr1
 13378     0BCC  00F5               	movwf	??i1_USBTransferOnePacket+1
 13379     0BCD  3004               	movlw	4
 13380     0BCE  0674               	xorwf	??i1_USBTransferOnePacket,w
 13381     0BCF  00F6               	movwf	??i1_USBTransferOnePacket+2
 13382     0BD0  3000               	movlw	0
 13383     0BD1  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 13384     0BD2  00F7               	movwf	??i1_USBTransferOnePacket+3
 13385     0BD3  3578               	lslf	i1USBTransferOnePacket@ep,w
 13386     0BD4  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13387     0BD5  0086               	movwf	6
 13388     0BD6  3001               	movlw	1	; select bank2/3
 13389     0BD7  0087               	movwf	7
 13390     0BD8  0876               	movf	??i1_USBTransferOnePacket+2,w
 13391     0BD9  3FC0               	movwi [0]fsr1
 13392     0BDA  0877               	movf	??i1_USBTransferOnePacket+3,w
 13393     0BDB  3FC1               	movwi [1]fsr1
 13394     0BDC                     i1l3967:
 13395                           
 13396                           ;usb/usb_device.c: 1050:     return (void*)handle;
 13397     0BDC  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13398     0BDD  00F1               	movwf	?i1_USBTransferOnePacket+1
 13399     0BDE  0879               	movf	i1USBTransferOnePacket@handle,w
 13400     0BDF  00F0               	movwf	?i1_USBTransferOnePacket
 13401     0BE0  0008               	return
 13402     0BE1                     __end_ofi1_USBTransferOnePacket:
 13403                           
 13404                           	psect	text70
 13405     124E                     __ptext70:	
 13406 ;; *************** function i1_GenericQueue_Init *****************
 13407 ;; Defined at:
 13408 ;;		line 4 in file "generic_queue.c"
 13409 ;; Parameters:    Size  Location     Type
 13410 ;;  q               2    0[COMMON] PTR struct .
 13411 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 13412 ;;  element_size    2    2[COMMON] unsigned int 
 13413 ;; Auto vars:     Size  Location     Type
 13414 ;;		None
 13415 ;; Return value:  Size  Location     Type
 13416 ;;                  1    wreg      void 
 13417 ;; Registers used:
 13418 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13419 ;; Tracked objects:
 13420 ;;		On entry : 1F/0
 13421 ;;		On exit  : 1F/0
 13422 ;;		Unchanged: 1F/0
 13423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13424 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13427 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13428 ;;Total ram usage:        4 bytes
 13429 ;; Hardware stack levels used: 1
 13430 ;; This function calls:
 13431 ;;		Nothing
 13432 ;; This function is called by:
 13433 ;;		_APP_KeyboardInit
 13434 ;; This function uses a non-reentrant model
 13435 ;;
 13436                           
 13437     124E                     i1_GenericQueue_Init:	
 13438                           ;psect for function i1_GenericQueue_Init
 13439                           
 13440                           
 13441                           ;generic_queue.c: 5:     q->element_size = element_size;
 13442                           
 13443                           ;incstack = 0
 13444                           ; Regs used in i1_GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 13445     124E  0870               	movf	i1GenericQueue_Init@q,w
 13446     124F  3E5A               	addlw	90
 13447     1250  0086               	movwf	6
 13448     1251  3000               	movlw	0
 13449     1252  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13450     1253  0087               	movwf	7
 13451     1254  0872               	movf	i1GenericQueue_Init@element_size,w
 13452     1255  3FC0               	movwi [0]fsr1
 13453     1256  0873               	movf	i1GenericQueue_Init@element_size+1,w
 13454     1257  3FC1               	movwi [1]fsr1
 13455                           
 13456                           ;generic_queue.c: 6:     q->front = 0;
 13457     1258  0870               	movf	i1GenericQueue_Init@q,w
 13458     1259  3E5C               	addlw	92
 13459     125A  0086               	movwf	6
 13460     125B  3000               	movlw	0
 13461     125C  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13462     125D  0087               	movwf	7
 13463     125E  0181               	clrf	1
 13464                           
 13465                           ;generic_queue.c: 7:     q->rear = 0;
 13466     125F  0870               	movf	i1GenericQueue_Init@q,w
 13467     1260  3E5D               	addlw	93
 13468     1261  0086               	movwf	6
 13469     1262  3000               	movlw	0
 13470     1263  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13471     1264  0087               	movwf	7
 13472     1265  0181               	clrf	1
 13473                           
 13474                           ;generic_queue.c: 8:     q->size = 0;
 13475     1266  0870               	movf	i1GenericQueue_Init@q,w
 13476     1267  3E5E               	addlw	94
 13477     1268  0086               	movwf	6
 13478     1269  3000               	movlw	0
 13479     126A  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13480     126B  0087               	movwf	7
 13481     126C  0181               	clrf	1
 13482     126D  0008               	return
 13483     126E                     __end_ofi1_GenericQueue_Init:
 13484                           
 13485                           	psect	text71
 13486     122E                     __ptext71:	
 13487 ;; *************** function _USBEnableEndpoint *****************
 13488 ;; Defined at:
 13489 ;;		line 882 in file "usb/usb_device.c"
 13490 ;; Parameters:    Size  Location     Type
 13491 ;;  ep              1    wreg     unsigned char 
 13492 ;;  options         1    7[COMMON] unsigned char 
 13493 ;; Auto vars:     Size  Location     Type
 13494 ;;  ep              1   12[COMMON] unsigned char 
 13495 ;;  p               2   10[COMMON] PTR unsigned char 
 13496 ;;		 -> UEP0(1), 
 13497 ;; Return value:  Size  Location     Type
 13498 ;;                  1    wreg      void 
 13499 ;; Registers used:
 13500 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13501 ;; Tracked objects:
 13502 ;;		On entry : 1F/2
 13503 ;;		On exit  : 0/0
 13504 ;;		Unchanged: 0/0
 13505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13506 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13507 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13508 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13509 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13510 ;;Total ram usage:        6 bytes
 13511 ;; Hardware stack levels used: 1
 13512 ;; Hardware stack levels required when called: 1
 13513 ;; This function calls:
 13514 ;;		_USBConfigureEndpoint
 13515 ;; This function is called by:
 13516 ;;		_APP_KeyboardInit
 13517 ;; This function uses a non-reentrant model
 13518 ;;
 13519                           
 13520     122E                     _USBEnableEndpoint:	
 13521                           ;psect for function _USBEnableEndpoint
 13522                           
 13523                           
 13524                           ;incstack = 0
 13525                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13526                           ;USBEnableEndpoint@ep stored from wreg
 13527     122E  00FC               	movwf	USBEnableEndpoint@ep
 13528                           
 13529                           ;usb/usb_device.c: 882: void USBEnableEndpoint(uint8_t ep, uint8_t options);usb/usb_devi
      +                          ce.c: 883: {;usb/usb_device.c: 884:     unsigned char* p;;usb/usb_device.c: 888:     if(
      +                          options & 0x04)
 13530     122F  1D77               	btfss	USBEnableEndpoint@options,2
 13531     1230  2A36               	goto	i1l3923
 13532                           
 13533                           ;usb/usb_device.c: 889:     {;usb/usb_device.c: 890:         USBConfigureEndpoint(ep, 0)
      +                          ;
 13534     1231  01F0               	clrf	USBConfigureEndpoint@direction
 13535     1232  087C               	movf	USBEnableEndpoint@ep,w
 13536     1233  3194  2458  3192   	fcall	_USBConfigureEndpoint
 13537     1236                     i1l3923:
 13538                           
 13539                           ;usb/usb_device.c: 892:     if(options & 0x02)
 13540     1236  1CF7               	btfss	USBEnableEndpoint@options,1
 13541     1237  2A3D               	goto	i1l3927
 13542                           
 13543                           ;usb/usb_device.c: 893:     {;usb/usb_device.c: 894:         USBConfigureEndpoint(ep, 1)
      +                          ;
 13544     1238  01F0               	clrf	USBConfigureEndpoint@direction
 13545     1239  0AF0               	incf	USBConfigureEndpoint@direction,f
 13546     123A  087C               	movf	USBEnableEndpoint@ep,w
 13547     123B  3194  2458         	fcall	_USBConfigureEndpoint
 13548     123D                     i1l3927:
 13549                           
 13550                           ;usb/usb_device.c: 903:         p = (unsigned char*)(&UEP0+ep);
 13551     123D  087C               	movf	USBEnableEndpoint@ep,w
 13552     123E  3E98               	addlw	152
 13553     123F  00F8               	movwf	??_USBEnableEndpoint
 13554     1240  01F9               	clrf	??_USBEnableEndpoint+1
 13555     1241  300E               	movlw	14
 13556     1242  3DF9               	addwfc	??_USBEnableEndpoint+1,f
 13557     1243  0878               	movf	??_USBEnableEndpoint,w
 13558     1244  00FA               	movwf	USBEnableEndpoint@p
 13559     1245  0879               	movf	??_USBEnableEndpoint+1,w
 13560     1246  00FB               	movwf	USBEnableEndpoint@p+1
 13561                           
 13562                           ;usb/usb_device.c: 905:     *p = options;
 13563     1247  087A               	movf	USBEnableEndpoint@p,w
 13564     1248  0086               	movwf	6
 13565     1249  087B               	movf	USBEnableEndpoint@p+1,w
 13566     124A  0087               	movwf	7
 13567     124B  0877               	movf	USBEnableEndpoint@options,w
 13568     124C  0081               	movwf	1
 13569     124D  0008               	return
 13570     124E                     __end_of_USBEnableEndpoint:
 13571                           
 13572                           	psect	text72
 13573     1458                     __ptext72:	
 13574 ;; *************** function _USBConfigureEndpoint *****************
 13575 ;; Defined at:
 13576 ;;		line 1547 in file "usb/usb_device.c"
 13577 ;; Parameters:    Size  Location     Type
 13578 ;;  EPNum           1    wreg     unsigned char 
 13579 ;;  direction       1    0[COMMON] unsigned char 
 13580 ;; Auto vars:     Size  Location     Type
 13581 ;;  EPNum           1    5[COMMON] unsigned char 
 13582 ;;  handle          1    6[COMMON] PTR volatile struct __BD
 13583 ;;		 -> BDT(32), 
 13584 ;; Return value:  Size  Location     Type
 13585 ;;                  1    wreg      void 
 13586 ;; Registers used:
 13587 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13588 ;; Tracked objects:
 13589 ;;		On entry : 0/2
 13590 ;;		On exit  : 0/0
 13591 ;;		Unchanged: 0/0
 13592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13593 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;Total ram usage:        7 bytes
 13598 ;; Hardware stack levels used: 1
 13599 ;; This function calls:
 13600 ;;		Nothing
 13601 ;; This function is called by:
 13602 ;;		_USBEnableEndpoint
 13603 ;; This function uses a non-reentrant model
 13604 ;;
 13605                           
 13606     1458                     _USBConfigureEndpoint:	
 13607                           ;psect for function _USBConfigureEndpoint
 13608                           
 13609                           
 13610                           ;incstack = 0
 13611                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 13612                           ;USBConfigureEndpoint@EPNum stored from wreg
 13613     1458  00F5               	movwf	USBConfigureEndpoint@EPNum
 13614                           
 13615                           ;usb/usb_device.c: 1547: static void USBConfigureEndpoint(uint8_t EPNum, uint8_t directi
      +                          on);usb/usb_device.c: 1548: {;usb/usb_device.c: 1549:     volatile BDT_ENTRY* handle;;us
      +                          b/usb_device.c: 1553:     handle = (volatile BDT_ENTRY*)&BDT[0];
 13616     1459  3020               	movlw	32
 13617     145A  00F6               	movwf	USBConfigureEndpoint@handle
 13618                           
 13619                           ;usb/usb_device.c: 1554:     handle += (4*EPNum+2*direction+0u);
 13620     145B  0870               	movf	USBConfigureEndpoint@direction,w
 13621     145C  00F1               	movwf	??_USBConfigureEndpoint
 13622     145D  3001               	movlw	1
 13623     145E                     u282_25:
 13624     145E  35F1               	lslf	??_USBConfigureEndpoint,f
 13625     145F  0B89               	decfsz	9,f
 13626     1460  2C5E               	goto	u282_25
 13627     1461  0875               	movf	USBConfigureEndpoint@EPNum,w
 13628     1462  00F2               	movwf	??_USBConfigureEndpoint+1
 13629     1463  3001               	movlw	1
 13630     1464                     u283_25:
 13631     1464  35F2               	lslf	??_USBConfigureEndpoint+1,f
 13632     1465  3EFF               	addlw	-1
 13633     1466  1D03               	skipz
 13634     1467  2C64               	goto	u283_25
 13635     1468  3572               	lslf	??_USBConfigureEndpoint+1,w
 13636     1469  0771               	addwf	??_USBConfigureEndpoint,w
 13637     146A  00F3               	movwf	??_USBConfigureEndpoint+2
 13638     146B  3001               	movlw	1
 13639     146C                     u284_25:
 13640     146C  35F3               	lslf	??_USBConfigureEndpoint+2,f
 13641     146D  3EFF               	addlw	-1
 13642     146E  1D03               	skipz
 13643     146F  2C6C               	goto	u284_25
 13644     1470  3573               	lslf	??_USBConfigureEndpoint+2,w
 13645     1471  00F4               	movwf	??_USBConfigureEndpoint+3
 13646     1472  0874               	movf	??_USBConfigureEndpoint+3,w
 13647     1473  07F6               	addwf	USBConfigureEndpoint@handle,f
 13648                           
 13649                           ;usb/usb_device.c: 1556:     handle->STAT.UOWN = 0;
 13650     1474  0876               	movf	USBConfigureEndpoint@handle,w
 13651     1475  0086               	movwf	6
 13652     1476  0187               	clrf	7
 13653     1477  1381               	bcf	1,7
 13654                           
 13655                           ;usb/usb_device.c: 1561:     if(direction == 0)
 13656     1478  0870               	movf	USBConfigureEndpoint@direction,w
 13657     1479  1D03               	btfss	3,2
 13658     147A  2C85               	goto	i1l3913
 13659                           
 13660                           ;usb/usb_device.c: 1562:     {;usb/usb_device.c: 1563:         pBDTEntryOut[EPNum] = han
      +                          dle;
 13661     147B  3575               	lslf	USBConfigureEndpoint@EPNum,w
 13662     147C  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13663     147D  0086               	movwf	6
 13664     147E  3001               	movlw	1	; select bank2/3
 13665     147F  0087               	movwf	7
 13666     1480  0876               	movf	USBConfigureEndpoint@handle,w
 13667     1481  3FC0               	movwi [0]fsr1
 13668     1482  3000               	movlw	0
 13669     1483  3FC1               	movwi [1]fsr1
 13670                           
 13671                           ;usb/usb_device.c: 1564:     }
 13672     1484  2C8D               	goto	i1l3915
 13673     1485                     i1l3913:
 13674                           
 13675                           ;usb/usb_device.c: 1566:     {;usb/usb_device.c: 1567:         pBDTEntryIn[EPNum] = hand
      +                          le;
 13676     1485  3575               	lslf	USBConfigureEndpoint@EPNum,w
 13677     1486  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13678     1487  0086               	movwf	6
 13679     1488  0187               	clrf	7
 13680     1489  0876               	movf	USBConfigureEndpoint@handle,w
 13681     148A  3FC0               	movwi [0]fsr1
 13682     148B  3000               	movlw	0
 13683     148C  3FC1               	movwi [1]fsr1
 13684     148D                     i1l3915:
 13685                           
 13686                           ;usb/usb_device.c: 1571:         handle->STAT.DTS = 0;
 13687     148D  0876               	movf	USBConfigureEndpoint@handle,w
 13688     148E  0086               	movwf	6
 13689     148F  0187               	clrf	7
 13690     1490  1301               	bcf	1,6
 13691                           
 13692                           ;usb/usb_device.c: 1572:         (handle+1)->STAT.DTS = 1;
 13693     1491  0876               	movf	USBConfigureEndpoint@handle,w
 13694     1492  3E04               	addlw	4
 13695     1493  0086               	movwf	6
 13696     1494  0187               	clrf	7
 13697     1495  1701               	bsf	1,6
 13698     1496  0008               	return
 13699     1497                     __end_of_USBConfigureEndpoint:
 13700                           
 13701                           	psect	text73
 13702     13E0                     __ptext73:	
 13703 ;; *************** function _USBCtrlTrfOutHandler *****************
 13704 ;; Defined at:
 13705 ;;		line 2545 in file "usb/usb_device.c"
 13706 ;; Parameters:    Size  Location     Type
 13707 ;;		None
 13708 ;; Auto vars:     Size  Location     Type
 13709 ;;		None
 13710 ;; Return value:  Size  Location     Type
 13711 ;;                  1    wreg      void 
 13712 ;; Registers used:
 13713 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13714 ;; Tracked objects:
 13715 ;;		On entry : 1F/0
 13716 ;;		On exit  : 1D/0
 13717 ;;		Unchanged: 0/0
 13718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13721 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13723 ;;Total ram usage:        4 bytes
 13724 ;; Hardware stack levels used: 1
 13725 ;; Hardware stack levels required when called: 4
 13726 ;; This function calls:
 13727 ;;		_USBCtrlTrfRxService
 13728 ;; This function is called by:
 13729 ;;		_USBCtrlEPService
 13730 ;; This function uses a non-reentrant model
 13731 ;;
 13732                           
 13733     13E0                     _USBCtrlTrfOutHandler:	
 13734                           ;psect for function _USBCtrlTrfOutHandler
 13735                           
 13736                           
 13737                           ;usb/usb_device.c: 2547:     if(controlTransferState == 2)
 13738                           
 13739                           ;incstack = 0
 13740                           ; Regs used in _USBCtrlTrfOutHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13741     13E0  3002               	movlw	2
 13742     13E1  066A               	xorwf	_controlTransferState,w	;volatile
 13743     13E2  1D03               	btfss	3,2
 13744     13E3  2BE7               	goto	i1l4785
 13745                           
 13746                           ;usb/usb_device.c: 2548:     {;usb/usb_device.c: 2549:         USBCtrlTrfRxService();
 13747     13E4  318F  274D         	fcall	_USBCtrlTrfRxService
 13748                           
 13749                           ;usb/usb_device.c: 2550:     }
 13750     13E6  0008               	return
 13751     13E7                     i1l4785:
 13752                           
 13753                           ;usb/usb_device.c: 2552:     {;usb/usb_device.c: 2555:         controlTransferState = 0;
 13754     13E7  01EA               	clrf	_controlTransferState	;volatile
 13755                           
 13756                           ;usb/usb_device.c: 2562:         if(BothEP0OutUOWNsSet == 0)
 13757     13E8  0022               	movlb	2	; select bank2
 13758     13E9  085D               	movf	_BothEP0OutUOWNsSet^(0+256),w	;volatile
 13759     13EA  1D03               	btfss	3,2
 13760     13EB  2C18               	goto	i1l4797
 13761                           
 13762                           ;usb/usb_device.c: 2563:         {;usb/usb_device.c: 2564:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 13763     13EC  0020               	movlb	0	; select bank0
 13764     13ED  0867               	movf	_pBDTEntryEP0OutNext,w
 13765     13EE  3E01               	addlw	1
 13766     13EF  00FA               	movwf	??_USBCtrlTrfOutHandler
 13767     13F0  3000               	movlw	0
 13768     13F1  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13769     13F2  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 13770     13F3  087A               	movf	??_USBCtrlTrfOutHandler,w
 13771     13F4  0086               	movwf	6
 13772     13F5  087B               	movf	??_USBCtrlTrfOutHandler+1,w
 13773     13F6  0087               	movwf	7
 13774     13F7  3008               	movlw	8
 13775     13F8  0081               	movwf	1
 13776                           
 13777                           ;usb/usb_device.c: 2565:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 13778     13F9  3040               	movlw	64
 13779     13FA  00FA               	movwf	??_USBCtrlTrfOutHandler
 13780     13FB  3000               	movlw	0
 13781     13FC  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 13782     13FD  30FF               	movlw	255
 13783     13FE  057A               	andwf	??_USBCtrlTrfOutHandler,w
 13784     13FF  00FC               	movwf	??_USBCtrlTrfOutHandler+2
 13785     1400  307F               	movlw	127
 13786     1401  057B               	andwf	??_USBCtrlTrfOutHandler+1,w
 13787     1402  00FD               	movwf	??_USBCtrlTrfOutHandler+3
 13788     1403  0867               	movf	_pBDTEntryEP0OutNext,w
 13789     1404  0086               	movwf	6
 13790     1405  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13791     1406  0087               	movwf	7
 13792     1407  3142               	addfsr 1,2
 13793     1408  087C               	movf	??_USBCtrlTrfOutHandler+2,w
 13794     1409  3FC0               	movwi [0]fsr1
 13795     140A  087D               	movf	??_USBCtrlTrfOutHandler+3,w
 13796     140B  3FC1               	movwi [1]fsr1
 13797                           
 13798                           ;usb/usb_device.c: 2566:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 13799     140C  0867               	movf	_pBDTEntryEP0OutNext,w
 13800     140D  0086               	movwf	6
 13801     140E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13802     140F  0087               	movwf	7
 13803     1410  300C               	movlw	12
 13804     1411  0081               	movwf	1
 13805                           
 13806                           ;usb/usb_device.c: 2567:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 13807     1412  0867               	movf	_pBDTEntryEP0OutNext,w
 13808     1413  0086               	movwf	6
 13809     1414  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13810     1415  0087               	movwf	7
 13811     1416  1781               	bsf	1,7
 13812                           
 13813                           ;usb/usb_device.c: 2568:         }
 13814     1417  0008               	return
 13815     1418                     i1l4797:
 13816                           
 13817                           ;usb/usb_device.c: 2570:         {;usb/usb_device.c: 2571:             BothEP0OutUOWNsSe
      +                          t = 0;
 13818     1418  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 13819     1419  0008               	return
 13820     141A                     __end_of_USBCtrlTrfOutHandler:
 13821                           
 13822                           	psect	text74
 13823     0F4D                     __ptext74:	
 13824 ;; *************** function _USBCtrlTrfRxService *****************
 13825 ;; Defined at:
 13826 ;;		line 1856 in file "usb/usb_device.c"
 13827 ;; Parameters:    Size  Location     Type
 13828 ;;		None
 13829 ;; Auto vars:     Size  Location     Type
 13830 ;;  byteToRead      1    9[COMMON] unsigned char 
 13831 ;;  i               1    8[COMMON] unsigned char 
 13832 ;; Return value:  Size  Location     Type
 13833 ;;                  1    wreg      void 
 13834 ;; Registers used:
 13835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13836 ;; Tracked objects:
 13837 ;;		On entry : 1F/0
 13838 ;;		On exit  : 1D/0
 13839 ;;		Unchanged: 0/0
 13840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13842 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13843 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13844 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13845 ;;Total ram usage:        6 bytes
 13846 ;; Hardware stack levels used: 1
 13847 ;; Hardware stack levels required when called: 3
 13848 ;; This function calls:
 13849 ;;		_USBCtrlEPAllowStatusStage
 13850 ;;		_USBHIDCBSetReportComplete
 13851 ;; This function is called by:
 13852 ;;		_USBCtrlTrfOutHandler
 13853 ;; This function uses a non-reentrant model
 13854 ;;
 13855                           
 13856     0F4D                     _USBCtrlTrfRxService:	
 13857                           ;psect for function _USBCtrlTrfRxService
 13858                           
 13859                           
 13860                           ;usb/usb_device.c: 1858:     uint8_t byteToRead;;usb/usb_device.c: 1859:     uint8_t i;;
      +                          usb/usb_device.c: 1863:     byteToRead = pBDTEntryEP0OutCurrent->CNT;
 13861                           
 13862                           ;incstack = 0
 13863                           ; Regs used in _USBCtrlTrfRxService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13864     0F4D  086B               	movf	_pBDTEntryEP0OutCurrent,w
 13865     0F4E  0086               	movwf	6
 13866     0F4F  0187               	clrf	7
 13867     0F50  3F41               	moviw [1]fsr1
 13868     0F51  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 13869                           
 13870                           ;usb/usb_device.c: 1869:     if(byteToRead > outPipes[0].wCount.Val)
 13871     0F52  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13872     0F53  00F4               	movwf	??_USBCtrlTrfRxService
 13873     0F54  01F5               	clrf	??_USBCtrlTrfRxService+1
 13874     0F55  0875               	movf	??_USBCtrlTrfRxService+1,w
 13875     0F56  0022               	movlb	2	; select bank2
 13876     0F57  0225               	subwf	((_outPipes+1)^(0+256)+3),w	;volatile
 13877     0F58  1D03               	skipz
 13878     0F59  2F5C               	goto	u365_25
 13879     0F5A  0874               	movf	??_USBCtrlTrfRxService,w
 13880     0F5B  0224               	subwf	(_outPipes^(0+256)+3),w	;volatile
 13881     0F5C                     u365_25:
 13882     0F5C  1803               	skipnc
 13883     0F5D  2F60               	goto	i1l544
 13884                           
 13885                           ;usb/usb_device.c: 1870:     {;usb/usb_device.c: 1871:         byteToRead = outPipes[0].
      +                          wCount.Val;
 13886     0F5E  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 13887     0F5F  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 13888     0F60                     i1l544:	
 13889                           ;usb/usb_device.c: 1872:     }
 13890                           
 13891                           
 13892                           ;usb/usb_device.c: 1874:     outPipes[0].wCount.Val -= byteToRead;
 13893     0F60  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13894     0F61  00F4               	movwf	??_USBCtrlTrfRxService
 13895     0F62  01F5               	clrf	??_USBCtrlTrfRxService+1
 13896     0F63  0874               	movf	??_USBCtrlTrfRxService,w
 13897     0F64  02A4               	subwf	(_outPipes^(0+256)+3),f	;volatile
 13898     0F65  0875               	movf	??_USBCtrlTrfRxService+1,w
 13899     0F66  3BA5               	subwfb	((_outPipes+1)^(0+256)+3),f	;volatile
 13900                           
 13901                           ;usb/usb_device.c: 1878:     for(i=0;i<byteToRead;i++)
 13902     0F67  01F8               	clrf	USBCtrlTrfRxService@i
 13903     0F68                     i1l4557:
 13904     0F68  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13905     0F69  0278               	subwf	USBCtrlTrfRxService@i,w
 13906     0F6A  1803               	btfsc	3,0
 13907     0F6B  2F7E               	goto	i1l4559
 13908                           
 13909                           ;usb/usb_device.c: 1879:     {;usb/usb_device.c: 1880:         *outPipes[0].pDst.bRam++ 
      +                          = CtrlTrfData[i];
 13910     0F6C  0821               	movf	_outPipes^(0+256),w	;volatile
 13911     0F6D  0086               	movwf	6
 13912     0F6E  0187               	clrf	7
 13913     0F6F  0878               	movf	USBCtrlTrfRxService@i,w
 13914     0F70  3E48               	addlw	72
 13915     0F71  0084               	movwf	4
 13916     0F72  0185               	clrf	5
 13917     0F73  0800               	movf	0,w
 13918     0F74  0081               	movwf	1
 13919     0F75  3001               	movlw	1
 13920     0F76  00F4               	movwf	??_USBCtrlTrfRxService
 13921     0F77  0874               	movf	??_USBCtrlTrfRxService,w
 13922     0F78  07A1               	addwf	_outPipes^(0+256),f	;volatile
 13923                           
 13924                           ;usb/usb_device.c: 1881:     }
 13925     0F79  3001               	movlw	1
 13926     0F7A  00F4               	movwf	??_USBCtrlTrfRxService
 13927     0F7B  0874               	movf	??_USBCtrlTrfRxService,w
 13928     0F7C  07F8               	addwf	USBCtrlTrfRxService@i,f
 13929     0F7D  2F68               	goto	i1l4557
 13930     0F7E                     i1l4559:
 13931                           
 13932                           ;usb/usb_device.c: 1885:     if(outPipes[0].wCount.Val > 0)
 13933     0F7E  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 13934     0F7F  0425               	iorwf	((_outPipes+1)^(0+256)+3),w	;volatile
 13935     0F80  1903               	btfsc	3,2
 13936     0F81  2FBF               	goto	i1l4571
 13937                           
 13938                           ;usb/usb_device.c: 1886:     {;usb/usb_device.c: 1887:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 13939     0F82  0020               	movlb	0	; select bank0
 13940     0F83  0867               	movf	_pBDTEntryEP0OutNext,w
 13941     0F84  3E01               	addlw	1
 13942     0F85  00F4               	movwf	??_USBCtrlTrfRxService
 13943     0F86  3000               	movlw	0
 13944     0F87  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13945     0F88  00F5               	movwf	??_USBCtrlTrfRxService+1
 13946     0F89  0874               	movf	??_USBCtrlTrfRxService,w
 13947     0F8A  0086               	movwf	6
 13948     0F8B  0875               	movf	??_USBCtrlTrfRxService+1,w
 13949     0F8C  0087               	movwf	7
 13950     0F8D  3008               	movlw	8
 13951     0F8E  0081               	movwf	1
 13952                           
 13953                           ;usb/usb_device.c: 1888:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 13954     0F8F  3048               	movlw	72
 13955     0F90  00F4               	movwf	??_USBCtrlTrfRxService
 13956     0F91  3000               	movlw	0
 13957     0F92  00F5               	movwf	??_USBCtrlTrfRxService+1
 13958     0F93  30FF               	movlw	255
 13959     0F94  0574               	andwf	??_USBCtrlTrfRxService,w
 13960     0F95  00F6               	movwf	??_USBCtrlTrfRxService+2
 13961     0F96  307F               	movlw	127
 13962     0F97  0575               	andwf	??_USBCtrlTrfRxService+1,w
 13963     0F98  00F7               	movwf	??_USBCtrlTrfRxService+3
 13964     0F99  0867               	movf	_pBDTEntryEP0OutNext,w
 13965     0F9A  0086               	movwf	6
 13966     0F9B  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13967     0F9C  0087               	movwf	7
 13968     0F9D  3142               	addfsr 1,2
 13969     0F9E  0876               	movf	??_USBCtrlTrfRxService+2,w
 13970     0F9F  3FC0               	movwi [0]fsr1
 13971     0FA0  0877               	movf	??_USBCtrlTrfRxService+3,w
 13972     0FA1  3FC1               	movwi [1]fsr1
 13973                           
 13974                           ;usb/usb_device.c: 1889:         if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 13975     0FA2  086B               	movf	_pBDTEntryEP0OutCurrent,w
 13976     0FA3  0086               	movwf	6
 13977     0FA4  0187               	clrf	7
 13978     0FA5  1B01               	btfsc	1,6
 13979     0FA6  2FB3               	goto	i1l4569
 13980                           
 13981                           ;usb/usb_device.c: 1890:         {;usb/usb_device.c: 1891:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x40|(0x08 & 0x08);
 13982     0FA7  0867               	movf	_pBDTEntryEP0OutNext,w
 13983     0FA8  0086               	movwf	6
 13984     0FA9  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13985     0FAA  0087               	movwf	7
 13986     0FAB  3048               	movlw	72
 13987     0FAC  0081               	movwf	1
 13988                           
 13989                           ;usb/usb_device.c: 1892:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 13990     0FAD  0867               	movf	_pBDTEntryEP0OutNext,w
 13991     0FAE  0086               	movwf	6
 13992     0FAF  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13993     0FB0  0087               	movwf	7
 13994     0FB1  1781               	bsf	1,7
 13995                           
 13996                           ;usb/usb_device.c: 1893:         }
 13997     0FB2  0008               	return
 13998     0FB3                     i1l4569:
 13999                           
 14000                           ;usb/usb_device.c: 1895:         {;usb/usb_device.c: 1896:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x00|(0x08 & 0x08);
 14001     0FB3  0867               	movf	_pBDTEntryEP0OutNext,w
 14002     0FB4  0086               	movwf	6
 14003     0FB5  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14004     0FB6  0087               	movwf	7
 14005     0FB7  3008               	movlw	8
 14006     0FB8  0081               	movwf	1
 14007                           
 14008                           ;usb/usb_device.c: 1897:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14009     0FB9  0867               	movf	_pBDTEntryEP0OutNext,w
 14010     0FBA  0086               	movwf	6
 14011     0FBB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14012     0FBC  0087               	movwf	7
 14013     0FBD  1781               	bsf	1,7
 14014     0FBE  0008               	return
 14015     0FBF                     i1l4571:
 14016                           
 14017                           ;usb/usb_device.c: 1901:     {;usb/usb_device.c: 1905:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 14018     0FBF  0020               	movlb	0	; select bank0
 14019     0FC0  0867               	movf	_pBDTEntryEP0OutNext,w
 14020     0FC1  3E01               	addlw	1
 14021     0FC2  00F4               	movwf	??_USBCtrlTrfRxService
 14022     0FC3  3000               	movlw	0
 14023     0FC4  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 14024     0FC5  00F5               	movwf	??_USBCtrlTrfRxService+1
 14025     0FC6  0874               	movf	??_USBCtrlTrfRxService,w
 14026     0FC7  0086               	movwf	6
 14027     0FC8  0875               	movf	??_USBCtrlTrfRxService+1,w
 14028     0FC9  0087               	movwf	7
 14029     0FCA  3008               	movlw	8
 14030     0FCB  0081               	movwf	1
 14031                           
 14032                           ;usb/usb_device.c: 1906:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0
      +                          x7FFF);
 14033     0FCC  3040               	movlw	64
 14034     0FCD  00F4               	movwf	??_USBCtrlTrfRxService
 14035     0FCE  3000               	movlw	0
 14036     0FCF  00F5               	movwf	??_USBCtrlTrfRxService+1
 14037     0FD0  30FF               	movlw	255
 14038     0FD1  0574               	andwf	??_USBCtrlTrfRxService,w
 14039     0FD2  00F6               	movwf	??_USBCtrlTrfRxService+2
 14040     0FD3  307F               	movlw	127
 14041     0FD4  0575               	andwf	??_USBCtrlTrfRxService+1,w
 14042     0FD5  00F7               	movwf	??_USBCtrlTrfRxService+3
 14043     0FD6  0867               	movf	_pBDTEntryEP0OutNext,w
 14044     0FD7  0086               	movwf	6
 14045     0FD8  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14046     0FD9  0087               	movwf	7
 14047     0FDA  3142               	addfsr 1,2
 14048     0FDB  0876               	movf	??_USBCtrlTrfRxService+2,w
 14049     0FDC  3FC0               	movwi [0]fsr1
 14050     0FDD  0877               	movf	??_USBCtrlTrfRxService+3,w
 14051     0FDE  3FC1               	movwi [1]fsr1
 14052                           
 14053                           ;usb/usb_device.c: 1910:         pBDTEntryEP0OutNext->STAT.Val = 0x04;
 14054     0FDF  0867               	movf	_pBDTEntryEP0OutNext,w
 14055     0FE0  0086               	movwf	6
 14056     0FE1  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14057     0FE2  0087               	movwf	7
 14058     0FE3  3004               	movlw	4
 14059     0FE4  0081               	movwf	1
 14060                           
 14061                           ;usb/usb_device.c: 1911:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14062     0FE5  0867               	movf	_pBDTEntryEP0OutNext,w
 14063     0FE6  0086               	movwf	6
 14064     0FE7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14065     0FE8  0087               	movwf	7
 14066     0FE9  1781               	bsf	1,7
 14067                           
 14068                           ;usb/usb_device.c: 1918:         if(outPipes[0].pFunc != ((void*)0))
 14069     0FEA  0022               	movlb	2	; select bank2
 14070     0FEB  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 14071     0FEC  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 14072     0FED  1903               	btfsc	3,2
 14073     0FEE  2FF9               	goto	i1l4583
 14074                           
 14075                           ;usb/usb_device.c: 1919:         {
 14076     0FEF  3005               	movlw	5
 14077     0FF0  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 14078     0FF1  0086               	movwf	6
 14079     0FF2  3001               	movlw	1	; select bank2/3
 14080     0FF3  0087               	movwf	7
 14081     0FF4  3F41               	moviw [1]fsr1
 14082     0FF5  008A               	movwf	10
 14083     0FF6  3F40               	moviw [0]fsr1
 14084     0FF7  000A               	callw
 14085     0FF8  318F               	pagesel	$
 14086     0FF9                     i1l4583:
 14087     0FF9  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 14088                           
 14089                           ;usb/usb_device.c: 1945:         if(USBDeferStatusStagePacket == 0)
 14090     0FFA  085B               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 14091     0FFB  1D03               	btfss	3,2
 14092     0FFC  0008               	return
 14093                           
 14094                           ;usb/usb_device.c: 1946:         {;usb/usb_device.c: 1947:             USBCtrlEPAllowSta
      +                          tusStage();
 14095     0FFD  318A  2200         	fcall	_USBCtrlEPAllowStatusStage
 14096     0FFF  0008               	return
 14097     1000                     __end_of_USBCtrlTrfRxService:
 14098                           
 14099                           	psect	text75
 14100     0A00                     __ptext75:	
 14101 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 14102 ;; Defined at:
 14103 ;;		line 1420 in file "usb/usb_device.c"
 14104 ;; Parameters:    Size  Location     Type
 14105 ;;		None
 14106 ;; Auto vars:     Size  Location     Type
 14107 ;;		None
 14108 ;; Return value:  Size  Location     Type
 14109 ;;                  1    wreg      void 
 14110 ;; Registers used:
 14111 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14112 ;; Tracked objects:
 14113 ;;		On entry : 0/2
 14114 ;;		On exit  : 1D/0
 14115 ;;		Unchanged: 0/0
 14116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14119 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14120 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14121 ;;Total ram usage:        4 bytes
 14122 ;; Hardware stack levels used: 1
 14123 ;; This function calls:
 14124 ;;		Nothing
 14125 ;; This function is called by:
 14126 ;;		_USBDeviceTasks
 14127 ;;		_USBCtrlEPServiceComplete
 14128 ;;		_USBCtrlTrfRxService
 14129 ;; This function uses a non-reentrant model
 14130 ;;
 14131                           
 14132     0A00                     _USBCtrlEPAllowStatusStage:	
 14133                           ;psect for function _USBCtrlEPAllowStatusStage
 14134                           
 14135                           
 14136                           ;usb/usb_device.c: 1427:     if(USBStatusStageEnabledFlag1 == 0)
 14137                           
 14138                           ;incstack = 0
 14139                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 14140     0A00  0022               	movlb	2	; select bank2
 14141     0A01  085A               	movf	_USBStatusStageEnabledFlag1^(0+256),w	;volatile
 14142     0A02  1D03               	btfss	3,2
 14143     0A03  0008               	return
 14144                           
 14145                           ;usb/usb_device.c: 1428:     {;usb/usb_device.c: 1429:         USBStatusStageEnabledFlag
      +                          1 = 1;
 14146     0A04  3001               	movlw	1
 14147     0A05  00DA               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 14148                           
 14149                           ;usb/usb_device.c: 1430:         if(USBStatusStageEnabledFlag2 == 0)
 14150     0A06  0859               	movf	_USBStatusStageEnabledFlag2^(0+256),w	;volatile
 14151     0A07  1D03               	btfss	3,2
 14152     0A08  0008               	return
 14153                           
 14154                           ;usb/usb_device.c: 1431:         {;usb/usb_device.c: 1432:             USBStatusStageEna
      +                          bledFlag2 = 1;
 14155     0A09  3001               	movlw	1
 14156     0A0A  00D9               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 14157                           
 14158                           ;usb/usb_device.c: 1436:             if(controlTransferState == 2)
 14159     0A0B  3002               	movlw	2
 14160     0A0C  0020               	movlb	0	; select bank0
 14161     0A0D  066A               	xorwf	_controlTransferState,w	;volatile
 14162     0A0E  1D03               	btfss	3,2
 14163     0A0F  2A22               	goto	i1l4165
 14164                           
 14165                           ;usb/usb_device.c: 1437:             {;usb/usb_device.c: 1438:                 pBDTEntry
      +                          In[0]->CNT = 0;
 14166     0A10  0863               	movf	_pBDTEntryIn,w
 14167     0A11  0086               	movwf	6
 14168     0A12  0864               	movf	_pBDTEntryIn+1,w
 14169     0A13  0087               	movwf	7
 14170     0A14  3141               	addfsr 1,1
 14171     0A15  0181               	clrf	1
 14172                           
 14173                           ;usb/usb_device.c: 1439:                 pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 14174     0A16  0863               	movf	_pBDTEntryIn,w
 14175     0A17  0086               	movwf	6
 14176     0A18  0864               	movf	_pBDTEntryIn+1,w
 14177     0A19  0087               	movwf	7
 14178     0A1A  3048               	movlw	72
 14179     0A1B  0081               	movwf	1
 14180                           
 14181                           ;usb/usb_device.c: 1440:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14182     0A1C  0863               	movf	_pBDTEntryIn,w
 14183     0A1D  0086               	movwf	6
 14184     0A1E  0864               	movf	_pBDTEntryIn+1,w
 14185     0A1F  0087               	movwf	7
 14186     0A20  1781               	bsf	1,7
 14187                           
 14188                           ;usb/usb_device.c: 1441:             }
 14189     0A21  0008               	return
 14190     0A22                     i1l4165:
 14191     0A22  036A               	decf	_controlTransferState,w	;volatile
 14192     0A23  1D03               	btfss	3,2
 14193     0A24  0008               	return
 14194                           
 14195                           ;usb/usb_device.c: 1443:             {;usb/usb_device.c: 1444:                 BothEP0Ou
      +                          tUOWNsSet = 0;
 14196     0A25  0022               	movlb	2	; select bank2
 14197     0A26  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 14198                           
 14199                           ;usb/usb_device.c: 1449:                     pBDTEntryEP0OutCurrent->CNT = 8;
 14200     0A27  0020               	movlb	0	; select bank0
 14201     0A28  0A6B               	incf	_pBDTEntryEP0OutCurrent,w
 14202     0A29  0086               	movwf	6
 14203     0A2A  0187               	clrf	7
 14204     0A2B  3008               	movlw	8
 14205     0A2C  0081               	movwf	1
 14206                           
 14207                           ;usb/usb_device.c: 1450:                     pBDTEntryEP0OutCurrent->ADR = (((uint16_t)(
      +                          &SetupPkt)) & 0x7FFF);
 14208     0A2D  3040               	movlw	64
 14209     0A2E  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14210     0A2F  3000               	movlw	0
 14211     0A30  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14212     0A31  30FF               	movlw	255
 14213     0A32  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 14214     0A33  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 14215     0A34  307F               	movlw	127
 14216     0A35  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 14217     0A36  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 14218     0A37  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14219     0A38  3E02               	addlw	2
 14220     0A39  0086               	movwf	6
 14221     0A3A  0187               	clrf	7
 14222     0A3B  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 14223     0A3C  3FC0               	movwi [0]fsr1
 14224     0A3D  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 14225     0A3E  3FC1               	movwi [1]fsr1
 14226                           
 14227                           ;usb/usb_device.c: 1451:                     pBDTEntryEP0OutCurrent->STAT.Val = 0x04;
 14228     0A3F  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14229     0A40  0086               	movwf	6
 14230     0A41  0187               	clrf	7
 14231     0A42  3004               	movlw	4
 14232     0A43  0081               	movwf	1
 14233                           
 14234                           ;usb/usb_device.c: 1452:                     pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 14235     0A44  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14236     0A45  0086               	movwf	6
 14237     0A46  0187               	clrf	7
 14238     0A47  1781               	bsf	1,7
 14239                           
 14240                           ;usb/usb_device.c: 1453:                     BothEP0OutUOWNsSet = 1;
 14241     0A48  3001               	movlw	1
 14242     0A49  0022               	movlb	2	; select bank2
 14243     0A4A  00DD               	movwf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 14244                           
 14245                           ;usb/usb_device.c: 1457:                 pBDTEntryEP0OutNext->CNT = 8;
 14246     0A4B  0020               	movlb	0	; select bank0
 14247     0A4C  0867               	movf	_pBDTEntryEP0OutNext,w
 14248     0A4D  3E01               	addlw	1
 14249     0A4E  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14250     0A4F  3000               	movlw	0
 14251     0A50  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 14252     0A51  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14253     0A52  0870               	movf	??_USBCtrlEPAllowStatusStage,w
 14254     0A53  0086               	movwf	6
 14255     0A54  0871               	movf	??_USBCtrlEPAllowStatusStage+1,w
 14256     0A55  0087               	movwf	7
 14257     0A56  3008               	movlw	8
 14258     0A57  0081               	movwf	1
 14259                           
 14260                           ;usb/usb_device.c: 1458:                 pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupP
      +                          kt)) & 0x7FFF);
 14261     0A58  3040               	movlw	64
 14262     0A59  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14263     0A5A  3000               	movlw	0
 14264     0A5B  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14265     0A5C  30FF               	movlw	255
 14266     0A5D  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 14267     0A5E  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 14268     0A5F  307F               	movlw	127
 14269     0A60  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 14270     0A61  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 14271     0A62  0867               	movf	_pBDTEntryEP0OutNext,w
 14272     0A63  0086               	movwf	6
 14273     0A64  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14274     0A65  0087               	movwf	7
 14275     0A66  3142               	addfsr 1,2
 14276     0A67  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 14277     0A68  3FC0               	movwi [0]fsr1
 14278     0A69  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 14279     0A6A  3FC1               	movwi [1]fsr1
 14280                           
 14281                           ;usb/usb_device.c: 1459:                 pBDTEntryEP0OutNext->STAT.Val = 0x80;
 14282     0A6B  0867               	movf	_pBDTEntryEP0OutNext,w
 14283     0A6C  0086               	movwf	6
 14284     0A6D  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14285     0A6E  0087               	movwf	7
 14286     0A6F  3080               	movlw	128
 14287     0A70  0081               	movwf	1
 14288     0A71  0008               	return
 14289     0A72                     __end_of_USBCtrlEPAllowStatusStage:	
 14290                           ;usb/usb_device.c: 1461:         }
 14291                           
 14292                           
 14293                           	psect	text76
 14294     0AE6                     __ptext76:	
 14295 ;; *************** function _USBCtrlTrfInHandler *****************
 14296 ;; Defined at:
 14297 ;;		line 2599 in file "usb/usb_device.c"
 14298 ;; Parameters:    Size  Location     Type
 14299 ;;		None
 14300 ;; Auto vars:     Size  Location     Type
 14301 ;;  lastDTS         1    7[COMMON] unsigned char 
 14302 ;; Return value:  Size  Location     Type
 14303 ;;                  1    wreg      void 
 14304 ;; Registers used:
 14305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14306 ;; Tracked objects:
 14307 ;;		On entry : 1F/0
 14308 ;;		On exit  : 1F/0
 14309 ;;		Unchanged: 0/0
 14310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14313 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14314 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14315 ;;Total ram usage:        5 bytes
 14316 ;; Hardware stack levels used: 1
 14317 ;; Hardware stack levels required when called: 3
 14318 ;; This function calls:
 14319 ;;		_USBCtrlTrfTxService
 14320 ;;		_USBHIDCBSetReportComplete
 14321 ;; This function is called by:
 14322 ;;		_USBCtrlEPService
 14323 ;; This function uses a non-reentrant model
 14324 ;;
 14325                           
 14326     0AE6                     _USBCtrlTrfInHandler:	
 14327                           ;psect for function _USBCtrlTrfInHandler
 14328                           
 14329                           
 14330                           ;usb/usb_device.c: 2601:     uint8_t lastDTS;;usb/usb_device.c: 2603:     lastDTS = pBDT
      +                          EntryIn[0]->STAT.DTS;
 14331                           
 14332                           ;incstack = 0
 14333                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14334     0AE6  0863               	movf	_pBDTEntryIn,w
 14335     0AE7  0086               	movwf	6
 14336     0AE8  0864               	movf	_pBDTEntryIn+1,w
 14337     0AE9  0087               	movwf	7
 14338     0AEA  3000               	movlw	0
 14339     0AEB  1B01               	btfsc	1,6
 14340     0AEC  3001               	movlw	1
 14341     0AED  00F7               	movwf	USBCtrlTrfInHandler@lastDTS
 14342                           
 14343                           ;usb/usb_device.c: 2606:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 14344     0AEE  3004               	movlw	4
 14345     0AEF  0663               	xorwf	_pBDTEntryIn,w
 14346     0AF0  00E3               	movwf	_pBDTEntryIn
 14347     0AF1  3000               	movlw	0
 14348     0AF2  0664               	xorwf	_pBDTEntryIn+1,w
 14349     0AF3  00E4               	movwf	_pBDTEntryIn+1
 14350                           
 14351                           ;usb/usb_device.c: 2611:     if(USBDeviceState == ADR_PENDING_STATE)
 14352     0AF4  3008               	movlw	8
 14353     0AF5  066C               	xorwf	_USBDeviceState,w
 14354     0AF6  1D03               	btfss	3,2
 14355     0AF7  2B04               	goto	i1l4813
 14356                           
 14357                           ;usb/usb_device.c: 2612:     {;usb/usb_device.c: 2613:         UADDR = (SetupPkt.bDevADR
      +                           & 0x7F);
 14358     0AF8  0842               	movf	66,w	;volatile
 14359     0AF9  397F               	andlw	127
 14360     0AFA  003D               	movlb	29	; select bank29
 14361     0AFB  0096               	movwf	22	;volatile
 14362                           
 14363                           ;usb/usb_device.c: 2614:         if(UADDR != 0u)
 14364     0AFC  0816               	movf	22,w
 14365     0AFD  1903               	btfsc	3,2
 14366     0AFE  2B01               	goto	i1l4811
 14367                           
 14368                           ;usb/usb_device.c: 2615:         {;usb/usb_device.c: 2616:             USBDeviceState=AD
      +                          DRESS_STATE;
 14369     0AFF  3010               	movlw	16
 14370     0B00  2B02               	goto	L16
 14371     0B01                     i1l4811:	
 14372                           ;usb/usb_device.c: 2617:         }
 14373                           
 14374                           
 14375                           ;usb/usb_device.c: 2619:         {;usb/usb_device.c: 2620:             USBDeviceState=DE
      +                          FAULT_STATE;
 14376     0B01  3004               	movlw	4
 14377     0B02                     L16:
 14378     0B02  0020               	movlb	0	; select bank0
 14379     0B03  00EC               	movwf	_USBDeviceState	;volatile
 14380     0B04                     i1l4813:
 14381                           
 14382                           ;usb/usb_device.c: 2625:     if(controlTransferState == 1)
 14383     0B04  036A               	decf	_controlTransferState,w	;volatile
 14384     0B05  1D03               	btfss	3,2
 14385     0B06  2B4C               	goto	i1l630
 14386                           
 14387                           ;usb/usb_device.c: 2626:     {;usb/usb_device.c: 2627:         pBDTEntryIn[0]->ADR = (((
      +                          uint16_t)(CtrlTrfData)) & 0x7FFF);
 14388     0B07  3048               	movlw	72
 14389     0B08  00F3               	movwf	??_USBCtrlTrfInHandler
 14390     0B09  3000               	movlw	0
 14391     0B0A  00F4               	movwf	??_USBCtrlTrfInHandler+1
 14392     0B0B  30FF               	movlw	255
 14393     0B0C  0573               	andwf	??_USBCtrlTrfInHandler,w
 14394     0B0D  00F5               	movwf	??_USBCtrlTrfInHandler+2
 14395     0B0E  307F               	movlw	127
 14396     0B0F  0574               	andwf	??_USBCtrlTrfInHandler+1,w
 14397     0B10  00F6               	movwf	??_USBCtrlTrfInHandler+3
 14398     0B11  0863               	movf	_pBDTEntryIn,w
 14399     0B12  0086               	movwf	6
 14400     0B13  0864               	movf	_pBDTEntryIn+1,w
 14401     0B14  0087               	movwf	7
 14402     0B15  3142               	addfsr 1,2
 14403     0B16  0875               	movf	??_USBCtrlTrfInHandler+2,w
 14404     0B17  3FC0               	movwi [0]fsr1
 14405     0B18  0876               	movf	??_USBCtrlTrfInHandler+3,w
 14406     0B19  3FC1               	movwi [1]fsr1
 14407                           
 14408                           ;usb/usb_device.c: 2628:         USBCtrlTrfTxService();
 14409     0B1A  3196  26CA  318A   	fcall	_USBCtrlTrfTxService
 14410                           
 14411                           ;usb/usb_device.c: 2634:         if(shortPacketStatus == 2)
 14412     0B1D  3002               	movlw	2
 14413     0B1E  0022               	movlb	2	; select bank2
 14414     0B1F  0662               	xorwf	_shortPacketStatus^(0+256),w	;volatile
 14415     0B20  1D03               	btfss	3,2
 14416     0B21  2B2F               	goto	i1l4823
 14417                           
 14418                           ;usb/usb_device.c: 2635:         {;usb/usb_device.c: 2638:             pBDTEntryIn[0]->S
      +                          TAT.Val = 0x04;
 14419     0B22  0020               	movlb	0	; select bank0
 14420     0B23  0863               	movf	_pBDTEntryIn,w
 14421     0B24  0086               	movwf	6
 14422     0B25  0864               	movf	_pBDTEntryIn+1,w
 14423     0B26  0087               	movwf	7
 14424     0B27  3004               	movlw	4
 14425     0B28  0081               	movwf	1
 14426                           
 14427                           ;usb/usb_device.c: 2639:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 14428     0B29  0863               	movf	_pBDTEntryIn,w
 14429     0B2A  0086               	movwf	6
 14430     0B2B  0864               	movf	_pBDTEntryIn+1,w
 14431     0B2C  0087               	movwf	7
 14432     0B2D  1781               	bsf	1,7
 14433                           
 14434                           ;usb/usb_device.c: 2640:         }
 14435     0B2E  0008               	return
 14436     0B2F                     i1l4823:
 14437                           
 14438                           ;usb/usb_device.c: 2642:         {;usb/usb_device.c: 2643:             if(lastDTS == 0)
 14439     0B2F  0877               	movf	USBCtrlTrfInHandler@lastDTS,w
 14440     0B30  1D03               	btfss	3,2
 14441     0B31  2B3F               	goto	i1l4827
 14442                           
 14443                           ;usb/usb_device.c: 2644:             {;usb/usb_device.c: 2645:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x40|(0x08 & 0x08);
 14444     0B32  0020               	movlb	0	; select bank0
 14445     0B33  0863               	movf	_pBDTEntryIn,w
 14446     0B34  0086               	movwf	6
 14447     0B35  0864               	movf	_pBDTEntryIn+1,w
 14448     0B36  0087               	movwf	7
 14449     0B37  3048               	movlw	72
 14450     0B38  0081               	movwf	1
 14451                           
 14452                           ;usb/usb_device.c: 2646:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14453     0B39  0863               	movf	_pBDTEntryIn,w
 14454     0B3A  0086               	movwf	6
 14455     0B3B  0864               	movf	_pBDTEntryIn+1,w
 14456     0B3C  0087               	movwf	7
 14457     0B3D  1781               	bsf	1,7
 14458                           
 14459                           ;usb/usb_device.c: 2647:             }
 14460     0B3E  0008               	return
 14461     0B3F                     i1l4827:
 14462                           
 14463                           ;usb/usb_device.c: 2649:             {;usb/usb_device.c: 2650:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x00|(0x08 & 0x08);
 14464     0B3F  0020               	movlb	0	; select bank0
 14465     0B40  0863               	movf	_pBDTEntryIn,w
 14466     0B41  0086               	movwf	6
 14467     0B42  0864               	movf	_pBDTEntryIn+1,w
 14468     0B43  0087               	movwf	7
 14469     0B44  3008               	movlw	8
 14470     0B45  0081               	movwf	1
 14471                           
 14472                           ;usb/usb_device.c: 2651:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14473     0B46  0863               	movf	_pBDTEntryIn,w
 14474     0B47  0086               	movwf	6
 14475     0B48  0864               	movf	_pBDTEntryIn+1,w
 14476     0B49  0087               	movwf	7
 14477     0B4A  1781               	bsf	1,7
 14478     0B4B  0008               	return
 14479     0B4C                     i1l630:	
 14480                           ;usb/usb_device.c: 2655:  else
 14481                           
 14482                           
 14483                           ;usb/usb_device.c: 2656:  {;usb/usb_device.c: 2660:         if(outPipes[0].info.bits.bus
      +                          y == 1)
 14484     0B4C  0022               	movlb	2	; select bank2
 14485     0B4D  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 14486     0B4E  2B5E               	goto	i1l4835
 14487                           
 14488                           ;usb/usb_device.c: 2661:         {;usb/usb_device.c: 2662:             if(outPipes[0].pF
      +                          unc != ((void*)0))
 14489     0B4F  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 14490     0B50  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 14491     0B51  1903               	btfsc	3,2
 14492     0B52  2B5D               	goto	i1l4833
 14493                           
 14494                           ;usb/usb_device.c: 2663:             {;usb/usb_device.c: 2664:                 outPipes[
      +                          0].pFunc();
 14495     0B53  3005               	movlw	5
 14496     0B54  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 14497     0B55  0086               	movwf	6
 14498     0B56  3001               	movlw	1	; select bank2/3
 14499     0B57  0087               	movwf	7
 14500     0B58  3F41               	moviw [1]fsr1
 14501     0B59  008A               	movwf	10
 14502     0B5A  3F40               	moviw [0]fsr1
 14503     0B5B  000A               	callw
 14504     0B5C  318A               	pagesel	$
 14505     0B5D                     i1l4833:
 14506                           
 14507                           ;usb/usb_device.c: 2666:             outPipes[0].info.bits.busy = 0;
 14508     0B5D  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 14509     0B5E                     i1l4835:
 14510                           
 14511                           ;usb/usb_device.c: 2669:         controlTransferState = 0;
 14512     0B5E  0020               	movlb	0	; select bank0
 14513     0B5F  01EA               	clrf	_controlTransferState	;volatile
 14514     0B60  0008               	return
 14515     0B61                     __end_of_USBCtrlTrfInHandler:
 14516                           
 14517                           	psect	text77
 14518     1E92                     __ptext77:	
 14519 ;; *************** function _USBHIDCBSetReportComplete *****************
 14520 ;; Defined at:
 14521 ;;		line 524 in file "app_device_keyboard.c"
 14522 ;; Parameters:    Size  Location     Type
 14523 ;;		None
 14524 ;; Auto vars:     Size  Location     Type
 14525 ;;		None
 14526 ;; Return value:  Size  Location     Type
 14527 ;;                  1    wreg      void 
 14528 ;; Registers used:
 14529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14530 ;; Tracked objects:
 14531 ;;		On entry : 1F/2
 14532 ;;		On exit  : 1F/2
 14533 ;;		Unchanged: 0/0
 14534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14539 ;;Total ram usage:        0 bytes
 14540 ;; Hardware stack levels used: 1
 14541 ;; Hardware stack levels required when called: 2
 14542 ;; This function calls:
 14543 ;;		i1_APP_KeyboardProcessOutputReport
 14544 ;; This function is called by:
 14545 ;;		_USBHIDCBSetReportHandler
 14546 ;;		_USBCtrlTrfRxService
 14547 ;;		_USBCtrlTrfInHandler
 14548 ;; This function uses a non-reentrant model
 14549 ;;
 14550                           
 14551     1E92                     _USBHIDCBSetReportComplete:	
 14552                           ;psect for function _USBHIDCBSetReportComplete
 14553                           
 14554                           
 14555                           ;app_device_keyboard.c: 527:     outputReport.value = CtrlTrfData[0];
 14556                           
 14557                           ;incstack = 0
 14558                           ; Regs used in _USBHIDCBSetReportComplete: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 14559     1E92  0020               	movlb	0	; select bank0
 14560     1E93  0848               	movf	72,w	;volatile
 14561     1E94  0022               	movlb	2	; select bank2
 14562     1E95  00A0               	movwf	32	;volatile
 14563                           
 14564                           ;app_device_keyboard.c: 530:     APP_KeyboardProcessOutputReport();
 14565     1E96  3188  2000         	fcall	i1_APP_KeyboardProcessOutputReport
 14566     1E98  0008               	return
 14567     1E99                     __end_of_USBHIDCBSetReportComplete:
 14568                           
 14569                           	psect	text78
 14570     0800                     __ptext78:	
 14571 ;; *************** function i1_APP_KeyboardProcessOutputReport *****************
 14572 ;; Defined at:
 14573 ;;		line 519 in file "app_device_keyboard.c"
 14574 ;; Parameters:    Size  Location     Type
 14575 ;;		None
 14576 ;; Auto vars:     Size  Location     Type
 14577 ;;		None
 14578 ;; Return value:  Size  Location     Type
 14579 ;;                  1    wreg      void 
 14580 ;; Registers used:
 14581 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14582 ;; Tracked objects:
 14583 ;;		On entry : 1F/2
 14584 ;;		On exit  : 1F/2
 14585 ;;		Unchanged: 0/0
 14586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14591 ;;Total ram usage:        0 bytes
 14592 ;; Hardware stack levels used: 1
 14593 ;; Hardware stack levels required when called: 1
 14594 ;; This function calls:
 14595 ;;		i1_PS2Keyboard_SendCommand
 14596 ;; This function is called by:
 14597 ;;		_USBHIDCBSetReportComplete
 14598 ;; This function uses a non-reentrant model
 14599 ;;
 14600                           
 14601     0800                     i1_APP_KeyboardProcessOutputReport:	
 14602                           ;psect for function i1_APP_KeyboardProcessOutputReport
 14603                           
 14604                           
 14605                           ;app_device_keyboard.c: 520:     keyboard.leds.value = outputReport.value;
 14606                           
 14607                           ;incstack = 0
 14608                           ; Regs used in i1_APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+p
      +                          clath+cstack]
 14609     0800  3090               	movlw	144
 14610     0801  0086               	movwf	6
 14611     0802  3023               	movlw	35
 14612     0803  0087               	movwf	7
 14613     0804  0820               	movf	32,w	;volatile
 14614     0805  0081               	movwf	1
 14615                           
 14616                           ;app_device_keyboard.c: 521:     PS2Keyboard_SendCommand(0xED);
 14617     0806  30ED               	movlw	237
 14618     0807  3191  2115         	fcall	i1_PS2Keyboard_SendCommand
 14619     0809  0008               	return
 14620     080A                     __end_ofi1_APP_KeyboardProcessOutputReport:
 14621                           
 14622                           	psect	text79
 14623     1115                     __ptext79:	
 14624 ;; *************** function i1_PS2Keyboard_SendCommand *****************
 14625 ;; Defined at:
 14626 ;;		line 60 in file "ps2_keyboard.c"
 14627 ;; Parameters:    Size  Location     Type
 14628 ;;  cmd             1    wreg     unsigned char 
 14629 ;; Auto vars:     Size  Location     Type
 14630 ;;  cmd             1    0[COMMON] unsigned char 
 14631 ;; Return value:  Size  Location     Type
 14632 ;;                  1    wreg      void 
 14633 ;; Registers used:
 14634 ;;		wreg, status,2
 14635 ;; Tracked objects:
 14636 ;;		On entry : 1F/2
 14637 ;;		On exit  : 1F/2
 14638 ;;		Unchanged: 0/0
 14639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14643 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14644 ;;Total ram usage:        1 bytes
 14645 ;; Hardware stack levels used: 1
 14646 ;; This function calls:
 14647 ;;		Nothing
 14648 ;; This function is called by:
 14649 ;;		i1_APP_KeyboardProcessOutputReport
 14650 ;; This function uses a non-reentrant model
 14651 ;;
 14652                           
 14653     1115                     i1_PS2Keyboard_SendCommand:	
 14654                           ;psect for function i1_PS2Keyboard_SendCommand
 14655                           
 14656                           
 14657                           ;incstack = 0
 14658                           ; Regs used in i1_PS2Keyboard_SendCommand: [wreg+status,2]
 14659                           ;i1PS2Keyboard_SendCommand@cmd stored from wreg
 14660     1115  00F0               	movwf	i1PS2Keyboard_SendCommand@cmd
 14661                           
 14662                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
 14663     1116  0870               	movf	i1PS2Keyboard_SendCommand@cmd,w
 14664     1117  00CE               	movwf	_keyboardCommand^(0+256)	;volatile
 14665                           
 14666                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
 14667     1118  138B               	bcf	11,7	;volatile
 14668     1119  0021               	movlb	1	; select bank1
 14669     111A  120C               	bcf	12,4	;volatile
 14670     111B  0022               	movlb	2	; select bank2
 14671     111C  120C               	bcf	12,4	;volatile
 14672                           
 14673                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 14674     111D  30F0               	movlw	240
 14675     111E                     u643_27:
 14676     111E  3200               	nop2
 14677     111F  0B89               	decfsz	9,f
 14678     1120  291E               	goto	u643_27
 14679     1121  0021               	movlb	1	; select bank1
 14680     1122  160C               	bsf	12,4	;volatile
 14681                           
 14682                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
 14683     1123  0020               	movlb	0	; select bank0
 14684     1124  01E9               	clrf	_keyboardCommandCount	;volatile
 14685                           
 14686                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
 14687     1125  300C               	movlw	12
 14688     1126  0022               	movlb	2	; select bank2
 14689     1127  00CD               	movwf	_keyboardCommandBits^(0+256)	;volatile
 14690                           
 14691                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
 14692     1128  01CC               	clrf	_keyboardCommandOnes^(0+256)	;volatile
 14693     1129  0021               	movlb	1	; select bank1
 14694     112A  128C               	bcf	12,5	;volatile
 14695     112B  0022               	movlb	2	; select bank2
 14696     112C  128C               	bcf	12,5	;volatile
 14697                           
 14698                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
 14699     112D  178B               	bsf	11,7	;volatile
 14700     112E  0008               	return
 14701     112F                     __end_ofi1_PS2Keyboard_SendCommand:
 14702                           
 14703                           	psect	text80
 14704     16CA                     __ptext80:	
 14705 ;; *************** function _USBCtrlTrfTxService *****************
 14706 ;; Defined at:
 14707 ;;		line 1775 in file "usb/usb_device.c"
 14708 ;; Parameters:    Size  Location     Type
 14709 ;;		None
 14710 ;; Auto vars:     Size  Location     Type
 14711 ;;  byteToSend      1    2[COMMON] unsigned char 
 14712 ;; Return value:  Size  Location     Type
 14713 ;;                  1    wreg      void 
 14714 ;; Registers used:
 14715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 14716 ;; Tracked objects:
 14717 ;;		On entry : 1E/0
 14718 ;;		On exit  : 1C/0
 14719 ;;		Unchanged: 0/0
 14720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14723 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14724 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14725 ;;Total ram usage:        3 bytes
 14726 ;; Hardware stack levels used: 1
 14727 ;; This function calls:
 14728 ;;		Nothing
 14729 ;; This function is called by:
 14730 ;;		_USBCtrlEPAllowDataStage
 14731 ;;		_USBCtrlTrfInHandler
 14732 ;; This function uses a non-reentrant model
 14733 ;;
 14734                           
 14735     16CA                     _USBCtrlTrfTxService:	
 14736                           ;psect for function _USBCtrlTrfTxService
 14737                           
 14738                           
 14739                           ;usb/usb_device.c: 1777:     uint8_t byteToSend;;usb/usb_device.c: 1781:     byteToSend 
      +                          = 8;
 14740                           
 14741                           ;incstack = 0
 14742                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 14743     16CA  3008               	movlw	8
 14744     16CB  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 14745                           
 14746                           ;usb/usb_device.c: 1782:     if(inPipes[0].wCount.Val < (uint8_t)8)
 14747     16CC  3000               	movlw	0
 14748     16CD  0021               	movlb	1	; select bank1
 14749     16CE  026D               	subwf	((_inPipes+1)^(0+128)+3),w	;volatile
 14750     16CF  3008               	movlw	8
 14751     16D0  1903               	skipnz
 14752     16D1  026C               	subwf	(_inPipes^(0+128)+3),w	;volatile
 14753     16D2  1803               	skipnc
 14754     16D3  2EE1               	goto	i1l529
 14755                           
 14756                           ;usb/usb_device.c: 1783:     {;usb/usb_device.c: 1784:         byteToSend = inPipes[0].w
      +                          Count.Val;
 14757     16D4  086C               	movf	(_inPipes^(0+128)+3),w	;volatile
 14758     16D5  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 14759                           
 14760                           ;usb/usb_device.c: 1791:         if(shortPacketStatus == 0)
 14761     16D6  0022               	movlb	2	; select bank2
 14762     16D7  0862               	movf	_shortPacketStatus^(0+256),w	;volatile
 14763     16D8  1D03               	btfss	3,2
 14764     16D9  2EDC               	goto	i1l4105
 14765                           
 14766                           ;usb/usb_device.c: 1792:         {;usb/usb_device.c: 1793:             shortPacketStatus
      +                           = 1;
 14767     16DA  3001               	movlw	1
 14768     16DB  2EE0               	goto	L17
 14769     16DC                     i1l4105:	
 14770                           ;usb/usb_device.c: 1794:         }
 14771                           
 14772     16DC  0362               	decf	_shortPacketStatus^(0+256),w	;volatile
 14773     16DD  1D03               	btfss	3,2
 14774     16DE  2EE1               	goto	i1l529
 14775                           
 14776                           ;usb/usb_device.c: 1796:         {;usb/usb_device.c: 1797:             shortPacketStatus
      +                           = 2;
 14777     16DF  3002               	movlw	2
 14778     16E0                     L17:
 14779     16E0  00E2               	movwf	_shortPacketStatus^(0+256)	;volatile
 14780     16E1                     i1l529:	
 14781                           ;usb/usb_device.c: 1799:     }
 14782                           
 14783                           
 14784                           ;usb/usb_device.c: 1803:     inPipes[0].wCount.Val -= byteToSend;
 14785     16E1  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14786     16E2  00F0               	movwf	??_USBCtrlTrfTxService
 14787     16E3  01F1               	clrf	??_USBCtrlTrfTxService+1
 14788     16E4  0870               	movf	??_USBCtrlTrfTxService,w
 14789     16E5  0021               	movlb	1	; select bank1
 14790     16E6  02EC               	subwf	(_inPipes^(0+128)+3),f	;volatile
 14791     16E7  0871               	movf	??_USBCtrlTrfTxService+1,w
 14792     16E8  3BED               	subwfb	((_inPipes+1)^(0+128)+3),f	;volatile
 14793                           
 14794                           ;usb/usb_device.c: 1808:     pBDTEntryIn[0]->CNT = byteToSend;
 14795     16E9  0020               	movlb	0	; select bank0
 14796     16EA  0863               	movf	_pBDTEntryIn,w
 14797     16EB  3E01               	addlw	1
 14798     16EC  00F0               	movwf	??_USBCtrlTrfTxService
 14799     16ED  3000               	movlw	0
 14800     16EE  3D64               	addwfc	_pBDTEntryIn+1,w
 14801     16EF  00F1               	movwf	??_USBCtrlTrfTxService+1
 14802     16F0  0870               	movf	??_USBCtrlTrfTxService,w
 14803     16F1  0086               	movwf	6
 14804     16F2  0871               	movf	??_USBCtrlTrfTxService+1,w
 14805     16F3  0087               	movwf	7
 14806     16F4  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14807     16F5  0081               	movwf	1
 14808                           
 14809                           ;usb/usb_device.c: 1812:     pDst = (volatile uint8_t*)CtrlTrfData;
 14810     16F6  3048               	movlw	72
 14811     16F7  0022               	movlb	2	; select bank2
 14812     16F8  00E1               	movwf	_pDst^(0+256)
 14813                           
 14814                           ;usb/usb_device.c: 1813:     if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 14815     16F9  0021               	movlb	1	; select bank1
 14816     16FA  1C6B               	btfss	(_inPipes^(0+128)+2),0	;volatile
 14817     16FB  2F13               	goto	i1l4125
 14818     16FC  2F2D               	goto	i1l4135
 14819     16FD                     i1l4117:
 14820                           
 14821                           ;usb/usb_device.c: 1816:         {;usb/usb_device.c: 1817:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRom++;
 14822     16FD  0022               	movlb	2	; select bank2
 14823     16FE  0861               	movf	_pDst^(0+256),w
 14824     16FF  0086               	movwf	6
 14825     1700  0187               	clrf	7
 14826     1701  0021               	movlb	1	; select bank1
 14827     1702  0869               	movf	_inPipes^(0+128),w	;volatile
 14828     1703  0084               	movwf	4
 14829     1704  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 14830     1705  0085               	movwf	5
 14831     1706  0800               	movf	0,w	;code access
 14832     1707  0081               	movwf	1
 14833     1708  3001               	movlw	1
 14834     1709  07E9               	addwf	_inPipes^(0+128),f	;volatile
 14835     170A  3000               	movlw	0
 14836     170B  3DEA               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 14837     170C  3001               	movlw	1
 14838     170D  00F0               	movwf	??_USBCtrlTrfTxService
 14839     170E  0870               	movf	??_USBCtrlTrfTxService,w
 14840     170F  0022               	movlb	2	; select bank2
 14841     1710  07E1               	addwf	_pDst^(0+256),f
 14842                           
 14843                           ;usb/usb_device.c: 1818:             byteToSend--;
 14844     1711  3001               	movlw	1
 14845     1712  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 14846     1713                     i1l4125:
 14847                           
 14848                           ;usb/usb_device.c: 1815:         while(byteToSend)
 14849     1713  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14850     1714  1903               	btfsc	3,2
 14851     1715  0008               	return
 14852     1716  2EFD               	goto	i1l4117
 14853     1717                     i1l4127:
 14854                           
 14855                           ;usb/usb_device.c: 1824:         {;usb/usb_device.c: 1825:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRam++;
 14856     1717  0022               	movlb	2	; select bank2
 14857     1718  0861               	movf	_pDst^(0+256),w
 14858     1719  0086               	movwf	6
 14859     171A  0187               	clrf	7
 14860     171B  0021               	movlb	1	; select bank1
 14861     171C  0869               	movf	_inPipes^(0+128),w	;volatile
 14862     171D  0084               	movwf	4
 14863     171E  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 14864     171F  0085               	movwf	5
 14865     1720  0800               	movf	0,w	;code access
 14866     1721  0081               	movwf	1
 14867     1722  3001               	movlw	1
 14868     1723  07E9               	addwf	_inPipes^(0+128),f	;volatile
 14869     1724  3000               	movlw	0
 14870     1725  3DEA               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 14871     1726  3001               	movlw	1
 14872     1727  00F0               	movwf	??_USBCtrlTrfTxService
 14873     1728  0870               	movf	??_USBCtrlTrfTxService,w
 14874     1729  0022               	movlb	2	; select bank2
 14875     172A  07E1               	addwf	_pDst^(0+256),f
 14876                           
 14877                           ;usb/usb_device.c: 1826:             byteToSend--;
 14878     172B  3001               	movlw	1
 14879     172C  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 14880     172D                     i1l4135:
 14881                           
 14882                           ;usb/usb_device.c: 1823:         while(byteToSend)
 14883     172D  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14884     172E  1903               	btfsc	3,2
 14885     172F  0008               	return
 14886     1730  2F17               	goto	i1l4127
 14887     1731                     __end_of_USBCtrlTrfTxService:
 14888                           
 14889                           	psect	text81
 14890     1F13                     __ptext81:	
 14891 ;; *************** function _TMR2_ISR *****************
 14892 ;; Defined at:
 14893 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 14894 ;; Parameters:    Size  Location     Type
 14895 ;;		None
 14896 ;; Auto vars:     Size  Location     Type
 14897 ;;		None
 14898 ;; Return value:  Size  Location     Type
 14899 ;;                  1    wreg      void 
 14900 ;; Registers used:
 14901 ;;		wreg, status,2, status,0, pclath, cstack
 14902 ;; Tracked objects:
 14903 ;;		On entry : 1F/0
 14904 ;;		On exit  : 0/0
 14905 ;;		Unchanged: 0/0
 14906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14911 ;;Total ram usage:        0 bytes
 14912 ;; Hardware stack levels used: 1
 14913 ;; Hardware stack levels required when called: 1
 14914 ;; This function calls:
 14915 ;;		NULL
 14916 ;;		_SysTimeInterrupt
 14917 ;;		_TMR2_DefaultInterruptHandler
 14918 ;; This function is called by:
 14919 ;;		_INTERRUPT_InterruptManager
 14920 ;; This function uses a non-reentrant model
 14921 ;;
 14922                           
 14923     1F13                     _TMR2_ISR:	
 14924                           ;psect for function _TMR2_ISR
 14925                           
 14926                           
 14927                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 14928                           
 14929                           ;incstack = 0
 14930                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 14931     1F13  1091               	bcf	17,1	;volatile
 14932                           
 14933                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
 14934     1F14  0022               	movlb	2	; select bank2
 14935     1F15  0846               	movf	_TMR2_InterruptHandler^(0+256),w
 14936     1F16  0447               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 14937     1F17  1903               	btfsc	3,2
 14938     1F18  0008               	return
 14939                           
 14940                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
 14941     1F19  0847               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 14942     1F1A  008A               	movwf	10
 14943     1F1B  0846               	movf	_TMR2_InterruptHandler^(0+256),w
 14944     1F1C  000A               	callw
 14945     1F1D  319F               	pagesel	$
 14946     1F1E  0008               	return
 14947     1F1F                     __end_of_TMR2_ISR:
 14948                           
 14949                           	psect	text82
 14950     1EE9                     __ptext82:	
 14951 ;; *************** function _SysTimeInterrupt *****************
 14952 ;; Defined at:
 14953 ;;		line 24 in file "systime.c"
 14954 ;; Parameters:    Size  Location     Type
 14955 ;;		None
 14956 ;; Auto vars:     Size  Location     Type
 14957 ;;		None
 14958 ;; Return value:  Size  Location     Type
 14959 ;;                  1    wreg      void 
 14960 ;; Registers used:
 14961 ;;		wreg
 14962 ;; Tracked objects:
 14963 ;;		On entry : 1F/2
 14964 ;;		On exit  : 1F/2
 14965 ;;		Unchanged: 0/0
 14966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14971 ;;Total ram usage:        0 bytes
 14972 ;; Hardware stack levels used: 1
 14973 ;; This function calls:
 14974 ;;		Nothing
 14975 ;; This function is called by:
 14976 ;;		_SysTime_Init
 14977 ;;		_TMR2_ISR
 14978 ;; This function uses a non-reentrant model
 14979 ;;
 14980                           
 14981     1EE9                     _SysTimeInterrupt:	
 14982                           ;psect for function _SysTimeInterrupt
 14983                           
 14984                           
 14985                           ;systime.c: 26:     ++timeMs;
 14986                           
 14987                           ;incstack = 0
 14988                           ; Regs used in _SysTimeInterrupt: [wreg]
 14989     1EE9  3001               	movlw	1
 14990     1EEA  07A8               	addwf	_timeMs^(0+256),f
 14991     1EEB  3000               	movlw	0
 14992     1EEC  3DA9               	addwfc	(_timeMs+1)^(0+256),f
 14993     1EED  3000               	movlw	0
 14994     1EEE  3DAA               	addwfc	(_timeMs+2)^(0+256),f
 14995     1EEF  3000               	movlw	0
 14996     1EF0  3DAB               	addwfc	(_timeMs+3)^(0+256),f
 14997     1EF1  0008               	return
 14998     1EF2                     __end_of_SysTimeInterrupt:
 14999                           
 15000                           	psect	text83
 15001     07FE                     __ptext83:	
 15002 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 15003 ;; Defined at:
 15004 ;;		line 136 in file "mcc_generated_files/tmr2.c"
 15005 ;; Parameters:    Size  Location     Type
 15006 ;;		None
 15007 ;; Auto vars:     Size  Location     Type
 15008 ;;		None
 15009 ;; Return value:  Size  Location     Type
 15010 ;;                  1    wreg      void 
 15011 ;; Registers used:
 15012 ;;		None
 15013 ;; Tracked objects:
 15014 ;;		On entry : 1F/2
 15015 ;;		On exit  : 1F/2
 15016 ;;		Unchanged: 1F/0
 15017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;Total ram usage:        0 bytes
 15023 ;; Hardware stack levels used: 1
 15024 ;; This function calls:
 15025 ;;		Nothing
 15026 ;; This function is called by:
 15027 ;;		_TMR2_Initialize
 15028 ;;		_TMR2_ISR
 15029 ;; This function uses a non-reentrant model
 15030 ;;
 15031                           
 15032     07FE                     _TMR2_DefaultInterruptHandler:	
 15033                           ;psect for function _TMR2_DefaultInterruptHandler
 15034                           
 15035                           
 15036                           ;incstack = 0
 15037                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 15038     07FE  0008               	return
 15039     07FF                     __end_of_TMR2_DefaultInterruptHandler:
 15040                           
 15041                           	psect	text84
 15042     1EF2                     __ptext84:	
 15043 ;; *************** function _PIN_MANAGER_IOC *****************
 15044 ;; Defined at:
 15045 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 15046 ;; Parameters:    Size  Location     Type
 15047 ;;		None
 15048 ;; Auto vars:     Size  Location     Type
 15049 ;;		None
 15050 ;; Return value:  Size  Location     Type
 15051 ;;                  1    wreg      void 
 15052 ;; Registers used:
 15053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15054 ;; Tracked objects:
 15055 ;;		On entry : 0/0
 15056 ;;		On exit  : 1F/7
 15057 ;;		Unchanged: 0/0
 15058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15063 ;;Total ram usage:        0 bytes
 15064 ;; Hardware stack levels used: 1
 15065 ;; Hardware stack levels required when called: 4
 15066 ;; This function calls:
 15067 ;;		_IOCAF4_ISR
 15068 ;;		_IOCAF5_ISR
 15069 ;; This function is called by:
 15070 ;;		_INTERRUPT_InterruptManager
 15071 ;; This function uses a non-reentrant model
 15072 ;;
 15073                           
 15074     1EF2                     _PIN_MANAGER_IOC:	
 15075                           ;psect for function _PIN_MANAGER_IOC
 15076                           
 15077                           
 15078                           ;mcc_generated_files/pin_manager.c: 124:     if(IOCAFbits.IOCAF4 == 1)
 15079                           
 15080                           ;incstack = 0
 15081                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15082     1EF2  0027               	movlb	7	; select bank7
 15083     1EF3  1E13               	btfss	19,4	;volatile
 15084     1EF4  2EF8               	goto	i1l6255
 15085                           
 15086                           ;mcc_generated_files/pin_manager.c: 125:     {;mcc_generated_files/pin_manager.c: 126:  
      +                                 IOCAF4_ISR();
 15087     1EF5  319F  272B  319E   	fcall	_IOCAF4_ISR
 15088     1EF8                     i1l6255:
 15089                           
 15090                           ;mcc_generated_files/pin_manager.c: 129:     if(IOCAFbits.IOCAF5 == 1)
 15091     1EF8  1E93               	btfss	19,5	;volatile
 15092     1EF9  0008               	return
 15093                           
 15094                           ;mcc_generated_files/pin_manager.c: 130:     {;mcc_generated_files/pin_manager.c: 131:  
      +                                 IOCAF5_ISR();
 15095     1EFA  319F  2738         	fcall	_IOCAF5_ISR
 15096     1EFC  0008               	return
 15097     1EFD                     __end_of_PIN_MANAGER_IOC:
 15098                           
 15099                           	psect	text85
 15100     1F38                     __ptext85:	
 15101 ;; *************** function _IOCAF5_ISR *****************
 15102 ;; Defined at:
 15103 ;;		line 168 in file "mcc_generated_files/pin_manager.c"
 15104 ;; Parameters:    Size  Location     Type
 15105 ;;		None
 15106 ;; Auto vars:     Size  Location     Type
 15107 ;;		None
 15108 ;; Return value:  Size  Location     Type
 15109 ;;                  1    wreg      void 
 15110 ;; Registers used:
 15111 ;;		wreg, status,2, status,0, pclath, cstack
 15112 ;; Tracked objects:
 15113 ;;		On entry : 1F/7
 15114 ;;		On exit  : 1F/7
 15115 ;;		Unchanged: 0/0
 15116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15121 ;;Total ram usage:        0 bytes
 15122 ;; Hardware stack levels used: 1
 15123 ;; Hardware stack levels required when called: 2
 15124 ;; This function calls:
 15125 ;;		NULL
 15126 ;;		_IOCAF5_DefaultInterruptHandler
 15127 ;;		_PS2Keyboard_DataInterrupt
 15128 ;; This function is called by:
 15129 ;;		_PIN_MANAGER_IOC
 15130 ;; This function uses a non-reentrant model
 15131 ;;
 15132                           
 15133     1F38                     _IOCAF5_ISR:	
 15134                           ;psect for function _IOCAF5_ISR
 15135                           
 15136                           
 15137                           ;mcc_generated_files/pin_manager.c: 173:     if(IOCAF5_InterruptHandler)
 15138                           
 15139                           ;incstack = 0
 15140                           ; Regs used in _IOCAF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 15141     1F38  0023               	movlb	3	; select bank3
 15142     1F39  084D               	movf	_IOCAF5_InterruptHandler^(0+384),w
 15143     1F3A  044E               	iorwf	(_IOCAF5_InterruptHandler+1)^(0+384),w
 15144     1F3B  1903               	btfsc	3,2
 15145     1F3C  2F42               	goto	i1l5061
 15146                           
 15147                           ;mcc_generated_files/pin_manager.c: 174:     {;mcc_generated_files/pin_manager.c: 175:  
      +                                 IOCAF5_InterruptHandler();
 15148     1F3D  084E               	movf	(_IOCAF5_InterruptHandler+1)^(0+384),w
 15149     1F3E  008A               	movwf	10
 15150     1F3F  084D               	movf	_IOCAF5_InterruptHandler^(0+384),w
 15151     1F40  000A               	callw
 15152     1F41  319F               	pagesel	$
 15153     1F42                     i1l5061:
 15154                           
 15155                           ;mcc_generated_files/pin_manager.c: 177:     IOCAFbits.IOCAF5 = 0;
 15156     1F42  0027               	movlb	7	; select bank7
 15157     1F43  1293               	bcf	19,5	;volatile
 15158     1F44  0008               	return
 15159     1F45                     __end_of_IOCAF5_ISR:
 15160                           
 15161                           	psect	text86
 15162     07FF                     __ptext86:	
 15163 ;; *************** function _IOCAF5_DefaultInterruptHandler *****************
 15164 ;; Defined at:
 15165 ;;		line 190 in file "mcc_generated_files/pin_manager.c"
 15166 ;; Parameters:    Size  Location     Type
 15167 ;;		None
 15168 ;; Auto vars:     Size  Location     Type
 15169 ;;		None
 15170 ;; Return value:  Size  Location     Type
 15171 ;;                  1    wreg      void 
 15172 ;; Registers used:
 15173 ;;		None
 15174 ;; Tracked objects:
 15175 ;;		On entry : 1F/3
 15176 ;;		On exit  : 1F/3
 15177 ;;		Unchanged: 1E/0
 15178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;Total ram usage:        0 bytes
 15184 ;; Hardware stack levels used: 1
 15185 ;; This function calls:
 15186 ;;		Nothing
 15187 ;; This function is called by:
 15188 ;;		_PIN_MANAGER_Initialize
 15189 ;;		_IOCAF5_ISR
 15190 ;; This function uses a non-reentrant model
 15191 ;;
 15192                           
 15193     07FF                     _IOCAF5_DefaultInterruptHandler:	
 15194                           ;psect for function _IOCAF5_DefaultInterruptHandler
 15195                           
 15196                           
 15197                           ;incstack = 0
 15198                           ; Regs used in _IOCAF5_DefaultInterruptHandler: []
 15199     07FF  0008               	return
 15200     0800                     __end_of_IOCAF5_DefaultInterruptHandler:
 15201                           
 15202                           	psect	text87
 15203     1F6C                     __ptext87:	
 15204 ;; *************** function _PS2Keyboard_DataInterrupt *****************
 15205 ;; Defined at:
 15206 ;;		line 79 in file "ps2_keyboard.c"
 15207 ;; Parameters:    Size  Location     Type
 15208 ;;		None
 15209 ;; Auto vars:     Size  Location     Type
 15210 ;;		None
 15211 ;; Return value:  Size  Location     Type
 15212 ;;                  1    wreg      void 
 15213 ;; Registers used:
 15214 ;;		wreg, status,2, status,0, pclath, cstack
 15215 ;; Tracked objects:
 15216 ;;		On entry : 1F/3
 15217 ;;		On exit  : 1F/2
 15218 ;;		Unchanged: 0/0
 15219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;Total ram usage:        0 bytes
 15225 ;; Hardware stack levels used: 1
 15226 ;; Hardware stack levels required when called: 1
 15227 ;; This function calls:
 15228 ;;		_SysTime_GetCurrentTimeMs
 15229 ;; This function is called by:
 15230 ;;		_PS2Keyboard_Init
 15231 ;;		_IOCAF5_ISR
 15232 ;; This function uses a non-reentrant model
 15233 ;;
 15234                           
 15235     1F6C                     _PS2Keyboard_DataInterrupt:	
 15236                           ;psect for function _PS2Keyboard_DataInterrupt
 15237                           
 15238                           
 15239                           ;ps2_keyboard.c: 80:     if (keyboardState == KeyboardIdle) {
 15240                           
 15241                           ;incstack = 0
 15242                           ; Regs used in _PS2Keyboard_DataInterrupt: [wreg+status,2+status,0+pclath+cstack]
 15243     1F6C  0022               	movlb	2	; select bank2
 15244     1F6D  0855               	movf	_keyboardState^(0+256),w
 15245     1F6E  1D03               	btfss	3,2
 15246     1F6F  0008               	return
 15247                           
 15248                           ;ps2_keyboard.c: 81:         keyboardState = KeyboardStart;
 15249     1F70  3001               	movlw	1
 15250     1F71  00D5               	movwf	_keyboardState^(0+256)	;volatile
 15251                           
 15252                           ;ps2_keyboard.c: 82:         prevTimeMs = SysTime_GetCurrentTimeMs();
 15253     1F72  319E  26E0         	fcall	_SysTime_GetCurrentTimeMs
 15254     1F74  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 15255     1F75  00AF               	movwf	(_prevTimeMs+3)^(0+256)	;volatile
 15256     1F76  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 15257     1F77  00AE               	movwf	(_prevTimeMs+2)^(0+256)	;volatile
 15258     1F78  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 15259     1F79  00AD               	movwf	(_prevTimeMs+1)^(0+256)	;volatile
 15260     1F7A  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 15261     1F7B  00AC               	movwf	_prevTimeMs^(0+256)	;volatile
 15262     1F7C  0008               	return
 15263     1F7D                     __end_of_PS2Keyboard_DataInterrupt:
 15264                           
 15265                           	psect	text88
 15266     1F2B                     __ptext88:	
 15267 ;; *************** function _IOCAF4_ISR *****************
 15268 ;; Defined at:
 15269 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
 15270 ;; Parameters:    Size  Location     Type
 15271 ;;		None
 15272 ;; Auto vars:     Size  Location     Type
 15273 ;;		None
 15274 ;; Return value:  Size  Location     Type
 15275 ;;                  1    wreg      void 
 15276 ;; Registers used:
 15277 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15278 ;; Tracked objects:
 15279 ;;		On entry : 1F/7
 15280 ;;		On exit  : 1F/7
 15281 ;;		Unchanged: 0/0
 15282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15287 ;;Total ram usage:        0 bytes
 15288 ;; Hardware stack levels used: 1
 15289 ;; Hardware stack levels required when called: 3
 15290 ;; This function calls:
 15291 ;;		NULL
 15292 ;;		_IOCAF4_DefaultInterruptHandler
 15293 ;;		_PS2Keyboard_ClockInterrupt
 15294 ;; This function is called by:
 15295 ;;		_PIN_MANAGER_IOC
 15296 ;; This function uses a non-reentrant model
 15297 ;;
 15298                           
 15299     1F2B                     _IOCAF4_ISR:	
 15300                           ;psect for function _IOCAF4_ISR
 15301                           
 15302                           
 15303                           ;mcc_generated_files/pin_manager.c: 143:     if(IOCAF4_InterruptHandler)
 15304                           
 15305                           ;incstack = 0
 15306                           ; Regs used in _IOCAF4_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15307     1F2B  0022               	movlb	2	; select bank2
 15308     1F2C  086D               	movf	_IOCAF4_InterruptHandler^(0+256),w
 15309     1F2D  046E               	iorwf	(_IOCAF4_InterruptHandler+1)^(0+256),w
 15310     1F2E  1903               	btfsc	3,2
 15311     1F2F  2F35               	goto	i1l6167
 15312                           
 15313                           ;mcc_generated_files/pin_manager.c: 144:     {;mcc_generated_files/pin_manager.c: 145:  
      +                                 IOCAF4_InterruptHandler();
 15314     1F30  086E               	movf	(_IOCAF4_InterruptHandler+1)^(0+256),w
 15315     1F31  008A               	movwf	10
 15316     1F32  086D               	movf	_IOCAF4_InterruptHandler^(0+256),w
 15317     1F33  000A               	callw
 15318     1F34  319F               	pagesel	$
 15319     1F35                     i1l6167:
 15320                           
 15321                           ;mcc_generated_files/pin_manager.c: 147:     IOCAFbits.IOCAF4 = 0;
 15322     1F35  0027               	movlb	7	; select bank7
 15323     1F36  1213               	bcf	19,4	;volatile
 15324     1F37  0008               	return
 15325     1F38                     __end_of_IOCAF4_ISR:
 15326                           
 15327                           	psect	text89
 15328     0003                     __ptext89:	
 15329 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
 15330 ;; Defined at:
 15331 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
 15332 ;; Parameters:    Size  Location     Type
 15333 ;;		None
 15334 ;; Auto vars:     Size  Location     Type
 15335 ;;		None
 15336 ;; Return value:  Size  Location     Type
 15337 ;;                  1    wreg      void 
 15338 ;; Registers used:
 15339 ;;		None
 15340 ;; Tracked objects:
 15341 ;;		On entry : 1F/2
 15342 ;;		On exit  : 1F/2
 15343 ;;		Unchanged: 1F/0
 15344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15349 ;;Total ram usage:        0 bytes
 15350 ;; Hardware stack levels used: 1
 15351 ;; This function calls:
 15352 ;;		Nothing
 15353 ;; This function is called by:
 15354 ;;		_PIN_MANAGER_Initialize
 15355 ;;		_IOCAF4_ISR
 15356 ;; This function uses a non-reentrant model
 15357 ;;
 15358                           
 15359     0003                     _IOCAF4_DefaultInterruptHandler:	
 15360                           ;psect for function _IOCAF4_DefaultInterruptHandler
 15361                           
 15362                           
 15363                           ;incstack = 0
 15364                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
 15365     0003  0008               	return
 15366     0004                     __end_of_IOCAF4_DefaultInterruptHandler:
 15367                           
 15368                           	psect	text90
 15369     04FA                     __ptext90:	
 15370 ;; *************** function _PS2Keyboard_ClockInterrupt *****************
 15371 ;; Defined at:
 15372 ;;		line 86 in file "ps2_keyboard.c"
 15373 ;; Parameters:    Size  Location     Type
 15374 ;;		None
 15375 ;; Auto vars:     Size  Location     Type
 15376 ;;  bit             1   13[COMMON] _Bool 
 15377 ;;  bitPos          1   12[COMMON] unsigned char 
 15378 ;; Return value:  Size  Location     Type
 15379 ;;                  1    wreg      void 
 15380 ;; Registers used:
 15381 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15382 ;; Tracked objects:
 15383 ;;		On entry : 1F/2
 15384 ;;		On exit  : 1F/2
 15385 ;;		Unchanged: 0/0
 15386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15389 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15390 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;Total ram usage:        6 bytes
 15392 ;; Hardware stack levels used: 1
 15393 ;; Hardware stack levels required when called: 2
 15394 ;; This function calls:
 15395 ;;		_SysTime_GetCurrentTimeMs
 15396 ;;		i1_GenericQueue_Enqueue
 15397 ;; This function is called by:
 15398 ;;		_PS2Keyboard_Init
 15399 ;;		_IOCAF4_ISR
 15400 ;; This function uses a non-reentrant model
 15401 ;;
 15402                           
 15403     04FA                     _PS2Keyboard_ClockInterrupt:	
 15404                           ;psect for function _PS2Keyboard_ClockInterrupt
 15405                           
 15406                           
 15407                           ;ps2_keyboard.c: 88:     if (keyboardCommandBits > 0) {
 15408                           
 15409                           ;incstack = 0
 15410                           ; Regs used in _PS2Keyboard_ClockInterrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15411     04FA  084D               	movf	_keyboardCommandBits^(0+256),w	;volatile
 15412     04FB  1903               	btfsc	3,2
 15413     04FC  2D3D               	goto	i1l6101
 15414                           
 15415                           ;ps2_keyboard.c: 89:         if(keyboardCommandCount > 0 && keyboardCommandCount < 9) {
 15416     04FD  0020               	movlb	0	; select bank0
 15417     04FE  0869               	movf	_keyboardCommandCount,w	;volatile
 15418     04FF  1903               	btfsc	3,2
 15419     0500  2D25               	goto	i1l6093
 15420     0501  3009               	movlw	9
 15421     0502  0269               	subwf	_keyboardCommandCount,w	;volatile
 15422     0503  1803               	skipnc
 15423     0504  2D25               	goto	i1l6093
 15424                           
 15425                           ;ps2_keyboard.c: 90:             uint8_t bitPos = keyboardCommandCount - 1;
 15426     0505  0869               	movf	_keyboardCommandCount,w	;volatile
 15427     0506  3EFF               	addlw	255
 15428     0507  00FC               	movwf	PS2Keyboard_ClockInterrupt@bitPos
 15429                           
 15430                           ;ps2_keyboard.c: 91:             _Bool bit = (keyboardCommand >> bitPos) & 1;
 15431     0508  0022               	movlb	2	; select bank2
 15432     0509  084E               	movf	_keyboardCommand^(0+256),w	;volatile
 15433     050A  0020               	movlb	0	; select bank0
 15434     050B  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15435     050C  0A7C               	incf	PS2Keyboard_ClockInterrupt@bitPos,w
 15436     050D  2D0F               	goto	u568_24
 15437     050E                     u568_25:
 15438     050E  36DC               	lsrf	??_PS2Keyboard_ClockInterrupt,f
 15439     050F                     u568_24:
 15440     050F  0B89               	decfsz	9,f
 15441     0510  2D0E               	goto	u568_25
 15442     0511  1C5C               	btfss	??_PS2Keyboard_ClockInterrupt,0
 15443     0512  2D15               	goto	u569_20
 15444     0513  3001               	movlw	1
 15445     0514  2D16               	goto	u570_20
 15446     0515                     u569_20:
 15447     0515  3000               	movlw	0
 15448     0516                     u570_20:
 15449     0516  00FD               	movwf	PS2Keyboard_ClockInterrupt@bit
 15450                           
 15451                           ;ps2_keyboard.c: 92:             if(bit) {
 15452     0517  087D               	movf	PS2Keyboard_ClockInterrupt@bit,w
 15453     0518  1903               	btfsc	3,2
 15454     0519  2D23               	goto	i1l1033
 15455                           
 15456                           ;ps2_keyboard.c: 93:                 do { LATAbits.LATA5 = 1; } while(0);
 15457     051A  0022               	movlb	2	; select bank2
 15458     051B  168C               	bsf	12,5	;volatile
 15459                           
 15460                           ;ps2_keyboard.c: 94:                 keyboardCommandOnes += 1;
 15461     051C  3001               	movlw	1
 15462     051D  0020               	movlb	0	; select bank0
 15463     051E  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15464     051F  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15465     0520  0022               	movlb	2	; select bank2
 15466     0521  07CC               	addwf	_keyboardCommandOnes^(0+256),f	;volatile
 15467                           
 15468                           ;ps2_keyboard.c: 95:             } else {
 15469     0522  2D34               	goto	i1l6099
 15470     0523                     i1l1033:	
 15471                           ;ps2_keyboard.c: 96:                 do { LATAbits.LATA5 = 0; } while(0);
 15472                           
 15473     0523  0022               	movlb	2	; select bank2
 15474     0524  2D2C               	goto	i1l1038
 15475     0525                     i1l6093:
 15476     0525  3009               	movlw	9
 15477     0526  0669               	xorwf	_keyboardCommandCount,w	;volatile
 15478     0527  1D03               	btfss	3,2
 15479     0528  2D2E               	goto	i1l6097
 15480                           
 15481                           ;ps2_keyboard.c: 99:             if(keyboardCommandOnes & 1) {
 15482     0529  0022               	movlb	2	; select bank2
 15483     052A  1C4C               	btfss	_keyboardCommandOnes^(0+256),0	;volatile
 15484     052B  2D33               	goto	L18
 15485     052C                     i1l1038:	
 15486                           ;ps2_keyboard.c: 100:                 do { LATAbits.LATA5 = 0; } while(0);
 15487                           
 15488     052C  128C               	bcf	12,5	;volatile
 15489     052D  2D34               	goto	i1l6099
 15490     052E                     i1l6097:	
 15491                           ;ps2_keyboard.c: 102:                 do { LATAbits.LATA5 = 1; } while(0);
 15492                           
 15493     052E  300A               	movlw	10
 15494     052F  0669               	xorwf	_keyboardCommandCount,w	;volatile
 15495     0530  1D03               	btfss	3,2
 15496     0531  2D34               	goto	i1l6099
 15497                           
 15498                           ;ps2_keyboard.c: 105:             do { TRISAbits.TRISA5 = 1; } while(0);
 15499     0532  0021               	movlb	1	; select bank1
 15500     0533                     L18:
 15501     0533  168C               	bsf	12,5	;volatile
 15502     0534                     i1l6099:
 15503                           
 15504                           ;ps2_keyboard.c: 107:         keyboardCommandCount += 1;
 15505     0534  3001               	movlw	1
 15506     0535  0020               	movlb	0	; select bank0
 15507     0536  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15508     0537  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15509     0538  07E9               	addwf	_keyboardCommandCount,f	;volatile
 15510                           
 15511                           ;ps2_keyboard.c: 108:         keyboardCommandBits -= 1;
 15512     0539  3001               	movlw	1
 15513     053A  0022               	movlb	2	; select bank2
 15514     053B  02CD               	subwf	_keyboardCommandBits^(0+256),f	;volatile
 15515                           
 15516                           ;ps2_keyboard.c: 109:     } else {
 15517     053C  0008               	return
 15518     053D                     i1l6101:
 15519                           
 15520                           ;ps2_keyboard.c: 110:         if (SysTime_GetCurrentTimeMs() - prevTimeMs >= 250) {
 15521     053D  319E  26E0  3184   	fcall	_SysTime_GetCurrentTimeMs
 15522     0540  082C               	movf	_prevTimeMs^(0+256),w	;volatile
 15523     0541  0270               	subwf	?_SysTime_GetCurrentTimeMs,w
 15524     0542  0020               	movlb	0	; select bank0
 15525     0543  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15526     0544  0022               	movlb	2	; select bank2
 15527     0545  082D               	movf	(_prevTimeMs+1)^(0+256),w	;volatile
 15528     0546  3B71               	subwfb	?_SysTime_GetCurrentTimeMs+1,w
 15529     0547  0020               	movlb	0	; select bank0
 15530     0548  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 15531     0549  0022               	movlb	2	; select bank2
 15532     054A  082E               	movf	(_prevTimeMs+2)^(0+256),w	;volatile
 15533     054B  3B72               	subwfb	?_SysTime_GetCurrentTimeMs+2,w
 15534     054C  0020               	movlb	0	; select bank0
 15535     054D  00DE               	movwf	??_PS2Keyboard_ClockInterrupt+2
 15536     054E  0022               	movlb	2	; select bank2
 15537     054F  082F               	movf	(_prevTimeMs+3)^(0+256),w	;volatile
 15538     0550  3B73               	subwfb	?_SysTime_GetCurrentTimeMs+3,w
 15539     0551  0020               	movlb	0	; select bank0
 15540     0552  00DF               	movwf	??_PS2Keyboard_ClockInterrupt+3
 15541     0553  085F               	movf	??_PS2Keyboard_ClockInterrupt+3,w
 15542     0554  1D03               	btfss	3,2
 15543     0555  2D60               	goto	i1l6103
 15544     0556  085E               	movf	??_PS2Keyboard_ClockInterrupt+2,w
 15545     0557  1D03               	btfss	3,2
 15546     0558  2D60               	goto	i1l6103
 15547     0559  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15548     055A  1D03               	btfss	3,2
 15549     055B  2D60               	goto	i1l6103
 15550     055C  30FA               	movlw	250
 15551     055D  025C               	subwf	??_PS2Keyboard_ClockInterrupt,w
 15552     055E  1C03               	btfss	3,0
 15553     055F  2DCC               	goto	i1l6155
 15554     0560                     i1l6103:
 15555                           
 15556                           ;ps2_keyboard.c: 111:             keyboardState = KeyboardStart;
 15557     0560  3001               	movlw	1
 15558     0561  0022               	movlb	2	; select bank2
 15559     0562  00D5               	movwf	_keyboardState^(0+256)	;volatile
 15560     0563  2DCC               	goto	i1l6155
 15561     0564                     i1l6105:
 15562                           
 15563                           ;ps2_keyboard.c: 115:                 keyboardIndexData = 0;
 15564     0564  0022               	movlb	2	; select bank2
 15565     0565  01D4               	clrf	_keyboardIndexData^(0+256)	;volatile
 15566                           
 15567                           ;ps2_keyboard.c: 116:                 keyboardOnesCount = 0;
 15568     0566  01D3               	clrf	_keyboardOnesCount^(0+256)	;volatile
 15569                           
 15570                           ;ps2_keyboard.c: 117:                 keyboardScanCode.value = 0;
 15571     0567  01E8               	clrf	_keyboardScanCode^(0+256)
 15572     0568                     i1l6107:
 15573                           
 15574                           ;ps2_keyboard.c: 118:                 keyboardState = KeyboardData;
 15575     0568  3002               	movlw	2
 15576     0569  2DA2               	goto	L20
 15577     056A                     i1l6109:	
 15578                           ;ps2_keyboard.c: 119:                 break;
 15579                           
 15580                           
 15581                           ;ps2_keyboard.c: 121:                 keyboardData = PORTAbits.RA5;
 15582     056A  3000               	movlw	0
 15583     056B  1A8C               	btfsc	12,5	;volatile
 15584     056C  3001               	movlw	1
 15585     056D  0022               	movlb	2	; select bank2
 15586     056E  00D1               	movwf	_keyboardData^(0+256)	;volatile
 15587                           
 15588                           ;ps2_keyboard.c: 122:                 keyboardScanCode.value |= keyboardData << keyboard
      +                          IndexData;
 15589     056F  0851               	movf	_keyboardData^(0+256),w	;volatile
 15590     0570  0020               	movlb	0	; select bank0
 15591     0571  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15592     0572  0022               	movlb	2	; select bank2
 15593     0573  0A54               	incf	_keyboardIndexData^(0+256),w	;volatile
 15594     0574  0020               	movlb	0	; select bank0
 15595     0575  2D77               	goto	u576_24
 15596     0576                     u576_25:
 15597     0576  35DC               	lslf	??_PS2Keyboard_ClockInterrupt,f
 15598     0577                     u576_24:
 15599     0577  0B89               	decfsz	9,f
 15600     0578  2D76               	goto	u576_25
 15601     0579  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15602     057A  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 15603     057B  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15604     057C  0022               	movlb	2	; select bank2
 15605     057D  04E8               	iorwf	_keyboardScanCode^(0+256),f
 15606                           
 15607                           ;ps2_keyboard.c: 123:                 keyboardOnesCount += keyboardData;
 15608     057E  0851               	movf	_keyboardData^(0+256),w	;volatile
 15609     057F  0020               	movlb	0	; select bank0
 15610     0580  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15611     0581  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15612     0582  0022               	movlb	2	; select bank2
 15613     0583  07D3               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 15614                           
 15615                           ;ps2_keyboard.c: 124:                 keyboardIndexData += 1;
 15616     0584  3001               	movlw	1
 15617     0585  0020               	movlb	0	; select bank0
 15618     0586  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15619     0587  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15620     0588  0022               	movlb	2	; select bank2
 15621     0589  07D4               	addwf	_keyboardIndexData^(0+256),f	;volatile
 15622                           
 15623                           ;ps2_keyboard.c: 125:                 if (keyboardIndexData == 8) {
 15624     058A  3008               	movlw	8
 15625     058B  0654               	xorwf	_keyboardIndexData^(0+256),w	;volatile
 15626     058C  1D03               	btfss	3,2
 15627     058D  2D68               	goto	i1l6107
 15628                           
 15629                           ;ps2_keyboard.c: 126:                     keyboardState = KeyboardParity;
 15630     058E  3003               	movlw	3
 15631     058F  2DA2               	goto	L20
 15632     0590                     i1l6123:	
 15633                           ;ps2_keyboard.c: 127:                 } else {
 15634                           
 15635                           
 15636                           ;ps2_keyboard.c: 132:                 keyboardData = PORTAbits.RA5;
 15637     0590  3000               	movlw	0
 15638     0591  1A8C               	btfsc	12,5	;volatile
 15639     0592  3001               	movlw	1
 15640     0593  0022               	movlb	2	; select bank2
 15641     0594  00D1               	movwf	_keyboardData^(0+256)	;volatile
 15642                           
 15643                           ;ps2_keyboard.c: 133:                 keyboardOnesCount += keyboardData;
 15644     0595  0851               	movf	_keyboardData^(0+256),w	;volatile
 15645     0596  0020               	movlb	0	; select bank0
 15646     0597  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15647     0598  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15648     0599  0022               	movlb	2	; select bank2
 15649     059A  07D3               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 15650                           
 15651                           ;ps2_keyboard.c: 134:                 keyboardScanCodeValid = keyboardOnesCount & 0x01;
 15652     059B  1C53               	btfss	_keyboardOnesCount^(0+256),0	;volatile
 15653     059C  2D9F               	goto	u578_20
 15654     059D  3001               	movlw	1
 15655     059E  2DA0               	goto	u579_20
 15656     059F                     u578_20:
 15657     059F  3000               	movlw	0
 15658     05A0                     u579_20:
 15659     05A0  00D2               	movwf	_keyboardScanCodeValid^(0+256)	;volatile
 15660                           
 15661                           ;ps2_keyboard.c: 135:                 keyboardState = KeyboardStop;
 15662     05A1  3004               	movlw	4
 15663     05A2                     L20:
 15664     05A2  00D5               	movwf	_keyboardState^(0+256)	;volatile
 15665                           
 15666                           ;ps2_keyboard.c: 136:                 break;
 15667     05A3  2DE4               	goto	i1l6157
 15668     05A4                     i1l6131:
 15669                           
 15670                           ;ps2_keyboard.c: 138:                 if (keyboardScanCode.value == 0xE0) {
 15671     05A4  30E0               	movlw	224
 15672     05A5  0022               	movlb	2	; select bank2
 15673     05A6  0668               	xorwf	_keyboardScanCode^(0+256),w
 15674     05A7  1D03               	btfss	3,2
 15675     05A8  2DAC               	goto	i1l6135
 15676                           
 15677                           ;ps2_keyboard.c: 139:                     keyboardIsExtend = 1;
 15678     05A9  3001               	movlw	1
 15679     05AA  00D0               	movwf	_keyboardIsExtend^(0+256)	;volatile
 15680                           
 15681                           ;ps2_keyboard.c: 140:                 } else if (keyboardScanCode.value == 0xF0) {
 15682     05AB  2DC9               	goto	i1l6149
 15683     05AC                     i1l6135:
 15684     05AC  30F0               	movlw	240
 15685     05AD  0668               	xorwf	_keyboardScanCode^(0+256),w
 15686     05AE  1D03               	btfss	3,2
 15687     05AF  2DB3               	goto	i1l6139
 15688                           
 15689                           ;ps2_keyboard.c: 141:                     keyboardIsBreak = 1;
 15690     05B0  3001               	movlw	1
 15691     05B1  00CF               	movwf	_keyboardIsBreak^(0+256)	;volatile
 15692                           
 15693                           ;ps2_keyboard.c: 142:                 } else {
 15694     05B2  2DC9               	goto	i1l6149
 15695     05B3                     i1l6139:
 15696                           
 15697                           ;ps2_keyboard.c: 143:                     keyboardScanCode.isBreak = keyboardIsBreak;
 15698     05B3  084F               	movf	_keyboardIsBreak^(0+256),w	;volatile
 15699     05B4  00EA               	movwf	(_keyboardScanCode^(0+256)+2)
 15700                           
 15701                           ;ps2_keyboard.c: 144:                     keyboardScanCode.isExtend = keyboardIsExtend;
 15702     05B5  0850               	movf	_keyboardIsExtend^(0+256),w	;volatile
 15703     05B6  00E9               	movwf	(_keyboardScanCode^(0+256)+1)
 15704                           
 15705                           ;ps2_keyboard.c: 145:                     if (keyboardScanCodeValid) {
 15706     05B7  0852               	movf	_keyboardScanCodeValid^(0+256),w	;volatile
 15707     05B8  1903               	btfsc	3,2
 15708     05B9  2DC6               	goto	i1l6145
 15709                           
 15710                           ;ps2_keyboard.c: 146:                         GenericQueue_Enqueue(&keyboardScanCodeQueu
      +                          e, &keyboardScanCode);
 15711     05BA  3091               	movlw	145
 15712     05BB  0020               	movlb	0	; select bank0
 15713     05BC  00D5               	movwf	i1GenericQueue_Enqueue@q
 15714     05BD  3023               	movlw	35
 15715     05BE  00D6               	movwf	i1GenericQueue_Enqueue@q+1
 15716     05BF  3068               	movlw	low _keyboardScanCode
 15717     05C0  00D7               	movwf	i1GenericQueue_Enqueue@item
 15718     05C1  3001               	movlw	high _keyboardScanCode
 15719     05C2  00D8               	movwf	i1GenericQueue_Enqueue@item+1
 15720     05C3  3197  2798  3184   	fcall	i1_GenericQueue_Enqueue
 15721     05C6                     i1l6145:
 15722                           
 15723                           ;ps2_keyboard.c: 148:                     keyboardIsBreak = 0;
 15724     05C6  0022               	movlb	2	; select bank2
 15725     05C7  01CF               	clrf	_keyboardIsBreak^(0+256)	;volatile
 15726                           
 15727                           ;ps2_keyboard.c: 149:                     keyboardIsExtend = 0;
 15728     05C8  01D0               	clrf	_keyboardIsExtend^(0+256)	;volatile
 15729     05C9                     i1l6149:
 15730                           
 15731                           ;ps2_keyboard.c: 151:                 keyboardState = KeyboardIdle;
 15732     05C9  0022               	movlb	2	; select bank2
 15733     05CA  01D5               	clrf	_keyboardState^(0+256)	;volatile
 15734                           
 15735                           ;ps2_keyboard.c: 152:                 break;
 15736     05CB  2DE4               	goto	i1l6157
 15737     05CC                     i1l6155:
 15738     05CC  0022               	movlb	2	; select bank2
 15739     05CD  0855               	movf	_keyboardState^(0+256),w	;volatile
 15740     05CE  0020               	movlb	0	; select bank0
 15741     05CF  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15742     05D0  01DD               	clrf	??_PS2Keyboard_ClockInterrupt+1
 15743                           
 15744                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15745                           ; Switch size 1, requested type "simple"
 15746                           ; Number of cases is 1, Range of values is 0 to 0
 15747                           ; switch strategies available:
 15748                           ; Name         Instructions Cycles
 15749                           ; simple_byte            4     3 (average)
 15750                           ; direct_byte            8     6 (fixed)
 15751                           ; jumptable            260     6 (fixed)
 15752                           ;	Chosen strategy is simple_byte
 15753     05D1  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15754     05D2  3A00               	xorlw	0	; case 0
 15755     05D3  1903               	skipnz
 15756     05D4  2DD6               	goto	i1l6587
 15757     05D5  2DC9               	goto	i1l6149
 15758     05D6                     i1l6587:
 15759                           
 15760                           ; Switch size 1, requested type "simple"
 15761                           ; Number of cases is 4, Range of values is 1 to 4
 15762                           ; switch strategies available:
 15763                           ; Name         Instructions Cycles
 15764                           ; simple_byte           13     7 (average)
 15765                           ; direct_byte           17     9 (fixed)
 15766                           ; jumptable            263     9 (fixed)
 15767                           ;	Chosen strategy is simple_byte
 15768     05D6  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15769     05D7  3A01               	xorlw	1	; case 1
 15770     05D8  1903               	skipnz
 15771     05D9  2D64               	goto	i1l6105
 15772     05DA  3A03               	xorlw	3	; case 2
 15773     05DB  1903               	skipnz
 15774     05DC  2D6A               	goto	i1l6109
 15775     05DD  3A01               	xorlw	1	; case 3
 15776     05DE  1903               	skipnz
 15777     05DF  2D90               	goto	i1l6123
 15778     05E0  3A07               	xorlw	7	; case 4
 15779     05E1  1903               	skipnz
 15780     05E2  2DA4               	goto	i1l6131
 15781     05E3  2DC9               	goto	i1l6149
 15782     05E4                     i1l6157:
 15783                           
 15784                           ;ps2_keyboard.c: 157:         prevTimeMs = SysTime_GetCurrentTimeMs();
 15785     05E4  319E  26E0         	fcall	_SysTime_GetCurrentTimeMs
 15786     05E6  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 15787     05E7  00AF               	movwf	(_prevTimeMs+3)^(0+256)	;volatile
 15788     05E8  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 15789     05E9  00AE               	movwf	(_prevTimeMs+2)^(0+256)	;volatile
 15790     05EA  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 15791     05EB  00AD               	movwf	(_prevTimeMs+1)^(0+256)	;volatile
 15792     05EC  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 15793     05ED  00AC               	movwf	_prevTimeMs^(0+256)	;volatile
 15794     05EE  0008               	return
 15795     05EF                     __end_of_PS2Keyboard_ClockInterrupt:
 15796                           
 15797                           	psect	text91
 15798     1798                     __ptext91:	
 15799 ;; *************** function i1_GenericQueue_Enqueue *****************
 15800 ;; Defined at:
 15801 ;;		line 19 in file "generic_queue.c"
 15802 ;; Parameters:    Size  Location     Type
 15803 ;;  q               2    5[BANK0 ] PTR struct .
 15804 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 15805 ;;  item            2    7[BANK0 ] PTR const void 
 15806 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2855(1), 
 15807 ;; Auto vars:     Size  Location     Type
 15808 ;;		None
 15809 ;; Return value:  Size  Location     Type
 15810 ;;                  1    wreg      void 
 15811 ;; Registers used:
 15812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15813 ;; Tracked objects:
 15814 ;;		On entry : 1F/0
 15815 ;;		On exit  : 1F/0
 15816 ;;		Unchanged: 0/0
 15817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15818 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15820 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15821 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15822 ;;Total ram usage:        7 bytes
 15823 ;; Hardware stack levels used: 1
 15824 ;; Hardware stack levels required when called: 1
 15825 ;; This function calls:
 15826 ;;		i1_GenericQueue_IsFull
 15827 ;;		i1___awmod
 15828 ;;		i1___wmul
 15829 ;;		i1_memcpy
 15830 ;; This function is called by:
 15831 ;;		_PS2Keyboard_ClockInterrupt
 15832 ;; This function uses a non-reentrant model
 15833 ;;
 15834                           
 15835     1798                     i1_GenericQueue_Enqueue:	
 15836                           ;psect for function i1_GenericQueue_Enqueue
 15837                           
 15838                           
 15839                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
 15840                           
 15841                           ;incstack = 0
 15842                           ; Regs used in i1_GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15843     1798  0856               	movf	i1GenericQueue_Enqueue@q+1,w
 15844     1799  00F1               	movwf	i1GenericQueue_IsFull@q+1
 15845     179A  0855               	movf	i1GenericQueue_Enqueue@q,w
 15846     179B  00F0               	movwf	i1GenericQueue_IsFull@q
 15847     179C  319F  27C3  3197   	fcall	i1_GenericQueue_IsFull
 15848     179F  0870               	movf	?i1_GenericQueue_IsFull,w
 15849     17A0  0471               	iorwf	?i1_GenericQueue_IsFull+1,w
 15850     17A1  1D03               	btfss	3,2
 15851     17A2  0008               	return
 15852                           
 15853                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
 15854     17A3  0855               	movf	i1GenericQueue_Enqueue@q,w
 15855     17A4  3E5D               	addlw	93
 15856     17A5  0086               	movwf	6
 15857     17A6  3000               	movlw	0
 15858     17A7  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15859     17A8  0087               	movwf	7
 15860     17A9  0801               	movf	1,w
 15861     17AA  00D9               	movwf	??i1_GenericQueue_Enqueue
 15862     17AB  01DA               	clrf	??i1_GenericQueue_Enqueue+1
 15863     17AC  0859               	movf	??i1_GenericQueue_Enqueue,w
 15864     17AD  00F0               	movwf	i1___wmul@multiplier
 15865     17AE  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 15866     17AF  00F1               	movwf	i1___wmul@multiplier+1
 15867     17B0  0855               	movf	i1GenericQueue_Enqueue@q,w
 15868     17B1  3E5A               	addlw	90
 15869     17B2  0086               	movwf	6
 15870     17B3  3000               	movlw	0
 15871     17B4  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15872     17B5  0087               	movwf	7
 15873     17B6  3F40               	moviw [0]fsr1
 15874     17B7  00F2               	movwf	i1___wmul@multiplicand
 15875     17B8  3F41               	moviw [1]fsr1
 15876     17B9  00F3               	movwf	i1___wmul@multiplicand+1
 15877     17BA  3191  212F  3197   	fcall	i1___wmul
 15878     17BD  0870               	movf	?i1___wmul,w
 15879     17BE  0755               	addwf	i1GenericQueue_Enqueue@q,w
 15880     17BF  00F6               	movwf	i1memcpy@d1
 15881     17C0  0871               	movf	?i1___wmul+1,w
 15882     17C1  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15883     17C2  00F7               	movwf	i1memcpy@d1+1
 15884     17C3  0858               	movf	i1GenericQueue_Enqueue@item+1,w
 15885     17C4  00F9               	movwf	i1memcpy@s1+1
 15886     17C5  0857               	movf	i1GenericQueue_Enqueue@item,w
 15887     17C6  00F8               	movwf	i1memcpy@s1
 15888     17C7  0855               	movf	i1GenericQueue_Enqueue@q,w
 15889     17C8  3E5A               	addlw	90
 15890     17C9  0086               	movwf	6
 15891     17CA  3000               	movlw	0
 15892     17CB  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15893     17CC  0087               	movwf	7
 15894     17CD  3F40               	moviw [0]fsr1
 15895     17CE  00FA               	movwf	i1memcpy@n
 15896     17CF  3F41               	moviw [1]fsr1
 15897     17D0  00FB               	movwf	i1memcpy@n+1
 15898     17D1  3192  22F8  3197   	fcall	i1_memcpy
 15899                           
 15900                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
 15901     17D4  300F               	movlw	15
 15902     17D5  00F0               	movwf	i1___awmod@divisor
 15903     17D6  3000               	movlw	0
 15904     17D7  00F1               	movwf	i1___awmod@divisor+1
 15905     17D8  0855               	movf	i1GenericQueue_Enqueue@q,w
 15906     17D9  3E5D               	addlw	93
 15907     17DA  0086               	movwf	6
 15908     17DB  3000               	movlw	0
 15909     17DC  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15910     17DD  0087               	movwf	7
 15911     17DE  0801               	movf	1,w
 15912     17DF  3E01               	addlw	1
 15913     17E0  00F2               	movwf	i1___awmod@dividend
 15914     17E1  3000               	movlw	0
 15915     17E2  1803               	skipnc
 15916     17E3  3001               	movlw	1
 15917     17E4  00F3               	movwf	i1___awmod@dividend+1
 15918     17E5  3194  24D8         	fcall	i1___awmod
 15919     17E7  0870               	movf	?i1___awmod,w
 15920     17E8  00D9               	movwf	??i1_GenericQueue_Enqueue
 15921     17E9  0855               	movf	i1GenericQueue_Enqueue@q,w
 15922     17EA  3E5D               	addlw	93
 15923     17EB  00DA               	movwf	??i1_GenericQueue_Enqueue+1
 15924     17EC  3000               	movlw	0
 15925     17ED  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15926     17EE  00DB               	movwf	??i1_GenericQueue_Enqueue+2
 15927     17EF  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 15928     17F0  0086               	movwf	6
 15929     17F1  085B               	movf	??i1_GenericQueue_Enqueue+2,w
 15930     17F2  0087               	movwf	7
 15931     17F3  0859               	movf	??i1_GenericQueue_Enqueue,w
 15932     17F4  0081               	movwf	1
 15933                           
 15934                           ;generic_queue.c: 23:         q->size++;
 15935     17F5  3001               	movlw	1
 15936     17F6  00D9               	movwf	??i1_GenericQueue_Enqueue
 15937     17F7  0855               	movf	i1GenericQueue_Enqueue@q,w
 15938     17F8  3E5E               	addlw	94
 15939     17F9  0086               	movwf	6
 15940     17FA  3000               	movlw	0
 15941     17FB  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15942     17FC  0087               	movwf	7
 15943     17FD  0859               	movf	??i1_GenericQueue_Enqueue,w
 15944     17FE  0781               	addwf	1,f
 15945     17FF  0008               	return
 15946     1800                     __end_ofi1_GenericQueue_Enqueue:
 15947                           
 15948                           	psect	text92
 15949     12F8                     __ptext92:	
 15950 ;; *************** function i1_memcpy *****************
 15951 ;; Defined at:
 15952 ;;		line 4 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memcpy.c"
 15953 ;; Parameters:    Size  Location     Type
 15954 ;;  d1              2    6[COMMON] PTR void 
 15955 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 15956 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 15957 ;;  s1              2    8[COMMON] PTR const void 
 15958 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2855(1), 
 15959 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 15960 ;;  n               2   10[COMMON] unsigned int 
 15961 ;; Auto vars:     Size  Location     Type
 15962 ;;  s               2    2[BANK0 ] PTR const unsigned char 
 15963 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2855(1), 
 15964 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 15965 ;;  d               2    0[BANK0 ] PTR unsigned char 
 15966 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 15967 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 15968 ;;  tmp             1    4[BANK0 ] unsigned char 
 15969 ;; Return value:  Size  Location     Type
 15970 ;;                  2    6[COMMON] PTR void 
 15971 ;; Registers used:
 15972 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15973 ;; Tracked objects:
 15974 ;;		On entry : 1F/0
 15975 ;;		On exit  : 1F/0
 15976 ;;		Unchanged: 0/0
 15977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15978 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15979 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15981 ;;      Totals:         6       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15982 ;;Total ram usage:       11 bytes
 15983 ;; Hardware stack levels used: 1
 15984 ;; This function calls:
 15985 ;;		Nothing
 15986 ;; This function is called by:
 15987 ;;		_USBCtrlEPService
 15988 ;;		i1_GenericQueue_Enqueue
 15989 ;; This function uses a non-reentrant model
 15990 ;;
 15991                           
 15992     12F8                     i1_memcpy:	
 15993                           ;psect for function i1_memcpy
 15994                           
 15995                           
 15996                           ;incstack = 0
 15997                           ; Regs used in i1_memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 15998     12F8  0879               	movf	i1memcpy@s1+1,w
 15999     12F9  00D3               	movwf	i1memcpy@s+1
 16000     12FA  0878               	movf	i1memcpy@s1,w
 16001     12FB  00D2               	movwf	i1memcpy@s
 16002     12FC  0877               	movf	i1memcpy@d1+1,w
 16003     12FD  00D1               	movwf	i1memcpy@d+1
 16004     12FE  0876               	movf	i1memcpy@d1,w
 16005     12FF  00D0               	movwf	i1memcpy@d
 16006     1300                     i1l4485:
 16007     1300  3001               	movlw	1
 16008     1301  02FA               	subwf	i1memcpy@n,f
 16009     1302  3000               	movlw	0
 16010     1303  3BFB               	subwfb	i1memcpy@n+1,f
 16011     1304  0A7A               	incf	i1memcpy@n,w
 16012     1305  1903               	btfsc	3,2
 16013     1306  0A7B               	incf	i1memcpy@n+1,w
 16014     1307  1903               	btfsc	3,2
 16015     1308  0008               	return
 16016     1309  0852               	movf	i1memcpy@s,w
 16017     130A  0086               	movwf	6
 16018     130B  0853               	movf	i1memcpy@s+1,w
 16019     130C  0087               	movwf	7
 16020     130D  0801               	movf	1,w
 16021     130E  00D4               	movwf	i1memcpy@tmp
 16022     130F  3001               	movlw	1
 16023     1310  07D2               	addwf	i1memcpy@s,f
 16024     1311  3000               	movlw	0
 16025     1312  3DD3               	addwfc	i1memcpy@s+1,f
 16026     1313  0850               	movf	i1memcpy@d,w
 16027     1314  0086               	movwf	6
 16028     1315  0851               	movf	i1memcpy@d+1,w
 16029     1316  0087               	movwf	7
 16030     1317  0854               	movf	i1memcpy@tmp,w
 16031     1318  0081               	movwf	1
 16032     1319  3001               	movlw	1
 16033     131A  07D0               	addwf	i1memcpy@d,f
 16034     131B  3000               	movlw	0
 16035     131C  3DD1               	addwfc	i1memcpy@d+1,f
 16036     131D  2B00               	goto	i1l4485
 16037     131E                     __end_ofi1_memcpy:
 16038                           
 16039                           	psect	text93
 16040     112F                     __ptext93:	
 16041 ;; *************** function i1___wmul *****************
 16042 ;; Defined at:
 16043 ;;		line 15 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/Umul16.c"
 16044 ;; Parameters:    Size  Location     Type
 16045 ;;  multiplier      2    0[COMMON] unsigned int 
 16046 ;;  multiplicand    2    2[COMMON] unsigned int 
 16047 ;; Auto vars:     Size  Location     Type
 16048 ;;  product         2    4[COMMON] unsigned int 
 16049 ;; Return value:  Size  Location     Type
 16050 ;;                  2    0[COMMON] unsigned int 
 16051 ;; Registers used:
 16052 ;;		wreg, status,2, status,0
 16053 ;; Tracked objects:
 16054 ;;		On entry : 1F/0
 16055 ;;		On exit  : 1F/0
 16056 ;;		Unchanged: 1F/0
 16057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16058 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16059 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16061 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16062 ;;Total ram usage:        6 bytes
 16063 ;; Hardware stack levels used: 1
 16064 ;; This function calls:
 16065 ;;		Nothing
 16066 ;; This function is called by:
 16067 ;;		i1_GenericQueue_Enqueue
 16068 ;; This function uses a non-reentrant model
 16069 ;;
 16070                           
 16071     112F                     i1___wmul:	
 16072                           ;psect for function i1___wmul
 16073                           
 16074                           
 16075                           ;incstack = 0
 16076                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 16077     112F  01F4               	clrf	i1___wmul@product
 16078     1130  01F5               	clrf	i1___wmul@product+1
 16079     1131                     i1l4427:
 16080     1131  1C70               	btfss	i1___wmul@multiplier,0
 16081     1132  2937               	goto	i1l1227
 16082     1133  0872               	movf	i1___wmul@multiplicand,w
 16083     1134  07F4               	addwf	i1___wmul@product,f
 16084     1135  0873               	movf	i1___wmul@multiplicand+1,w
 16085     1136  3DF5               	addwfc	i1___wmul@product+1,f
 16086     1137                     i1l1227:
 16087     1137  3001               	movlw	1
 16088     1138                     u345_25:
 16089     1138  35F2               	lslf	i1___wmul@multiplicand,f
 16090     1139  0DF3               	rlf	i1___wmul@multiplicand+1,f
 16091     113A  0B89               	decfsz	9,f
 16092     113B  2938               	goto	u345_25
 16093     113C  3001               	movlw	1
 16094     113D                     u346_25:
 16095     113D  36F1               	lsrf	i1___wmul@multiplier+1,f
 16096     113E  0CF0               	rrf	i1___wmul@multiplier,f
 16097     113F  0B89               	decfsz	9,f
 16098     1140  293D               	goto	u346_25
 16099     1141  0870               	movf	i1___wmul@multiplier,w
 16100     1142  0471               	iorwf	i1___wmul@multiplier+1,w
 16101     1143  1D03               	btfss	3,2
 16102     1144  2931               	goto	i1l4427
 16103     1145  0875               	movf	i1___wmul@product+1,w
 16104     1146  00F1               	movwf	?i1___wmul+1
 16105     1147  0874               	movf	i1___wmul@product,w
 16106     1148  00F0               	movwf	?i1___wmul
 16107     1149  0008               	return
 16108     114A                     __end_ofi1___wmul:
 16109                           
 16110                           	psect	text94
 16111     14D8                     __ptext94:	
 16112 ;; *************** function i1___awmod *****************
 16113 ;; Defined at:
 16114 ;;		line 5 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/awmod.c"
 16115 ;; Parameters:    Size  Location     Type
 16116 ;;  divisor         2    0[COMMON] int 
 16117 ;;  dividend        2    2[COMMON] int 
 16118 ;; Auto vars:     Size  Location     Type
 16119 ;;  sign            1    6[COMMON] unsigned char 
 16120 ;;  counter         1    5[COMMON] unsigned char 
 16121 ;; Return value:  Size  Location     Type
 16122 ;;                  2    0[COMMON] int 
 16123 ;; Registers used:
 16124 ;;		wreg, status,2, status,0
 16125 ;; Tracked objects:
 16126 ;;		On entry : 1F/0
 16127 ;;		On exit  : 1F/0
 16128 ;;		Unchanged: 1F/0
 16129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16130 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16132 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16133 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16134 ;;Total ram usage:        7 bytes
 16135 ;; Hardware stack levels used: 1
 16136 ;; This function calls:
 16137 ;;		Nothing
 16138 ;; This function is called by:
 16139 ;;		i1_GenericQueue_Enqueue
 16140 ;; This function uses a non-reentrant model
 16141 ;;
 16142                           
 16143     14D8                     i1___awmod:	
 16144                           ;psect for function i1___awmod
 16145                           
 16146                           
 16147                           ;incstack = 0
 16148                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 16149     14D8  01F6               	clrf	i1___awmod@sign
 16150     14D9  1FF3               	btfss	i1___awmod@dividend+1,7
 16151     14DA  2CE2               	goto	i1l4447
 16152     14DB  09F2               	comf	i1___awmod@dividend,f
 16153     14DC  09F3               	comf	i1___awmod@dividend+1,f
 16154     14DD  0AF2               	incf	i1___awmod@dividend,f
 16155     14DE  1903               	skipnz
 16156     14DF  0AF3               	incf	i1___awmod@dividend+1,f
 16157     14E0  01F6               	clrf	i1___awmod@sign
 16158     14E1  0AF6               	incf	i1___awmod@sign,f
 16159     14E2                     i1l4447:
 16160     14E2  1FF1               	btfss	i1___awmod@divisor+1,7
 16161     14E3  2CE9               	goto	i1l4451
 16162     14E4  09F0               	comf	i1___awmod@divisor,f
 16163     14E5  09F1               	comf	i1___awmod@divisor+1,f
 16164     14E6  0AF0               	incf	i1___awmod@divisor,f
 16165     14E7  1903               	skipnz
 16166     14E8  0AF1               	incf	i1___awmod@divisor+1,f
 16167     14E9                     i1l4451:
 16168     14E9  0870               	movf	i1___awmod@divisor,w
 16169     14EA  0471               	iorwf	i1___awmod@divisor+1,w
 16170     14EB  1903               	btfsc	3,2
 16171     14EC  2D10               	goto	i1l4469
 16172     14ED  01F5               	clrf	i1___awmod@counter
 16173     14EE  0AF5               	incf	i1___awmod@counter,f
 16174     14EF                     i1l4459:
 16175     14EF  1BF1               	btfsc	i1___awmod@divisor+1,7
 16176     14F0  2CFB               	goto	i1l4461
 16177     14F1  3001               	movlw	1
 16178     14F2                     u351_25:
 16179     14F2  35F0               	lslf	i1___awmod@divisor,f
 16180     14F3  0DF1               	rlf	i1___awmod@divisor+1,f
 16181     14F4  0B89               	decfsz	9,f
 16182     14F5  2CF2               	goto	u351_25
 16183     14F6  3001               	movlw	1
 16184     14F7  00F4               	movwf	??i1___awmod
 16185     14F8  0874               	movf	??i1___awmod,w
 16186     14F9  07F5               	addwf	i1___awmod@counter,f
 16187     14FA  2CEF               	goto	i1l4459
 16188     14FB                     i1l4461:
 16189     14FB  0871               	movf	i1___awmod@divisor+1,w
 16190     14FC  0273               	subwf	i1___awmod@dividend+1,w
 16191     14FD  1D03               	skipz
 16192     14FE  2D01               	goto	u353_25
 16193     14FF  0870               	movf	i1___awmod@divisor,w
 16194     1500  0272               	subwf	i1___awmod@dividend,w
 16195     1501                     u353_25:
 16196     1501  1C03               	skipc
 16197     1502  2D07               	goto	i1l4465
 16198     1503  0870               	movf	i1___awmod@divisor,w
 16199     1504  02F2               	subwf	i1___awmod@dividend,f
 16200     1505  0871               	movf	i1___awmod@divisor+1,w
 16201     1506  3BF3               	subwfb	i1___awmod@dividend+1,f
 16202     1507                     i1l4465:
 16203     1507  3001               	movlw	1
 16204     1508                     u354_25:
 16205     1508  36F1               	lsrf	i1___awmod@divisor+1,f
 16206     1509  0CF0               	rrf	i1___awmod@divisor,f
 16207     150A  0B89               	decfsz	9,f
 16208     150B  2D08               	goto	u354_25
 16209     150C  3001               	movlw	1
 16210     150D  02F5               	subwf	i1___awmod@counter,f
 16211     150E  1D03               	btfss	3,2
 16212     150F  2CFB               	goto	i1l4461
 16213     1510                     i1l4469:
 16214     1510  0876               	movf	i1___awmod@sign,w
 16215     1511  1903               	btfsc	3,2
 16216     1512  2D18               	goto	i1l4473
 16217     1513  09F2               	comf	i1___awmod@dividend,f
 16218     1514  09F3               	comf	i1___awmod@dividend+1,f
 16219     1515  0AF2               	incf	i1___awmod@dividend,f
 16220     1516  1903               	skipnz
 16221     1517  0AF3               	incf	i1___awmod@dividend+1,f
 16222     1518                     i1l4473:
 16223     1518  0873               	movf	i1___awmod@dividend+1,w
 16224     1519  00F1               	movwf	?i1___awmod+1
 16225     151A  0872               	movf	i1___awmod@dividend,w
 16226     151B  00F0               	movwf	?i1___awmod
 16227     151C  0008               	return
 16228     151D                     __end_ofi1___awmod:
 16229                           
 16230                           	psect	text95
 16231     1FC3                     __ptext95:	
 16232 ;; *************** function i1_GenericQueue_IsFull *****************
 16233 ;; Defined at:
 16234 ;;		line 15 in file "generic_queue.c"
 16235 ;; Parameters:    Size  Location     Type
 16236 ;;  q               2    0[COMMON] PTR struct .
 16237 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 16238 ;; Auto vars:     Size  Location     Type
 16239 ;;		None
 16240 ;; Return value:  Size  Location     Type
 16241 ;;                  2    0[COMMON] int 
 16242 ;; Registers used:
 16243 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16244 ;; Tracked objects:
 16245 ;;		On entry : 1F/0
 16246 ;;		On exit  : 1F/0
 16247 ;;		Unchanged: 1F/0
 16248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16249 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16251 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16252 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16253 ;;Total ram usage:        4 bytes
 16254 ;; Hardware stack levels used: 1
 16255 ;; This function calls:
 16256 ;;		Nothing
 16257 ;; This function is called by:
 16258 ;;		i1_GenericQueue_Enqueue
 16259 ;; This function uses a non-reentrant model
 16260 ;;
 16261                           
 16262     1FC3                     i1_GenericQueue_IsFull:	
 16263                           ;psect for function i1_GenericQueue_IsFull
 16264                           
 16265                           
 16266                           ;generic_queue.c: 16:     return (q->size == 15);
 16267                           
 16268                           ;incstack = 0
 16269                           ; Regs used in i1_GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
 16270     1FC3  0870               	movf	i1GenericQueue_IsFull@q,w
 16271     1FC4  3E5E               	addlw	94
 16272     1FC5  0086               	movwf	6
 16273     1FC6  3000               	movlw	0
 16274     1FC7  3D71               	addwfc	i1GenericQueue_IsFull@q+1,w
 16275     1FC8  0087               	movwf	7
 16276     1FC9  300F               	movlw	15
 16277     1FCA  0601               	xorwf	1,w
 16278     1FCB  1D03               	btfss	3,2
 16279     1FCC  2FCF               	goto	u342_20
 16280     1FCD  3001               	movlw	1
 16281     1FCE  2FD0               	goto	u343_20
 16282     1FCF                     u342_20:
 16283     1FCF  3000               	movlw	0
 16284     1FD0                     u343_20:
 16285     1FD0  00F2               	movwf	??i1_GenericQueue_IsFull
 16286     1FD1  01F3               	clrf	??i1_GenericQueue_IsFull+1
 16287     1FD2  0872               	movf	??i1_GenericQueue_IsFull,w
 16288     1FD3  00F0               	movwf	?i1_GenericQueue_IsFull
 16289     1FD4  0873               	movf	??i1_GenericQueue_IsFull+1,w
 16290     1FD5  00F1               	movwf	?i1_GenericQueue_IsFull+1
 16291     1FD6  0008               	return
 16292     1FD7                     __end_ofi1_GenericQueue_IsFull:
 16293                           
 16294                           	psect	text96
 16295     1EE0                     __ptext96:	
 16296 ;; *************** function _SysTime_GetCurrentTimeMs *****************
 16297 ;; Defined at:
 16298 ;;		line 19 in file "systime.c"
 16299 ;; Parameters:    Size  Location     Type
 16300 ;;		None
 16301 ;; Auto vars:     Size  Location     Type
 16302 ;;		None
 16303 ;; Return value:  Size  Location     Type
 16304 ;;                  4    0[COMMON] unsigned long 
 16305 ;; Registers used:
 16306 ;;		wreg
 16307 ;; Tracked objects:
 16308 ;;		On entry : 1F/2
 16309 ;;		On exit  : 1F/2
 16310 ;;		Unchanged: 0/0
 16311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16312 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16315 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16316 ;;Total ram usage:        4 bytes
 16317 ;; Hardware stack levels used: 1
 16318 ;; This function calls:
 16319 ;;		Nothing
 16320 ;; This function is called by:
 16321 ;;		_PS2Keyboard_DataInterrupt
 16322 ;;		_PS2Keyboard_ClockInterrupt
 16323 ;; This function uses a non-reentrant model
 16324 ;;
 16325                           
 16326     1EE0                     _SysTime_GetCurrentTimeMs:	
 16327                           ;psect for function _SysTime_GetCurrentTimeMs
 16328                           
 16329                           
 16330                           ;systime.c: 21:     return timeMs;
 16331                           
 16332                           ;incstack = 0
 16333                           ; Regs used in _SysTime_GetCurrentTimeMs: [wreg]
 16334     1EE0  082B               	movf	(_timeMs+3)^(0+256),w
 16335     1EE1  00F3               	movwf	?_SysTime_GetCurrentTimeMs+3
 16336     1EE2  082A               	movf	(_timeMs+2)^(0+256),w
 16337     1EE3  00F2               	movwf	?_SysTime_GetCurrentTimeMs+2
 16338     1EE4  0829               	movf	(_timeMs+1)^(0+256),w
 16339     1EE5  00F1               	movwf	?_SysTime_GetCurrentTimeMs+1
 16340     1EE6  0828               	movf	_timeMs^(0+256),w
 16341     1EE7  00F0               	movwf	?_SysTime_GetCurrentTimeMs
 16342     1EE8  0008               	return
 16343     1EE9                     __end_of_SysTime_GetCurrentTimeMs:
 16344                           
 16345                           	psect	text97
 16346     11F0                     __ptext97:	
 16347 ;; *************** function _EUSART_Transmit_ISR *****************
 16348 ;; Defined at:
 16349 ;;		line 197 in file "mcc_generated_files/eusart.c"
 16350 ;; Parameters:    Size  Location     Type
 16351 ;;		None
 16352 ;; Auto vars:     Size  Location     Type
 16353 ;;		None
 16354 ;; Return value:  Size  Location     Type
 16355 ;;                  1    wreg      void 
 16356 ;; Registers used:
 16357 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16358 ;; Tracked objects:
 16359 ;;		On entry : 1F/2
 16360 ;;		On exit  : 1F/1
 16361 ;;		Unchanged: 0/0
 16362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16365 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16366 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16367 ;;Total ram usage:        1 bytes
 16368 ;; Hardware stack levels used: 1
 16369 ;; This function calls:
 16370 ;;		Nothing
 16371 ;; This function is called by:
 16372 ;;		_EUSART_Initialize
 16373 ;;		_INTERRUPT_InterruptManager
 16374 ;; This function uses a non-reentrant model
 16375 ;;
 16376                           
 16377     11F0                     _EUSART_Transmit_ISR:	
 16378                           ;psect for function _EUSART_Transmit_ISR
 16379                           
 16380                           
 16381                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 16382                           
 16383                           ;incstack = 0
 16384                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16385     11F0  3008               	movlw	8
 16386     11F1  0021               	movlb	1	; select bank1
 16387     11F2  026F               	subwf	_eusartTxBufferRemaining^(0+128),w
 16388     11F3  1803               	skipnc
 16389     11F4  2A0D               	goto	i1l267
 16390                           
 16391                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 16392     11F5  0022               	movlb	2	; select bank2
 16393     11F6  0866               	movf	_eusartTxTail^(0+256),w
 16394     11F7  3EB8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 16395     11F8  0086               	movwf	6
 16396     11F9  3001               	movlw	1	; select bank3/4
 16397     11FA  0087               	movwf	7
 16398     11FB  0801               	movf	1,w
 16399     11FC  0023               	movlb	3	; select bank3
 16400     11FD  009A               	movwf	26	;volatile
 16401     11FE  3001               	movlw	1
 16402     11FF  00F0               	movwf	??_EUSART_Transmit_ISR
 16403     1200  0870               	movf	??_EUSART_Transmit_ISR,w
 16404     1201  0022               	movlb	2	; select bank2
 16405     1202  07E6               	addwf	_eusartTxTail^(0+256),f	;volatile
 16406                           
 16407                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 16408     1203  3008               	movlw	8
 16409     1204  0266               	subwf	_eusartTxTail^(0+256),w
 16410     1205  1803               	btfsc	3,0
 16411                           
 16412                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
 16413     1206  01E6               	clrf	_eusartTxTail^(0+256)	;volatile
 16414                           
 16415                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
 16416     1207  3001               	movlw	1
 16417     1208  00F0               	movwf	??_EUSART_Transmit_ISR
 16418     1209  0870               	movf	??_EUSART_Transmit_ISR,w
 16419     120A  0021               	movlb	1	; select bank1
 16420     120B  07EF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 16421                           
 16422                           ;mcc_generated_files/eusart.c: 209:     }
 16423     120C  0008               	return
 16424     120D                     i1l267:	
 16425                           ;mcc_generated_files/eusart.c: 210:     else
 16426                           
 16427                           
 16428                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
 16429     120D  1211               	bcf	17,4	;volatile
 16430     120E  0008               	return
 16431     120F                     __end_of_EUSART_Transmit_ISR:
 16432                           
 16433                           	psect	text98
 16434     13A6                     __ptext98:	
 16435 ;; *************** function _EUSART_Receive_ISR *****************
 16436 ;; Defined at:
 16437 ;;		line 216 in file "mcc_generated_files/eusart.c"
 16438 ;; Parameters:    Size  Location     Type
 16439 ;;		None
 16440 ;; Auto vars:     Size  Location     Type
 16441 ;;		None
 16442 ;; Return value:  Size  Location     Type
 16443 ;;                  1    wreg      void 
 16444 ;; Registers used:
 16445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16446 ;; Tracked objects:
 16447 ;;		On entry : 1F/2
 16448 ;;		On exit  : 0/0
 16449 ;;		Unchanged: 0/0
 16450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16455 ;;Total ram usage:        0 bytes
 16456 ;; Hardware stack levels used: 1
 16457 ;; Hardware stack levels required when called: 2
 16458 ;; This function calls:
 16459 ;;		NULL
 16460 ;;		_EUSART_DefaultErrorHandler
 16461 ;;		_EUSART_DefaultFramingErrorHandler
 16462 ;;		_EUSART_DefaultOverrunErrorHandler
 16463 ;;		_EUSART_RxDataHandler
 16464 ;; This function is called by:
 16465 ;;		_EUSART_Initialize
 16466 ;;		_INTERRUPT_InterruptManager
 16467 ;; This function uses a non-reentrant model
 16468 ;;
 16469                           
 16470     13A6                     _EUSART_Receive_ISR:	
 16471                           ;psect for function _EUSART_Receive_ISR
 16472                           
 16473                           
 16474                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 16475                           
 16476                           ;incstack = 0
 16477                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16478     13A6  0021               	movlb	1	; select bank1
 16479     13A7  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16480     13A8  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16481     13A9  0086               	movwf	6
 16482     13AA  3001               	movlw	1	; select bank3/4
 16483     13AB  0087               	movwf	7
 16484     13AC  0181               	clrf	1
 16485                           
 16486                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
 16487     13AD  0023               	movlb	3	; select bank3
 16488     13AE  1D1D               	btfss	29,2	;volatile
 16489     13AF  2BBD               	goto	i1l5705
 16490                           
 16491                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 16492     13B0  0021               	movlb	1	; select bank1
 16493     13B1  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16494     13B2  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16495     13B3  0086               	movwf	6
 16496     13B4  3001               	movlw	1	; select bank3/4
 16497     13B5  0087               	movwf	7
 16498     13B6  1481               	bsf	1,1
 16499                           
 16500                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
 16501     13B7  0022               	movlb	2	; select bank2
 16502     13B8  0845               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 16503     13B9  008A               	movwf	10
 16504     13BA  0844               	movf	_EUSART_FramingErrorHandler^(0+256),w
 16505     13BB  000A               	callw
 16506     13BC  3193               	pagesel	$
 16507     13BD                     i1l5705:
 16508                           
 16509                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
 16510     13BD  0023               	movlb	3	; select bank3
 16511     13BE  1C9D               	btfss	29,1	;volatile
 16512     13BF  2BCD               	goto	i1l5711
 16513                           
 16514                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 16515     13C0  0021               	movlb	1	; select bank1
 16516     13C1  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16517     13C2  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16518     13C3  0086               	movwf	6
 16519     13C4  3001               	movlw	1	; select bank3/4
 16520     13C5  0087               	movwf	7
 16521     13C6  1501               	bsf	1,2
 16522                           
 16523                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
 16524     13C7  0022               	movlb	2	; select bank2
 16525     13C8  0843               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 16526     13C9  008A               	movwf	10
 16527     13CA  0842               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 16528     13CB  000A               	callw
 16529     13CC  3193               	pagesel	$
 16530     13CD                     i1l5711:
 16531                           
 16532                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
 16533     13CD  0021               	movlb	1	; select bank1
 16534     13CE  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16535     13CF  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16536     13D0  0086               	movwf	6
 16537     13D1  3001               	movlw	1	; select bank3/4
 16538     13D2  0087               	movwf	7
 16539     13D3  0801               	movf	1,w
 16540     13D4  1903               	btfsc	3,2
 16541     13D5  2BDD               	goto	i1l5715
 16542                           
 16543                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
 16544     13D6  0022               	movlb	2	; select bank2
 16545     13D7  0841               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 16546     13D8  008A               	movwf	10
 16547     13D9  0840               	movf	_EUSART_ErrorHandler^(0+256),w
 16548     13DA  000A               	callw
 16549     13DB  3193               	pagesel	$
 16550                           
 16551                           ;mcc_generated_files/eusart.c: 233:     } else {
 16552     13DC  0008               	return
 16553     13DD                     i1l5715:
 16554                           
 16555                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
 16556     13DD  3190  20CC         	fcall	_EUSART_RxDataHandler
 16557     13DF  0008               	return
 16558     13E0                     __end_of_EUSART_Receive_ISR:
 16559                           
 16560                           	psect	text99
 16561     1085                     __ptext99:	
 16562 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 16563 ;; Defined at:
 16564 ;;		line 252 in file "mcc_generated_files/eusart.c"
 16565 ;; Parameters:    Size  Location     Type
 16566 ;;		None
 16567 ;; Auto vars:     Size  Location     Type
 16568 ;;		None
 16569 ;; Return value:  Size  Location     Type
 16570 ;;                  1    wreg      void 
 16571 ;; Registers used:
 16572 ;;		None
 16573 ;; Tracked objects:
 16574 ;;		On entry : 1F/2
 16575 ;;		On exit  : 1F/3
 16576 ;;		Unchanged: 0/0
 16577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16582 ;;Total ram usage:        0 bytes
 16583 ;; Hardware stack levels used: 1
 16584 ;; This function calls:
 16585 ;;		Nothing
 16586 ;; This function is called by:
 16587 ;;		_EUSART_Initialize
 16588 ;;		_EUSART_Receive_ISR
 16589 ;; This function uses a non-reentrant model
 16590 ;;
 16591                           
 16592     1085                     _EUSART_DefaultOverrunErrorHandler:	
 16593                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 16594                           
 16595                           
 16596                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
 16597                           
 16598                           ;incstack = 0
 16599                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 16600     1085  0023               	movlb	3	; select bank3
 16601     1086  121D               	bcf	29,4	;volatile
 16602                           
 16603                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
 16604     1087  161D               	bsf	29,4	;volatile
 16605     1088  0008               	return
 16606     1089                     __end_of_EUSART_DefaultOverrunErrorHandler:
 16607                           
 16608                           	psect	text100
 16609     0002                     __ptext100:	
 16610 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 16611 ;; Defined at:
 16612 ;;		line 250 in file "mcc_generated_files/eusart.c"
 16613 ;; Parameters:    Size  Location     Type
 16614 ;;		None
 16615 ;; Auto vars:     Size  Location     Type
 16616 ;;		None
 16617 ;; Return value:  Size  Location     Type
 16618 ;;                  1    wreg      void 
 16619 ;; Registers used:
 16620 ;;		None
 16621 ;; Tracked objects:
 16622 ;;		On entry : 1F/2
 16623 ;;		On exit  : 1F/2
 16624 ;;		Unchanged: 1F/0
 16625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16630 ;;Total ram usage:        0 bytes
 16631 ;; Hardware stack levels used: 1
 16632 ;; This function calls:
 16633 ;;		Nothing
 16634 ;; This function is called by:
 16635 ;;		_EUSART_Initialize
 16636 ;;		_EUSART_Receive_ISR
 16637 ;; This function uses a non-reentrant model
 16638 ;;
 16639                           
 16640     0002                     _EUSART_DefaultFramingErrorHandler:	
 16641                           ;psect for function _EUSART_DefaultFramingErrorHandler
 16642                           
 16643                           
 16644                           ;incstack = 0
 16645                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 16646     0002  0008               	return
 16647     0003                     __end_of_EUSART_DefaultFramingErrorHandler:
 16648                           
 16649                           	psect	text101
 16650     1E80                     __ptext101:	
 16651 ;; *************** function _EUSART_DefaultErrorHandler *****************
 16652 ;; Defined at:
 16653 ;;		line 260 in file "mcc_generated_files/eusart.c"
 16654 ;; Parameters:    Size  Location     Type
 16655 ;;		None
 16656 ;; Auto vars:     Size  Location     Type
 16657 ;;		None
 16658 ;; Return value:  Size  Location     Type
 16659 ;;                  1    wreg      void 
 16660 ;; Registers used:
 16661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16662 ;; Tracked objects:
 16663 ;;		On entry : 1F/2
 16664 ;;		On exit  : 1F/2
 16665 ;;		Unchanged: 0/0
 16666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16671 ;;Total ram usage:        0 bytes
 16672 ;; Hardware stack levels used: 1
 16673 ;; Hardware stack levels required when called: 1
 16674 ;; This function calls:
 16675 ;;		_EUSART_RxDataHandler
 16676 ;; This function is called by:
 16677 ;;		_EUSART_Initialize
 16678 ;;		_EUSART_Receive_ISR
 16679 ;; This function uses a non-reentrant model
 16680 ;;
 16681                           
 16682     1E80                     _EUSART_DefaultErrorHandler:	
 16683                           ;psect for function _EUSART_DefaultErrorHandler
 16684                           
 16685                           
 16686                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
 16687                           
 16688                           ;incstack = 0
 16689                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16690     1E80  3190  20CC         	fcall	_EUSART_RxDataHandler
 16691     1E82  0008               	return
 16692     1E83                     __end_of_EUSART_DefaultErrorHandler:
 16693                           
 16694                           	psect	text102
 16695     10CC                     __ptext102:	
 16696 ;; *************** function _EUSART_RxDataHandler *****************
 16697 ;; Defined at:
 16698 ;;		line 240 in file "mcc_generated_files/eusart.c"
 16699 ;; Parameters:    Size  Location     Type
 16700 ;;		None
 16701 ;; Auto vars:     Size  Location     Type
 16702 ;;		None
 16703 ;; Return value:  Size  Location     Type
 16704 ;;                  1    wreg      void 
 16705 ;; Registers used:
 16706 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16707 ;; Tracked objects:
 16708 ;;		On entry : 1C/1
 16709 ;;		On exit  : 1F/2
 16710 ;;		Unchanged: 0/0
 16711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16714 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16715 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16716 ;;Total ram usage:        1 bytes
 16717 ;; Hardware stack levels used: 1
 16718 ;; This function calls:
 16719 ;;		Nothing
 16720 ;; This function is called by:
 16721 ;;		_EUSART_Receive_ISR
 16722 ;;		_EUSART_DefaultErrorHandler
 16723 ;; This function uses a non-reentrant model
 16724 ;;
 16725                           
 16726     10CC                     _EUSART_RxDataHandler:	
 16727                           ;psect for function _EUSART_RxDataHandler
 16728                           
 16729                           
 16730                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
 16731                           
 16732                           ;incstack = 0
 16733                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 16734     10CC  0021               	movlb	1	; select bank1
 16735     10CD  086E               	movf	_eusartRxHead^(0+128),w
 16736     10CE  3EB0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 16737     10CF  0086               	movwf	6
 16738     10D0  3001               	movlw	1	; select bank3/4
 16739     10D1  0087               	movwf	7
 16740     10D2  0023               	movlb	3	; select bank3
 16741     10D3  0819               	movf	25,w	;volatile
 16742     10D4  0081               	movwf	1
 16743     10D5  3001               	movlw	1
 16744     10D6  00F0               	movwf	??_EUSART_RxDataHandler
 16745     10D7  0870               	movf	??_EUSART_RxDataHandler,w
 16746     10D8  0021               	movlb	1	; select bank1
 16747     10D9  07EE               	addwf	_eusartRxHead^(0+128),f	;volatile
 16748                           
 16749                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16750     10DA  3008               	movlw	8
 16751     10DB  026E               	subwf	_eusartRxHead^(0+128),w
 16752     10DC  1803               	btfsc	3,0
 16753                           
 16754                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
 16755     10DD  01EE               	clrf	_eusartRxHead^(0+128)	;volatile
 16756                           
 16757                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
 16758     10DE  3001               	movlw	1
 16759     10DF  00F0               	movwf	??_EUSART_RxDataHandler
 16760     10E0  0870               	movf	??_EUSART_RxDataHandler,w
 16761     10E1  0022               	movlb	2	; select bank2
 16762     10E2  07E4               	addwf	_eusartRxCount^(0+256),f	;volatile
 16763     10E3  0008               	return
 16764     10E4                     __end_of_EUSART_RxDataHandler:
 16765     007E                     btemp	set	126	;btemp
 16766     007E                     int$flags	set	126
 16767     007E                     wtemp0	set	126
 16768     232C                     
 16769                           	psect	config
 16770                           
 16771                           ;Config register CONFIG1 @ 0x8007
 16772                           ;	Oscillator Selection Bits
 16773                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 16774                           ;	Watchdog Timer Enable
 16775                           ;	WDTE = OFF, WDT disabled
 16776                           ;	Power-up Timer Enable
 16777                           ;	PWRTE = OFF, PWRT disabled
 16778                           ;	MCLR Pin Function Select
 16779                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 16780                           ;	Flash Program Memory Code Protection
 16781                           ;	CP = OFF, Program memory code protection is disabled
 16782                           ;	Brown-out Reset Enable
 16783                           ;	BOREN = OFF, Brown-out Reset disabled
 16784                           ;	Clock Out Enable
 16785                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 16786                           ;	Internal/External Switchover Mode
 16787                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 16788                           ;	Fail-Safe Clock Monitor Enable
 16789                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 16790     8007                     	org	32775
 16791     8007  39E4               	dw	14820
 16792                           
 16793                           ;Config register CONFIG2 @ 0x8008
 16794                           ;	Flash Memory Self-Write Protection
 16795                           ;	WRT = OFF, Write protection off
 16796                           ;	CPU System Clock Selection Bit
 16797                           ;	CPUDIV = NOCLKDIV, NO CPU system divide
 16798                           ;	USB Low Speed Clock Selection bit
 16799                           ;	USBLSCLK = 48MHz, System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
 16800                           ;	PLL Multiplier Selection Bit
 16801                           ;	PLLMULT = 3x, 3x Output Frequency Selected
 16802                           ;	PLL Enable Bit
 16803                           ;	PLLEN = ENABLED, 3x or 4x PLL Enabled
 16804                           ;	Stack Overflow/Underflow Reset Enable
 16805                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 16806                           ;	Brown-out Reset Voltage Selection
 16807                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 16808                           ;	Low-Power Brown Out Reset
 16809                           ;	LPBOR = OFF, Low-Power BOR is disabled
 16810                           ;	Low-Voltage Programming Enable
 16811                           ;	LVP = ON, Low-voltage programming enabled
 16812     8008                     	org	32776
 16813     8008  3FCF               	dw	16335

Data Sizes:
    Strings     0
    Constant    587
    Data        6
    BSS         135
    Persistent  36
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     19      32
    BANK1            72     65      72
    BANK2            79      0      78
    BANK3            80      0      47
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           12      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    APP_KeyboardTasks@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    APP_KeyboardUpdateState@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), NULL(), 

    GenericQueue_Contains@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode_2855(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2864(BANK1[1]), 

    GenericQueue_Contains@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_CopyToArray@array	PTR void  size(1) Largest target is 8
		 -> inputReport(BANK1[8]), 

    GenericQueue_CopyToArray@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_Dequeue@item	PTR void  size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), 

    GenericQueue_Dequeue@q	PTR struct . size(2) Largest target is 95
		 -> keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Enqueue@item	PTR const void  size(2) Largest target is 3
		 -> APP_KeyboardUpdateState@usbHidCode_2855(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2864(BANK1[1]), keyboardScanCode(BANK2[3]), 

    GenericQueue_Enqueue@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Init@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsEmpty@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsFull@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Remove@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2856(BANK1[1]), 

    GenericQueue_Remove@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    inPipes$pSrc$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes$pSrc$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes$pSrc$wRam	PTR unsigned short  size(2) Largest target is 0

    inPipes$pSrc$wRom	PTR const unsigned short  size(2) Largest target is 0

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), NULL(), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), 

    IOCAF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), NULL(), 

    IOCAF5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), 

    keyboard$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    keyboard$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    Log_Message@buf	PTR const unsigned char  size(1) Largest target is 6
		 -> main@scanCodeStr(BANK1[6]), 

    Log_UtilityConvertByteToHex@buf	PTR unsigned char  size(1) Largest target is 6
		 -> main@scanCodeStr(BANK1[6]), 

    main@hndlScanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    memcmp@l	PTR const unsigned char  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@r	PTR const unsigned char  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2855(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2856(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2864(BANK1[1]), 

    memcmp@vl	PTR const void  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@vr	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2855(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2856(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2864(BANK1[1]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    memcpy@d1	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2855(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2864(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK2[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2855(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2864(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK2[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memset@dest	PTR void  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    outPipes$pDst$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes$pDst$wRam	PTR unsigned short  size(2) Largest target is 0

    outPipes$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), NULL(NULL[0]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pDst	PTR volatile unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    PS2Keyboard_GetScanCode@scanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), 

    PS2USB_ScanCodeToUSBHID@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    S2611$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S2611$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S736$bRam	PTR unsigned char  size(2) Largest target is 0

    S736$bRom	PTR const unsigned char  size(2) Largest target is 0

    S736$wRam	PTR unsigned short  size(2) Largest target is 0

    S736$wRom	PTR const unsigned short  size(2) Largest target is 0

    S760$bRam	PTR unsigned char  size(2) Largest target is 0

    S760$wRam	PTR unsigned short  size(2) Largest target is 0

    S770$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    sp__memcpy	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), NULL(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 41
		 -> configDescriptor1(CODE[41]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(2) Largest target is 52
		 -> sd000(CODE[4]), sd001(CODE[52]), sd002(CODE[14]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBTransferOnePacket@data	PTR unsigned char  size(2) Largest target is 8
		 -> inputReport(BANK1[8]), outputReport(BANK2[1]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), USBActiveConfiguration(BANK0[1]), USTATcopy(BANK0[1]), 
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _USBDeviceTasks->_USBSuspend
    _USBDeviceTasks->_USBWakeFromSuspend
    _USBCtrlEPService->_USBCtrlTrfOutHandler
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _USBCheckHIDRequest->_USBHIDCBSetIdleRateHandler
    _APP_KeyboardInit->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    i1_APP_KeyboardProcessOutputReport->i1_PS2Keyboard_SendCommand
    _PS2Keyboard_DataInterrupt->_SysTime_GetCurrentTimeMs
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    i1_GenericQueue_Enqueue->i1_memcpy
    i1_memcpy->i1___wmul
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCtrlTrfSetupHandler->_USBCheckStdRequest
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    _PS2Keyboard_ClockInterrupt->i1_GenericQueue_Enqueue
    i1_GenericQueue_Enqueue->i1_memcpy

Critical Paths under _main in BANK1

    _main->_APP_KeyboardTasks
    _SysTime_Init->_TMR2_SetInterruptHandler
    _SYSTEM_Initialize->_USBDeviceInit
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF5_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _PS2Keyboard_Init->_GenericQueue_Init
    _PS2Keyboard_GetScanCode->_GenericQueue_Dequeue
    _GenericQueue_Dequeue->_memcpy
    _Log_UtilityConvertByteToHex->___bmul
    _Log_Message->_EUSART_Write
    _APP_KeyboardTasks->_APP_KeyboardUpdateState
    _GenericQueue_CopyToArray->_memcpy
    _APP_KeyboardUpdateState->_GenericQueue_Remove
    _GenericQueue_Remove->_memcpy
    _GenericQueue_Enqueue->_memcpy
    _memcpy->___wmul
    _GenericQueue_Contains->_memcmp
    _memcmp->___wmul
    ___wmul->___awmod
    _APP_KeyboardProcessOutputReport->_PS2Keyboard_SendCommand

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   46273
                                             48 BANK1     17    17      0
                  _APP_KeyboardTasks
                        _Log_Message
        _Log_UtilityConvertByteToHex
            _PS2Keyboard_GetScanCode
                   _PS2Keyboard_Init
                  _SYSTEM_Initialize
                       _SysTime_Init
 ---------------------------------------------------------------------------------
 (1) _SysTime_Init                                         0     0      0     200
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1427
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                    _USBDeviceAttach
                      _USBDeviceInit
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        8     8      0     272
                                              0 BANK1      8     8      0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     200
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     400
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     555
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_Init                                     0     0      0     814
                  _GenericQueue_Init
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF5_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Init                                    4     0      4     414
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_GetScanCode                              2     2      0    7991
                                             31 BANK1      2     2      0
               _GenericQueue_Dequeue
               _GenericQueue_IsEmpty
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Dequeue                                 7     4      3    7530
                                             24 BANK1      7     4      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _Log_UtilityConvertByteToHex                          6     4      2     689
                                              4 BANK1      6     4      2
                             ___bmul
                            _hex2str
 ---------------------------------------------------------------------------------
 (2) _hex2str                                              1     1      0      88
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Log_Message                                          4     3      1     259
                                              2 BANK1      4     3      1
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (2) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     2      0      44
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APP_KeyboardTasks                                    7     7      0   34346
                                             41 BANK1      7     7      0
    _APP_KeyboardProcessOutputReport
            _APP_KeyboardUpdateState
           _GenericQueue_CopyToArray
               _USBTransferOnePacket
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     634
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                11     7      4    1099
                                              0 BANK1     11     7      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_CopyToArray                             9     6      3    7445
                                             24 BANK1      9     6      3
                            ___awmod
                             ___bmul
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     245
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardUpdateState                              8     8      0   24807
                                             33 BANK1      8     8      0
              _GenericQueue_Contains
               _GenericQueue_Enqueue
                _GenericQueue_Remove
         _PS2Keyboard_GetLastCommand
            _PS2Keyboard_SendCommand
            _PS2USB_ScanCodeToUSBHID
 ---------------------------------------------------------------------------------
 (3) _PS2USB_ScanCodeToUSBHID                              1     1      0     210
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_GetLastCommand                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Remove                                  9     6      3    8757
                                             24 BANK1      9     6      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Enqueue                                 7     3      4    7720
                                             24 BANK1      7     3      4
                _GenericQueue_IsFull
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6    1400
                                             13 BANK1     11     5      6
                            ___awmod (ARG)
                             ___bmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _GenericQueue_IsFull                                  4     2      2     111
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Contains                                8     5      3    7047
                                             22 BANK1      8     5      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
 ---------------------------------------------------------------------------------
 (4) _memcmp                                               9     4      5     715
                                             13 BANK1      9     4      5
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3656
                                              7 BANK1      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1720
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_IsEmpty                                 4     2      2     378
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardProcessOutputReport                      0     0      0      22
            _PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_SendCommand                              1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0   31710
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
                     _USBDeviceTasks
 ---------------------------------------------------------------------------------
 (6) _USBDeviceTasks                                       2     2      0   30454
                                             17 BANK0      2     2      0
          _USBCtrlEPAllowStatusStage
                   _USBCtrlEPService
      _USBIncrement1msInternalTimers
                    _USBStallHandler
                         _USBSuspend
                 _USBWakeFromSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
                    i1_USBDeviceInit
 ---------------------------------------------------------------------------------
 (7) i1_USBDeviceInit                                      8     8      0     272
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (7) _USBWakeFromSuspend                                   1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USBSuspend                                           1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USBStallHandler                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _USBIncrement1msInternalTimers                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _USBCtrlEPService                                     1     1      0   17881
                                             16 BANK0      1     1      0
                _USBCtrlTrfInHandler
               _USBCtrlTrfOutHandler
             _USBCtrlTrfSetupHandler
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfSetupHandler                               1     1      0   17309
                                             15 BANK0      1     1      0
                 _USBCheckStdRequest
           _USBCtrlEPServiceComplete
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (9) _USBCtrlEPServiceComplete                             4     4      0      92
                                              7 COMMON     4     4      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPAllowDataStage                             4     4      0      92
                                              3 COMMON     4     4      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (9) _USBCheckStdRequest                                   2     2      0   13132
                                             13 BANK0      2     2      0
            _USBStdFeatureReqHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
                _USBStdSetCfgHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (10) _USBStdSetCfgHandler                                 5     5      0    4445
                                             13 COMMON     1     1      0
                                              6 BANK0      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                           i1_memset
 ---------------------------------------------------------------------------------
 (11) i1_memset                                            7     3      4     200
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) _USBStdGetStatusHandler                              4     4      0      46
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (10) _USBStdGetDscHandler                                 3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _USBStdFeatureReqHandler                             7     7      0    4556
                                              6 BANK0      7     7      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USER_USB_CALLBACK_EVENT_HANDLER                      6     0      6    4085
                                              0 BANK0      6     0      6
                   _APP_KeyboardInit
                 _USBCheckHIDRequest
 ---------------------------------------------------------------------------------
 (8) _USBCheckHIDRequest                                   2     2      0     133
                                              4 COMMON     2     2      0
         _USBHIDCBSetIdleRateHandler
           _USBHIDCBSetReportHandler
 ---------------------------------------------------------------------------------
 (9) _USBHIDCBSetReportHandler                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _USBHIDCBSetIdleRateHandler                           4     3      1     133
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (8) _APP_KeyboardInit                                     0     0      0    1260
                  _USBEnableEndpoint
                i1_GenericQueue_Init
             i1_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (9) i1_USBTransferOnePacket                              11     7      4     454
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (9) i1_GenericQueue_Init                                  4     0      4     162
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (9) _USBEnableEndpoint                                    6     5      1     644
                                              7 COMMON     6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (10) _USBConfigureEndpoint                                7     6      1     400
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfOutHandler                                 4     4      0     136
                                             10 COMMON     4     4      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (9) _USBCtrlTrfRxService                                  6     6      0     136
                                              4 COMMON     6     6      0
          _USBCtrlEPAllowStatusStage
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPAllowStatusStage                           4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfInHandler                                  5     5      0     137
                                              3 COMMON     5     5      0
                _USBCtrlTrfTxService
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (10) _USBHIDCBSetReportComplete                           0     0      0      22
  i1_APP_KeyboardProcessOutputReport
 ---------------------------------------------------------------------------------
 (11) i1_APP_KeyboardProcessOutputReport                   0     0      0      22
          i1_PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (12) i1_PS2Keyboard_SendCommand                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBCtrlTrfTxService                                 3     3      0      92
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             0     0      0       0
                                NULL *
                   _SysTimeInterrupt *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SysTimeInterrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0    1256
                         _IOCAF4_ISR
                         _IOCAF5_ISR
 ---------------------------------------------------------------------------------
 (7) _IOCAF5_ISR                                           0     0      0       0
                                NULL *
     _IOCAF5_DefaultInterruptHandler *
          _PS2Keyboard_DataInterrupt *
 ---------------------------------------------------------------------------------
 (8) _PS2Keyboard_DataInterrupt                            0     0      0       0
           _SysTime_GetCurrentTimeMs
 ---------------------------------------------------------------------------------
 (8) _IOCAF5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _IOCAF4_ISR                                           0     0      0    1256
                                NULL *
     _IOCAF4_DefaultInterruptHandler *
         _PS2Keyboard_ClockInterrupt *
 ---------------------------------------------------------------------------------
 (8) _PS2Keyboard_ClockInterrupt                           6     6      0    1256
                                             12 COMMON     2     2      0
                                             12 BANK0      4     4      0
           _SysTime_GetCurrentTimeMs
             i1_GenericQueue_Enqueue
 ---------------------------------------------------------------------------------
 (9) i1_GenericQueue_Enqueue                               7     3      4    1188
                                              5 BANK0      7     3      4
              i1_GenericQueue_IsFull
                          i1___awmod
                           i1___wmul
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (8) i1_memcpy                                            11     5      6     299
                                              6 COMMON     6     0      6
                                              0 BANK0      5     5      0
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) i1___awmod                                           7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) i1_GenericQueue_IsFull                               4     2      2      48
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (9) _SysTime_GetCurrentTimeMs                             4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _IOCAF4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_KeyboardTasks
     _APP_KeyboardProcessOutputReport
       _PS2Keyboard_SendCommand
     _APP_KeyboardUpdateState
       _GenericQueue_Contains
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
           ___awmod (ARG)
         _memcmp
           ___wmul (ARG)
       _GenericQueue_Enqueue
         _GenericQueue_IsFull
         ___awmod
         ___wmul
         _memcpy
           ___awmod (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
       _GenericQueue_Remove
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
         _memcmp
         _memcpy
       _PS2Keyboard_GetLastCommand
       _PS2Keyboard_SendCommand
       _PS2USB_ScanCodeToUSBHID
     _GenericQueue_CopyToArray
       ___awmod
       ___bmul
       ___wmul
       _memcpy
     _USBTransferOnePacket
     _memset
   _Log_Message
     _EUSART_Write
     _EUSART_is_tx_ready
   _Log_UtilityConvertByteToHex
     ___bmul
     _hex2str
   _PS2Keyboard_GetScanCode
     _GenericQueue_Dequeue
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
       _memcpy
     _GenericQueue_IsEmpty
   _PS2Keyboard_Init
     _GenericQueue_Init
     _IOCAF4_SetInterruptHandler
     _IOCAF5_SetInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
       _IOCAF5_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _USBDeviceAttach
     _USBDeviceInit
     _WDT_Initialize
   _SysTime_Init
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       NULL(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       _PS2Keyboard_ClockInterrupt *
         _SysTime_GetCurrentTimeMs
         i1_GenericQueue_Enqueue
           i1_GenericQueue_IsFull
           i1___awmod
           i1___wmul
           i1_memcpy
             i1___wmul (ARG)
     _IOCAF5_ISR
       NULL(Fake) *
       _IOCAF5_DefaultInterruptHandler *
       _PS2Keyboard_DataInterrupt *
         _SysTime_GetCurrentTimeMs
   _TMR2_ISR *
     NULL(Fake) *
     _SysTimeInterrupt *
     _TMR2_DefaultInterruptHandler *
   _USBDeviceTasks *
     _USBCtrlEPAllowStatusStage
     _USBCtrlEPService
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
         _USBHIDCBSetReportComplete *
           i1_APP_KeyboardProcessOutputReport
             i1_PS2Keyboard_SendCommand
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
           _USBHIDCBSetReportComplete *
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _APP_KeyboardInit
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i1_GenericQueue_Init
                 i1_USBTransferOnePacket
               _USBCheckHIDRequest
                 _USBHIDCBSetIdleRateHandler
                 _USBHIDCBSetReportHandler
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
             i1_memset
           _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
         _USER_USB_CALLBACK_EVENT_HANDLER
       i1_memcpy
     _USBIncrement1msInternalTimers
     _USBStallHandler
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USER_USB_CALLBACK_EVENT_HANDLER
     i1_USBDeviceInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     13      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            48      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               48     41      48       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            4F      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               4F      0      4E       9       98.7%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2F      11       58.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      F3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10               C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      F3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Oct 21 00:26:09 2024

                ?_EUSART_SetRxInterruptHandler 00A8               __end_of_TMR2_SetInterruptHandler 1EE0  
                                   _USB_SD_Ptr 18BC                                 ___bmul@product 00AA  
                     __end_of_PS2Keyboard_Init 119B                                  _USBDeviceInit 0EA1  
                          ___wmul@multiplicand 00B1                             _USBCheckHIDRequest 0CE2  
             __end_of_USBHIDCBSetReportHandler 1F5F                               i1___wmul@product 0074  
                   PS2Keyboard_SendCommand@cmd 00A8           USER_USB_CALLBACK_EVENT_HANDLER@event 0050  
         USER_USB_CALLBACK_EVENT_HANDLER@pdata 0052                                            l102 1F68  
                                          l261 12BA                    __end_of_USBStdGetDscHandler 0CE2  
                                          l491 110C                                            _BDT 0020  
                                          l868 02FF                       _GenericQueue_CopyToArray 1668  
                                          _PR2 001B                                            _UIE 0E92  
                                          _UIR 0E90                         ??_EUSART_RxDataHandler 0070  
                                   _USBSuspend 10E4                 ?_EUSART_SetFramingErrorHandler 00A8  
                                 ___awmod@sign 00AE                           USBStdSetCfgHandler@i 0059  
                         USBStdSetCfgHandler@p 0056                                _TMR2_Initialize 1F9F  
                                          wreg 0009                                 _USBDeviceTasks 06E3  
                          ?_USBCheckHIDRequest 0070                            _GenericQueue_IsFull 1FD7  
                               _USBDeviceState 006C             __end_of_IOCAF5_SetInterruptHandler 1EB0  
                   _IOCAF5_SetInterruptHandler 1EA8                              main@scanCodeValid 00E4  
                  ??_PS2Keyboard_DataInterrupt 0074                          ??_USBCtrlTrfRxService 0074  
                          _GenericQueue_Remove 05EF                       USBEnableEndpoint@options 0077  
                  ?_PS2Keyboard_GetLastCommand 0070                                           l1132 1671  
                                         l1227 1152                                           l5011 1F85  
                   USBConfigureEndpoint@handle 0076                                           l5007 1F7F  
                                         l5141 0EC5                                           l5125 0EAC  
                                         l5241 12D0                                           l5217 1111  
                                         l5153 0EE3                                           l6211 0124  
                                         l6203 010A                                           l5227 12B1  
                                         l6301 036E                                           l4711 154C  
                                         l6215 0131                                           l6207 0117  
                                         l5327 0BFD                                           l5319 0BED  
                                         l5175 0EFC                                           l4705 1534  
                                         l6225 016E                                           l6217 013F  
                                         l5337 0C44                                           l6305 037E  
                                         l6401 0AE1                                           l4707 1540  
                                         l4715 1555                                           l6243 01A9  
                                         l6235 018F                                           l5339 0C5C  
                                         l6315 039F                                           l6323 03CA  
                                         l4661 1376                                           l5349 10A2  
                                         l6309 0386                                           l4719 155D  
                                         l4663 1391                                           l6247 01B6  
                                         l6239 019C                                           l6183 00B2  
                                         l6327 03E3                                           l4673 114C  
                                         l6193 00DA                                           l6185 00C0  
                                         l6281 0328                                           l5473 1F9D  
                                         l5465 1F96                                           l4667 1398  
                                         l4659 138D                                           l6179 00A5  
                                         l6275 030D                                           l4693 1527  
                                         l4597 1326                                           l4845 1222  
                                         l6189 00CD                                           l6197 00F6  
                                         l6285 033A                                           l6381 0AAF  
                                         l4863 06A9                                           l5735 11D0  
                                         l6383 0AB0                                           l6375 0AA4  
                                         l4697 152E                                           l4881 1656  
                                         l6289 0351                                           l5761 1167  
                                         l5737 11D1                                           l4867 06D3  
                                         l5755 116B                                           l6395 0ACA  
                                         l4885 1666                                           l6389 0ABB  
                                         _LATA 010C                                           _LATC 010E  
                                         u4440 1E9E                                           u3730 1FBB  
                                         u3740 1FBC                                           u6220 03AD  
                                         u6205 039A                                           u6125 0306  
                                         u3750 1FE3                                           u3815 1153  
                                         u3760 1FE4                                           u3905 154D  
                                         u3825 1158                                           u6145 0331  
                                         u4385 0EC8                                           u5295 12DB  
                                         u6360 0AA0                                           u6417 0A81  
                                         u6427 11A6                                           u3875 1537  
                                         u3895 1546                          ??_USBCtrlTrfTxService 0070  
                                         _UCFG 0E91                                           _UEP0 0E98  
                                         _UEP1 0E99                                           u5995 015D  
                                         _UEIE 0E97                                           _UEIR 0E93  
                                         _UCON 0E8E                                           _TMR2 001A  
                                         _WPUA 020C         USBStdFeatureReqHandler@current_ep_data 005A  
                                         _pDst 0161                                           _main 0A72  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                              _USBDeviceAttach 10FC                      ?_SysTime_GetCurrentTimeMs 0070  
                                         btemp 007E                                           start 003D  
                                 _SysTime_Init 1F08                           _GenericQueue_Dequeue 08BA  
                         _GenericQueue_IsEmpty 1FB0                           ??_USBCheckHIDRequest 0074  
                         ?_GenericQueue_IsFull 00A8                     __end_of_USBCheckStdRequest 0A00  
                       ??_USBCtrlTrfOutHandler 007A                              ___bmul@multiplier 00AB  
                                _LocalSOFCount 0136                           _GenericQueue_Enqueue 0852  
              APP_KeyboardUpdateState@scanCode 00D0                            USBDeviceInit@i_1324 00AE  
                    ??_USBStdFeatureReqHandler 0056                           ?_GenericQueue_Remove 00C0  
                                ??_Log_Message 00AB                       ?_APP_KeyboardUpdateState 0070  
                     GenericQueue_Dequeue@item 00C2                       ??_USBStdGetStatusHandler 0070  
                               ?_USBDeviceInit 0070                                  ?_EUSART_Write 0070  
                __end_of_OSCILLATOR_Initialize 1F6C                __end_of_PS2Keyboard_GetScanCode 11D3  
                                        ?_main 0070                                __end_of___awmod 1562  
                       __end_of_USBDeviceTasks 07B6                                          _T2CON 001C  
                    ?_USBCtrlEPServiceComplete 0070                                          i1l140 0033  
                                        i1l133 000D                                          i1l136 0019  
                                        i1l145 003B                                          i1l138 0026  
                                   i1memcpy@d1 0076                                          i1l267 120D  
                                        i1l516 0DBC                                          i1l460 073A  
                                        i1l630 0B4C                                          i1l454 0702  
                                        i1l544 0F60                                          i1l464 0762  
                                        i1l529 16E1                                          i1l465 07B3  
                                        i1l642 09FF                                          i1l466 07B0  
                                        i1l644 0997                                          i1l709 0D6F  
                                        i1l581 15AD                                          i1l653 09BD  
                                        i1l584 15FB                                          i1l585 15B6  
                                        i1l586 15B9                                          i1l763 1457  
                                        i1l678 02B0                                          i1l859 082B  
                                   i1memcpy@s1 0078                                          _UADDR 0E96  
                                        _RCREG 0199                                          _RCSTA 019D  
                                        _TRISA 008C                                          _TRISC 008E  
                                        _USTAT 0E8F                                          _TXREG 019A  
                                 main@scanCode 00E6                                          _TXSTA 019E  
                                 _outputReport 0120                                __end_of_hex2str 1F9F  
           __end_of_USBHIDCBSetIdleRateHandler 1F52                     _USBHIDCBSetIdleRateHandler 1F45  
              __end_of_USBCtrlEPAllowDataStage 1798                                          _sd000 18C2  
                                        _sd001 183F                                          _sd002 18AE  
                             __end_of_TMR2_ISR 1F1F                 ?_USBIncrement1msInternalTimers 0070  
                               i1___awmod@sign 0076                        __end_of_PIN_MANAGER_IOC 1EFD  
                      _PS2USB_ScanCodeToUSBHID 120F                                 _WDT_Initialize 1E86  
                                        pclath 000A                               __end_ofi1___wmul 114A  
                                        status 0003                            i1___wmul@multiplier 0070  
                                        wtemp0 007E                               __end_ofi1_memcpy 131E  
                              _TMR2_StartTimer 1E89                               __end_ofi1_memset 109F  
                        ?_GenericQueue_Dequeue 00C0                          ?_GenericQueue_IsEmpty 00A8  
                        ??_GenericQueue_IsFull 00AA                           __end_of_ps2ExtUsbMap 04FA  
                        _GenericQueue_Contains 1606                PS2USB_ScanCodeToUSBHID@scanCode 00A8  
                        ?_GenericQueue_Enqueue 00C0                          ??_GenericQueue_Remove 00C3  
                    _PS2Keyboard_DataInterrupt 1F6C                                __initialization 003F  
                  ?_PS2Keyboard_ClockInterrupt 0070                                   __end_of_main 0AE6  
                               ??_EUSART_Write 00A8                        __end_of_TMR2_Initialize 1FB0  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 00AA  
                     _TMR2_SetInterruptHandler 1ED8                                         ??_main 00D8  
                __end_ofi1_GenericQueue_IsFull 1FD7                            __end_of_Log_Message 1180  
                              ?_USBDeviceTasks 0070                       ?_PS2Keyboard_SendCommand 0070  
                GenericQueue_Init@element_size 00AA                                    ?_USBSuspend 0070  
                      _IOCAF4_InterruptHandler 016D                                i1_USBDeviceInit 0DFE  
                     _USBHIDCBSetReportHandler 1F52                         __end_of_WDT_Initialize 1E89  
    __end_of_EUSART_DefaultFramingErrorHandler 0003            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 0002  
                      __end_of_USBDeviceAttach 1115                     _EUSART_OverrunErrorHandler 0142  
                                       _ACTCON 039B                                         _APFCON 011D  
                                       _ANSELA 018C                                         _ANSELC 018E  
                                       _BORCON 0116                       __end_of_SysTimeInterrupt 1EF2  
                                       i1l1033 0523                                         i1l1038 052C  
                                       i1l1227 1137                                         i1l4011 0D31  
                                       i1l4003 0D22                                         i1l4021 0D4B  
                                       i1l4005 0D25                                         i1l4015 0D3F  
                                       i1l4105 16DC                                         i1l4025 0D53  
                                       i1l4201 1776                                         i1l4117 16FD  
                                       i1l4125 1713                                         i1l4127 1717  
                                       i1l4135 172D                                         i1l4047 0838  
                                       i1l4071 141B                                         i1l4311 15CE  
                                       i1l4321 15E7                                         i1l4217 092B  
                                       i1l4075 1427                                         i1l4083 1430  
                                       i1l4411 02D5                                         i1l4147 108C  
                                       i1l4235 094A                                         i1l6101 053D  
                                       i1l5061 1F42                                         i1l4165 0A22  
                                       i1l4077 142A                                         i1l4413 02DD  
                                       i1l4501 0D85                                         i1l6103 0560  
                                       i1l4079 142D                                         i1l4407 02B6  
                                       i1l4343 01E6                                         i1l5311 159F  
                                       i1l6105 0564                                         i1l4345 01E8  
                                       i1l4265 0C6A                                         i1l4257 097D  
                                       i1l4451 14E9                                         i1l4427 1131  
                                       i1l6131 05A4                                         i1l6123 0590  
                                       i1l6107 0568                                         i1l4371 0247  
                                       i1l4291 0CCD                                         i1l4461 14FB  
                                       i1l6109 056A                                         i1l4381 0261  
                                       i1l4373 0251                                         i1l4365 0233  
                                       i1l4285 0CC7                                         i1l4277 0CA3  
                                       i1l4269 0C74                                         i1l4621 09B3  
                                       i1l4605 099D                                         i1l4197 1763  
                                       i1l5309 159C                                         i1l4447 14E2  
                                       i1l6135 05AC                                         i1l4383 0268  
                                       i1l4359 0215                                         i1l4287 0CCA  
                                       i1l4279 0CA6                                         i1l4631 09C7  
                                       i1l4607 09A0                                         i1l4519 0DC8  
                                       i1l4527 0DD1                                         i1l5503 0E20  
                                       i1l4473 1518                                         i1l4465 1507  
                                       i1l6145 05C6                                         i1l3913 1485  
                                       i1l4617 09AD                                         i1l4609 09A3  
                                       i1l5257 11E6                                         i1l4459 14EF  
                                       i1l6139 05B3                                         i1l6155 05CC  
                                       i1l4811 0B01                                         i1l4571 0FBF  
                                       i1l3915 148D                                         i1l3923 1236  
                                       i1l4387 0273                                         i1l4619 09B0  
                                       i1l4635 09D4                                         i1l5291 12AB  
                                       i1l5259 11ED                                         i1l5515 0E3D  
                                       i1l5611 0712                                         i1l4469 1510  
                                       i1l4485 1300                                         i1l6149 05C9  
                                       i1l6157 05E4                                         i1l6093 0525  
                                       i1l4813 0B04                                         i1l4557 0F68  
                                       i1l4397 029C                                         i1l5711 13CD  
                                       i1l6167 1F35                                         i1l6255 1EF8  
                                       i1l4823 0B2F                                         i1l4583 0FF9  
                                       i1l4559 0F7E                                         i1l3927 123D  
                                       i1l4399 02A1                                         i1l5623 072C  
                                       i1l5705 13BD                                         i1l6097 052E  
                                       i1l4833 0B5D                                         i1l4569 0FB3  
                                       i1l4497 0D81                                         i1l5289 12A9  
                                       i1l5537 0E53                                         i1l5633 0740  
                                       i1l5617 0718                                         i1l5715 13DD  
                                       i1l6099 0534                                         i1l4835 0B5E  
                                       i1l4827 0B3F                                         i1l3955 0B7D  
                                       i1l3947 0B6D                                         i1l3965 0BC4  
                                       i1l3967 0BDC                                         i1l3991 0CFB  
                                       i1l5487 0E09                                         i1l5647 075B  
                                       i1l5639 0747                                         i1l4785 13E7  
                                       i1l3985 0CEF                                         i1l5673 0798  
                                       i1l5657 0768                                         i1l5675 07A7  
                                       i1l5667 077F                                         i1l4797 1418  
                                       i1l3997 0D07                                         i1l6581 1452  
                                       i1l6573 09DC                                         i1l5597 06FC  
                                       i1l5589 06EF                                         i1l6583 0D0F  
                                       i1l3999 0D1A                                         i1l6575 15F0  
                                       i1l6585 0D5B                                         i1l6577 0CD6  
                                       i1l6587 05D6                                         i1l6579 1438  
                                       u311_25 176D                     __end_of_EUSART_is_tx_ready 1EA0  
                                       u342_20 1FCF                                         u343_20 1FD0  
                                       u351_25 14F2                                         u353_25 1501  
                                       u345_25 1138                                         u354_25 1508  
                                       u346_25 113D                                         u282_25 145E  
                                       u283_25 1464                                         u284_25 146C  
                                       u365_25 0F5C                                         u456_25 156D  
                                       u297_25 0831                                         u570_20 0516  
                                       _OSCCON 0099                                         u643_27 111E  
                                       u492_25 0E23                                         _PLLRDY 04D6  
                                       u576_24 0577                                         u568_24 050F  
                                       u576_25 0576                                         u568_25 050E  
                                       u569_20 0515                                    i1memcpy@tmp 0054  
                                       u578_20 059F                                         u579_20 05A0  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097                   i1USBTransferOnePacket@handle 0079  
              __end_of_APP_KeyboardUpdateState 01D2                              _shortPacketStatus 0162  
                             _APP_KeyboardInit 080A                                USBDeviceTasks@i 0062  
                  USBStdFeatureReqHandler@pUEP 0058                       USBTransferOnePacket@data 00A9  
                   USBCtrlTrfInHandler@lastDTS 0077                                ??_USBDeviceInit 00A8  
                                       ___bmul 1F7D                                _keyboardIsBreak 014F  
                                       ___wmul 114A                                      ??___awmod 00AC  
                              _keyboardCommand 014E                              _USBEnableEndpoint 122E  
                          _EUSART_Transmit_ISR 11F0                                         _memcmp 136F  
                                       _memcpy 131E                   i1PS2Keyboard_SendCommand@cmd 0070  
                                       _memset 109F                                ___awmod@divisor 00A8  
                                       _timeMs 0128                                      ??_hex2str 00A8  
                              ___awmod@counter 00AD                             ?_USBEnableEndpoint 0077  
                            __end_ofi1___awmod 151D                                   Log_Message@i 00AD  
                    ??_PS2USB_ScanCodeToUSBHID 00A8                                ?_WDT_Initialize 0070  
                                  _OldSOFCount 0134                            ??_USBEnableEndpoint 0078  
                           APP_KeyboardTasks@i 00D7                        __end_of_TMR2_StartTimer 1E8C  
     TMR2_SetInterruptHandler@InterruptHandler 00A8     IOCAF5_SetInterruptHandler@InterruptHandler 00A8  
   IOCAF4_SetInterruptHandler@InterruptHandler 00A8                               ?_PIN_MANAGER_IOC 0070  
                                  _CtrlTrfData 0048                                   ??_IOCAF4_ISR 007E  
                                 ??_IOCAF5_ISR 0074                           ?_EUSART_Transmit_ISR 0070  
           USBHIDCBSetIdleRateHandler@reportID 0073                           _controlTransferState 006A  
                PS2Keyboard_ClockInterrupt@bit 007D                              _SYSTEM_Initialize 1FEB  
                      __end_of__initialization 0083                     i1USBTransferOnePacket@data 0071  
                      ?i1_GenericQueue_Enqueue 0055                         ??_GenericQueue_Dequeue 00C3  
                       ??_GenericQueue_IsEmpty 00AA                         ?_GenericQueue_Contains 00BE  
                           ?_SYSTEM_Initialize 0070                         ??_GenericQueue_Enqueue 00C4  
                     GenericQueue_Enqueue@item 00C2           __end_of_EUSART_SetTxInterruptHandler 1ED8  
                 _EUSART_SetTxInterruptHandler 1ED0                            ___bmul@multiplicand 00A8  
                      i1GenericQueue_Enqueue@q 0055                                 __pcstackCOMMON 0070  
                   ??_GenericQueue_CopyToArray 00C3                      __end_of_USBEnableEndpoint 124E  
                                __end_of_sd000 18C6                                  __end_of_sd001 1873  
                                __end_of_sd002 18BC                                   __pidataBANK3 1E8C  
                          ??_SYSTEM_Initialize 00B0                                    _Log_Message 1165  
                                    ?_TMR2_ISR 0070                                _active_protocol 016B  
              __end_of_PS2Keyboard_SendCommand 11B7         __end_of_IOCAF4_DefaultInterruptHandler 0004  
               _IOCAF4_DefaultInterruptHandler 0003                        __end_ofi1_USBDeviceInit 0EA1  
                  __end_of_USBCtrlTrfInHandler 0B61                               ?_TMR2_Initialize 0070  
                            ?_PS2Keyboard_Init 0070                   ?_Log_UtilityConvertByteToHex 00AC  
                           __end_of_IOCAF4_ISR 1F38                             __end_of_IOCAF5_ISR 1F45  
                                    ?i1___wmul 0070                    __end_ofi1_GenericQueue_Init 126E  
                           ??_PS2Keyboard_Init 00AC                                 _OPTION_REGbits 0095  
                                    ?i1_memcpy 0076                                      ?i1_memset 0070  
                         _eusartRxStatusBuffer 01A8                    ?_IOCAF5_SetInterruptHandler 00A8  
              ??_EUSART_SetOverrunErrorHandler 00AA                       ??_USBCtrlTrfSetupHandler 005F  
                      _USBTicksSinceSuspendEnd 0156                     ?i1_PS2Keyboard_SendCommand 0070  
              i1GenericQueue_Init@element_size 0072                                  _keyboardState 0155  
                             ?_USBDeviceAttach 0070                      __end_of_SYSTEM_Initialize 2000  
                        ??_EUSART_Transmit_ISR 0070                         _USBStdGetStatusHandler 15A9  
                   i1GenericQueue_Enqueue@item 0057                 __end_ofi1_GenericQueue_Enqueue 1800  
                                   __pbssBANK0 0063                                     __pbssBANK1 00E9  
                                   __pbssBANK2 0121                                     __pbssBANK3 01A0  
                         __end_of_EUSART_Write 12D3               ??_IOCAF5_DefaultInterruptHandler 0070  
              ?_IOCAF5_DefaultInterruptHandler 0070                                    _pBDTEntryIn 0063  
                      _IOCAF5_InterruptHandler 01CD                            _keyboardCommandBits 014D  
             __end_of_USBCtrlEPServiceComplete 0DFE                            _keyboardCommandOnes 014C  
             PS2Keyboard_ClockInterrupt@bitPos 007C             Log_UtilityConvertByteToHex@bufSize 00AD  
                                   __pmaintext 0A72              APP_KeyboardUpdateState@usbHidCode 00CC  
       APP_KeyboardUpdateState@usbHidCode_2855 00CE         APP_KeyboardUpdateState@usbHidCode_2864 00CF  
       APP_KeyboardUpdateState@usbHidCode_2856 00CD                           USBCtrlTrfRxService@i 0078  
               Log_UtilityConvertByteToHex@buf 00AC                                        ?___bmul 00A8  
                ?_EUSART_SetTxInterruptHandler 00A8               _EUSART_TxDefaultInterruptHandler 014A  
                                      ?___wmul 00AF                                     ??_TMR2_ISR 0070  
                                   __pintentry 0004                                        ?_memcmp 00B5  
                                      ?_memcpy 00B5                                        _BAUDCON 019F  
                                      ?_memset 00A8                                     _device_dsc 189C  
                             _USBCtrlEPService 1562                   ??_EUSART_DefaultErrorHandler 0071  
                                   _ep_data_in 013E                                     ??i1___wmul 0074  
                  __end_of_USBCtrlTrfRxService 1000                             _USBCheckStdRequest 098F  
                                _eusartRxCount 0164                              _configDescriptor1 1873  
                ??_Log_UtilityConvertByteToHex 00AE                                     ??i1_memcpy 007C  
                                   ??i1_memset 0074                                   _ps2ExtUsbMap 03FB  
       APP_KeyboardTasks@TimeDeltaMilliseconds 00D5                    __end_of_USBCtrlTrfTxService 1731  
                          _USBStdSetCfgHandler 0923                    ?_USBHIDCBSetIdleRateHandler 0070  
                             main@hndlScanCode 00E5                                        _OSCTUNE 0098  
                Log_UtilityConvertByteToHex@d0 00AF                  Log_UtilityConvertByteToHex@d1 00B1  
                     ??_EUSART_SetErrorHandler 00AA                            ?_USBCheckStdRequest 0070  
                             ?_TMR2_StartTimer 0070                                        _UIEbits 0E92  
            __end_ofi1_PS2Keyboard_SendCommand 112F                                        _UIRbits 0E90  
                        GenericQueue_Dequeue@q 00C0                    APP_KeyboardUpdateState@leds 00CB  
                                 i1memset@dest 0075                       ??i1_USBTransferOnePacket 0074  
                        GenericQueue_IsEmpty@q 00A8                              __end_of_ps2UsbMap 1084  
              ??_USBIncrement1msInternalTimers 0070                           ?_USBStdSetCfgHandler 0070  
                            _APP_KeyboardTasks 02F2                     ??_TMR2_SetInterruptHandler 00AA  
                            __end_of_hid_rpt01 183F                             Log_Message@bufSize 00AA  
                         ??_USBCheckStdRequest 005D                             ?_APP_KeyboardTasks 0070  
                                      ___awmod 151D                          GenericQueue_Enqueue@q 00C0  
                         i1GenericQueue_Init@q 0070                               ??_USBDeviceTasks 0061  
                   ??_USBHIDCBSetReportHandler 0070                              ??_USBStallHandler 0070  
                             _keyboardIdleRate 0138                               ?i1_USBDeviceInit 0070  
                    __end_of_configDescriptor1 189C                               _keyboardIsExtend 0150  
                                      _hex2str 1F8E                                        __ptext1 1F08  
                                      __ptext2 1E89                                        __ptext3 1FEB  
                                      __ptext4 1E86                                        __ptext5 0EA1  
                                      __ptext6 10FC                                        __ptext7 1F9F  
                                      __ptext8 1ED8                                        __ptext9 1344  
                                      _inPipes 00E9                    _USBDeferOUTDataStagePackets 0157  
                          ??_APP_KeyboardTasks 00D1                          _OSCILLATOR_Initialize 1F5F  
                                 ??_USBSuspend 007D                                      _T2CONbits 001C  
                             _keyboardScanCode 0168                               ___awmod@dividend 00AA  
                     ??_PIN_MANAGER_Initialize 00AA                                      _IOCAFbits 0393  
                     __end_of_APP_KeyboardInit 0852                                      _IOCANbits 0392  
                                    _IOCAPbits 0391                             __end_of_USB_CD_Ptr 18C8  
                                      clrloop0 1F20                       _SysTime_GetCurrentTimeMs 1EE0  
                         end_of_initialization 0083                    __end_of_GenericQueue_IsFull 1FEB  
                           __end_of_USB_SD_Ptr 18C2                                        memcmp@l 00BB  
                                      memcmp@n 00B8                                        memcmp@r 00BD  
                            ?_SysTimeInterrupt 0070          __end_of_EUSART_SetOverrunErrorHandler 1EC8  
                _EUSART_SetOverrunErrorHandler 1EC0                                        memcpy@d 00BB  
                                      memcpy@n 00B9                                        memcpy@s 00BD  
                          _pBDTEntryEP0OutNext 0067                    __end_of_GenericQueue_Remove 06E3  
                                      memset@c 00A8                                        memset@n 00AA  
                                      memset@p 00AD                                _USB1msTickCount 01C0  
                      _PS2Keyboard_GetScanCode 11B7                       ?_USBStdFeatureReqHandler 0070  
                           ??_SysTimeInterrupt 0070                      __end_of_APP_KeyboardTasks 03FB  
                            _EUSART_Initialize 1497                          ??_USBStdSetCfgHandler 007D  
                                   hex2str@val 00A8                             ?_EUSART_Initialize 0070  
                           __end_of_USBSuspend 10FC                        _USBCtrlEPAllowDataStage 1731  
                                    _RCSTAbits 019D                             _EUSART_is_tx_ready 1E99  
                                   _prevTimeMs 012C                       _USBCtrlEPServiceComplete 0D70  
                        i1___wmul@multiplicand 0072                     _USBStatusStageEnabledFlag1 015A  
                   _USBStatusStageEnabledFlag2 0159                            ??_EUSART_Initialize 00AA  
                             ??_WDT_Initialize 00A8                 ??_EUSART_SetTxInterruptHandler 00AA  
                           USBEnableEndpoint@p 007A                                      _PORTAbits 000C  
                          ?_EUSART_is_tx_ready 0070                          i1_GenericQueue_IsFull 1FC3  
                                    _TRISAbits 008C                             _BothEP0OutUOWNsSet 015D  
                    USBStdSetCfgHandler@i_2020 0058                                      i1___awmod 14D8  
                 ??_IOCAF4_SetInterruptHandler 00AA                      USBConfigureEndpoint@EPNum 0075  
                            _GenericQueue_Init 126E                     ?_USBCtrlEPAllowStatusStage 0070  
                      ??_GenericQueue_Contains 00C1            USER_USB_CALLBACK_EVENT_HANDLER@size 0054  
                                    _USTATcopy 006D                             ?_GenericQueue_Init 00A8  
                    __end_of_EUSART_Initialize 14D8                       i1USBTransferOnePacket@ep 0078  
                 __end_of_USBTransferOnePacket 0C61                           ??_EUSART_is_tx_ready 00A8  
                          ??_GenericQueue_Init 00AC                          i1USBDeviceInit@i_1324 0076  
                       _USBCtrlTrfSetupHandler 07B6                                   ?_Log_Message 00AA  
         __end_of_TMR2_DefaultInterruptHandler 07FF                   _TMR2_DefaultInterruptHandler 07FE  
                               __end_of___bmul 1F8E                          __end_of_USBDeviceInit 0F4D  
        __end_of_USBIncrement1msInternalTimers 10CC                  _USBIncrement1msInternalTimers 10B5  
           __end_of_EUSART_DefaultErrorHandler 1E83                     _EUSART_DefaultErrorHandler 1E80  
                                    i1memcpy@d 0050                                      i1memcpy@n 007A  
                                    i1memcpy@s 0052                                 __end_of___wmul 1165  
                                    i1memset@c 0070                                      i1memset@n 0072  
                                    i1memset@p 0076                                   _EUSART_Write 12B0  
                               __end_of_memcmp 13A6                                 __end_of_memcpy 1344  
                       ?_OSCILLATOR_Initialize 0070                                 __end_of_memset 10B5  
                   ?_USBHIDCBSetReportComplete 0070                              _USBBusIsSuspended 015F  
                          start_initialization 003F                        _APP_KeyboardUpdateState 0087  
                      ?_USBStdGetStatusHandler 0070                  USBCtrlTrfRxService@byteToRead 0079  
                    __end_of_GenericQueue_Init 128E                                     ?i1___awmod 0070  
                               _oldInputReport 01A0   EUSART_SetRxInterruptHandler@interruptHandler 00A8  
 EUSART_SetTxInterruptHandler@interruptHandler 00A8                    ??i1_PS2Keyboard_SendCommand 0070  
                 __end_of_USBConfigureEndpoint 1497                __end_of_USBStdFeatureReqHandler 02F2  
                    ??_PS2Keyboard_GetScanCode 00C7                   ??_PS2Keyboard_GetLastCommand 00A8  
            __end_of_USBCtrlEPAllowStatusStage 0A72                       __end_of_USBCtrlEPService 15A9  
                                ?_SysTime_Init 0070                      ??_USBCtrlEPAllowDataStage 0073  
                               USBDeviceInit@i 00AF                                 USBDeviceInit@p 00AC  
               ?_EUSART_SetOverrunErrorHandler 00A8                         _pBDTEntryEP0OutCurrent 006B  
                      USBTransferOnePacket@dir 00A8                        USBTransferOnePacket@len 00AB  
                   _EUSART_FramingErrorHandler 0144                                       ??___bmul 00A9  
                                     ??___wmul 00B3                         _EUSART_SetErrorHandler 1EB0  
                          _USBStdGetDscHandler 0C61                                    __pdataBANK3 01C7  
                           i1___awmod@dividend 0072                                       ??_memcmp 00BA  
                                     ??_memcpy 00BB                                       ??_memset 00AC  
                ?_TMR2_DefaultInterruptHandler 0070                       ?_PS2USB_ScanCodeToUSBHID 0070  
                                   memset@dest 00AE                PS2Keyboard_GetScanCode@scanCode 00C7  
                       i1_USBTransferOnePacket 0B61         __end_of_IOCAF5_DefaultInterruptHandler 0800  
               _IOCAF5_DefaultInterruptHandler 07FF                         ?i1_GenericQueue_IsFull 0070  
                       i1GenericQueue_IsFull@q 0070                         _USBActiveConfiguration 006F  
               __end_of_USBStdGetStatusHandler 1606                      i1USBTransferOnePacket@dir 0070  
                                  __pbssBIGRAM 232C                    __end_of_EUSART_Transmit_ISR 120F  
                    i1USBTransferOnePacket@len 0073              __end_of_USBHIDCBSetReportComplete 1E99  
                                    ___latbits 0002                                  __pcstackBANK0 0050  
                                __pcstackBANK1 00A8                      ?_GenericQueue_CopyToArray 00C0  
                         ?_USBStdGetDscHandler 0070                        _PS2Keyboard_SendCommand 119B  
    __end_ofi1_APP_KeyboardProcessOutputReport 080A        __end_of_APP_KeyboardProcessOutputReport 1F08  
          ??i1_APP_KeyboardProcessOutputReport 0071             ?i1_APP_KeyboardProcessOutputReport 0070  
             ?_APP_KeyboardProcessOutputReport 0070              ??_APP_KeyboardProcessOutputReport 00A9  
            i1_APP_KeyboardProcessOutputReport 0800                _APP_KeyboardProcessOutputReport 1EFD  
                   __end_of_EUSART_Receive_ISR 13E0                                   _keyboardData 0151  
                   __end_of_USBWakeFromSuspend 11F0               _EUSART_RxDefaultInterruptHandler 0148  
                               ??_SysTime_Init 00AA                                _USBStallHandler 128E  
                                 _pBDTEntryOut 0130                                      __pnvBANK2 016D  
                                    __pnvBANK3 01CD                           _keyboardCommandCount 0069  
                 __end_of_EUSART_RxDataHandler 10E4                                      _main$2580 00E2  
                                    _main$2579 00E0                         _PIN_MANAGER_Initialize 1344  
                    i1_PS2Keyboard_SendCommand 1115                                      __ptext100 0002  
                                    __ptext101 1E80                                      __ptext102 10CC  
              Log_UtilityConvertByteToHex@byte 00B0                                       ?___awmod 00A8  
                                    _ps2UsbMap 1000                   ??_PS2Keyboard_ClockInterrupt 005C  
                           GenericQueue_Init@q 00A8                                   _eusartRxHead 00EE  
                                 _eusartTxHead 0167                                      _hid_rpt01 1800  
                                 _eusartRxTail 0165                                   _eusartTxTail 0166  
                                    _idle_rate 016C                   ??_INTERRUPT_InterruptManager 007E  
                        _keyboardScanCodeValid 0152                                       ?_hex2str 0070  
                        _keyboardScanCodeQueue 2391                      ??_APP_KeyboardUpdateState 00C9  
                      _eusartTxBufferRemaining 00EF                     ??_SysTime_GetCurrentTimeMs 0074  
                         _USBTransferOnePacket 0BE1                           GenericQueue_IsFull@q 00A8  
           __end_of_IOCAF4_SetInterruptHandler 1EA8                     _IOCAF4_SetInterruptHandler 1EA0  
                 __end_of_USBCtrlTrfOutHandler 141A                              ?_APP_KeyboardInit 0070  
                                  ??i1___awmod 0074                          ??_USBStdGetDscHandler 0070  
                                  _ep_data_out 013C                  USBConfigureEndpoint@direction 0070  
                           ??_APP_KeyboardInit 007D                                 _eusartRxBuffer 01B0  
                               _eusartTxBuffer 01B8                           GenericQueue_Remove@i 00C7  
                         GenericQueue_Remove@j 00C8                           GenericQueue_Remove@q 00C0  
                               ___wmul@product 00B3                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 00A8                     __end_of_USBCheckHIDRequest 0D70  
                   ??_USBCtrlEPServiceComplete 0077                                      clear_ram0 1F1F  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 0163                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 00AA                                       _PIR2bits 0012  
              __end_of_PS2USB_ScanCodeToUSBHID 122E                                       _UEP0bits 0E98  
                                    main@F3300 01C4                                      main@F3304 01C7  
                   _USBDeferINDataStagePackets 0158      __end_of_EUSART_DefaultOverrunErrorHandler 1089  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 1085                                       _TMR2_ISR 1F13  
                                     _UCONbits 0E8E                              ??_PIN_MANAGER_IOC 007E  
                         _USBConfigureEndpoint 1458            __end_of_Log_UtilityConvertByteToHex 12F8  
                  _Log_UtilityConvertByteToHex 12D3                        GenericQueue_Remove@item 00C2  
                    APP_KeyboardTasks@scanCode 00D3                              ___wmul@multiplier 00AF  
                        ?_USBTransferOnePacket 00A8                                       i1___wmul 112F  
                              main@scanCodeStr 00DA                                       i1_memcpy 12F8  
                                     i1_memset 1089                       ??i1_GenericQueue_Enqueue 0059  
                                 _RemoteWakeup 0160                 ??_TMR2_DefaultInterruptHandler 0070  
                    ?_TMR2_SetInterruptHandler 00A8                     ?_PS2Keyboard_DataInterrupt 0070  
                    ??_PS2Keyboard_SendCommand 00A8                        __end_of_USBStallHandler 12B0  
           __end_of_PS2Keyboard_GetLastCommand 1E86                     _PS2Keyboard_GetLastCommand 1E83  
                    ?_USBHIDCBSetReportHandler 0070                               _PS2Keyboard_Init 1180  
                  ??_USBCtrlEPAllowStatusStage 0070                    __end_of_USBStdSetCfgHandler 098F  
                            ??_TMR2_Initialize 00AA                  __end_of_GenericQueue_Contains 1668  
                           __end_of_device_dsc 18AE                         GenericQueue_Contains@i 00C5  
                       GenericQueue_Contains@q 00BE                        ?_USBCtrlTrfSetupHandler 0070  
                      USBStdGetStatusHandler@p 0072                                      memcpy@tmp 00BF  
                       USBTransferOnePacket@ep 00B0                                       _SetupPkt 0040  
                            i1___awmod@divisor 0070                        ??_OSCILLATOR_Initialize 00A8  
                          _EUSART_ErrorHandler 0140                          ?_USBConfigureEndpoint 0070  
                            i1___awmod@counter 0075                              ??_USBDeviceAttach 00A8  
                  ?_EUSART_DefaultErrorHandler 0070                           __end_of_SysTime_Init 1F13  
                  ??_USBHIDCBSetReportComplete 0071                           _EUSART_RxDataHandler 10CC  
                                     __ptext10 1F5F                                       __ptext11 1497  
                                     __ptext20 126E                                       __ptext12 1ED0  
                                     __ptext21 11B7                                       __ptext13 1EC8  
                                     __ptext30 0BE1                                       __ptext22 08BA  
                                     __ptext14 1EC0                                       __ptext31 1668  
                                     __ptext23 12D3                                       __ptext15 1EB8  
                                     __ptext40 1606                                       __ptext32 1F7D  
                                     __ptext24 1F8E                                       __ptext16 1EB0  
                                     __ptext41 136F                                       __ptext33 0087  
                                     __ptext25 1165                                       __ptext17 1180  
                                     __ptext50 11D3                                       __ptext42 114A  
                                     __ptext34 120F                                       __ptext26 1E99  
                                     __ptext18 1EA8                                       __ptext51 10E4  
                                     __ptext43 151D                                       __ptext35 1E83  
                                     __ptext27 12B0                                       __ptext19 1EA0  
                                     __ptext60 1089                                       __ptext52 128E  
                                     __ptext44 1FB0                                       __ptext36 05EF  
                                     __ptext28 02F2                                       __ptext61 15A9  
                                     __ptext53 10B5                                       __ptext45 1EFD  
                                     __ptext37 0852                                       __ptext29 109F  
                                     __ptext70 124E                                       __ptext62 0C61  
                                     __ptext54 1562                                       __ptext46 119B  
                                     __ptext38 131E                                       __ptext71 122E  
                                     __ptext63 01D2                                       __ptext55 07B6  
                                     __ptext39 1FD7                                       __ptext80 16CA  
                                     __ptext72 1458                                       __ptext64 141A  
                                     __ptext56 0D70                                       __ptext48 06E3  
                                     __ptext81 1F13                                       __ptext73 13E0  
                                     __ptext65 0CE2                                       __ptext57 1731  
                                     __ptext49 0DFE                                       __ptext90 04FA  
                                     __ptext82 1EE9                                       __ptext74 0F4D  
                                     __ptext66 1F52                                       __ptext58 098F  
                                     __ptext91 1798                                       __ptext83 07FE  
                                     __ptext75 0A00                                       __ptext67 1F45  
                                     __ptext59 0923                                       __ptext92 12F8  
                                     __ptext84 1EF2                                       __ptext76 0AE6  
                                     __ptext68 080A                                       __ptext93 112F  
                                     __ptext85 1F38                                       __ptext77 1E92  
                                     __ptext69 0B61                                       __ptext94 14D8  
                                     __ptext86 07FF                                       __ptext78 0800  
                                     __ptext95 1FC3                                       __ptext87 1F6C  
                                     __ptext79 1115                                       __ptext96 1EE0  
                                     __ptext88 1F2B                                       __ptext97 11F0  
                                     __ptext89 0003                                       __ptext98 13A6  
                                     __ptext99 1085                   ??_IOCAF5_SetInterruptHandler 00AA  
            __end_of_PS2Keyboard_DataInterrupt 1F7D                              _keyboardIndexData 0154  
                                   _IOCAF4_ISR 1F2B                  GenericQueue_CopyToArray@array 00C2  
                                   _IOCAF5_ISR 1F38                  GenericQueue_CopyToArray@count 00C8  
                GenericQueue_CopyToArray@index 00C7                                       _keyboard 232C  
               __end_of_USBCtrlTrfSetupHandler 07FE                              ?_USBCtrlEPService 0070  
                           ??_USBCtrlEPService 0060                        ?_EUSART_SetErrorHandler 00A8  
                          _USBCtrlTrfInHandler 0AE6  EUSART_SetOverrunErrorHandler@interruptHandler 00A8  
                                  _inputReport 00A0             __end_of_PS2Keyboard_ClockInterrupt 05EF  
                   _PS2Keyboard_ClockInterrupt 04FA                              _keyboardOnesCount 0153  
                                     _outPipes 0121                           _USBCtrlTrfOutHandler 13E0  
                                     int$flags 007E                            i1_GenericQueue_Init 124E  
                      ?i1_USBTransferOnePacket 0070               __end_of_GenericQueue_CopyToArray 16CA  
                    _USBCtrlEPAllowStatusStage 0A00                              ??_TMR2_StartTimer 00A8  
           __end_of_INTERRUPT_InterruptManager 003D                     _INTERRUPT_InterruptManager 0004  
                      ??i1_GenericQueue_IsFull 0072          __end_of_EUSART_SetFramingErrorHandler 1EC0  
                _EUSART_SetFramingErrorHandler 1EB8                         ??_USBTransferOnePacket 00AC  
             __end_of_SysTime_GetCurrentTimeMs 1EE9                   __end_of_GenericQueue_Dequeue 0923  
                 __end_of_GenericQueue_IsEmpty 1FC3                      _USBDeferStatusStagePacket 015B  
                             i1USBDeviceInit@i 0077                               i1USBDeviceInit@p 0074  
                                   _INTCONbits 000B                   __end_of_GenericQueue_Enqueue 08BA  
                         ?_USBCtrlTrfInHandler 0070                                       memcmp@vl 00B5  
                                     memcmp@vr 00B7                          ?_EUSART_RxDataHandler 0070  
                                     memcpy@d1 00B5                                       memcpy@s1 00B7  
                USBCtrlTrfTxService@byteToSend 0072                                 Log_Message@buf 00AC  
                               __pstringtext10 18C2                   ??_USBHIDCBSetIdleRateHandler 0071  
                             ?_USBStallHandler 0070                           ?i1_GenericQueue_Init 0070  
                     USBStdFeatureReqHandler@p 005B                                       intlevel1 0000  
      __end_of_USER_USB_CALLBACK_EVENT_HANDLER 1458               ?_USER_USB_CALLBACK_EVENT_HANDLER 0050  
            ??_USER_USB_CALLBACK_EVENT_HANDLER 007D                _USER_USB_CALLBACK_EVENT_HANDLER 141A  
                            ??i1_USBDeviceInit 0070                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 1EB8                      _USBHIDCBSetReportComplete 1E92  
         __end_of_EUSART_SetRxInterruptHandler 1ED0                   _EUSART_SetRxInterruptHandler 1EC8  
                    GenericQueue_CopyToArray@q 00C0                      GenericQueue_Contains@item 00C0  
               __end_ofi1_USBTransferOnePacket 0BE1                         ??_USBConfigureEndpoint 0071  
                        ?_USBCtrlTrfOutHandler 0070                             _EUSART_Receive_ISR 13A6  
                          _USBCtrlTrfRxService 0F4D  EUSART_SetFramingErrorHandler@interruptHandler 00A8  
                           _USBWakeFromSuspend 11D3                               _SysTimeInterrupt 1EE9  
                      _USBStdFeatureReqHandler 01D2                     PS2Keyboard_GetScanCode@ret 00C8  
                          _USBCtrlTrfTxService 16CA                                  __pstringtext1 03FB  
                                __pstringtext2 1000                                  __pstringtext3 18BC  
                                __pstringtext4 18C6                                  __pstringtext5 1800  
                                __pstringtext6 183F                                  __pstringtext7 1873  
                                __pstringtext8 189C                                  __pstringtext9 18AE  
                          ?_EUSART_Receive_ISR 0070                            ?_USBWakeFromSuspend 0070  
                        ??_USBCtrlTrfInHandler 0073                          _USBAlternateInterface 006E  
                     ?_PS2Keyboard_GetScanCode 0070                    ?_IOCAF4_SetInterruptHandler 00A8  
        USBHIDCBSetIdleRateHandler@newIdleRate 0070                            USBEnableEndpoint@ep 007C  
                              _endpoint_number 015E                          ??i1_GenericQueue_Init 0074  
                         ?_USBCtrlTrfRxService 0070                                    ?_IOCAF4_ISR 0070  
                                  ?_IOCAF5_ISR 0070                             EUSART_Write@txData 00A9  
               __end_of_PIN_MANAGER_Initialize 136F                       ?_USBCtrlEPAllowDataStage 0070  
                         ?_USBCtrlTrfTxService 0070                                     _SOFCounter 013A  
             ??_IOCAF4_DefaultInterruptHandler 0070                ?_IOCAF4_DefaultInterruptHandler 0070  
                 _USBStatusStageTimeoutCounter 015C                                _PIN_MANAGER_IOC 1EF2  
                         ??_EUSART_Receive_ISR 0071                          _TMR2_InterruptHandler 0146  
                         ??_USBWakeFromSuspend 007D                     USBTransferOnePacket@handle 00B1  
   APP_KeyboardTasks@needToSendNewReportPacket 00D4                         i1_GenericQueue_Enqueue 1798  
                                   _USB_CD_Ptr 18C6  
