

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Oct 24 09:44:13 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og9 
     1                           	processor	16F1455
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    15                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    22                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    25                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    27                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    28                           	psect	text1,local,class=CODE,merge=1,delta=2
    29                           	psect	text2,local,class=CODE,merge=1,delta=2
    30                           	psect	text3,local,class=CODE,merge=1,delta=2
    31                           	psect	text4,local,class=CODE,merge=1,delta=2
    32                           	psect	text5,local,class=CODE,merge=1,delta=2
    33                           	psect	text6,local,class=CODE,merge=1,delta=2
    34                           	psect	text7,local,class=CODE,merge=1,delta=2
    35                           	psect	text8,local,class=CODE,merge=1,delta=2
    36                           	psect	text9,local,class=CODE,merge=1,delta=2
    37                           	psect	text10,local,class=CODE,merge=1,delta=2
    38                           	psect	text11,local,class=CODE,merge=1,delta=2
    39                           	psect	text12,local,class=CODE,merge=1,delta=2
    40                           	psect	text13,local,class=CODE,merge=1,delta=2
    41                           	psect	text14,local,class=CODE,merge=1,delta=2
    42                           	psect	text15,local,class=CODE,merge=1,delta=2
    43                           	psect	text16,local,class=CODE,merge=1,delta=2
    44                           	psect	text17,local,class=CODE,merge=1,delta=2
    45                           	psect	text18,local,class=CODE,merge=1,delta=2
    46                           	psect	text19,local,class=CODE,merge=1,delta=2
    47                           	psect	text20,local,class=CODE,merge=1,delta=2
    48                           	psect	text21,local,class=CODE,merge=1,delta=2
    49                           	psect	text22,local,class=CODE,merge=1,delta=2
    50                           	psect	text23,local,class=CODE,merge=1,delta=2
    51                           	psect	text24,local,class=CODE,merge=1,delta=2
    52                           	psect	text25,local,class=CODE,merge=1,delta=2
    53                           	psect	text26,local,class=CODE,merge=1,delta=2
    54                           	psect	text27,local,class=CODE,merge=1,delta=2
    55                           	psect	text28,local,class=CODE,merge=1,delta=2
    56                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text30,local,class=CODE,merge=1,delta=2
    58                           	psect	text31,local,class=CODE,merge=1,delta=2
    59                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text33,local,class=CODE,merge=1,delta=2
    61                           	psect	text34,local,class=CODE,merge=1,delta=2
    62                           	psect	text35,local,class=CODE,merge=1,delta=2
    63                           	psect	text36,local,class=CODE,merge=1,delta=2
    64                           	psect	text37,local,class=CODE,merge=1,delta=2
    65                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text39,local,class=CODE,merge=1,delta=2
    67                           	psect	text40,local,class=CODE,merge=1,delta=2
    68                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    69                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    71                           	psect	text44,local,class=CODE,merge=1,delta=2
    72                           	psect	text45,local,class=CODE,merge=1,delta=2
    73                           	psect	text46,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text48,local,class=CODE,merge=1,delta=2
    76                           	psect	text49,local,class=CODE,merge=1,delta=2
    77                           	psect	text50,local,class=CODE,merge=1,delta=2
    78                           	psect	text51,local,class=CODE,merge=1,delta=2
    79                           	psect	text52,local,class=CODE,merge=1,delta=2
    80                           	psect	text53,local,class=CODE,merge=1,delta=2
    81                           	psect	text54,local,class=CODE,merge=1,delta=2
    82                           	psect	text55,local,class=CODE,merge=1,delta=2
    83                           	psect	text56,local,class=CODE,merge=1,delta=2
    84                           	psect	text57,local,class=CODE,merge=1,delta=2
    85                           	psect	text58,local,class=CODE,merge=1,delta=2
    86                           	psect	text59,local,class=CODE,merge=1,delta=2
    87                           	psect	text60,local,class=CODE,merge=1,delta=2
    88                           	psect	text61,local,class=CODE,merge=1,delta=2
    89                           	psect	text62,local,class=CODE,merge=1,delta=2
    90                           	psect	text63,local,class=CODE,merge=1,delta=2
    91                           	psect	text64,local,class=CODE,merge=1,delta=2
    92                           	psect	text65,local,class=CODE,merge=1,delta=2
    93                           	psect	text66,local,class=CODE,merge=1,delta=2
    94                           	psect	text67,local,class=CODE,merge=1,delta=2
    95                           	psect	text68,local,class=CODE,merge=1,delta=2
    96                           	psect	text69,local,class=CODE,merge=1,delta=2
    97                           	psect	text70,local,class=CODE,merge=1,delta=2
    98                           	psect	text71,local,class=CODE,merge=1,delta=2
    99                           	psect	text72,local,class=CODE,merge=1,delta=2
   100                           	psect	text73,local,class=CODE,merge=1,delta=2
   101                           	psect	text74,local,class=CODE,merge=1,delta=2
   102                           	psect	text75,local,class=CODE,merge=1,delta=2
   103                           	psect	text76,local,class=CODE,merge=1,delta=2
   104                           	psect	text77,local,class=CODE,merge=1,delta=2
   105                           	psect	text78,local,class=CODE,merge=1,delta=2
   106                           	psect	text79,local,class=CODE,merge=1,delta=2
   107                           	psect	text80,local,class=CODE,merge=1,delta=2
   108                           	psect	text81,local,class=CODE,merge=1,delta=2
   109                           	psect	text82,local,class=CODE,merge=1,delta=2
   110                           	psect	text83,local,class=CODE,merge=1,delta=2
   111                           	psect	text84,local,class=CODE,merge=1,delta=2
   112                           	psect	text85,local,class=CODE,merge=1,delta=2
   113                           	psect	text86,local,class=CODE,merge=1,delta=2
   114                           	psect	text87,local,class=CODE,merge=1,delta=2
   115                           	psect	text88,local,class=CODE,merge=1,delta=2
   116                           	psect	text89,local,class=CODE,merge=1,delta=2
   117                           	psect	text90,local,class=CODE,merge=1,delta=2
   118                           	psect	text91,local,class=CODE,merge=1,delta=2
   119                           	psect	text92,local,class=CODE,merge=1,delta=2
   120                           	psect	text93,local,class=CODE,merge=1,delta=2
   121                           	psect	text94,local,class=CODE,merge=1,delta=2
   122                           	psect	text95,local,class=CODE,merge=1,delta=2
   123                           	psect	text96,local,class=CODE,merge=1,delta=2
   124                           	psect	text97,local,class=CODE,merge=1,delta=2
   125                           	psect	text98,local,class=CODE,merge=1,delta=2
   126                           	psect	text99,local,class=CODE,merge=1,delta=2
   127                           	psect	text100,local,class=CODE,merge=1,delta=2
   128                           	psect	text101,local,class=CODE,merge=1,delta=2
   129                           	psect	text102,local,class=CODE,merge=1,delta=2
   130                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   131                           	dabs	1,0x620,48
   132                           	dabs	1,0x5C1,47
   133                           	dabs	1,0x5A0,33
   134                           	dabs	1,0x52C,68
   135                           	dabs	1,0x20,32,_BDT
   136                           	dabs	1,0x48,8,_CtrlTrfData
   137                           	dabs	1,0x40,8,_SetupPkt
   138                           	dabs	1,0xA0,8,_inputReport
   139                           	dabs	1,0x120,1,_outputReport
   140                           	dabs	1,0x232C,0,_keyboard
   141                           	dabs	1,0x2391,0,_keyboardScanCodeQueue
   142                           	dabs	1,0x7E,2
   143     0000                     
   144                           ; Generated 07/09/2023 GMT
   145                           ; 
   146                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   147                           ; All rights reserved.
   148                           ; 
   149                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   150                           ; 
   151                           ; Redistribution and use in source and binary forms, with or without modification, are
   152                           ; permitted provided that the following conditions are met:
   153                           ; 
   154                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   155                           ;        conditions and the following disclaimer.
   156                           ; 
   157                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   158                           ;        of conditions and the following disclaimer in the documentation and/or other
   159                           ;        materials provided with the distribution. Publication is not required when
   160                           ;        this file is used in an embedded application.
   161                           ; 
   162                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   163                           ;        software without specific prior written permission.
   164                           ; 
   165                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   166                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   167                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   168                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   169                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   170                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   171                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   172                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   173                           ; 
   174                           ; 
   175                           ; Code-generator required, PIC16F1455 Definitions
   176                           ; 
   177                           ; SFR Addresses
   178     0000                     	;# 
   179     0001                     	;# 
   180     0002                     	;# 
   181     0003                     	;# 
   182     0004                     	;# 
   183     0005                     	;# 
   184     0006                     	;# 
   185     0007                     	;# 
   186     0008                     	;# 
   187     0009                     	;# 
   188     000A                     	;# 
   189     000B                     	;# 
   190     000C                     	;# 
   191     000E                     	;# 
   192     0011                     	;# 
   193     0012                     	;# 
   194     0015                     	;# 
   195     0016                     	;# 
   196     0016                     	;# 
   197     0017                     	;# 
   198     0018                     	;# 
   199     0019                     	;# 
   200     001A                     	;# 
   201     001B                     	;# 
   202     001C                     	;# 
   203     008C                     	;# 
   204     008E                     	;# 
   205     0091                     	;# 
   206     0092                     	;# 
   207     0095                     	;# 
   208     0096                     	;# 
   209     0097                     	;# 
   210     0098                     	;# 
   211     0099                     	;# 
   212     009A                     	;# 
   213     009B                     	;# 
   214     009B                     	;# 
   215     009C                     	;# 
   216     009D                     	;# 
   217     009E                     	;# 
   218     009F                     	;# 
   219     010C                     	;# 
   220     010E                     	;# 
   221     0111                     	;# 
   222     0112                     	;# 
   223     0113                     	;# 
   224     0114                     	;# 
   225     0115                     	;# 
   226     0116                     	;# 
   227     0117                     	;# 
   228     0118                     	;# 
   229     0119                     	;# 
   230     011D                     	;# 
   231     018C                     	;# 
   232     018E                     	;# 
   233     0191                     	;# 
   234     0191                     	;# 
   235     0192                     	;# 
   236     0193                     	;# 
   237     0193                     	;# 
   238     0194                     	;# 
   239     0195                     	;# 
   240     0196                     	;# 
   241     0197                     	;# 
   242     0199                     	;# 
   243     019A                     	;# 
   244     019B                     	;# 
   245     019B                     	;# 
   246     019C                     	;# 
   247     019D                     	;# 
   248     019E                     	;# 
   249     019F                     	;# 
   250     020C                     	;# 
   251     0211                     	;# 
   252     0211                     	;# 
   253     0212                     	;# 
   254     0212                     	;# 
   255     0213                     	;# 
   256     0213                     	;# 
   257     0214                     	;# 
   258     0214                     	;# 
   259     0215                     	;# 
   260     0215                     	;# 
   261     0215                     	;# 
   262     0216                     	;# 
   263     0216                     	;# 
   264     0217                     	;# 
   265     0217                     	;# 
   266     0391                     	;# 
   267     0392                     	;# 
   268     0393                     	;# 
   269     039A                     	;# 
   270     039B                     	;# 
   271     0611                     	;# 
   272     0612                     	;# 
   273     0613                     	;# 
   274     0613                     	;# 
   275     0614                     	;# 
   276     0615                     	;# 
   277     0616                     	;# 
   278     0616                     	;# 
   279     0691                     	;# 
   280     0692                     	;# 
   281     0693                     	;# 
   282     0694                     	;# 
   283     0695                     	;# 
   284     0E8E                     	;# 
   285     0E8F                     	;# 
   286     0E90                     	;# 
   287     0E91                     	;# 
   288     0E92                     	;# 
   289     0E93                     	;# 
   290     0E94                     	;# 
   291     0E94                     	;# 
   292     0E95                     	;# 
   293     0E96                     	;# 
   294     0E97                     	;# 
   295     0E98                     	;# 
   296     0E99                     	;# 
   297     0E9A                     	;# 
   298     0E9B                     	;# 
   299     0E9C                     	;# 
   300     0E9D                     	;# 
   301     0E9E                     	;# 
   302     0E9F                     	;# 
   303     0FE4                     	;# 
   304     0FE5                     	;# 
   305     0FE6                     	;# 
   306     0FE7                     	;# 
   307     0FE8                     	;# 
   308     0FE9                     	;# 
   309     0FEA                     	;# 
   310     0FEB                     	;# 
   311     0FED                     	;# 
   312     0FEE                     	;# 
   313     0FEF                     	;# 
   314     0000                     	;# 
   315     0001                     	;# 
   316     0002                     	;# 
   317     0003                     	;# 
   318     0004                     	;# 
   319     0005                     	;# 
   320     0006                     	;# 
   321     0007                     	;# 
   322     0008                     	;# 
   323     0009                     	;# 
   324     000A                     	;# 
   325     000B                     	;# 
   326     000C                     	;# 
   327     000E                     	;# 
   328     0011                     	;# 
   329     0012                     	;# 
   330     0015                     	;# 
   331     0016                     	;# 
   332     0016                     	;# 
   333     0017                     	;# 
   334     0018                     	;# 
   335     0019                     	;# 
   336     001A                     	;# 
   337     001B                     	;# 
   338     001C                     	;# 
   339     008C                     	;# 
   340     008E                     	;# 
   341     0091                     	;# 
   342     0092                     	;# 
   343     0095                     	;# 
   344     0096                     	;# 
   345     0097                     	;# 
   346     0098                     	;# 
   347     0099                     	;# 
   348     009A                     	;# 
   349     009B                     	;# 
   350     009B                     	;# 
   351     009C                     	;# 
   352     009D                     	;# 
   353     009E                     	;# 
   354     009F                     	;# 
   355     010C                     	;# 
   356     010E                     	;# 
   357     0111                     	;# 
   358     0112                     	;# 
   359     0113                     	;# 
   360     0114                     	;# 
   361     0115                     	;# 
   362     0116                     	;# 
   363     0117                     	;# 
   364     0118                     	;# 
   365     0119                     	;# 
   366     011D                     	;# 
   367     018C                     	;# 
   368     018E                     	;# 
   369     0191                     	;# 
   370     0191                     	;# 
   371     0192                     	;# 
   372     0193                     	;# 
   373     0193                     	;# 
   374     0194                     	;# 
   375     0195                     	;# 
   376     0196                     	;# 
   377     0197                     	;# 
   378     0199                     	;# 
   379     019A                     	;# 
   380     019B                     	;# 
   381     019B                     	;# 
   382     019C                     	;# 
   383     019D                     	;# 
   384     019E                     	;# 
   385     019F                     	;# 
   386     020C                     	;# 
   387     0211                     	;# 
   388     0211                     	;# 
   389     0212                     	;# 
   390     0212                     	;# 
   391     0213                     	;# 
   392     0213                     	;# 
   393     0214                     	;# 
   394     0214                     	;# 
   395     0215                     	;# 
   396     0215                     	;# 
   397     0215                     	;# 
   398     0216                     	;# 
   399     0216                     	;# 
   400     0217                     	;# 
   401     0217                     	;# 
   402     0391                     	;# 
   403     0392                     	;# 
   404     0393                     	;# 
   405     039A                     	;# 
   406     039B                     	;# 
   407     0611                     	;# 
   408     0612                     	;# 
   409     0613                     	;# 
   410     0613                     	;# 
   411     0614                     	;# 
   412     0615                     	;# 
   413     0616                     	;# 
   414     0616                     	;# 
   415     0691                     	;# 
   416     0692                     	;# 
   417     0693                     	;# 
   418     0694                     	;# 
   419     0695                     	;# 
   420     0E8E                     	;# 
   421     0E8F                     	;# 
   422     0E90                     	;# 
   423     0E91                     	;# 
   424     0E92                     	;# 
   425     0E93                     	;# 
   426     0E94                     	;# 
   427     0E94                     	;# 
   428     0E95                     	;# 
   429     0E96                     	;# 
   430     0E97                     	;# 
   431     0E98                     	;# 
   432     0E99                     	;# 
   433     0E9A                     	;# 
   434     0E9B                     	;# 
   435     0E9C                     	;# 
   436     0E9D                     	;# 
   437     0E9E                     	;# 
   438     0E9F                     	;# 
   439     0FE4                     	;# 
   440     0FE5                     	;# 
   441     0FE6                     	;# 
   442     0FE7                     	;# 
   443     0FE8                     	;# 
   444     0FE9                     	;# 
   445     0FEA                     	;# 
   446     0FEB                     	;# 
   447     0FED                     	;# 
   448     0FEE                     	;# 
   449     0FEF                     	;# 
   450     0000                     	;# 
   451     0001                     	;# 
   452     0002                     	;# 
   453     0003                     	;# 
   454     0004                     	;# 
   455     0005                     	;# 
   456     0006                     	;# 
   457     0007                     	;# 
   458     0008                     	;# 
   459     0009                     	;# 
   460     000A                     	;# 
   461     000B                     	;# 
   462     000C                     	;# 
   463     000E                     	;# 
   464     0011                     	;# 
   465     0012                     	;# 
   466     0015                     	;# 
   467     0016                     	;# 
   468     0016                     	;# 
   469     0017                     	;# 
   470     0018                     	;# 
   471     0019                     	;# 
   472     001A                     	;# 
   473     001B                     	;# 
   474     001C                     	;# 
   475     008C                     	;# 
   476     008E                     	;# 
   477     0091                     	;# 
   478     0092                     	;# 
   479     0095                     	;# 
   480     0096                     	;# 
   481     0097                     	;# 
   482     0098                     	;# 
   483     0099                     	;# 
   484     009A                     	;# 
   485     009B                     	;# 
   486     009B                     	;# 
   487     009C                     	;# 
   488     009D                     	;# 
   489     009E                     	;# 
   490     009F                     	;# 
   491     010C                     	;# 
   492     010E                     	;# 
   493     0111                     	;# 
   494     0112                     	;# 
   495     0113                     	;# 
   496     0114                     	;# 
   497     0115                     	;# 
   498     0116                     	;# 
   499     0117                     	;# 
   500     0118                     	;# 
   501     0119                     	;# 
   502     011D                     	;# 
   503     018C                     	;# 
   504     018E                     	;# 
   505     0191                     	;# 
   506     0191                     	;# 
   507     0192                     	;# 
   508     0193                     	;# 
   509     0193                     	;# 
   510     0194                     	;# 
   511     0195                     	;# 
   512     0196                     	;# 
   513     0197                     	;# 
   514     0199                     	;# 
   515     019A                     	;# 
   516     019B                     	;# 
   517     019B                     	;# 
   518     019C                     	;# 
   519     019D                     	;# 
   520     019E                     	;# 
   521     019F                     	;# 
   522     020C                     	;# 
   523     0211                     	;# 
   524     0211                     	;# 
   525     0212                     	;# 
   526     0212                     	;# 
   527     0213                     	;# 
   528     0213                     	;# 
   529     0214                     	;# 
   530     0214                     	;# 
   531     0215                     	;# 
   532     0215                     	;# 
   533     0215                     	;# 
   534     0216                     	;# 
   535     0216                     	;# 
   536     0217                     	;# 
   537     0217                     	;# 
   538     0391                     	;# 
   539     0392                     	;# 
   540     0393                     	;# 
   541     039A                     	;# 
   542     039B                     	;# 
   543     0611                     	;# 
   544     0612                     	;# 
   545     0613                     	;# 
   546     0613                     	;# 
   547     0614                     	;# 
   548     0615                     	;# 
   549     0616                     	;# 
   550     0616                     	;# 
   551     0691                     	;# 
   552     0692                     	;# 
   553     0693                     	;# 
   554     0694                     	;# 
   555     0695                     	;# 
   556     0E8E                     	;# 
   557     0E8F                     	;# 
   558     0E90                     	;# 
   559     0E91                     	;# 
   560     0E92                     	;# 
   561     0E93                     	;# 
   562     0E94                     	;# 
   563     0E94                     	;# 
   564     0E95                     	;# 
   565     0E96                     	;# 
   566     0E97                     	;# 
   567     0E98                     	;# 
   568     0E99                     	;# 
   569     0E9A                     	;# 
   570     0E9B                     	;# 
   571     0E9C                     	;# 
   572     0E9D                     	;# 
   573     0E9E                     	;# 
   574     0E9F                     	;# 
   575     0FE4                     	;# 
   576     0FE5                     	;# 
   577     0FE6                     	;# 
   578     0FE7                     	;# 
   579     0FE8                     	;# 
   580     0FE9                     	;# 
   581     0FEA                     	;# 
   582     0FEB                     	;# 
   583     0FED                     	;# 
   584     0FEE                     	;# 
   585     0FEF                     	;# 
   586     0000                     	;# 
   587     0001                     	;# 
   588     0002                     	;# 
   589     0003                     	;# 
   590     0004                     	;# 
   591     0005                     	;# 
   592     0006                     	;# 
   593     0007                     	;# 
   594     0008                     	;# 
   595     0009                     	;# 
   596     000A                     	;# 
   597     000B                     	;# 
   598     000C                     	;# 
   599     000E                     	;# 
   600     0011                     	;# 
   601     0012                     	;# 
   602     0015                     	;# 
   603     0016                     	;# 
   604     0016                     	;# 
   605     0017                     	;# 
   606     0018                     	;# 
   607     0019                     	;# 
   608     001A                     	;# 
   609     001B                     	;# 
   610     001C                     	;# 
   611     008C                     	;# 
   612     008E                     	;# 
   613     0091                     	;# 
   614     0092                     	;# 
   615     0095                     	;# 
   616     0096                     	;# 
   617     0097                     	;# 
   618     0098                     	;# 
   619     0099                     	;# 
   620     009A                     	;# 
   621     009B                     	;# 
   622     009B                     	;# 
   623     009C                     	;# 
   624     009D                     	;# 
   625     009E                     	;# 
   626     009F                     	;# 
   627     010C                     	;# 
   628     010E                     	;# 
   629     0111                     	;# 
   630     0112                     	;# 
   631     0113                     	;# 
   632     0114                     	;# 
   633     0115                     	;# 
   634     0116                     	;# 
   635     0117                     	;# 
   636     0118                     	;# 
   637     0119                     	;# 
   638     011D                     	;# 
   639     018C                     	;# 
   640     018E                     	;# 
   641     0191                     	;# 
   642     0191                     	;# 
   643     0192                     	;# 
   644     0193                     	;# 
   645     0193                     	;# 
   646     0194                     	;# 
   647     0195                     	;# 
   648     0196                     	;# 
   649     0197                     	;# 
   650     0199                     	;# 
   651     019A                     	;# 
   652     019B                     	;# 
   653     019B                     	;# 
   654     019C                     	;# 
   655     019D                     	;# 
   656     019E                     	;# 
   657     019F                     	;# 
   658     020C                     	;# 
   659     0211                     	;# 
   660     0211                     	;# 
   661     0212                     	;# 
   662     0212                     	;# 
   663     0213                     	;# 
   664     0213                     	;# 
   665     0214                     	;# 
   666     0214                     	;# 
   667     0215                     	;# 
   668     0215                     	;# 
   669     0215                     	;# 
   670     0216                     	;# 
   671     0216                     	;# 
   672     0217                     	;# 
   673     0217                     	;# 
   674     0391                     	;# 
   675     0392                     	;# 
   676     0393                     	;# 
   677     039A                     	;# 
   678     039B                     	;# 
   679     0611                     	;# 
   680     0612                     	;# 
   681     0613                     	;# 
   682     0613                     	;# 
   683     0614                     	;# 
   684     0615                     	;# 
   685     0616                     	;# 
   686     0616                     	;# 
   687     0691                     	;# 
   688     0692                     	;# 
   689     0693                     	;# 
   690     0694                     	;# 
   691     0695                     	;# 
   692     0E8E                     	;# 
   693     0E8F                     	;# 
   694     0E90                     	;# 
   695     0E91                     	;# 
   696     0E92                     	;# 
   697     0E93                     	;# 
   698     0E94                     	;# 
   699     0E94                     	;# 
   700     0E95                     	;# 
   701     0E96                     	;# 
   702     0E97                     	;# 
   703     0E98                     	;# 
   704     0E99                     	;# 
   705     0E9A                     	;# 
   706     0E9B                     	;# 
   707     0E9C                     	;# 
   708     0E9D                     	;# 
   709     0E9E                     	;# 
   710     0E9F                     	;# 
   711     0FE4                     	;# 
   712     0FE5                     	;# 
   713     0FE6                     	;# 
   714     0FE7                     	;# 
   715     0FE8                     	;# 
   716     0FE9                     	;# 
   717     0FEA                     	;# 
   718     0FEB                     	;# 
   719     0FED                     	;# 
   720     0FEE                     	;# 
   721     0FEF                     	;# 
   722     0000                     	;# 
   723     0001                     	;# 
   724     0002                     	;# 
   725     0003                     	;# 
   726     0004                     	;# 
   727     0005                     	;# 
   728     0006                     	;# 
   729     0007                     	;# 
   730     0008                     	;# 
   731     0009                     	;# 
   732     000A                     	;# 
   733     000B                     	;# 
   734     000C                     	;# 
   735     000E                     	;# 
   736     0011                     	;# 
   737     0012                     	;# 
   738     0015                     	;# 
   739     0016                     	;# 
   740     0016                     	;# 
   741     0017                     	;# 
   742     0018                     	;# 
   743     0019                     	;# 
   744     001A                     	;# 
   745     001B                     	;# 
   746     001C                     	;# 
   747     008C                     	;# 
   748     008E                     	;# 
   749     0091                     	;# 
   750     0092                     	;# 
   751     0095                     	;# 
   752     0096                     	;# 
   753     0097                     	;# 
   754     0098                     	;# 
   755     0099                     	;# 
   756     009A                     	;# 
   757     009B                     	;# 
   758     009B                     	;# 
   759     009C                     	;# 
   760     009D                     	;# 
   761     009E                     	;# 
   762     009F                     	;# 
   763     010C                     	;# 
   764     010E                     	;# 
   765     0111                     	;# 
   766     0112                     	;# 
   767     0113                     	;# 
   768     0114                     	;# 
   769     0115                     	;# 
   770     0116                     	;# 
   771     0117                     	;# 
   772     0118                     	;# 
   773     0119                     	;# 
   774     011D                     	;# 
   775     018C                     	;# 
   776     018E                     	;# 
   777     0191                     	;# 
   778     0191                     	;# 
   779     0192                     	;# 
   780     0193                     	;# 
   781     0193                     	;# 
   782     0194                     	;# 
   783     0195                     	;# 
   784     0196                     	;# 
   785     0197                     	;# 
   786     0199                     	;# 
   787     019A                     	;# 
   788     019B                     	;# 
   789     019B                     	;# 
   790     019C                     	;# 
   791     019D                     	;# 
   792     019E                     	;# 
   793     019F                     	;# 
   794     020C                     	;# 
   795     0211                     	;# 
   796     0211                     	;# 
   797     0212                     	;# 
   798     0212                     	;# 
   799     0213                     	;# 
   800     0213                     	;# 
   801     0214                     	;# 
   802     0214                     	;# 
   803     0215                     	;# 
   804     0215                     	;# 
   805     0215                     	;# 
   806     0216                     	;# 
   807     0216                     	;# 
   808     0217                     	;# 
   809     0217                     	;# 
   810     0391                     	;# 
   811     0392                     	;# 
   812     0393                     	;# 
   813     039A                     	;# 
   814     039B                     	;# 
   815     0611                     	;# 
   816     0612                     	;# 
   817     0613                     	;# 
   818     0613                     	;# 
   819     0614                     	;# 
   820     0615                     	;# 
   821     0616                     	;# 
   822     0616                     	;# 
   823     0691                     	;# 
   824     0692                     	;# 
   825     0693                     	;# 
   826     0694                     	;# 
   827     0695                     	;# 
   828     0E8E                     	;# 
   829     0E8F                     	;# 
   830     0E90                     	;# 
   831     0E91                     	;# 
   832     0E92                     	;# 
   833     0E93                     	;# 
   834     0E94                     	;# 
   835     0E94                     	;# 
   836     0E95                     	;# 
   837     0E96                     	;# 
   838     0E97                     	;# 
   839     0E98                     	;# 
   840     0E99                     	;# 
   841     0E9A                     	;# 
   842     0E9B                     	;# 
   843     0E9C                     	;# 
   844     0E9D                     	;# 
   845     0E9E                     	;# 
   846     0E9F                     	;# 
   847     0FE4                     	;# 
   848     0FE5                     	;# 
   849     0FE6                     	;# 
   850     0FE7                     	;# 
   851     0FE8                     	;# 
   852     0FE9                     	;# 
   853     0FEA                     	;# 
   854     0FEB                     	;# 
   855     0FED                     	;# 
   856     0FEE                     	;# 
   857     0FEF                     	;# 
   858     0000                     	;# 
   859     0001                     	;# 
   860     0002                     	;# 
   861     0003                     	;# 
   862     0004                     	;# 
   863     0005                     	;# 
   864     0006                     	;# 
   865     0007                     	;# 
   866     0008                     	;# 
   867     0009                     	;# 
   868     000A                     	;# 
   869     000B                     	;# 
   870     000C                     	;# 
   871     000E                     	;# 
   872     0011                     	;# 
   873     0012                     	;# 
   874     0015                     	;# 
   875     0016                     	;# 
   876     0016                     	;# 
   877     0017                     	;# 
   878     0018                     	;# 
   879     0019                     	;# 
   880     001A                     	;# 
   881     001B                     	;# 
   882     001C                     	;# 
   883     008C                     	;# 
   884     008E                     	;# 
   885     0091                     	;# 
   886     0092                     	;# 
   887     0095                     	;# 
   888     0096                     	;# 
   889     0097                     	;# 
   890     0098                     	;# 
   891     0099                     	;# 
   892     009A                     	;# 
   893     009B                     	;# 
   894     009B                     	;# 
   895     009C                     	;# 
   896     009D                     	;# 
   897     009E                     	;# 
   898     009F                     	;# 
   899     010C                     	;# 
   900     010E                     	;# 
   901     0111                     	;# 
   902     0112                     	;# 
   903     0113                     	;# 
   904     0114                     	;# 
   905     0115                     	;# 
   906     0116                     	;# 
   907     0117                     	;# 
   908     0118                     	;# 
   909     0119                     	;# 
   910     011D                     	;# 
   911     018C                     	;# 
   912     018E                     	;# 
   913     0191                     	;# 
   914     0191                     	;# 
   915     0192                     	;# 
   916     0193                     	;# 
   917     0193                     	;# 
   918     0194                     	;# 
   919     0195                     	;# 
   920     0196                     	;# 
   921     0197                     	;# 
   922     0199                     	;# 
   923     019A                     	;# 
   924     019B                     	;# 
   925     019B                     	;# 
   926     019C                     	;# 
   927     019D                     	;# 
   928     019E                     	;# 
   929     019F                     	;# 
   930     020C                     	;# 
   931     0211                     	;# 
   932     0211                     	;# 
   933     0212                     	;# 
   934     0212                     	;# 
   935     0213                     	;# 
   936     0213                     	;# 
   937     0214                     	;# 
   938     0214                     	;# 
   939     0215                     	;# 
   940     0215                     	;# 
   941     0215                     	;# 
   942     0216                     	;# 
   943     0216                     	;# 
   944     0217                     	;# 
   945     0217                     	;# 
   946     0391                     	;# 
   947     0392                     	;# 
   948     0393                     	;# 
   949     039A                     	;# 
   950     039B                     	;# 
   951     0611                     	;# 
   952     0612                     	;# 
   953     0613                     	;# 
   954     0613                     	;# 
   955     0614                     	;# 
   956     0615                     	;# 
   957     0616                     	;# 
   958     0616                     	;# 
   959     0691                     	;# 
   960     0692                     	;# 
   961     0693                     	;# 
   962     0694                     	;# 
   963     0695                     	;# 
   964     0E8E                     	;# 
   965     0E8F                     	;# 
   966     0E90                     	;# 
   967     0E91                     	;# 
   968     0E92                     	;# 
   969     0E93                     	;# 
   970     0E94                     	;# 
   971     0E94                     	;# 
   972     0E95                     	;# 
   973     0E96                     	;# 
   974     0E97                     	;# 
   975     0E98                     	;# 
   976     0E99                     	;# 
   977     0E9A                     	;# 
   978     0E9B                     	;# 
   979     0E9C                     	;# 
   980     0E9D                     	;# 
   981     0E9E                     	;# 
   982     0E9F                     	;# 
   983     0FE4                     	;# 
   984     0FE5                     	;# 
   985     0FE6                     	;# 
   986     0FE7                     	;# 
   987     0FE8                     	;# 
   988     0FE9                     	;# 
   989     0FEA                     	;# 
   990     0FEB                     	;# 
   991     0FED                     	;# 
   992     0FEE                     	;# 
   993     0FEF                     	;# 
   994     0000                     	;# 
   995     0001                     	;# 
   996     0002                     	;# 
   997     0003                     	;# 
   998     0004                     	;# 
   999     0005                     	;# 
  1000     0006                     	;# 
  1001     0007                     	;# 
  1002     0008                     	;# 
  1003     0009                     	;# 
  1004     000A                     	;# 
  1005     000B                     	;# 
  1006     000C                     	;# 
  1007     000E                     	;# 
  1008     0011                     	;# 
  1009     0012                     	;# 
  1010     0015                     	;# 
  1011     0016                     	;# 
  1012     0016                     	;# 
  1013     0017                     	;# 
  1014     0018                     	;# 
  1015     0019                     	;# 
  1016     001A                     	;# 
  1017     001B                     	;# 
  1018     001C                     	;# 
  1019     008C                     	;# 
  1020     008E                     	;# 
  1021     0091                     	;# 
  1022     0092                     	;# 
  1023     0095                     	;# 
  1024     0096                     	;# 
  1025     0097                     	;# 
  1026     0098                     	;# 
  1027     0099                     	;# 
  1028     009A                     	;# 
  1029     009B                     	;# 
  1030     009B                     	;# 
  1031     009C                     	;# 
  1032     009D                     	;# 
  1033     009E                     	;# 
  1034     009F                     	;# 
  1035     010C                     	;# 
  1036     010E                     	;# 
  1037     0111                     	;# 
  1038     0112                     	;# 
  1039     0113                     	;# 
  1040     0114                     	;# 
  1041     0115                     	;# 
  1042     0116                     	;# 
  1043     0117                     	;# 
  1044     0118                     	;# 
  1045     0119                     	;# 
  1046     011D                     	;# 
  1047     018C                     	;# 
  1048     018E                     	;# 
  1049     0191                     	;# 
  1050     0191                     	;# 
  1051     0192                     	;# 
  1052     0193                     	;# 
  1053     0193                     	;# 
  1054     0194                     	;# 
  1055     0195                     	;# 
  1056     0196                     	;# 
  1057     0197                     	;# 
  1058     0199                     	;# 
  1059     019A                     	;# 
  1060     019B                     	;# 
  1061     019B                     	;# 
  1062     019C                     	;# 
  1063     019D                     	;# 
  1064     019E                     	;# 
  1065     019F                     	;# 
  1066     020C                     	;# 
  1067     0211                     	;# 
  1068     0211                     	;# 
  1069     0212                     	;# 
  1070     0212                     	;# 
  1071     0213                     	;# 
  1072     0213                     	;# 
  1073     0214                     	;# 
  1074     0214                     	;# 
  1075     0215                     	;# 
  1076     0215                     	;# 
  1077     0215                     	;# 
  1078     0216                     	;# 
  1079     0216                     	;# 
  1080     0217                     	;# 
  1081     0217                     	;# 
  1082     0391                     	;# 
  1083     0392                     	;# 
  1084     0393                     	;# 
  1085     039A                     	;# 
  1086     039B                     	;# 
  1087     0611                     	;# 
  1088     0612                     	;# 
  1089     0613                     	;# 
  1090     0613                     	;# 
  1091     0614                     	;# 
  1092     0615                     	;# 
  1093     0616                     	;# 
  1094     0616                     	;# 
  1095     0691                     	;# 
  1096     0692                     	;# 
  1097     0693                     	;# 
  1098     0694                     	;# 
  1099     0695                     	;# 
  1100     0E8E                     	;# 
  1101     0E8F                     	;# 
  1102     0E90                     	;# 
  1103     0E91                     	;# 
  1104     0E92                     	;# 
  1105     0E93                     	;# 
  1106     0E94                     	;# 
  1107     0E94                     	;# 
  1108     0E95                     	;# 
  1109     0E96                     	;# 
  1110     0E97                     	;# 
  1111     0E98                     	;# 
  1112     0E99                     	;# 
  1113     0E9A                     	;# 
  1114     0E9B                     	;# 
  1115     0E9C                     	;# 
  1116     0E9D                     	;# 
  1117     0E9E                     	;# 
  1118     0E9F                     	;# 
  1119     0FE4                     	;# 
  1120     0FE5                     	;# 
  1121     0FE6                     	;# 
  1122     0FE7                     	;# 
  1123     0FE8                     	;# 
  1124     0FE9                     	;# 
  1125     0FEA                     	;# 
  1126     0FEB                     	;# 
  1127     0FED                     	;# 
  1128     0FEE                     	;# 
  1129     0FEF                     	;# 
  1130     0000                     	;# 
  1131     0001                     	;# 
  1132     0002                     	;# 
  1133     0003                     	;# 
  1134     0004                     	;# 
  1135     0005                     	;# 
  1136     0006                     	;# 
  1137     0007                     	;# 
  1138     0008                     	;# 
  1139     0009                     	;# 
  1140     000A                     	;# 
  1141     000B                     	;# 
  1142     000C                     	;# 
  1143     000E                     	;# 
  1144     0011                     	;# 
  1145     0012                     	;# 
  1146     0015                     	;# 
  1147     0016                     	;# 
  1148     0016                     	;# 
  1149     0017                     	;# 
  1150     0018                     	;# 
  1151     0019                     	;# 
  1152     001A                     	;# 
  1153     001B                     	;# 
  1154     001C                     	;# 
  1155     008C                     	;# 
  1156     008E                     	;# 
  1157     0091                     	;# 
  1158     0092                     	;# 
  1159     0095                     	;# 
  1160     0096                     	;# 
  1161     0097                     	;# 
  1162     0098                     	;# 
  1163     0099                     	;# 
  1164     009A                     	;# 
  1165     009B                     	;# 
  1166     009B                     	;# 
  1167     009C                     	;# 
  1168     009D                     	;# 
  1169     009E                     	;# 
  1170     009F                     	;# 
  1171     010C                     	;# 
  1172     010E                     	;# 
  1173     0111                     	;# 
  1174     0112                     	;# 
  1175     0113                     	;# 
  1176     0114                     	;# 
  1177     0115                     	;# 
  1178     0116                     	;# 
  1179     0117                     	;# 
  1180     0118                     	;# 
  1181     0119                     	;# 
  1182     011D                     	;# 
  1183     018C                     	;# 
  1184     018E                     	;# 
  1185     0191                     	;# 
  1186     0191                     	;# 
  1187     0192                     	;# 
  1188     0193                     	;# 
  1189     0193                     	;# 
  1190     0194                     	;# 
  1191     0195                     	;# 
  1192     0196                     	;# 
  1193     0197                     	;# 
  1194     0199                     	;# 
  1195     019A                     	;# 
  1196     019B                     	;# 
  1197     019B                     	;# 
  1198     019C                     	;# 
  1199     019D                     	;# 
  1200     019E                     	;# 
  1201     019F                     	;# 
  1202     020C                     	;# 
  1203     0211                     	;# 
  1204     0211                     	;# 
  1205     0212                     	;# 
  1206     0212                     	;# 
  1207     0213                     	;# 
  1208     0213                     	;# 
  1209     0214                     	;# 
  1210     0214                     	;# 
  1211     0215                     	;# 
  1212     0215                     	;# 
  1213     0215                     	;# 
  1214     0216                     	;# 
  1215     0216                     	;# 
  1216     0217                     	;# 
  1217     0217                     	;# 
  1218     0391                     	;# 
  1219     0392                     	;# 
  1220     0393                     	;# 
  1221     039A                     	;# 
  1222     039B                     	;# 
  1223     0611                     	;# 
  1224     0612                     	;# 
  1225     0613                     	;# 
  1226     0613                     	;# 
  1227     0614                     	;# 
  1228     0615                     	;# 
  1229     0616                     	;# 
  1230     0616                     	;# 
  1231     0691                     	;# 
  1232     0692                     	;# 
  1233     0693                     	;# 
  1234     0694                     	;# 
  1235     0695                     	;# 
  1236     0E8E                     	;# 
  1237     0E8F                     	;# 
  1238     0E90                     	;# 
  1239     0E91                     	;# 
  1240     0E92                     	;# 
  1241     0E93                     	;# 
  1242     0E94                     	;# 
  1243     0E94                     	;# 
  1244     0E95                     	;# 
  1245     0E96                     	;# 
  1246     0E97                     	;# 
  1247     0E98                     	;# 
  1248     0E99                     	;# 
  1249     0E9A                     	;# 
  1250     0E9B                     	;# 
  1251     0E9C                     	;# 
  1252     0E9D                     	;# 
  1253     0E9E                     	;# 
  1254     0E9F                     	;# 
  1255     0FE4                     	;# 
  1256     0FE5                     	;# 
  1257     0FE6                     	;# 
  1258     0FE7                     	;# 
  1259     0FE8                     	;# 
  1260     0FE9                     	;# 
  1261     0FEA                     	;# 
  1262     0FEB                     	;# 
  1263     0FED                     	;# 
  1264     0FEE                     	;# 
  1265     0FEF                     	;# 
  1266     0000                     	;# 
  1267     0001                     	;# 
  1268     0002                     	;# 
  1269     0003                     	;# 
  1270     0004                     	;# 
  1271     0005                     	;# 
  1272     0006                     	;# 
  1273     0007                     	;# 
  1274     0008                     	;# 
  1275     0009                     	;# 
  1276     000A                     	;# 
  1277     000B                     	;# 
  1278     000C                     	;# 
  1279     000E                     	;# 
  1280     0011                     	;# 
  1281     0012                     	;# 
  1282     0015                     	;# 
  1283     0016                     	;# 
  1284     0016                     	;# 
  1285     0017                     	;# 
  1286     0018                     	;# 
  1287     0019                     	;# 
  1288     001A                     	;# 
  1289     001B                     	;# 
  1290     001C                     	;# 
  1291     008C                     	;# 
  1292     008E                     	;# 
  1293     0091                     	;# 
  1294     0092                     	;# 
  1295     0095                     	;# 
  1296     0096                     	;# 
  1297     0097                     	;# 
  1298     0098                     	;# 
  1299     0099                     	;# 
  1300     009A                     	;# 
  1301     009B                     	;# 
  1302     009B                     	;# 
  1303     009C                     	;# 
  1304     009D                     	;# 
  1305     009E                     	;# 
  1306     009F                     	;# 
  1307     010C                     	;# 
  1308     010E                     	;# 
  1309     0111                     	;# 
  1310     0112                     	;# 
  1311     0113                     	;# 
  1312     0114                     	;# 
  1313     0115                     	;# 
  1314     0116                     	;# 
  1315     0117                     	;# 
  1316     0118                     	;# 
  1317     0119                     	;# 
  1318     011D                     	;# 
  1319     018C                     	;# 
  1320     018E                     	;# 
  1321     0191                     	;# 
  1322     0191                     	;# 
  1323     0192                     	;# 
  1324     0193                     	;# 
  1325     0193                     	;# 
  1326     0194                     	;# 
  1327     0195                     	;# 
  1328     0196                     	;# 
  1329     0197                     	;# 
  1330     0199                     	;# 
  1331     019A                     	;# 
  1332     019B                     	;# 
  1333     019B                     	;# 
  1334     019C                     	;# 
  1335     019D                     	;# 
  1336     019E                     	;# 
  1337     019F                     	;# 
  1338     020C                     	;# 
  1339     0211                     	;# 
  1340     0211                     	;# 
  1341     0212                     	;# 
  1342     0212                     	;# 
  1343     0213                     	;# 
  1344     0213                     	;# 
  1345     0214                     	;# 
  1346     0214                     	;# 
  1347     0215                     	;# 
  1348     0215                     	;# 
  1349     0215                     	;# 
  1350     0216                     	;# 
  1351     0216                     	;# 
  1352     0217                     	;# 
  1353     0217                     	;# 
  1354     0391                     	;# 
  1355     0392                     	;# 
  1356     0393                     	;# 
  1357     039A                     	;# 
  1358     039B                     	;# 
  1359     0611                     	;# 
  1360     0612                     	;# 
  1361     0613                     	;# 
  1362     0613                     	;# 
  1363     0614                     	;# 
  1364     0615                     	;# 
  1365     0616                     	;# 
  1366     0616                     	;# 
  1367     0691                     	;# 
  1368     0692                     	;# 
  1369     0693                     	;# 
  1370     0694                     	;# 
  1371     0695                     	;# 
  1372     0E8E                     	;# 
  1373     0E8F                     	;# 
  1374     0E90                     	;# 
  1375     0E91                     	;# 
  1376     0E92                     	;# 
  1377     0E93                     	;# 
  1378     0E94                     	;# 
  1379     0E94                     	;# 
  1380     0E95                     	;# 
  1381     0E96                     	;# 
  1382     0E97                     	;# 
  1383     0E98                     	;# 
  1384     0E99                     	;# 
  1385     0E9A                     	;# 
  1386     0E9B                     	;# 
  1387     0E9C                     	;# 
  1388     0E9D                     	;# 
  1389     0E9E                     	;# 
  1390     0E9F                     	;# 
  1391     0FE4                     	;# 
  1392     0FE5                     	;# 
  1393     0FE6                     	;# 
  1394     0FE7                     	;# 
  1395     0FE8                     	;# 
  1396     0FE9                     	;# 
  1397     0FEA                     	;# 
  1398     0FEB                     	;# 
  1399     0FED                     	;# 
  1400     0FEE                     	;# 
  1401     0FEF                     	;# 
  1402     0000                     	;# 
  1403     0001                     	;# 
  1404     0002                     	;# 
  1405     0003                     	;# 
  1406     0004                     	;# 
  1407     0005                     	;# 
  1408     0006                     	;# 
  1409     0007                     	;# 
  1410     0008                     	;# 
  1411     0009                     	;# 
  1412     000A                     	;# 
  1413     000B                     	;# 
  1414     000C                     	;# 
  1415     000E                     	;# 
  1416     0011                     	;# 
  1417     0012                     	;# 
  1418     0015                     	;# 
  1419     0016                     	;# 
  1420     0016                     	;# 
  1421     0017                     	;# 
  1422     0018                     	;# 
  1423     0019                     	;# 
  1424     001A                     	;# 
  1425     001B                     	;# 
  1426     001C                     	;# 
  1427     008C                     	;# 
  1428     008E                     	;# 
  1429     0091                     	;# 
  1430     0092                     	;# 
  1431     0095                     	;# 
  1432     0096                     	;# 
  1433     0097                     	;# 
  1434     0098                     	;# 
  1435     0099                     	;# 
  1436     009A                     	;# 
  1437     009B                     	;# 
  1438     009B                     	;# 
  1439     009C                     	;# 
  1440     009D                     	;# 
  1441     009E                     	;# 
  1442     009F                     	;# 
  1443     010C                     	;# 
  1444     010E                     	;# 
  1445     0111                     	;# 
  1446     0112                     	;# 
  1447     0113                     	;# 
  1448     0114                     	;# 
  1449     0115                     	;# 
  1450     0116                     	;# 
  1451     0117                     	;# 
  1452     0118                     	;# 
  1453     0119                     	;# 
  1454     011D                     	;# 
  1455     018C                     	;# 
  1456     018E                     	;# 
  1457     0191                     	;# 
  1458     0191                     	;# 
  1459     0192                     	;# 
  1460     0193                     	;# 
  1461     0193                     	;# 
  1462     0194                     	;# 
  1463     0195                     	;# 
  1464     0196                     	;# 
  1465     0197                     	;# 
  1466     0199                     	;# 
  1467     019A                     	;# 
  1468     019B                     	;# 
  1469     019B                     	;# 
  1470     019C                     	;# 
  1471     019D                     	;# 
  1472     019E                     	;# 
  1473     019F                     	;# 
  1474     020C                     	;# 
  1475     0211                     	;# 
  1476     0211                     	;# 
  1477     0212                     	;# 
  1478     0212                     	;# 
  1479     0213                     	;# 
  1480     0213                     	;# 
  1481     0214                     	;# 
  1482     0214                     	;# 
  1483     0215                     	;# 
  1484     0215                     	;# 
  1485     0215                     	;# 
  1486     0216                     	;# 
  1487     0216                     	;# 
  1488     0217                     	;# 
  1489     0217                     	;# 
  1490     0391                     	;# 
  1491     0392                     	;# 
  1492     0393                     	;# 
  1493     039A                     	;# 
  1494     039B                     	;# 
  1495     0611                     	;# 
  1496     0612                     	;# 
  1497     0613                     	;# 
  1498     0613                     	;# 
  1499     0614                     	;# 
  1500     0615                     	;# 
  1501     0616                     	;# 
  1502     0616                     	;# 
  1503     0691                     	;# 
  1504     0692                     	;# 
  1505     0693                     	;# 
  1506     0694                     	;# 
  1507     0695                     	;# 
  1508     0E8E                     	;# 
  1509     0E8F                     	;# 
  1510     0E90                     	;# 
  1511     0E91                     	;# 
  1512     0E92                     	;# 
  1513     0E93                     	;# 
  1514     0E94                     	;# 
  1515     0E94                     	;# 
  1516     0E95                     	;# 
  1517     0E96                     	;# 
  1518     0E97                     	;# 
  1519     0E98                     	;# 
  1520     0E99                     	;# 
  1521     0E9A                     	;# 
  1522     0E9B                     	;# 
  1523     0E9C                     	;# 
  1524     0E9D                     	;# 
  1525     0E9E                     	;# 
  1526     0E9F                     	;# 
  1527     0FE4                     	;# 
  1528     0FE5                     	;# 
  1529     0FE6                     	;# 
  1530     0FE7                     	;# 
  1531     0FE8                     	;# 
  1532     0FE9                     	;# 
  1533     0FEA                     	;# 
  1534     0FEB                     	;# 
  1535     0FED                     	;# 
  1536     0FEE                     	;# 
  1537     0FEF                     	;# 
  1538     0000                     	;# 
  1539     0001                     	;# 
  1540     0002                     	;# 
  1541     0003                     	;# 
  1542     0004                     	;# 
  1543     0005                     	;# 
  1544     0006                     	;# 
  1545     0007                     	;# 
  1546     0008                     	;# 
  1547     0009                     	;# 
  1548     000A                     	;# 
  1549     000B                     	;# 
  1550     000C                     	;# 
  1551     000E                     	;# 
  1552     0011                     	;# 
  1553     0012                     	;# 
  1554     0015                     	;# 
  1555     0016                     	;# 
  1556     0016                     	;# 
  1557     0017                     	;# 
  1558     0018                     	;# 
  1559     0019                     	;# 
  1560     001A                     	;# 
  1561     001B                     	;# 
  1562     001C                     	;# 
  1563     008C                     	;# 
  1564     008E                     	;# 
  1565     0091                     	;# 
  1566     0092                     	;# 
  1567     0095                     	;# 
  1568     0096                     	;# 
  1569     0097                     	;# 
  1570     0098                     	;# 
  1571     0099                     	;# 
  1572     009A                     	;# 
  1573     009B                     	;# 
  1574     009B                     	;# 
  1575     009C                     	;# 
  1576     009D                     	;# 
  1577     009E                     	;# 
  1578     009F                     	;# 
  1579     010C                     	;# 
  1580     010E                     	;# 
  1581     0111                     	;# 
  1582     0112                     	;# 
  1583     0113                     	;# 
  1584     0114                     	;# 
  1585     0115                     	;# 
  1586     0116                     	;# 
  1587     0117                     	;# 
  1588     0118                     	;# 
  1589     0119                     	;# 
  1590     011D                     	;# 
  1591     018C                     	;# 
  1592     018E                     	;# 
  1593     0191                     	;# 
  1594     0191                     	;# 
  1595     0192                     	;# 
  1596     0193                     	;# 
  1597     0193                     	;# 
  1598     0194                     	;# 
  1599     0195                     	;# 
  1600     0196                     	;# 
  1601     0197                     	;# 
  1602     0199                     	;# 
  1603     019A                     	;# 
  1604     019B                     	;# 
  1605     019B                     	;# 
  1606     019C                     	;# 
  1607     019D                     	;# 
  1608     019E                     	;# 
  1609     019F                     	;# 
  1610     020C                     	;# 
  1611     0211                     	;# 
  1612     0211                     	;# 
  1613     0212                     	;# 
  1614     0212                     	;# 
  1615     0213                     	;# 
  1616     0213                     	;# 
  1617     0214                     	;# 
  1618     0214                     	;# 
  1619     0215                     	;# 
  1620     0215                     	;# 
  1621     0215                     	;# 
  1622     0216                     	;# 
  1623     0216                     	;# 
  1624     0217                     	;# 
  1625     0217                     	;# 
  1626     0391                     	;# 
  1627     0392                     	;# 
  1628     0393                     	;# 
  1629     039A                     	;# 
  1630     039B                     	;# 
  1631     0611                     	;# 
  1632     0612                     	;# 
  1633     0613                     	;# 
  1634     0613                     	;# 
  1635     0614                     	;# 
  1636     0615                     	;# 
  1637     0616                     	;# 
  1638     0616                     	;# 
  1639     0691                     	;# 
  1640     0692                     	;# 
  1641     0693                     	;# 
  1642     0694                     	;# 
  1643     0695                     	;# 
  1644     0E8E                     	;# 
  1645     0E8F                     	;# 
  1646     0E90                     	;# 
  1647     0E91                     	;# 
  1648     0E92                     	;# 
  1649     0E93                     	;# 
  1650     0E94                     	;# 
  1651     0E94                     	;# 
  1652     0E95                     	;# 
  1653     0E96                     	;# 
  1654     0E97                     	;# 
  1655     0E98                     	;# 
  1656     0E99                     	;# 
  1657     0E9A                     	;# 
  1658     0E9B                     	;# 
  1659     0E9C                     	;# 
  1660     0E9D                     	;# 
  1661     0E9E                     	;# 
  1662     0E9F                     	;# 
  1663     0FE4                     	;# 
  1664     0FE5                     	;# 
  1665     0FE6                     	;# 
  1666     0FE7                     	;# 
  1667     0FE8                     	;# 
  1668     0FE9                     	;# 
  1669     0FEA                     	;# 
  1670     0FEB                     	;# 
  1671     0FED                     	;# 
  1672     0FEE                     	;# 
  1673     0FEF                     	;# 
  1674     0000                     	;# 
  1675     0001                     	;# 
  1676     0002                     	;# 
  1677     0003                     	;# 
  1678     0004                     	;# 
  1679     0005                     	;# 
  1680     0006                     	;# 
  1681     0007                     	;# 
  1682     0008                     	;# 
  1683     0009                     	;# 
  1684     000A                     	;# 
  1685     000B                     	;# 
  1686     000C                     	;# 
  1687     000E                     	;# 
  1688     0011                     	;# 
  1689     0012                     	;# 
  1690     0015                     	;# 
  1691     0016                     	;# 
  1692     0016                     	;# 
  1693     0017                     	;# 
  1694     0018                     	;# 
  1695     0019                     	;# 
  1696     001A                     	;# 
  1697     001B                     	;# 
  1698     001C                     	;# 
  1699     008C                     	;# 
  1700     008E                     	;# 
  1701     0091                     	;# 
  1702     0092                     	;# 
  1703     0095                     	;# 
  1704     0096                     	;# 
  1705     0097                     	;# 
  1706     0098                     	;# 
  1707     0099                     	;# 
  1708     009A                     	;# 
  1709     009B                     	;# 
  1710     009B                     	;# 
  1711     009C                     	;# 
  1712     009D                     	;# 
  1713     009E                     	;# 
  1714     009F                     	;# 
  1715     010C                     	;# 
  1716     010E                     	;# 
  1717     0111                     	;# 
  1718     0112                     	;# 
  1719     0113                     	;# 
  1720     0114                     	;# 
  1721     0115                     	;# 
  1722     0116                     	;# 
  1723     0117                     	;# 
  1724     0118                     	;# 
  1725     0119                     	;# 
  1726     011D                     	;# 
  1727     018C                     	;# 
  1728     018E                     	;# 
  1729     0191                     	;# 
  1730     0191                     	;# 
  1731     0192                     	;# 
  1732     0193                     	;# 
  1733     0193                     	;# 
  1734     0194                     	;# 
  1735     0195                     	;# 
  1736     0196                     	;# 
  1737     0197                     	;# 
  1738     0199                     	;# 
  1739     019A                     	;# 
  1740     019B                     	;# 
  1741     019B                     	;# 
  1742     019C                     	;# 
  1743     019D                     	;# 
  1744     019E                     	;# 
  1745     019F                     	;# 
  1746     020C                     	;# 
  1747     0211                     	;# 
  1748     0211                     	;# 
  1749     0212                     	;# 
  1750     0212                     	;# 
  1751     0213                     	;# 
  1752     0213                     	;# 
  1753     0214                     	;# 
  1754     0214                     	;# 
  1755     0215                     	;# 
  1756     0215                     	;# 
  1757     0215                     	;# 
  1758     0216                     	;# 
  1759     0216                     	;# 
  1760     0217                     	;# 
  1761     0217                     	;# 
  1762     0391                     	;# 
  1763     0392                     	;# 
  1764     0393                     	;# 
  1765     039A                     	;# 
  1766     039B                     	;# 
  1767     0611                     	;# 
  1768     0612                     	;# 
  1769     0613                     	;# 
  1770     0613                     	;# 
  1771     0614                     	;# 
  1772     0615                     	;# 
  1773     0616                     	;# 
  1774     0616                     	;# 
  1775     0691                     	;# 
  1776     0692                     	;# 
  1777     0693                     	;# 
  1778     0694                     	;# 
  1779     0695                     	;# 
  1780     0E8E                     	;# 
  1781     0E8F                     	;# 
  1782     0E90                     	;# 
  1783     0E91                     	;# 
  1784     0E92                     	;# 
  1785     0E93                     	;# 
  1786     0E94                     	;# 
  1787     0E94                     	;# 
  1788     0E95                     	;# 
  1789     0E96                     	;# 
  1790     0E97                     	;# 
  1791     0E98                     	;# 
  1792     0E99                     	;# 
  1793     0E9A                     	;# 
  1794     0E9B                     	;# 
  1795     0E9C                     	;# 
  1796     0E9D                     	;# 
  1797     0E9E                     	;# 
  1798     0E9F                     	;# 
  1799     0FE4                     	;# 
  1800     0FE5                     	;# 
  1801     0FE6                     	;# 
  1802     0FE7                     	;# 
  1803     0FE8                     	;# 
  1804     0FE9                     	;# 
  1805     0FEA                     	;# 
  1806     0FEB                     	;# 
  1807     0FED                     	;# 
  1808     0FEE                     	;# 
  1809     0FEF                     	;# 
  1810     0000                     	;# 
  1811     0001                     	;# 
  1812     0002                     	;# 
  1813     0003                     	;# 
  1814     0004                     	;# 
  1815     0005                     	;# 
  1816     0006                     	;# 
  1817     0007                     	;# 
  1818     0008                     	;# 
  1819     0009                     	;# 
  1820     000A                     	;# 
  1821     000B                     	;# 
  1822     000C                     	;# 
  1823     000E                     	;# 
  1824     0011                     	;# 
  1825     0012                     	;# 
  1826     0015                     	;# 
  1827     0016                     	;# 
  1828     0016                     	;# 
  1829     0017                     	;# 
  1830     0018                     	;# 
  1831     0019                     	;# 
  1832     001A                     	;# 
  1833     001B                     	;# 
  1834     001C                     	;# 
  1835     008C                     	;# 
  1836     008E                     	;# 
  1837     0091                     	;# 
  1838     0092                     	;# 
  1839     0095                     	;# 
  1840     0096                     	;# 
  1841     0097                     	;# 
  1842     0098                     	;# 
  1843     0099                     	;# 
  1844     009A                     	;# 
  1845     009B                     	;# 
  1846     009B                     	;# 
  1847     009C                     	;# 
  1848     009D                     	;# 
  1849     009E                     	;# 
  1850     009F                     	;# 
  1851     010C                     	;# 
  1852     010E                     	;# 
  1853     0111                     	;# 
  1854     0112                     	;# 
  1855     0113                     	;# 
  1856     0114                     	;# 
  1857     0115                     	;# 
  1858     0116                     	;# 
  1859     0117                     	;# 
  1860     0118                     	;# 
  1861     0119                     	;# 
  1862     011D                     	;# 
  1863     018C                     	;# 
  1864     018E                     	;# 
  1865     0191                     	;# 
  1866     0191                     	;# 
  1867     0192                     	;# 
  1868     0193                     	;# 
  1869     0193                     	;# 
  1870     0194                     	;# 
  1871     0195                     	;# 
  1872     0196                     	;# 
  1873     0197                     	;# 
  1874     0199                     	;# 
  1875     019A                     	;# 
  1876     019B                     	;# 
  1877     019B                     	;# 
  1878     019C                     	;# 
  1879     019D                     	;# 
  1880     019E                     	;# 
  1881     019F                     	;# 
  1882     020C                     	;# 
  1883     0211                     	;# 
  1884     0211                     	;# 
  1885     0212                     	;# 
  1886     0212                     	;# 
  1887     0213                     	;# 
  1888     0213                     	;# 
  1889     0214                     	;# 
  1890     0214                     	;# 
  1891     0215                     	;# 
  1892     0215                     	;# 
  1893     0215                     	;# 
  1894     0216                     	;# 
  1895     0216                     	;# 
  1896     0217                     	;# 
  1897     0217                     	;# 
  1898     0391                     	;# 
  1899     0392                     	;# 
  1900     0393                     	;# 
  1901     039A                     	;# 
  1902     039B                     	;# 
  1903     0611                     	;# 
  1904     0612                     	;# 
  1905     0613                     	;# 
  1906     0613                     	;# 
  1907     0614                     	;# 
  1908     0615                     	;# 
  1909     0616                     	;# 
  1910     0616                     	;# 
  1911     0691                     	;# 
  1912     0692                     	;# 
  1913     0693                     	;# 
  1914     0694                     	;# 
  1915     0695                     	;# 
  1916     0E8E                     	;# 
  1917     0E8F                     	;# 
  1918     0E90                     	;# 
  1919     0E91                     	;# 
  1920     0E92                     	;# 
  1921     0E93                     	;# 
  1922     0E94                     	;# 
  1923     0E94                     	;# 
  1924     0E95                     	;# 
  1925     0E96                     	;# 
  1926     0E97                     	;# 
  1927     0E98                     	;# 
  1928     0E99                     	;# 
  1929     0E9A                     	;# 
  1930     0E9B                     	;# 
  1931     0E9C                     	;# 
  1932     0E9D                     	;# 
  1933     0E9E                     	;# 
  1934     0E9F                     	;# 
  1935     0FE4                     	;# 
  1936     0FE5                     	;# 
  1937     0FE6                     	;# 
  1938     0FE7                     	;# 
  1939     0FE8                     	;# 
  1940     0FE9                     	;# 
  1941     0FEA                     	;# 
  1942     0FEB                     	;# 
  1943     0FED                     	;# 
  1944     0FEE                     	;# 
  1945     0FEF                     	;# 
  1946     0000                     	;# 
  1947     0001                     	;# 
  1948     0002                     	;# 
  1949     0003                     	;# 
  1950     0004                     	;# 
  1951     0005                     	;# 
  1952     0006                     	;# 
  1953     0007                     	;# 
  1954     0008                     	;# 
  1955     0009                     	;# 
  1956     000A                     	;# 
  1957     000B                     	;# 
  1958     000C                     	;# 
  1959     000E                     	;# 
  1960     0011                     	;# 
  1961     0012                     	;# 
  1962     0015                     	;# 
  1963     0016                     	;# 
  1964     0016                     	;# 
  1965     0017                     	;# 
  1966     0018                     	;# 
  1967     0019                     	;# 
  1968     001A                     	;# 
  1969     001B                     	;# 
  1970     001C                     	;# 
  1971     008C                     	;# 
  1972     008E                     	;# 
  1973     0091                     	;# 
  1974     0092                     	;# 
  1975     0095                     	;# 
  1976     0096                     	;# 
  1977     0097                     	;# 
  1978     0098                     	;# 
  1979     0099                     	;# 
  1980     009A                     	;# 
  1981     009B                     	;# 
  1982     009B                     	;# 
  1983     009C                     	;# 
  1984     009D                     	;# 
  1985     009E                     	;# 
  1986     009F                     	;# 
  1987     010C                     	;# 
  1988     010E                     	;# 
  1989     0111                     	;# 
  1990     0112                     	;# 
  1991     0113                     	;# 
  1992     0114                     	;# 
  1993     0115                     	;# 
  1994     0116                     	;# 
  1995     0117                     	;# 
  1996     0118                     	;# 
  1997     0119                     	;# 
  1998     011D                     	;# 
  1999     018C                     	;# 
  2000     018E                     	;# 
  2001     0191                     	;# 
  2002     0191                     	;# 
  2003     0192                     	;# 
  2004     0193                     	;# 
  2005     0193                     	;# 
  2006     0194                     	;# 
  2007     0195                     	;# 
  2008     0196                     	;# 
  2009     0197                     	;# 
  2010     0199                     	;# 
  2011     019A                     	;# 
  2012     019B                     	;# 
  2013     019B                     	;# 
  2014     019C                     	;# 
  2015     019D                     	;# 
  2016     019E                     	;# 
  2017     019F                     	;# 
  2018     020C                     	;# 
  2019     0211                     	;# 
  2020     0211                     	;# 
  2021     0212                     	;# 
  2022     0212                     	;# 
  2023     0213                     	;# 
  2024     0213                     	;# 
  2025     0214                     	;# 
  2026     0214                     	;# 
  2027     0215                     	;# 
  2028     0215                     	;# 
  2029     0215                     	;# 
  2030     0216                     	;# 
  2031     0216                     	;# 
  2032     0217                     	;# 
  2033     0217                     	;# 
  2034     0391                     	;# 
  2035     0392                     	;# 
  2036     0393                     	;# 
  2037     039A                     	;# 
  2038     039B                     	;# 
  2039     0611                     	;# 
  2040     0612                     	;# 
  2041     0613                     	;# 
  2042     0613                     	;# 
  2043     0614                     	;# 
  2044     0615                     	;# 
  2045     0616                     	;# 
  2046     0616                     	;# 
  2047     0691                     	;# 
  2048     0692                     	;# 
  2049     0693                     	;# 
  2050     0694                     	;# 
  2051     0695                     	;# 
  2052     0E8E                     	;# 
  2053     0E8F                     	;# 
  2054     0E90                     	;# 
  2055     0E91                     	;# 
  2056     0E92                     	;# 
  2057     0E93                     	;# 
  2058     0E94                     	;# 
  2059     0E94                     	;# 
  2060     0E95                     	;# 
  2061     0E96                     	;# 
  2062     0E97                     	;# 
  2063     0E98                     	;# 
  2064     0E99                     	;# 
  2065     0E9A                     	;# 
  2066     0E9B                     	;# 
  2067     0E9C                     	;# 
  2068     0E9D                     	;# 
  2069     0E9E                     	;# 
  2070     0E9F                     	;# 
  2071     0FE4                     	;# 
  2072     0FE5                     	;# 
  2073     0FE6                     	;# 
  2074     0FE7                     	;# 
  2075     0FE8                     	;# 
  2076     0FE9                     	;# 
  2077     0FEA                     	;# 
  2078     0FEB                     	;# 
  2079     0FED                     	;# 
  2080     0FEE                     	;# 
  2081     0FEF                     	;_keyboard
  2082                           
  2083                           	psect	idataBANK3
  2084     1E74                     __pidataBANK3:
  2085                           
  2086                           ;initializer for main@F3304
  2087     1E74  3420               	retlw	32
  2088     1E75  3420               	retlw	32
  2089     1E76  3420               	retlw	32
  2090     1E77  3420               	retlw	32
  2091     1E78  340D               	retlw	13
  2092     1E79  340A               	retlw	10
  2093                           
  2094                           	psect	stringtext1
  2095     0415                     __pstringtext1:
  2096     0415                     _ps2ExtUsbMap:
  2097     0415  3400               	retlw	0
  2098     0416  3400               	retlw	0
  2099     0417  3400               	retlw	0
  2100     0418  3400               	retlw	0
  2101     0419  3400               	retlw	0
  2102     041A  3400               	retlw	0
  2103     041B  3400               	retlw	0
  2104     041C  3400               	retlw	0
  2105     041D  3400               	retlw	0
  2106     041E  3400               	retlw	0
  2107     041F  3400               	retlw	0
  2108     0420  3400               	retlw	0
  2109     0421  3400               	retlw	0
  2110     0422  3400               	retlw	0
  2111     0423  3400               	retlw	0
  2112     0424  3400               	retlw	0
  2113     0425  3400               	retlw	0
  2114     0426  34E6               	retlw	230
  2115     0427  3400               	retlw	0
  2116     0428  3400               	retlw	0
  2117     0429  34E4               	retlw	228
  2118     042A  3400               	retlw	0
  2119     042B  3400               	retlw	0
  2120     042C  3400               	retlw	0
  2121     042D  3400               	retlw	0
  2122     042E  3400               	retlw	0
  2123     042F  3400               	retlw	0
  2124     0430  3400               	retlw	0
  2125     0431  3400               	retlw	0
  2126     0432  3400               	retlw	0
  2127     0433  3400               	retlw	0
  2128     0434  34E3               	retlw	227
  2129     0435  3400               	retlw	0
  2130     0436  3400               	retlw	0
  2131     0437  3400               	retlw	0
  2132     0438  3400               	retlw	0
  2133     0439  3400               	retlw	0
  2134     043A  3400               	retlw	0
  2135     043B  3400               	retlw	0
  2136     043C  34E7               	retlw	231
  2137     043D  3400               	retlw	0
  2138     043E  3400               	retlw	0
  2139     043F  3400               	retlw	0
  2140     0440  3400               	retlw	0
  2141     0441  3400               	retlw	0
  2142     0442  3400               	retlw	0
  2143     0443  3400               	retlw	0
  2144     0444  3465               	retlw	101
  2145     0445  3400               	retlw	0
  2146     0446  3400               	retlw	0
  2147     0447  3400               	retlw	0
  2148     0448  3400               	retlw	0
  2149     0449  3400               	retlw	0
  2150     044A  3400               	retlw	0
  2151     044B  3400               	retlw	0
  2152     044C  3400               	retlw	0
  2153     044D  3400               	retlw	0
  2154     044E  3400               	retlw	0
  2155     044F  3400               	retlw	0
  2156     0450  3400               	retlw	0
  2157     0451  3400               	retlw	0
  2158     0452  3400               	retlw	0
  2159     0453  3400               	retlw	0
  2160     0454  3400               	retlw	0
  2161     0455  3400               	retlw	0
  2162     0456  3400               	retlw	0
  2163     0457  3400               	retlw	0
  2164     0458  3400               	retlw	0
  2165     0459  3400               	retlw	0
  2166     045A  3400               	retlw	0
  2167     045B  3400               	retlw	0
  2168     045C  3400               	retlw	0
  2169     045D  3400               	retlw	0
  2170     045E  3400               	retlw	0
  2171     045F  3454               	retlw	84
  2172     0460  3400               	retlw	0
  2173     0461  3400               	retlw	0
  2174     0462  3400               	retlw	0
  2175     0463  3400               	retlw	0
  2176     0464  3400               	retlw	0
  2177     0465  3400               	retlw	0
  2178     0466  3400               	retlw	0
  2179     0467  3400               	retlw	0
  2180     0468  3400               	retlw	0
  2181     0469  3400               	retlw	0
  2182     046A  3400               	retlw	0
  2183     046B  3400               	retlw	0
  2184     046C  3400               	retlw	0
  2185     046D  3400               	retlw	0
  2186     046E  3400               	retlw	0
  2187     046F  3458               	retlw	88
  2188     0470  3400               	retlw	0
  2189     0471  3400               	retlw	0
  2190     0472  3400               	retlw	0
  2191     0473  3400               	retlw	0
  2192     0474  3400               	retlw	0
  2193     0475  3400               	retlw	0
  2194     0476  3400               	retlw	0
  2195     0477  3400               	retlw	0
  2196     0478  3400               	retlw	0
  2197     0479  3400               	retlw	0
  2198     047A  3400               	retlw	0
  2199     047B  3400               	retlw	0
  2200     047C  3400               	retlw	0
  2201     047D  3400               	retlw	0
  2202     047E  344D               	retlw	77
  2203     047F  3400               	retlw	0
  2204     0480  3450               	retlw	80
  2205     0481  344A               	retlw	74
  2206     0482  3400               	retlw	0
  2207     0483  3400               	retlw	0
  2208     0484  3400               	retlw	0
  2209     0485  3449               	retlw	73
  2210     0486  344C               	retlw	76
  2211     0487  3451               	retlw	81
  2212     0488  3400               	retlw	0
  2213     0489  344F               	retlw	79
  2214     048A  3452               	retlw	82
  2215     048B  3400               	retlw	0
  2216     048C  3400               	retlw	0
  2217     048D  3400               	retlw	0
  2218     048E  3400               	retlw	0
  2219     048F  344E               	retlw	78
  2220     0490  3400               	retlw	0
  2221     0491  3446               	retlw	70
  2222     0492  344B               	retlw	75
  2223     0493  3400               	retlw	0
  2224     0494  3400               	retlw	0
  2225     0495  3400               	retlw	0
  2226     0496  3400               	retlw	0
  2227     0497  3400               	retlw	0
  2228     0498  3400               	retlw	0
  2229     0499  3400               	retlw	0
  2230     049A  3400               	retlw	0
  2231     049B  3400               	retlw	0
  2232     049C  3400               	retlw	0
  2233     049D  3400               	retlw	0
  2234     049E  3400               	retlw	0
  2235     049F  3400               	retlw	0
  2236     04A0  3400               	retlw	0
  2237     04A1  3400               	retlw	0
  2238     04A2  3400               	retlw	0
  2239     04A3  3400               	retlw	0
  2240     04A4  3400               	retlw	0
  2241     04A5  3400               	retlw	0
  2242     04A6  3400               	retlw	0
  2243     04A7  3400               	retlw	0
  2244     04A8  3400               	retlw	0
  2245     04A9  3400               	retlw	0
  2246     04AA  3400               	retlw	0
  2247     04AB  3400               	retlw	0
  2248     04AC  3400               	retlw	0
  2249     04AD  3400               	retlw	0
  2250     04AE  3400               	retlw	0
  2251     04AF  3400               	retlw	0
  2252     04B0  3400               	retlw	0
  2253     04B1  3400               	retlw	0
  2254     04B2  3400               	retlw	0
  2255     04B3  3400               	retlw	0
  2256     04B4  3400               	retlw	0
  2257     04B5  3400               	retlw	0
  2258     04B6  3400               	retlw	0
  2259     04B7  3400               	retlw	0
  2260     04B8  3400               	retlw	0
  2261     04B9  3400               	retlw	0
  2262     04BA  3400               	retlw	0
  2263     04BB  3400               	retlw	0
  2264     04BC  3400               	retlw	0
  2265     04BD  3400               	retlw	0
  2266     04BE  3400               	retlw	0
  2267     04BF  3400               	retlw	0
  2268     04C0  3400               	retlw	0
  2269     04C1  3400               	retlw	0
  2270     04C2  3400               	retlw	0
  2271     04C3  3400               	retlw	0
  2272     04C4  3400               	retlw	0
  2273     04C5  3400               	retlw	0
  2274     04C6  3400               	retlw	0
  2275     04C7  3400               	retlw	0
  2276     04C8  3400               	retlw	0
  2277     04C9  3400               	retlw	0
  2278     04CA  3400               	retlw	0
  2279     04CB  3400               	retlw	0
  2280     04CC  3400               	retlw	0
  2281     04CD  3400               	retlw	0
  2282     04CE  3400               	retlw	0
  2283     04CF  3400               	retlw	0
  2284     04D0  3400               	retlw	0
  2285     04D1  3400               	retlw	0
  2286     04D2  3400               	retlw	0
  2287     04D3  3400               	retlw	0
  2288     04D4  3400               	retlw	0
  2289     04D5  3400               	retlw	0
  2290     04D6  3400               	retlw	0
  2291     04D7  3400               	retlw	0
  2292     04D8  3400               	retlw	0
  2293     04D9  3400               	retlw	0
  2294     04DA  3400               	retlw	0
  2295     04DB  3400               	retlw	0
  2296     04DC  3400               	retlw	0
  2297     04DD  3400               	retlw	0
  2298     04DE  3400               	retlw	0
  2299     04DF  3400               	retlw	0
  2300     04E0  3400               	retlw	0
  2301     04E1  3400               	retlw	0
  2302     04E2  3400               	retlw	0
  2303     04E3  3400               	retlw	0
  2304     04E4  3400               	retlw	0
  2305     04E5  3400               	retlw	0
  2306     04E6  3400               	retlw	0
  2307     04E7  3400               	retlw	0
  2308     04E8  3400               	retlw	0
  2309     04E9  3400               	retlw	0
  2310     04EA  3400               	retlw	0
  2311     04EB  3400               	retlw	0
  2312     04EC  3400               	retlw	0
  2313     04ED  3400               	retlw	0
  2314     04EE  3400               	retlw	0
  2315     04EF  3400               	retlw	0
  2316     04F0  3400               	retlw	0
  2317     04F1  3400               	retlw	0
  2318     04F2  3400               	retlw	0
  2319     04F3  3400               	retlw	0
  2320     04F4  3400               	retlw	0
  2321     04F5  3400               	retlw	0
  2322     04F6  3400               	retlw	0
  2323     04F7  3400               	retlw	0
  2324     04F8  3400               	retlw	0
  2325     04F9  3400               	retlw	0
  2326     04FA  3400               	retlw	0
  2327     04FB  3400               	retlw	0
  2328     04FC  3400               	retlw	0
  2329     04FD  3400               	retlw	0
  2330     04FE  3400               	retlw	0
  2331     04FF  3400               	retlw	0
  2332     0500  3400               	retlw	0
  2333     0501  3400               	retlw	0
  2334     0502  3400               	retlw	0
  2335     0503  3400               	retlw	0
  2336     0504  3400               	retlw	0
  2337     0505  3400               	retlw	0
  2338     0506  3400               	retlw	0
  2339     0507  3400               	retlw	0
  2340     0508  3400               	retlw	0
  2341     0509  3400               	retlw	0
  2342     050A  3400               	retlw	0
  2343     050B  3400               	retlw	0
  2344     050C  3400               	retlw	0
  2345     050D  3400               	retlw	0
  2346     050E  3400               	retlw	0
  2347     050F  3400               	retlw	0
  2348     0510  3400               	retlw	0
  2349     0511  3400               	retlw	0
  2350     0512  3400               	retlw	0
  2351     0513  3400               	retlw	0
  2352     0514                     __end_of_ps2ExtUsbMap:
  2353                           
  2354                           	psect	stringtext2
  2355     1000                     __pstringtext2:
  2356     1000                     _ps2UsbMap:
  2357     1000  3400               	retlw	0
  2358     1001  3442               	retlw	66
  2359     1002  3400               	retlw	0
  2360     1003  343E               	retlw	62
  2361     1004  343C               	retlw	60
  2362     1005  343A               	retlw	58
  2363     1006  343B               	retlw	59
  2364     1007  3445               	retlw	69
  2365     1008  3400               	retlw	0
  2366     1009  3443               	retlw	67
  2367     100A  3441               	retlw	65
  2368     100B  343F               	retlw	63
  2369     100C  343D               	retlw	61
  2370     100D  342B               	retlw	43
  2371     100E  3435               	retlw	53
  2372     100F  3400               	retlw	0
  2373     1010  3400               	retlw	0
  2374     1011  34E2               	retlw	226
  2375     1012  34E1               	retlw	225
  2376     1013  3488               	retlw	136
  2377     1014  34E0               	retlw	224
  2378     1015  3414               	retlw	20
  2379     1016  341E               	retlw	30
  2380     1017  3400               	retlw	0
  2381     1018  3400               	retlw	0
  2382     1019  3400               	retlw	0
  2383     101A  341D               	retlw	29
  2384     101B  3416               	retlw	22
  2385     101C  3404               	retlw	4
  2386     101D  341A               	retlw	26
  2387     101E  341F               	retlw	31
  2388     101F  3400               	retlw	0
  2389     1020  3400               	retlw	0
  2390     1021  3406               	retlw	6
  2391     1022  341B               	retlw	27
  2392     1023  3407               	retlw	7
  2393     1024  3408               	retlw	8
  2394     1025  3421               	retlw	33
  2395     1026  3420               	retlw	32
  2396     1027  3400               	retlw	0
  2397     1028  3400               	retlw	0
  2398     1029  342C               	retlw	44
  2399     102A  3419               	retlw	25
  2400     102B  3409               	retlw	9
  2401     102C  3417               	retlw	23
  2402     102D  3415               	retlw	21
  2403     102E  3422               	retlw	34
  2404     102F  3400               	retlw	0
  2405     1030  3400               	retlw	0
  2406     1031  3411               	retlw	17
  2407     1032  3405               	retlw	5
  2408     1033  340B               	retlw	11
  2409     1034  340A               	retlw	10
  2410     1035  341C               	retlw	28
  2411     1036  3423               	retlw	35
  2412     1037  3400               	retlw	0
  2413     1038  3400               	retlw	0
  2414     1039  3400               	retlw	0
  2415     103A  3410               	retlw	16
  2416     103B  340D               	retlw	13
  2417     103C  3418               	retlw	24
  2418     103D  3424               	retlw	36
  2419     103E  3425               	retlw	37
  2420     103F  3400               	retlw	0
  2421     1040  3400               	retlw	0
  2422     1041  3436               	retlw	54
  2423     1042  340E               	retlw	14
  2424     1043  340C               	retlw	12
  2425     1044  3412               	retlw	18
  2426     1045  3427               	retlw	39
  2427     1046  3426               	retlw	38
  2428     1047  3400               	retlw	0
  2429     1048  3400               	retlw	0
  2430     1049  3437               	retlw	55
  2431     104A  3438               	retlw	56
  2432     104B  340F               	retlw	15
  2433     104C  3433               	retlw	51
  2434     104D  3413               	retlw	19
  2435     104E  342D               	retlw	45
  2436     104F  3400               	retlw	0
  2437     1050  3400               	retlw	0
  2438     1051  3487               	retlw	135
  2439     1052  3434               	retlw	52
  2440     1053  3400               	retlw	0
  2441     1054  342F               	retlw	47
  2442     1055  342E               	retlw	46
  2443     1056  3400               	retlw	0
  2444     1057  3400               	retlw	0
  2445     1058  34E3               	retlw	227
  2446     1059  34E5               	retlw	229
  2447     105A  3428               	retlw	40
  2448     105B  3430               	retlw	48
  2449     105C  3400               	retlw	0
  2450     105D  3432               	retlw	50
  2451     105E  3400               	retlw	0
  2452     105F  3400               	retlw	0
  2453     1060  3400               	retlw	0
  2454     1061  3400               	retlw	0
  2455     1062  3400               	retlw	0
  2456     1063  3400               	retlw	0
  2457     1064  348A               	retlw	138
  2458     1065  3400               	retlw	0
  2459     1066  342A               	retlw	42
  2460     1067  348B               	retlw	139
  2461     1068  3400               	retlw	0
  2462     1069  3459               	retlw	89
  2463     106A  3489               	retlw	137
  2464     106B  345C               	retlw	92
  2465     106C  345F               	retlw	95
  2466     106D  3400               	retlw	0
  2467     106E  3400               	retlw	0
  2468     106F  3400               	retlw	0
  2469     1070  3462               	retlw	98
  2470     1071  3463               	retlw	99
  2471     1072  345A               	retlw	90
  2472     1073  345D               	retlw	93
  2473     1074  345E               	retlw	94
  2474     1075  3460               	retlw	96
  2475     1076  3429               	retlw	41
  2476     1077  3453               	retlw	83
  2477     1078  3444               	retlw	68
  2478     1079  3457               	retlw	87
  2479     107A  345B               	retlw	91
  2480     107B  3454               	retlw	84
  2481     107C  3455               	retlw	85
  2482     107D  3461               	retlw	97
  2483     107E  3447               	retlw	71
  2484     107F  3400               	retlw	0
  2485     1080  3400               	retlw	0
  2486     1081  3400               	retlw	0
  2487     1082  3400               	retlw	0
  2488     1083  3440               	retlw	64
  2489     1084                     __end_of_ps2UsbMap:
  2490                           
  2491                           	psect	stringtext3
  2492     18BC                     __pstringtext3:
  2493     18BC                     _USB_SD_Ptr:
  2494     18BC  34C2               	retlw	low (_sd000| (0+32768))
  2495     18BD  3498               	retlw	high (_sd000| (0+32768))
  2496     18BE  343F               	retlw	low (_sd001| (0+32768))
  2497     18BF  3498               	retlw	high (_sd001| (0+32768))
  2498     18C0  34AE               	retlw	low (_sd002| (0+32768))
  2499     18C1  3498               	retlw	high (_sd002| (0+32768))
  2500     18C2                     __end_of_USB_SD_Ptr:
  2501                           
  2502                           	psect	stringtext4
  2503     18C6                     __pstringtext4:
  2504     18C6                     _USB_CD_Ptr:
  2505     18C6  3473               	retlw	low (_configDescriptor1| (0+32768))
  2506     18C7  3498               	retlw	high (_configDescriptor1| (0+32768))
  2507     18C8                     __end_of_USB_CD_Ptr:
  2508                           
  2509                           	psect	stringtext5
  2510     1800                     __pstringtext5:
  2511     1800                     _hid_rpt01:
  2512     1800  3405               	retlw	5
  2513     1801  3401               	retlw	1
  2514     1802  3409               	retlw	9
  2515     1803  3406               	retlw	6
  2516     1804  34A1               	retlw	161
  2517     1805  3401               	retlw	1
  2518     1806  3405               	retlw	5
  2519     1807  3407               	retlw	7
  2520     1808  3419               	retlw	25
  2521     1809  34E0               	retlw	224
  2522     180A  3429               	retlw	41
  2523     180B  34E7               	retlw	231
  2524     180C  3415               	retlw	21
  2525     180D  3400               	retlw	0
  2526     180E  3425               	retlw	37
  2527     180F  3401               	retlw	1
  2528     1810  3475               	retlw	117
  2529     1811  3401               	retlw	1
  2530     1812  3495               	retlw	149
  2531     1813  3408               	retlw	8
  2532     1814  3481               	retlw	129
  2533     1815  3402               	retlw	2
  2534     1816  3495               	retlw	149
  2535     1817  3401               	retlw	1
  2536     1818  3475               	retlw	117
  2537     1819  3408               	retlw	8
  2538     181A  3481               	retlw	129
  2539     181B  3403               	retlw	3
  2540     181C  3495               	retlw	149
  2541     181D  3405               	retlw	5
  2542     181E  3475               	retlw	117
  2543     181F  3401               	retlw	1
  2544     1820  3405               	retlw	5
  2545     1821  3408               	retlw	8
  2546     1822  3419               	retlw	25
  2547     1823  3401               	retlw	1
  2548     1824  3429               	retlw	41
  2549     1825  3405               	retlw	5
  2550     1826  3491               	retlw	145
  2551     1827  3402               	retlw	2
  2552     1828  3495               	retlw	149
  2553     1829  3401               	retlw	1
  2554     182A  3475               	retlw	117
  2555     182B  3403               	retlw	3
  2556     182C  3491               	retlw	145
  2557     182D  3403               	retlw	3
  2558     182E  3495               	retlw	149
  2559     182F  3406               	retlw	6
  2560     1830  3475               	retlw	117
  2561     1831  3408               	retlw	8
  2562     1832  3415               	retlw	21
  2563     1833  3400               	retlw	0
  2564     1834  3425               	retlw	37
  2565     1835  348B               	retlw	139
  2566     1836  3405               	retlw	5
  2567     1837  3407               	retlw	7
  2568     1838  3419               	retlw	25
  2569     1839  3400               	retlw	0
  2570     183A  3429               	retlw	41
  2571     183B  348B               	retlw	139
  2572     183C  3481               	retlw	129
  2573     183D  3400               	retlw	0
  2574     183E  34C0               	retlw	192
  2575     183F                     __end_of_hid_rpt01:
  2576                           
  2577                           	psect	stringtext6
  2578     183F                     __pstringtext6:
  2579     183F                     _sd001:
  2580     183F  3434               	retlw	52
  2581     1840  3403               	retlw	3
  2582     1841  344D               	retlw	77
  2583     1842  3400               	retlw	0
  2584     1843  3469               	retlw	105
  2585     1844  3400               	retlw	0
  2586     1845  3463               	retlw	99
  2587     1846  3400               	retlw	0
  2588     1847  3472               	retlw	114
  2589     1848  3400               	retlw	0
  2590     1849  346F               	retlw	111
  2591     184A  3400               	retlw	0
  2592     184B  3463               	retlw	99
  2593     184C  3400               	retlw	0
  2594     184D  3468               	retlw	104
  2595     184E  3400               	retlw	0
  2596     184F  3469               	retlw	105
  2597     1850  3400               	retlw	0
  2598     1851  3470               	retlw	112
  2599     1852  3400               	retlw	0
  2600     1853  3420               	retlw	32
  2601     1854  3400               	retlw	0
  2602     1855  3454               	retlw	84
  2603     1856  3400               	retlw	0
  2604     1857  3465               	retlw	101
  2605     1858  3400               	retlw	0
  2606     1859  3463               	retlw	99
  2607     185A  3400               	retlw	0
  2608     185B  3468               	retlw	104
  2609     185C  3400               	retlw	0
  2610     185D  346E               	retlw	110
  2611     185E  3400               	retlw	0
  2612     185F  346F               	retlw	111
  2613     1860  3400               	retlw	0
  2614     1861  346C               	retlw	108
  2615     1862  3400               	retlw	0
  2616     1863  346F               	retlw	111
  2617     1864  3400               	retlw	0
  2618     1865  3467               	retlw	103
  2619     1866  3400               	retlw	0
  2620     1867  3479               	retlw	121
  2621     1868  3400               	retlw	0
  2622     1869  3420               	retlw	32
  2623     186A  3400               	retlw	0
  2624     186B  3449               	retlw	73
  2625     186C  3400               	retlw	0
  2626     186D  346E               	retlw	110
  2627     186E  3400               	retlw	0
  2628     186F  3463               	retlw	99
  2629     1870  3400               	retlw	0
  2630     1871  342E               	retlw	46
  2631     1872  3400               	retlw	0
  2632     1873                     __end_of_sd001:
  2633                           
  2634                           	psect	stringtext7
  2635     1873                     __pstringtext7:
  2636     1873                     _configDescriptor1:
  2637     1873  3409               	retlw	9
  2638     1874  3402               	retlw	2
  2639     1875  3429               	retlw	41
  2640     1876  3400               	retlw	0
  2641     1877  3401               	retlw	1
  2642     1878  3401               	retlw	1
  2643     1879  3400               	retlw	0
  2644     187A  34C0               	retlw	192
  2645     187B  3432               	retlw	50
  2646     187C  3409               	retlw	9
  2647     187D  3404               	retlw	4
  2648     187E  3400               	retlw	0
  2649     187F  3400               	retlw	0
  2650     1880  3402               	retlw	2
  2651     1881  3403               	retlw	3
  2652     1882  3401               	retlw	1
  2653     1883  3401               	retlw	1
  2654     1884  3400               	retlw	0
  2655     1885  3409               	retlw	9
  2656     1886  3421               	retlw	33
  2657     1887  3411               	retlw	17
  2658     1888  3401               	retlw	1
  2659     1889  3400               	retlw	0
  2660     188A  3401               	retlw	1
  2661     188B  3422               	retlw	34
  2662     188C  343F               	retlw	63
  2663     188D  3400               	retlw	0
  2664     188E  3407               	retlw	7
  2665     188F  3405               	retlw	5
  2666     1890  3481               	retlw	129
  2667     1891  3403               	retlw	3
  2668     1892  3408               	retlw	8
  2669     1893  3400               	retlw	0
  2670     1894  3401               	retlw	1
  2671     1895  3407               	retlw	7
  2672     1896  3405               	retlw	5
  2673     1897  3401               	retlw	1
  2674     1898  3403               	retlw	3
  2675     1899  3408               	retlw	8
  2676     189A  3400               	retlw	0
  2677     189B  3401               	retlw	1
  2678     189C                     __end_of_configDescriptor1:
  2679                           
  2680                           	psect	stringtext8
  2681     189C                     __pstringtext8:
  2682     189C                     _device_dsc:
  2683     189C  3412               	retlw	18
  2684     189D  3401               	retlw	1
  2685     189E  3400               	retlw	0
  2686     189F  3402               	retlw	2
  2687     18A0  3400               	retlw	0
  2688     18A1  3400               	retlw	0
  2689     18A2  3400               	retlw	0
  2690     18A3  3408               	retlw	8
  2691     18A4  34D8               	retlw	216
  2692     18A5  3404               	retlw	4
  2693     18A6  3455               	retlw	85
  2694     18A7  3400               	retlw	0
  2695     18A8  3401               	retlw	1
  2696     18A9  3400               	retlw	0
  2697     18AA  3401               	retlw	1
  2698     18AB  3402               	retlw	2
  2699     18AC  3400               	retlw	0
  2700     18AD  3401               	retlw	1
  2701     18AE                     __end_of_device_dsc:
  2702                           
  2703                           	psect	stringtext9
  2704     18AE                     __pstringtext9:
  2705     18AE                     _sd002:
  2706     18AE  340E               	retlw	14
  2707     18AF  3403               	retlw	3
  2708     18B0  3441               	retlw	65
  2709     18B1  3400               	retlw	0
  2710     18B2  3454               	retlw	84
  2711     18B3  3400               	retlw	0
  2712     18B4  3432               	retlw	50
  2713     18B5  3400               	retlw	0
  2714     18B6  3455               	retlw	85
  2715     18B7  3400               	retlw	0
  2716     18B8  3453               	retlw	83
  2717     18B9  3400               	retlw	0
  2718     18BA  3442               	retlw	66
  2719     18BB  3400               	retlw	0
  2720     18BC                     __end_of_sd002:
  2721                           
  2722                           	psect	stringtext10
  2723     18C2                     __pstringtext10:
  2724     18C2                     _sd000:
  2725     18C2  3404               	retlw	4
  2726     18C3  3403               	retlw	3
  2727     18C4  3409               	retlw	9
  2728     18C5  3404               	retlw	4
  2729     18C6                     __end_of_sd000:
  2730                           
  2731                           	psect	nvBANK2
  2732     016D                     __pnvBANK2:
  2733     016D                     _IOCAF4_InterruptHandler:
  2734     016D                     	ds	2
  2735                           
  2736                           	psect	nvBANK3
  2737     01CD                     __pnvBANK3:
  2738     01CD                     _IOCAF5_InterruptHandler:
  2739     01CD                     	ds	2
  2740     000C                     _PORTAbits	set	12
  2741     001C                     _T2CONbits	set	28
  2742     001C                     _T2CON	set	28
  2743     001A                     _TMR2	set	26
  2744     001B                     _PR2	set	27
  2745     0011                     _PIR1bits	set	17
  2746     0012                     _PIR2bits	set	18
  2747     000B                     _INTCONbits	set	11
  2748     008C                     _TRISAbits	set	140
  2749     0091                     _PIE1bits	set	145
  2750     0092                     _PIE2bits	set	146
  2751     0097                     _WDTCON	set	151
  2752     0098                     _OSCTUNE	set	152
  2753     0099                     _OSCCON	set	153
  2754     0095                     _OPTION_REGbits	set	149
  2755     008E                     _TRISC	set	142
  2756     008C                     _TRISA	set	140
  2757     04D6                     _PLLRDY	set	1238
  2758     010C                     _LATAbits	set	268
  2759     0116                     _BORCON	set	278
  2760     011D                     _APFCON	set	285
  2761     010E                     _LATC	set	270
  2762     010C                     _LATA	set	268
  2763     0199                     _RCREG	set	409
  2764     019D                     _RCSTAbits	set	413
  2765     019A                     _TXREG	set	410
  2766     019C                     _SPBRGH	set	412
  2767     019B                     _SPBRGL	set	411
  2768     019E                     _TXSTA	set	414
  2769     019D                     _RCSTA	set	413
  2770     019F                     _BAUDCON	set	415
  2771     018C                     _ANSELA	set	396
  2772     018E                     _ANSELC	set	398
  2773     020C                     _WPUA	set	524
  2774     039B                     _ACTCON	set	923
  2775     0391                     _IOCAPbits	set	913
  2776     0392                     _IOCANbits	set	914
  2777     0393                     _IOCAFbits	set	915
  2778     0E98                     _UEP0bits	set	3736
  2779     0E8E                     _UCON	set	3726
  2780     0E8F                     _USTAT	set	3727
  2781     0E92                     _UIEbits	set	3730
  2782     0E90                     _UIRbits	set	3728
  2783     0E96                     _UADDR	set	3734
  2784     0E8E                     _UCONbits	set	3726
  2785     0E92                     _UIE	set	3730
  2786     0E97                     _UEIE	set	3735
  2787     0E91                     _UCFG	set	3729
  2788     0E90                     _UIR	set	3728
  2789     0E93                     _UEIR	set	3731
  2790     0E99                     _UEP1	set	3737
  2791     0E98                     _UEP0	set	3736
  2792                           
  2793                           	psect	cinit
  2794     003F                     start_initialization:	
  2795                           ; #config settings
  2796                           
  2797     003F                     __initialization:	;BIGRAM
  2798                           
  2799                           ; Initialize objects allocated to BANK3
  2800     003F  3074               	movlw	low __pidataBANK3
  2801     0040  0084               	movwf	4
  2802     0041  309E               	movlw	(high __pidataBANK3)| (0+128)
  2803     0042  0085               	movwf	5
  2804     0043  0023               	movlb	3	; select bank3
  2805     0044  0012               	moviw fsr0++
  2806     0045  00C7               	movwf	__pdataBANK3& (0+127)
  2807     0046  0012               	moviw fsr0++
  2808     0047  00C8               	movwf	(__pdataBANK3+1)& (0+127)
  2809     0048  0012               	moviw fsr0++
  2810     0049  00C9               	movwf	(__pdataBANK3+2)& (0+127)
  2811     004A  0012               	moviw fsr0++
  2812     004B  00CA               	movwf	(__pdataBANK3+3)& (0+127)
  2813     004C  0012               	moviw fsr0++
  2814     004D  00CB               	movwf	(__pdataBANK3+4)& (0+127)
  2815     004E  0012               	moviw fsr0++
  2816     004F  00CC               	movwf	(__pdataBANK3+5)& (0+127)
  2817                           
  2818                           ; Clear objects allocated to BIGRAM
  2819     0050  302C               	movlw	low (0+9004)
  2820     0051  0084               	movwf	4
  2821     0052  3023               	movlw	high (0+9004)
  2822     0053  0085               	movwf	5
  2823     0054  30C4               	movlw	196
  2824     0055  00FE               	movwf	btemp
  2825     0056  3000               	movlw	0
  2826     0057  00FF               	movwf	btemp+1
  2827     0058  319F  2707  3180   	fcall	clear_ram0
  2828                           
  2829                           ; Clear objects allocated to BANK0
  2830     005B  3063               	movlw	low __pbssBANK0
  2831     005C  0084               	movwf	4
  2832     005D  3000               	movlw	high __pbssBANK0
  2833     005E  0085               	movwf	5
  2834     005F  300D               	movlw	13
  2835     0060  00FE               	movwf	btemp
  2836     0061  3000               	movlw	0
  2837     0062  00FF               	movwf	btemp+1
  2838     0063  319F  2707  3180   	fcall	clear_ram0
  2839                           
  2840                           ; Clear objects allocated to BANK1
  2841     0066  0021               	movlb	1	; select bank1
  2842     0067  01E9               	clrf	__pbssBANK1& (0+127)
  2843     0068  01EA               	clrf	(__pbssBANK1+1)& (0+127)
  2844     0069  01EB               	clrf	(__pbssBANK1+2)& (0+127)
  2845     006A  01EC               	clrf	(__pbssBANK1+3)& (0+127)
  2846     006B  01ED               	clrf	(__pbssBANK1+4)& (0+127)
  2847     006C  01EE               	clrf	(__pbssBANK1+5)& (0+127)
  2848     006D  01EF               	clrf	(__pbssBANK1+6)& (0+127)
  2849                           
  2850                           ; Clear objects allocated to BANK2
  2851     006E  3021               	movlw	low __pbssBANK2
  2852     006F  0084               	movwf	4
  2853     0070  3001               	movlw	high __pbssBANK2
  2854     0071  0085               	movwf	5
  2855     0072  304C               	movlw	76
  2856     0073  00FE               	movwf	btemp
  2857     0074  3000               	movlw	0
  2858     0075  00FF               	movwf	btemp+1
  2859     0076  319F  2707  3180   	fcall	clear_ram0
  2860                           
  2861                           ; Clear objects allocated to BANK3
  2862     0079  30A0               	movlw	low __pbssBANK3
  2863     007A  0084               	movwf	4
  2864     007B  3001               	movlw	high __pbssBANK3
  2865     007C  0085               	movwf	5
  2866     007D  3027               	movlw	39
  2867     007E  00FE               	movwf	btemp
  2868     007F  3000               	movlw	0
  2869     0080  00FF               	movwf	btemp+1
  2870     0081  319F  2707         	fcall	clear_ram0
  2871     0083                     end_of_initialization:	
  2872                           ;End of C runtime variable initialization code
  2873                           
  2874     0083                     __end_of__initialization:
  2875     0083  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2876     0084  0020               	movlb	0
  2877     0085  318A  2A72         	ljmp	_main	;jump to C main() function
  2878                           
  2879                           	psect	bssBANK0
  2880     0063                     __pbssBANK0:
  2881     0063                     _pBDTEntryIn:
  2882     0063                     	ds	4
  2883     0067                     _pBDTEntryEP0OutNext:
  2884     0067                     	ds	2
  2885     0069                     _keyboardCommandCount:
  2886     0069                     	ds	1
  2887     006A                     _controlTransferState:
  2888     006A                     	ds	1
  2889     006B                     _pBDTEntryEP0OutCurrent:
  2890     006B                     	ds	1
  2891     006C                     _USBDeviceState:
  2892     006C                     	ds	1
  2893     006D                     _USTATcopy:
  2894     006D                     	ds	1
  2895     006E                     _USBAlternateInterface:
  2896     006E                     	ds	1
  2897     006F                     _USBActiveConfiguration:
  2898     006F                     	ds	1
  2899                           
  2900                           	psect	bssBANK1
  2901     00E9                     __pbssBANK1:
  2902     00E9                     _inPipes:
  2903     00E9                     	ds	5
  2904     00EE                     _eusartRxHead:
  2905     00EE                     	ds	1
  2906     00EF                     _eusartTxBufferRemaining:
  2907     00EF                     	ds	1
  2908                           
  2909                           	psect	bssBANK2
  2910     0121                     __pbssBANK2:
  2911     0121                     _outPipes:
  2912     0121                     	ds	7
  2913     0128                     _timeMs:
  2914     0128                     	ds	4
  2915     012C                     _prevTimeMs:
  2916     012C                     	ds	4
  2917     0130                     _pBDTEntryOut:
  2918     0130                     	ds	4
  2919     0134                     _OldSOFCount:
  2920     0134                     	ds	2
  2921     0136                     _LocalSOFCount:
  2922     0136                     	ds	2
  2923     0138                     _keyboardIdleRate:
  2924     0138                     	ds	2
  2925     013A                     _SOFCounter:
  2926     013A                     	ds	2
  2927     013C                     _ep_data_out:
  2928     013C                     	ds	2
  2929     013E                     _ep_data_in:
  2930     013E                     	ds	2
  2931     0140                     _EUSART_ErrorHandler:
  2932     0140                     	ds	2
  2933     0142                     _EUSART_OverrunErrorHandler:
  2934     0142                     	ds	2
  2935     0144                     _EUSART_FramingErrorHandler:
  2936     0144                     	ds	2
  2937     0146                     _TMR2_InterruptHandler:
  2938     0146                     	ds	2
  2939     0148                     _EUSART_RxDefaultInterruptHandler:
  2940     0148                     	ds	2
  2941     014A                     _EUSART_TxDefaultInterruptHandler:
  2942     014A                     	ds	2
  2943     014C                     _keyboardCommandOnes:
  2944     014C                     	ds	1
  2945     014D                     _keyboardCommandBits:
  2946     014D                     	ds	1
  2947     014E                     _keyboardCommand:
  2948     014E                     	ds	1
  2949     014F                     _keyboardIsBreak:
  2950     014F                     	ds	1
  2951     0150                     _keyboardIsExtend:
  2952     0150                     	ds	1
  2953     0151                     _keyboardData:
  2954     0151                     	ds	1
  2955     0152                     _keyboardScanCodeValid:
  2956     0152                     	ds	1
  2957     0153                     _keyboardOnesCount:
  2958     0153                     	ds	1
  2959     0154                     _keyboardIndexData:
  2960     0154                     	ds	1
  2961     0155                     _keyboardState:
  2962     0155                     	ds	1
  2963     0156                     _USBTicksSinceSuspendEnd:
  2964     0156                     	ds	1
  2965     0157                     _USBDeferOUTDataStagePackets:
  2966     0157                     	ds	1
  2967     0158                     _USBDeferINDataStagePackets:
  2968     0158                     	ds	1
  2969     0159                     _USBStatusStageEnabledFlag2:
  2970     0159                     	ds	1
  2971     015A                     _USBStatusStageEnabledFlag1:
  2972     015A                     	ds	1
  2973     015B                     _USBDeferStatusStagePacket:
  2974     015B                     	ds	1
  2975     015C                     _USBStatusStageTimeoutCounter:
  2976     015C                     	ds	1
  2977     015D                     _BothEP0OutUOWNsSet:
  2978     015D                     	ds	1
  2979     015E                     _endpoint_number:
  2980     015E                     	ds	1
  2981     015F                     _USBBusIsSuspended:
  2982     015F                     	ds	1
  2983     0160                     _RemoteWakeup:
  2984     0160                     	ds	1
  2985     0161                     _pDst:
  2986     0161                     	ds	1
  2987     0162                     _shortPacketStatus:
  2988     0162                     	ds	1
  2989     0163                     _eusartRxLastError:
  2990     0163                     	ds	1
  2991     0164                     _eusartRxCount:
  2992     0164                     	ds	1
  2993     0165                     _eusartRxTail:
  2994     0165                     	ds	1
  2995     0166                     _eusartTxTail:
  2996     0166                     	ds	1
  2997     0167                     _eusartTxHead:
  2998     0167                     	ds	1
  2999     0168                     _keyboardScanCode:
  3000     0168                     	ds	3
  3001     016B                     _active_protocol:
  3002     016B                     	ds	1
  3003     016C                     _idle_rate:
  3004     016C                     	ds	1
  3005                           
  3006                           	psect	bssBANK3
  3007     01A0                     __pbssBANK3:
  3008     01A0                     _oldInputReport:
  3009     01A0                     	ds	8
  3010     01A8                     _eusartRxStatusBuffer:
  3011     01A8                     	ds	8
  3012     01B0                     _eusartRxBuffer:
  3013     01B0                     	ds	8
  3014     01B8                     _eusartTxBuffer:
  3015     01B8                     	ds	8
  3016     01C0                     _USB1msTickCount:
  3017     01C0                     	ds	4
  3018     01C4                     main@F3300:
  3019     01C4                     	ds	3
  3020                           
  3021                           	psect	dataBANK3
  3022     01C7                     __pdataBANK3:
  3023     01C7                     main@F3304:
  3024     01C7                     	ds	6
  3025                           
  3026                           	psect	clrtext
  3027     1F07                     clear_ram0:	
  3028                           ;	Called with FSR0 containing the base address, and
  3029                           ;	btemp/btemp+1 has the size to clear
  3030                           
  3031     1F07  0064               	clrwdt	;clear the watchdog before getting into this loop
  3032     1F08                     clrloop0:
  3033     1F08  0180               	clrf	0	;clear RAM location pointed to by FSR
  3034     1F09  3101               	addfsr 0,1
  3035     1F0A  3001               	movlw	1
  3036     1F0B  02FE               	subwf	126,f
  3037     1F0C  3000               	movlw	0
  3038     1F0D  3BFF               	subwfb	127,f
  3039     1F0E  087F               	movf	127,w
  3040     1F0F  047E               	iorwf	126,w
  3041     1F10  1903               	btfsc	3,2
  3042     1F11  3400               	retlw	0	;all done for this memory range, return
  3043     1F12  2F08               	goto	clrloop0	;have we reached the end yet?
  3044                           
  3045                           	psect	cstackBANK1
  3046     00A8                     __pcstackBANK1:
  3047     00A8                     ?_IOCAF4_SetInterruptHandler:
  3048     00A8                     ?_IOCAF5_SetInterruptHandler:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051     00A8                     ??_OSCILLATOR_Initialize:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054     00A8                     ??_WDT_Initialize:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057     00A8                     ??_USBDeviceInit:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060     00A8                     ??_USBDeviceAttach:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063     00A8                     ?_TMR2_SetInterruptHandler:	
  3064                           ; 1 bytes @ 0x0
  3065                           
  3066     00A8                     ?_EUSART_SetRxInterruptHandler:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069     00A8                     ?_EUSART_SetTxInterruptHandler:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072     00A8                     ?_EUSART_SetFramingErrorHandler:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075     00A8                     ?_EUSART_SetOverrunErrorHandler:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078     00A8                     ?_EUSART_SetErrorHandler:	
  3079                           ; 1 bytes @ 0x0
  3080                           
  3081     00A8                     ?_memset:	
  3082                           ; 1 bytes @ 0x0
  3083                           
  3084     00A8                     ?_GenericQueue_Init:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087     00A8                     ??_PS2USB_ScanCodeToUSBHID:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090     00A8                     ??_PS2Keyboard_GetLastCommand:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093     00A8                     ??_PS2Keyboard_SendCommand:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096     00A8                     ??_TMR2_StartTimer:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099     00A8                     ??_EUSART_is_tx_ready:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102     00A8                     ??_EUSART_Write:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105     00A8                     ??_hex2str:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108     00A8                     ?___bmul:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111     00A8                     ?_USBTransferOnePacket:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114     00A8                     ?_GenericQueue_IsEmpty:	
  3115                           ; 2 bytes @ 0x0
  3116                           
  3117     00A8                     ?_GenericQueue_IsFull:	
  3118                           ; 2 bytes @ 0x0
  3119                           
  3120     00A8                     ?___awmod:	
  3121                           ; 2 bytes @ 0x0
  3122                           
  3123     00A8                     USBTransferOnePacket@dir:	
  3124                           ; 2 bytes @ 0x0
  3125                           
  3126     00A8                     PS2Keyboard_SendCommand@cmd:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129     00A8                     PS2USB_ScanCodeToUSBHID@scanCode:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132     00A8                     hex2str@val:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135     00A8                     ___bmul@multiplicand:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138     00A8                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  3139                           ; 1 bytes @ 0x0
  3140                           
  3141     00A8                     IOCAF5_SetInterruptHandler@InterruptHandler:	
  3142                           ; 2 bytes @ 0x0
  3143                           
  3144     00A8                     TMR2_SetInterruptHandler@InterruptHandler:	
  3145                           ; 2 bytes @ 0x0
  3146                           
  3147     00A8                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3148                           ; 2 bytes @ 0x0
  3149                           
  3150     00A8                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3151                           ; 2 bytes @ 0x0
  3152                           
  3153     00A8                     EUSART_SetErrorHandler@interruptHandler:	
  3154                           ; 2 bytes @ 0x0
  3155                           
  3156     00A8                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3157                           ; 2 bytes @ 0x0
  3158                           
  3159     00A8                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3160                           ; 2 bytes @ 0x0
  3161                           
  3162     00A8                     GenericQueue_Init@q:	
  3163                           ; 2 bytes @ 0x0
  3164                           
  3165     00A8                     GenericQueue_IsEmpty@q:	
  3166                           ; 2 bytes @ 0x0
  3167                           
  3168     00A8                     GenericQueue_IsFull@q:	
  3169                           ; 2 bytes @ 0x0
  3170                           
  3171     00A8                     ___awmod@divisor:	
  3172                           ; 2 bytes @ 0x0
  3173                           
  3174     00A8                     memset@c:	
  3175                           ; 2 bytes @ 0x0
  3176                           
  3177                           
  3178                           ; 2 bytes @ 0x0
  3179     00A8                     	ds	1
  3180     00A9                     ??_APP_KeyboardProcessOutputReport:
  3181     00A9                     ??___bmul:	
  3182                           ; 1 bytes @ 0x1
  3183                           
  3184     00A9                     EUSART_Write@txData:	
  3185                           ; 1 bytes @ 0x1
  3186                           
  3187     00A9                     USBTransferOnePacket@data:	
  3188                           ; 1 bytes @ 0x1
  3189                           
  3190                           
  3191                           ; 2 bytes @ 0x1
  3192     00A9                     	ds	1
  3193     00AA                     ??_IOCAF4_SetInterruptHandler:
  3194     00AA                     ??_IOCAF5_SetInterruptHandler:	
  3195                           ; 1 bytes @ 0x2
  3196                           
  3197     00AA                     ??_TMR2_Initialize:	
  3198                           ; 1 bytes @ 0x2
  3199                           
  3200     00AA                     ??_EUSART_Initialize:	
  3201                           ; 1 bytes @ 0x2
  3202                           
  3203     00AA                     ??_TMR2_SetInterruptHandler:	
  3204                           ; 1 bytes @ 0x2
  3205                           
  3206     00AA                     ??_EUSART_SetRxInterruptHandler:	
  3207                           ; 1 bytes @ 0x2
  3208                           
  3209     00AA                     ??_EUSART_SetTxInterruptHandler:	
  3210                           ; 1 bytes @ 0x2
  3211                           
  3212     00AA                     ??_EUSART_SetFramingErrorHandler:	
  3213                           ; 1 bytes @ 0x2
  3214                           
  3215     00AA                     ??_EUSART_SetOverrunErrorHandler:	
  3216                           ; 1 bytes @ 0x2
  3217                           
  3218     00AA                     ??_EUSART_SetErrorHandler:	
  3219                           ; 1 bytes @ 0x2
  3220                           
  3221     00AA                     ??_SysTime_Init:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224     00AA                     ?_Log_Message:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227     00AA                     ??_GenericQueue_IsEmpty:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230     00AA                     ??_PIN_MANAGER_Initialize:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233     00AA                     ??_GenericQueue_IsFull:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236     00AA                     Log_Message@bufSize:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239     00AA                     ___bmul@product:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242     00AA                     GenericQueue_Init@element_size:	
  3243                           ; 1 bytes @ 0x2
  3244                           
  3245     00AA                     ___awmod@dividend:	
  3246                           ; 2 bytes @ 0x2
  3247                           
  3248     00AA                     memset@n:	
  3249                           ; 2 bytes @ 0x2
  3250                           
  3251                           
  3252                           ; 2 bytes @ 0x2
  3253     00AA                     	ds	1
  3254     00AB                     ??_Log_Message:
  3255     00AB                     USBTransferOnePacket@len:	
  3256                           ; 1 bytes @ 0x3
  3257                           
  3258     00AB                     ___bmul@multiplier:	
  3259                           ; 1 bytes @ 0x3
  3260                           
  3261                           
  3262                           ; 1 bytes @ 0x3
  3263     00AB                     	ds	1
  3264     00AC                     ??_memset:
  3265     00AC                     ??_USBTransferOnePacket:	
  3266                           ; 1 bytes @ 0x4
  3267                           
  3268     00AC                     ??_PS2Keyboard_Init:	
  3269                           ; 1 bytes @ 0x4
  3270                           
  3271     00AC                     ?_Log_UtilityConvertByteToHex:	
  3272                           ; 1 bytes @ 0x4
  3273                           
  3274     00AC                     ??_GenericQueue_Init:	
  3275                           ; 1 bytes @ 0x4
  3276                           
  3277     00AC                     ??___awmod:	
  3278                           ; 1 bytes @ 0x4
  3279                           
  3280     00AC                     Log_UtilityConvertByteToHex@buf:	
  3281                           ; 1 bytes @ 0x4
  3282                           
  3283     00AC                     Log_Message@buf:	
  3284                           ; 1 bytes @ 0x4
  3285                           
  3286     00AC                     USBDeviceInit@p:	
  3287                           ; 1 bytes @ 0x4
  3288                           
  3289                           
  3290                           ; 2 bytes @ 0x4
  3291     00AC                     	ds	1
  3292     00AD                     Log_UtilityConvertByteToHex@bufSize:
  3293     00AD                     Log_Message@i:	
  3294                           ; 1 bytes @ 0x5
  3295                           
  3296     00AD                     ___awmod@counter:	
  3297                           ; 1 bytes @ 0x5
  3298                           
  3299     00AD                     memset@p:	
  3300                           ; 1 bytes @ 0x5
  3301                           
  3302                           
  3303                           ; 1 bytes @ 0x5
  3304     00AD                     	ds	1
  3305     00AE                     ??_Log_UtilityConvertByteToHex:
  3306     00AE                     USBDeviceInit@i_1324:	
  3307                           ; 1 bytes @ 0x6
  3308                           
  3309     00AE                     ___awmod@sign:	
  3310                           ; 1 bytes @ 0x6
  3311                           
  3312     00AE                     memset@dest:	
  3313                           ; 1 bytes @ 0x6
  3314                           
  3315                           
  3316                           ; 1 bytes @ 0x6
  3317     00AE                     	ds	1
  3318     00AF                     ?___wmul:
  3319     00AF                     USBDeviceInit@i:	
  3320                           ; 2 bytes @ 0x7
  3321                           
  3322     00AF                     Log_UtilityConvertByteToHex@d0:	
  3323                           ; 1 bytes @ 0x7
  3324                           
  3325     00AF                     ___wmul@multiplier:	
  3326                           ; 1 bytes @ 0x7
  3327                           
  3328                           
  3329                           ; 2 bytes @ 0x7
  3330     00AF                     	ds	1
  3331     00B0                     ??_SYSTEM_Initialize:
  3332     00B0                     USBTransferOnePacket@ep:	
  3333                           ; 1 bytes @ 0x8
  3334                           
  3335     00B0                     Log_UtilityConvertByteToHex@byte:	
  3336                           ; 1 bytes @ 0x8
  3337                           
  3338                           
  3339                           ; 1 bytes @ 0x8
  3340     00B0                     	ds	1
  3341     00B1                     Log_UtilityConvertByteToHex@d1:
  3342     00B1                     USBTransferOnePacket@handle:	
  3343                           ; 1 bytes @ 0x9
  3344                           
  3345     00B1                     ___wmul@multiplicand:	
  3346                           ; 2 bytes @ 0x9
  3347                           
  3348                           
  3349                           ; 2 bytes @ 0x9
  3350     00B1                     	ds	2
  3351     00B3                     ??___wmul:
  3352     00B3                     ___wmul@product:	
  3353                           ; 1 bytes @ 0xB
  3354                           
  3355                           
  3356                           ; 2 bytes @ 0xB
  3357     00B3                     	ds	2
  3358     00B5                     ?_memcpy:
  3359     00B5                     ?_memcmp:	
  3360                           ; 2 bytes @ 0xD
  3361                           
  3362     00B5                     memcmp@vl:	
  3363                           ; 2 bytes @ 0xD
  3364                           
  3365     00B5                     memcpy@d1:	
  3366                           ; 2 bytes @ 0xD
  3367                           
  3368                           
  3369                           ; 2 bytes @ 0xD
  3370     00B5                     	ds	2
  3371     00B7                     memcmp@vr:
  3372     00B7                     memcpy@s1:	
  3373                           ; 1 bytes @ 0xF
  3374                           
  3375                           
  3376                           ; 2 bytes @ 0xF
  3377     00B7                     	ds	1
  3378     00B8                     memcmp@n:
  3379                           
  3380                           ; 2 bytes @ 0x10
  3381     00B8                     	ds	1
  3382     00B9                     memcpy@n:
  3383                           
  3384                           ; 2 bytes @ 0x11
  3385     00B9                     	ds	1
  3386     00BA                     ??_memcmp:
  3387                           
  3388                           ; 1 bytes @ 0x12
  3389     00BA                     	ds	1
  3390     00BB                     ??_memcpy:
  3391     00BB                     memcmp@l:	
  3392                           ; 1 bytes @ 0x13
  3393                           
  3394     00BB                     memcpy@d:	
  3395                           ; 2 bytes @ 0x13
  3396                           
  3397                           
  3398                           ; 2 bytes @ 0x13
  3399     00BB                     	ds	2
  3400     00BD                     memcmp@r:
  3401     00BD                     memcpy@s:	
  3402                           ; 1 bytes @ 0x15
  3403                           
  3404                           
  3405                           ; 2 bytes @ 0x15
  3406     00BD                     	ds	1
  3407     00BE                     ?_GenericQueue_Contains:
  3408     00BE                     GenericQueue_Contains@q:	
  3409                           ; 1 bytes @ 0x16
  3410                           
  3411                           
  3412                           ; 2 bytes @ 0x16
  3413     00BE                     	ds	1
  3414     00BF                     memcpy@tmp:
  3415                           
  3416                           ; 1 bytes @ 0x17
  3417     00BF                     	ds	1
  3418     00C0                     ?_GenericQueue_CopyToArray:
  3419     00C0                     ?_GenericQueue_Remove:	
  3420                           ; 1 bytes @ 0x18
  3421                           
  3422     00C0                     ?_GenericQueue_Enqueue:	
  3423                           ; 1 bytes @ 0x18
  3424                           
  3425     00C0                     ?_GenericQueue_Dequeue:	
  3426                           ; 1 bytes @ 0x18
  3427                           
  3428     00C0                     GenericQueue_Contains@item:	
  3429                           ; 1 bytes @ 0x18
  3430                           
  3431     00C0                     GenericQueue_Enqueue@q:	
  3432                           ; 1 bytes @ 0x18
  3433                           
  3434     00C0                     GenericQueue_Dequeue@q:	
  3435                           ; 2 bytes @ 0x18
  3436                           
  3437     00C0                     GenericQueue_Remove@q:	
  3438                           ; 2 bytes @ 0x18
  3439                           
  3440     00C0                     GenericQueue_CopyToArray@q:	
  3441                           ; 2 bytes @ 0x18
  3442                           
  3443                           
  3444                           ; 2 bytes @ 0x18
  3445     00C0                     	ds	1
  3446     00C1                     ??_GenericQueue_Contains:
  3447                           
  3448                           ; 1 bytes @ 0x19
  3449     00C1                     	ds	1
  3450     00C2                     GenericQueue_Dequeue@item:
  3451     00C2                     GenericQueue_Remove@item:	
  3452                           ; 1 bytes @ 0x1A
  3453                           
  3454     00C2                     GenericQueue_CopyToArray@array:	
  3455                           ; 1 bytes @ 0x1A
  3456                           
  3457     00C2                     GenericQueue_Enqueue@item:	
  3458                           ; 1 bytes @ 0x1A
  3459                           
  3460                           
  3461                           ; 2 bytes @ 0x1A
  3462     00C2                     	ds	1
  3463     00C3                     ??_GenericQueue_CopyToArray:
  3464     00C3                     ??_GenericQueue_Remove:	
  3465                           ; 1 bytes @ 0x1B
  3466                           
  3467     00C3                     ??_GenericQueue_Dequeue:	
  3468                           ; 1 bytes @ 0x1B
  3469                           
  3470                           
  3471                           ; 1 bytes @ 0x1B
  3472     00C3                     	ds	1
  3473     00C4                     ??_GenericQueue_Enqueue:
  3474                           
  3475                           ; 1 bytes @ 0x1C
  3476     00C4                     	ds	1
  3477     00C5                     GenericQueue_Contains@i:
  3478                           
  3479                           ; 1 bytes @ 0x1D
  3480     00C5                     	ds	2
  3481     00C7                     ??_PS2Keyboard_GetScanCode:
  3482     00C7                     PS2Keyboard_GetScanCode@scanCode:	
  3483                           ; 1 bytes @ 0x1F
  3484                           
  3485     00C7                     GenericQueue_Remove@i:	
  3486                           ; 1 bytes @ 0x1F
  3487                           
  3488     00C7                     GenericQueue_CopyToArray@index:	
  3489                           ; 1 bytes @ 0x1F
  3490                           
  3491                           
  3492                           ; 1 bytes @ 0x1F
  3493     00C7                     	ds	1
  3494     00C8                     PS2Keyboard_GetScanCode@ret:
  3495     00C8                     GenericQueue_Remove@j:	
  3496                           ; 1 bytes @ 0x20
  3497                           
  3498     00C8                     GenericQueue_CopyToArray@count:	
  3499                           ; 1 bytes @ 0x20
  3500                           
  3501                           
  3502                           ; 1 bytes @ 0x20
  3503     00C8                     	ds	1
  3504     00C9                     ??_APP_KeyboardUpdateState:
  3505                           
  3506                           ; 1 bytes @ 0x21
  3507     00C9                     	ds	2
  3508     00CB                     APP_KeyboardUpdateState@leds:
  3509                           
  3510                           ; 1 bytes @ 0x23
  3511     00CB                     	ds	1
  3512     00CC                     APP_KeyboardUpdateState@usbHidCode:
  3513                           
  3514                           ; 1 bytes @ 0x24
  3515     00CC                     	ds	1
  3516     00CD                     APP_KeyboardUpdateState@usbHidCode_2856:
  3517                           
  3518                           ; 1 bytes @ 0x25
  3519     00CD                     	ds	1
  3520     00CE                     APP_KeyboardUpdateState@usbHidCode_2855:
  3521                           
  3522                           ; 1 bytes @ 0x26
  3523     00CE                     	ds	1
  3524     00CF                     APP_KeyboardUpdateState@usbHidCode_2864:
  3525                           
  3526                           ; 1 bytes @ 0x27
  3527     00CF                     	ds	1
  3528     00D0                     APP_KeyboardUpdateState@scanCode:
  3529                           
  3530                           ; 1 bytes @ 0x28
  3531     00D0                     	ds	1
  3532     00D1                     ??_APP_KeyboardTasks:
  3533                           
  3534                           ; 1 bytes @ 0x29
  3535     00D1                     	ds	2
  3536     00D3                     APP_KeyboardTasks@scanCode:
  3537                           
  3538                           ; 1 bytes @ 0x2B
  3539     00D3                     	ds	1
  3540     00D4                     APP_KeyboardTasks@needToSendNewReportPacket:
  3541                           
  3542                           ; 1 bytes @ 0x2C
  3543     00D4                     	ds	1
  3544     00D5                     APP_KeyboardTasks@TimeDeltaMilliseconds:
  3545                           
  3546                           ; 2 bytes @ 0x2D
  3547     00D5                     	ds	2
  3548     00D7                     APP_KeyboardTasks@i:
  3549                           
  3550                           ; 1 bytes @ 0x2F
  3551     00D7                     	ds	1
  3552     00D8                     ??_main:
  3553                           
  3554                           ; 1 bytes @ 0x30
  3555     00D8                     	ds	2
  3556     00DA                     main@scanCodeStr:
  3557                           
  3558                           ; 6 bytes @ 0x32
  3559     00DA                     	ds	6
  3560     00E0                     _main$2579:
  3561                           
  3562                           ; 2 bytes @ 0x38
  3563     00E0                     	ds	2
  3564     00E2                     _main$2580:
  3565                           
  3566                           ; 2 bytes @ 0x3A
  3567     00E2                     	ds	2
  3568     00E4                     main@scanCodeValid:
  3569                           
  3570                           ; 1 bytes @ 0x3C
  3571     00E4                     	ds	1
  3572     00E5                     main@hndlScanCode:
  3573                           
  3574                           ; 1 bytes @ 0x3D
  3575     00E5                     	ds	1
  3576     00E6                     main@scanCode:
  3577                           
  3578                           ; 3 bytes @ 0x3E
  3579     00E6                     	ds	3
  3580                           
  3581                           	psect	cstackCOMMON
  3582     0070                     __pcstackCOMMON:
  3583     0070                     ?_IOCAF4_DefaultInterruptHandler:
  3584     0070                     ??_IOCAF4_DefaultInterruptHandler:	
  3585                           ; 1 bytes @ 0x0
  3586                           
  3587     0070                     ?_IOCAF5_DefaultInterruptHandler:	
  3588                           ; 1 bytes @ 0x0
  3589                           
  3590     0070                     ??_IOCAF5_DefaultInterruptHandler:	
  3591                           ; 1 bytes @ 0x0
  3592                           
  3593     0070                     ?_IOCAF4_ISR:	
  3594                           ; 1 bytes @ 0x0
  3595                           
  3596     0070                     ?_IOCAF5_ISR:	
  3597                           ; 1 bytes @ 0x0
  3598                           
  3599     0070                     ?_OSCILLATOR_Initialize:	
  3600                           ; 1 bytes @ 0x0
  3601                           
  3602     0070                     ?_WDT_Initialize:	
  3603                           ; 1 bytes @ 0x0
  3604                           
  3605     0070                     ?_TMR2_Initialize:	
  3606                           ; 1 bytes @ 0x0
  3607                           
  3608     0070                     ?_EUSART_Initialize:	
  3609                           ; 1 bytes @ 0x0
  3610                           
  3611     0070                     ?_USBDeviceInit:	
  3612                           ; 1 bytes @ 0x0
  3613                           
  3614     0070                     ?_USBDeviceAttach:	
  3615                           ; 1 bytes @ 0x0
  3616                           
  3617     0070                     ?_USBDeviceTasks:	
  3618                           ; 1 bytes @ 0x0
  3619                           
  3620     0070                     ?_TMR2_ISR:	
  3621                           ; 1 bytes @ 0x0
  3622                           
  3623     0070                     ??_TMR2_ISR:	
  3624                           ; 1 bytes @ 0x0
  3625                           
  3626     0070                     ?_TMR2_DefaultInterruptHandler:	
  3627                           ; 1 bytes @ 0x0
  3628                           
  3629     0070                     ??_TMR2_DefaultInterruptHandler:	
  3630                           ; 1 bytes @ 0x0
  3631                           
  3632     0070                     ?_EUSART_Receive_ISR:	
  3633                           ; 1 bytes @ 0x0
  3634                           
  3635     0070                     ?_EUSART_Transmit_ISR:	
  3636                           ; 1 bytes @ 0x0
  3637                           
  3638     0070                     ??_EUSART_Transmit_ISR:	
  3639                           ; 1 bytes @ 0x0
  3640                           
  3641     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3642                           ; 1 bytes @ 0x0
  3643                           
  3644     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3645                           ; 1 bytes @ 0x0
  3646                           
  3647     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3648                           ; 1 bytes @ 0x0
  3649                           
  3650     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3651                           ; 1 bytes @ 0x0
  3652                           
  3653     0070                     ?_EUSART_DefaultErrorHandler:	
  3654                           ; 1 bytes @ 0x0
  3655                           
  3656     0070                     ?_EUSART_RxDataHandler:	
  3657                           ; 1 bytes @ 0x0
  3658                           
  3659     0070                     ??_EUSART_RxDataHandler:	
  3660                           ; 1 bytes @ 0x0
  3661                           
  3662     0070                     ?_USBWakeFromSuspend:	
  3663                           ; 1 bytes @ 0x0
  3664                           
  3665     0070                     ?_USBSuspend:	
  3666                           ; 1 bytes @ 0x0
  3667                           
  3668     0070                     ?_USBIncrement1msInternalTimers:	
  3669                           ; 1 bytes @ 0x0
  3670                           
  3671     0070                     ??_USBIncrement1msInternalTimers:	
  3672                           ; 1 bytes @ 0x0
  3673                           
  3674     0070                     ?_USBCtrlEPAllowStatusStage:	
  3675                           ; 1 bytes @ 0x0
  3676                           
  3677     0070                     ??_USBCtrlEPAllowStatusStage:	
  3678                           ; 1 bytes @ 0x0
  3679                           
  3680     0070                     ?_USBStallHandler:	
  3681                           ; 1 bytes @ 0x0
  3682                           
  3683     0070                     ??_USBStallHandler:	
  3684                           ; 1 bytes @ 0x0
  3685                           
  3686     0070                     ?_USBCtrlEPService:	
  3687                           ; 1 bytes @ 0x0
  3688                           
  3689     0070                     ?_USBConfigureEndpoint:	
  3690                           ; 1 bytes @ 0x0
  3691                           
  3692     0070                     ?_USBCtrlTrfTxService:	
  3693                           ; 1 bytes @ 0x0
  3694                           
  3695     0070                     ??_USBCtrlTrfTxService:	
  3696                           ; 1 bytes @ 0x0
  3697                           
  3698     0070                     ?_USBCtrlTrfSetupHandler:	
  3699                           ; 1 bytes @ 0x0
  3700                           
  3701     0070                     ?_USBCtrlTrfOutHandler:	
  3702                           ; 1 bytes @ 0x0
  3703                           
  3704     0070                     ?_USBCtrlTrfInHandler:	
  3705                           ; 1 bytes @ 0x0
  3706                           
  3707     0070                     ?_USBCheckStdRequest:	
  3708                           ; 1 bytes @ 0x0
  3709                           
  3710     0070                     ?_USBStdFeatureReqHandler:	
  3711                           ; 1 bytes @ 0x0
  3712                           
  3713     0070                     ?_USBHIDCBSetReportHandler:	
  3714                           ; 1 bytes @ 0x0
  3715                           
  3716     0070                     ??_USBHIDCBSetReportHandler:	
  3717                           ; 1 bytes @ 0x0
  3718                           
  3719     0070                     ?_USBHIDCBSetIdleRateHandler:	
  3720                           ; 1 bytes @ 0x0
  3721                           
  3722     0070                     ?_APP_KeyboardInit:	
  3723                           ; 1 bytes @ 0x0
  3724                           
  3725     0070                     ?_SysTime_Init:	
  3726                           ; 1 bytes @ 0x0
  3727                           
  3728     0070                     ?_PS2Keyboard_Init:	
  3729                           ; 1 bytes @ 0x0
  3730                           
  3731     0070                     ?_PS2Keyboard_GetScanCode:	
  3732                           ; 1 bytes @ 0x0
  3733                           
  3734     0070                     ?_APP_KeyboardTasks:	
  3735                           ; 1 bytes @ 0x0
  3736                           
  3737     0070                     ?_APP_KeyboardUpdateState:	
  3738                           ; 1 bytes @ 0x0
  3739                           
  3740     0070                     ?_APP_KeyboardProcessOutputReport:	
  3741                           ; 1 bytes @ 0x0
  3742                           
  3743     0070                     ?_PS2USB_ScanCodeToUSBHID:	
  3744                           ; 1 bytes @ 0x0
  3745                           
  3746     0070                     ?_PS2Keyboard_GetLastCommand:	
  3747                           ; 1 bytes @ 0x0
  3748                           
  3749     0070                     ?_PS2Keyboard_SendCommand:	
  3750                           ; 1 bytes @ 0x0
  3751                           
  3752     0070                     ?_PS2Keyboard_ClockInterrupt:	
  3753                           ; 1 bytes @ 0x0
  3754                           
  3755     0070                     ?_PS2Keyboard_DataInterrupt:	
  3756                           ; 1 bytes @ 0x0
  3757                           
  3758     0070                     ?_SysTimeInterrupt:	
  3759                           ; 1 bytes @ 0x0
  3760                           
  3761     0070                     ??_SysTimeInterrupt:	
  3762                           ; 1 bytes @ 0x0
  3763                           
  3764     0070                     ?_PIN_MANAGER_Initialize:	
  3765                           ; 1 bytes @ 0x0
  3766                           
  3767     0070                     ?_PIN_MANAGER_IOC:	
  3768                           ; 1 bytes @ 0x0
  3769                           
  3770     0070                     ?_SYSTEM_Initialize:	
  3771                           ; 1 bytes @ 0x0
  3772                           
  3773     0070                     ?_INTERRUPT_InterruptManager:	
  3774                           ; 1 bytes @ 0x0
  3775                           
  3776     0070                     ?_TMR2_StartTimer:	
  3777                           ; 1 bytes @ 0x0
  3778                           
  3779     0070                     ?_EUSART_is_tx_ready:	
  3780                           ; 1 bytes @ 0x0
  3781                           
  3782     0070                     ?_EUSART_Write:	
  3783                           ; 1 bytes @ 0x0
  3784                           
  3785     0070                     ?_USBCtrlEPAllowDataStage:	
  3786                           ; 1 bytes @ 0x0
  3787                           
  3788     0070                     ?_USBCtrlEPServiceComplete:	
  3789                           ; 1 bytes @ 0x0
  3790                           
  3791     0070                     ?_USBCtrlTrfRxService:	
  3792                           ; 1 bytes @ 0x0
  3793                           
  3794     0070                     ?_USBStdSetCfgHandler:	
  3795                           ; 1 bytes @ 0x0
  3796                           
  3797     0070                     ?_USBStdGetDscHandler:	
  3798                           ; 1 bytes @ 0x0
  3799                           
  3800     0070                     ??_USBStdGetDscHandler:	
  3801                           ; 1 bytes @ 0x0
  3802                           
  3803     0070                     ?_USBStdGetStatusHandler:	
  3804                           ; 1 bytes @ 0x0
  3805                           
  3806     0070                     ??_USBStdGetStatusHandler:	
  3807                           ; 1 bytes @ 0x0
  3808                           
  3809     0070                     ?_USBCheckHIDRequest:	
  3810                           ; 1 bytes @ 0x0
  3811                           
  3812     0070                     ?_USBHIDCBSetReportComplete:	
  3813                           ; 1 bytes @ 0x0
  3814                           
  3815     0070                     ?_hex2str:	
  3816                           ; 1 bytes @ 0x0
  3817                           
  3818     0070                     ?i1_USBDeviceInit:	
  3819                           ; 1 bytes @ 0x0
  3820                           
  3821     0070                     ??i1_USBDeviceInit:	
  3822                           ; 1 bytes @ 0x0
  3823                           
  3824     0070                     ?i1_APP_KeyboardProcessOutputReport:	
  3825                           ; 1 bytes @ 0x0
  3826                           
  3827     0070                     ?i1_PS2Keyboard_SendCommand:	
  3828                           ; 1 bytes @ 0x0
  3829                           
  3830     0070                     ??i1_PS2Keyboard_SendCommand:	
  3831                           ; 1 bytes @ 0x0
  3832                           
  3833     0070                     ?i1_GenericQueue_Init:	
  3834                           ; 1 bytes @ 0x0
  3835                           
  3836     0070                     ?_main:	
  3837                           ; 1 bytes @ 0x0
  3838                           
  3839     0070                     ?i1_USBTransferOnePacket:	
  3840                           ; 2 bytes @ 0x0
  3841                           
  3842     0070                     ?i1_GenericQueue_IsFull:	
  3843                           ; 2 bytes @ 0x0
  3844                           
  3845     0070                     ?i1___wmul:	
  3846                           ; 2 bytes @ 0x0
  3847                           
  3848     0070                     ?i1___awmod:	
  3849                           ; 2 bytes @ 0x0
  3850                           
  3851     0070                     ?i1_memset:	
  3852                           ; 2 bytes @ 0x0
  3853                           
  3854     0070                     ?_SysTime_GetCurrentTimeMs:	
  3855                           ; 2 bytes @ 0x0
  3856                           
  3857     0070                     USBConfigureEndpoint@direction:	
  3858                           ; 4 bytes @ 0x0
  3859                           
  3860     0070                     USBHIDCBSetIdleRateHandler@newIdleRate:	
  3861                           ; 1 bytes @ 0x0
  3862                           
  3863     0070                     i1USBTransferOnePacket@dir:	
  3864                           ; 1 bytes @ 0x0
  3865                           
  3866     0070                     i1PS2Keyboard_SendCommand@cmd:	
  3867                           ; 1 bytes @ 0x0
  3868                           
  3869     0070                     i1GenericQueue_Init@q:	
  3870                           ; 1 bytes @ 0x0
  3871                           
  3872     0070                     i1GenericQueue_IsFull@q:	
  3873                           ; 2 bytes @ 0x0
  3874                           
  3875     0070                     i1___wmul@multiplier:	
  3876                           ; 2 bytes @ 0x0
  3877                           
  3878     0070                     i1___awmod@divisor:	
  3879                           ; 2 bytes @ 0x0
  3880                           
  3881     0070                     i1memset@c:	
  3882                           ; 2 bytes @ 0x0
  3883                           
  3884                           
  3885                           ; 2 bytes @ 0x0
  3886     0070                     	ds	1
  3887     0071                     ??_EUSART_Receive_ISR:
  3888     0071                     ??_EUSART_DefaultErrorHandler:	
  3889                           ; 1 bytes @ 0x1
  3890                           
  3891     0071                     ??_USBConfigureEndpoint:	
  3892                           ; 1 bytes @ 0x1
  3893                           
  3894     0071                     ??_USBHIDCBSetIdleRateHandler:	
  3895                           ; 1 bytes @ 0x1
  3896                           
  3897     0071                     ??_USBHIDCBSetReportComplete:	
  3898                           ; 1 bytes @ 0x1
  3899                           
  3900     0071                     ??i1_APP_KeyboardProcessOutputReport:	
  3901                           ; 1 bytes @ 0x1
  3902                           
  3903     0071                     i1USBTransferOnePacket@data:	
  3904                           ; 1 bytes @ 0x1
  3905                           
  3906                           
  3907                           ; 2 bytes @ 0x1
  3908     0071                     	ds	1
  3909     0072                     ??i1_GenericQueue_IsFull:
  3910     0072                     USBCtrlTrfTxService@byteToSend:	
  3911                           ; 1 bytes @ 0x2
  3912                           
  3913     0072                     USBStdGetStatusHandler@p:	
  3914                           ; 1 bytes @ 0x2
  3915                           
  3916     0072                     i1GenericQueue_Init@element_size:	
  3917                           ; 2 bytes @ 0x2
  3918                           
  3919     0072                     i1___wmul@multiplicand:	
  3920                           ; 2 bytes @ 0x2
  3921                           
  3922     0072                     i1___awmod@dividend:	
  3923                           ; 2 bytes @ 0x2
  3924                           
  3925     0072                     i1memset@n:	
  3926                           ; 2 bytes @ 0x2
  3927                           
  3928                           
  3929                           ; 2 bytes @ 0x2
  3930     0072                     	ds	1
  3931     0073                     ??_USBCtrlTrfInHandler:
  3932     0073                     ??_USBCtrlEPAllowDataStage:	
  3933                           ; 1 bytes @ 0x3
  3934                           
  3935     0073                     USBHIDCBSetIdleRateHandler@reportID:	
  3936                           ; 1 bytes @ 0x3
  3937                           
  3938     0073                     i1USBTransferOnePacket@len:	
  3939                           ; 1 bytes @ 0x3
  3940                           
  3941                           
  3942                           ; 1 bytes @ 0x3
  3943     0073                     	ds	1
  3944     0074                     ??_IOCAF5_ISR:
  3945     0074                     ??_PS2Keyboard_DataInterrupt:	
  3946                           ; 1 bytes @ 0x4
  3947                           
  3948     0074                     ??_SysTime_GetCurrentTimeMs:	
  3949                           ; 1 bytes @ 0x4
  3950                           
  3951     0074                     ??_USBCtrlTrfRxService:	
  3952                           ; 1 bytes @ 0x4
  3953                           
  3954     0074                     ??_USBCheckHIDRequest:	
  3955                           ; 1 bytes @ 0x4
  3956                           
  3957     0074                     ??i1_USBTransferOnePacket:	
  3958                           ; 1 bytes @ 0x4
  3959                           
  3960     0074                     ??i1_GenericQueue_Init:	
  3961                           ; 1 bytes @ 0x4
  3962                           
  3963     0074                     ??i1___wmul:	
  3964                           ; 1 bytes @ 0x4
  3965                           
  3966     0074                     ??i1___awmod:	
  3967                           ; 1 bytes @ 0x4
  3968                           
  3969     0074                     ??i1_memset:	
  3970                           ; 1 bytes @ 0x4
  3971                           
  3972     0074                     i1USBDeviceInit@p:	
  3973                           ; 1 bytes @ 0x4
  3974                           
  3975     0074                     i1___wmul@product:	
  3976                           ; 2 bytes @ 0x4
  3977                           
  3978                           
  3979                           ; 2 bytes @ 0x4
  3980     0074                     	ds	1
  3981     0075                     USBConfigureEndpoint@EPNum:
  3982     0075                     i1___awmod@counter:	
  3983                           ; 1 bytes @ 0x5
  3984                           
  3985     0075                     i1memset@dest:	
  3986                           ; 1 bytes @ 0x5
  3987                           
  3988                           
  3989                           ; 1 bytes @ 0x5
  3990     0075                     	ds	1
  3991     0076                     ?i1_memcpy:
  3992     0076                     USBConfigureEndpoint@handle:	
  3993                           ; 2 bytes @ 0x6
  3994                           
  3995     0076                     i1USBDeviceInit@i_1324:	
  3996                           ; 1 bytes @ 0x6
  3997                           
  3998     0076                     i1___awmod@sign:	
  3999                           ; 1 bytes @ 0x6
  4000                           
  4001     0076                     i1memset@p:	
  4002                           ; 1 bytes @ 0x6
  4003                           
  4004     0076                     i1memcpy@d1:	
  4005                           ; 1 bytes @ 0x6
  4006                           
  4007                           
  4008                           ; 2 bytes @ 0x6
  4009     0076                     	ds	1
  4010     0077                     ?_USBEnableEndpoint:
  4011     0077                     ??_USBCtrlEPServiceComplete:	
  4012                           ; 1 bytes @ 0x7
  4013                           
  4014     0077                     USBEnableEndpoint@options:	
  4015                           ; 1 bytes @ 0x7
  4016                           
  4017     0077                     USBCtrlTrfInHandler@lastDTS:	
  4018                           ; 1 bytes @ 0x7
  4019                           
  4020     0077                     i1USBDeviceInit@i:	
  4021                           ; 1 bytes @ 0x7
  4022                           
  4023                           
  4024                           ; 1 bytes @ 0x7
  4025     0077                     	ds	1
  4026     0078                     ??_USBEnableEndpoint:
  4027     0078                     USBCtrlTrfRxService@i:	
  4028                           ; 1 bytes @ 0x8
  4029                           
  4030     0078                     i1USBTransferOnePacket@ep:	
  4031                           ; 1 bytes @ 0x8
  4032                           
  4033     0078                     i1memcpy@s1:	
  4034                           ; 1 bytes @ 0x8
  4035                           
  4036                           
  4037                           ; 2 bytes @ 0x8
  4038     0078                     	ds	1
  4039     0079                     USBCtrlTrfRxService@byteToRead:
  4040     0079                     i1USBTransferOnePacket@handle:	
  4041                           ; 1 bytes @ 0x9
  4042                           
  4043                           
  4044                           ; 2 bytes @ 0x9
  4045     0079                     	ds	1
  4046     007A                     ??_USBCtrlTrfOutHandler:
  4047     007A                     USBEnableEndpoint@p:	
  4048                           ; 1 bytes @ 0xA
  4049                           
  4050     007A                     i1memcpy@n:	
  4051                           ; 2 bytes @ 0xA
  4052                           
  4053                           
  4054                           ; 2 bytes @ 0xA
  4055     007A                     	ds	2
  4056     007C                     ??i1_memcpy:
  4057     007C                     USBEnableEndpoint@ep:	
  4058                           ; 1 bytes @ 0xC
  4059                           
  4060     007C                     PS2Keyboard_ClockInterrupt@bitPos:	
  4061                           ; 1 bytes @ 0xC
  4062                           
  4063                           
  4064                           ; 1 bytes @ 0xC
  4065     007C                     	ds	1
  4066     007D                     ??_USBWakeFromSuspend:
  4067     007D                     ??_USBSuspend:	
  4068                           ; 1 bytes @ 0xD
  4069                           
  4070     007D                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  4071                           ; 1 bytes @ 0xD
  4072                           
  4073     007D                     ??_APP_KeyboardInit:	
  4074                           ; 1 bytes @ 0xD
  4075                           
  4076     007D                     ??_USBStdSetCfgHandler:	
  4077                           ; 1 bytes @ 0xD
  4078                           
  4079     007D                     PS2Keyboard_ClockInterrupt@bit:	
  4080                           ; 1 bytes @ 0xD
  4081                           
  4082                           
  4083                           ; 1 bytes @ 0xD
  4084     007D                     	ds	1
  4085     007E                     ??_IOCAF4_ISR:
  4086     007E                     ??_PIN_MANAGER_IOC:	
  4087                           ; 1 bytes @ 0xE
  4088                           
  4089     007E                     ??_INTERRUPT_InterruptManager:	
  4090                           ; 1 bytes @ 0xE
  4091                           
  4092                           
  4093                           	psect	cstackBANK0
  4094     0050                     __pcstackBANK0:	
  4095                           ; 1 bytes @ 0xE
  4096                           
  4097     0050                     ?_USER_USB_CALLBACK_EVENT_HANDLER:
  4098     0050                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  4099                           ; 1 bytes @ 0x0
  4100                           
  4101     0050                     i1memcpy@d:	
  4102                           ; 2 bytes @ 0x0
  4103                           
  4104                           
  4105                           ; 2 bytes @ 0x0
  4106     0050                     	ds	2
  4107     0052                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:
  4108     0052                     i1memcpy@s:	
  4109                           ; 2 bytes @ 0x2
  4110                           
  4111                           
  4112                           ; 2 bytes @ 0x2
  4113     0052                     	ds	2
  4114     0054                     i1memcpy@tmp:
  4115     0054                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  4116                           ; 1 bytes @ 0x4
  4117                           
  4118                           
  4119                           ; 2 bytes @ 0x4
  4120     0054                     	ds	1
  4121     0055                     ?i1_GenericQueue_Enqueue:
  4122     0055                     i1GenericQueue_Enqueue@q:	
  4123                           ; 1 bytes @ 0x5
  4124                           
  4125                           
  4126                           ; 2 bytes @ 0x5
  4127     0055                     	ds	1
  4128     0056                     ??_USBStdFeatureReqHandler:
  4129     0056                     USBStdSetCfgHandler@p:	
  4130                           ; 1 bytes @ 0x6
  4131                           
  4132                           
  4133                           ; 2 bytes @ 0x6
  4134     0056                     	ds	1
  4135     0057                     i1GenericQueue_Enqueue@item:
  4136                           
  4137                           ; 2 bytes @ 0x7
  4138     0057                     	ds	1
  4139     0058                     USBStdSetCfgHandler@i_2020:
  4140     0058                     USBStdFeatureReqHandler@pUEP:	
  4141                           ; 1 bytes @ 0x8
  4142                           
  4143                           
  4144                           ; 2 bytes @ 0x8
  4145     0058                     	ds	1
  4146     0059                     ??i1_GenericQueue_Enqueue:
  4147     0059                     USBStdSetCfgHandler@i:	
  4148                           ; 1 bytes @ 0x9
  4149                           
  4150                           
  4151                           ; 1 bytes @ 0x9
  4152     0059                     	ds	1
  4153     005A                     USBStdFeatureReqHandler@current_ep_data:
  4154                           
  4155                           ; 1 bytes @ 0xA
  4156     005A                     	ds	1
  4157     005B                     USBStdFeatureReqHandler@p:
  4158                           
  4159                           ; 2 bytes @ 0xB
  4160     005B                     	ds	1
  4161     005C                     ??_PS2Keyboard_ClockInterrupt:
  4162                           
  4163                           ; 1 bytes @ 0xC
  4164     005C                     	ds	1
  4165     005D                     ??_USBCheckStdRequest:
  4166                           
  4167                           ; 1 bytes @ 0xD
  4168     005D                     	ds	2
  4169     005F                     ??_USBCtrlTrfSetupHandler:
  4170                           
  4171                           ; 1 bytes @ 0xF
  4172     005F                     	ds	1
  4173     0060                     ??_USBCtrlEPService:
  4174                           
  4175                           ; 1 bytes @ 0x10
  4176     0060                     	ds	1
  4177     0061                     ??_USBDeviceTasks:
  4178                           
  4179                           ; 1 bytes @ 0x11
  4180     0061                     	ds	1
  4181     0062                     USBDeviceTasks@i:
  4182                           
  4183                           ; 1 bytes @ 0x12
  4184     0062                     	ds	1
  4185                           
  4186                           	psect	maintext
  4187     0A72                     __pmaintext:	
  4188 ;;
  4189 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4190 ;;
  4191 ;; *************** function _main *****************
  4192 ;; Defined at:
  4193 ;;		line 11 in file "main.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;  scanCodeStr     6   50[BANK1 ] unsigned char [6]
  4198 ;;  scanCode        3   62[BANK1 ] struct PS2ScanCode
  4199 ;;  hndlScanCode    1   61[BANK1 ] PTR struct PS2ScanCode
  4200 ;;		 -> main@scanCode(3), NULL(0), 
  4201 ;;  scanCodeVali    1   60[BANK1 ] _Bool 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  2  785[None  ] int 
  4204 ;; Registers used:
  4205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4206 ;; Tracked objects:
  4207 ;;		On entry : B1F/0
  4208 ;;		On exit  : 2/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Totals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;Total ram usage:       17 bytes
  4216 ;; Hardware stack levels required when called: 14
  4217 ;; This function calls:
  4218 ;;		_APP_KeyboardTasks
  4219 ;;		_Log_Message
  4220 ;;		_Log_UtilityConvertByteToHex
  4221 ;;		_PS2Keyboard_GetScanCode
  4222 ;;		_PS2Keyboard_Init
  4223 ;;		_SYSTEM_Initialize
  4224 ;;		_SysTime_Init
  4225 ;; This function is called by:
  4226 ;;		Startup code after reset
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230     0A72                     _main:	
  4231                           ;psect for function _main
  4232                           
  4233                           
  4234                           ;main.c: 12:     SYSTEM_Initialize();
  4235                           
  4236                           ;incstack = 0
  4237                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4238     0A72  319F  27BF  318A   	fcall	_SYSTEM_Initialize
  4239                           
  4240                           ;main.c: 13:     SysTime_Init();
  4241     0A75  319E  26F0  318A   	fcall	_SysTime_Init
  4242                           
  4243                           ;main.c: 14:     PS2Keyboard_Init();
  4244     0A78  3191  2163  318A   	fcall	_PS2Keyboard_Init
  4245                           
  4246                           ;main.c: 16:     _delay((unsigned long)((1000)*(48000000/4000.0)));
  4247     0A7B  303D               	movlw	61
  4248     0A7C  0021               	movlb	1	; select bank1
  4249     0A7D  00D9               	movwf	(??_main^(0+128)+1)
  4250     0A7E  30E1               	movlw	225
  4251     0A7F  00D8               	movwf	??_main^(0+128)
  4252     0A80  303F               	movlw	63
  4253     0A81                     u6477:
  4254     0A81  0B89               	decfsz	9,f
  4255     0A82  2A81               	goto	u6477
  4256     0A83  0BD8               	decfsz	??_main^(0+128),f
  4257     0A84  2A81               	goto	u6477
  4258     0A85  0BD9               	decfsz	(??_main^(0+128)+1),f
  4259     0A86  2A81               	goto	u6477
  4260     0A87  3200               	nop2
  4261                           
  4262                           ;main.c: 23:     (INTCONbits.GIE = 1);
  4263     0A88  178B               	bsf	11,7	;volatile
  4264                           
  4265                           ;main.c: 26:     (INTCONbits.PEIE = 1);
  4266     0A89  170B               	bsf	11,6	;volatile
  4267                           
  4268                           ;main.c: 31:     PS2ScanCode scanCode = {0};
  4269     0A8A  0023               	movlb	3	; select bank3
  4270     0A8B  0844               	movf	main@F3300^(0+384),w
  4271     0A8C  0021               	movlb	1	; select bank1
  4272     0A8D  00E6               	movwf	main@scanCode^(0+128)
  4273     0A8E  0023               	movlb	3	; select bank3
  4274     0A8F  0845               	movf	(main@F3300+1)^(0+384),w
  4275     0A90  0021               	movlb	1	; select bank1
  4276     0A91  00E7               	movwf	(main@scanCode+1)^(0+128)
  4277     0A92  0023               	movlb	3	; select bank3
  4278     0A93  0846               	movf	(main@F3300+2)^(0+384),w
  4279     0A94  0021               	movlb	1	; select bank1
  4280     0A95  00E8               	movwf	(main@scanCode+2)^(0+128)
  4281                           
  4282                           ;main.c: 34:     char scanCodeStr[6] = {' ', ' ', ' ', ' ', '\r', '\n'};
  4283     0A96  30C7               	movlw	low main@F3304
  4284     0A97  0086               	movwf	6
  4285     0A98  3001               	movlw	high main@F3304
  4286     0A99  0087               	movwf	7
  4287     0A9A  30DA               	movlw	low main@scanCodeStr
  4288     0A9B  0084               	movwf	4
  4289     0A9C  3000               	movlw	high main@scanCodeStr
  4290     0A9D  0085               	movwf	5
  4291     0A9E  3006               	movlw	6
  4292     0A9F  00D8               	movwf	??_main^(0+128)
  4293     0AA0                     u6420:
  4294     0AA0  0016               	moviw fsr1++
  4295     0AA1  001A               	movwi fsr0++
  4296     0AA2  0BD8               	decfsz	??_main^(0+128),f
  4297     0AA3  2AA0               	goto	u6420
  4298     0AA4                     l6403:
  4299                           
  4300                           ;main.c: 37:         scanCodeValid = PS2Keyboard_GetScanCode(&scanCode);
  4301     0AA4  30E6               	movlw	(low (main@scanCode| 0))& (0+255)
  4302     0AA5  3191  219A  318A   	fcall	_PS2Keyboard_GetScanCode
  4303     0AA8  00E4               	movwf	main@scanCodeValid^(0+128)
  4304                           
  4305                           ;main.c: 38:         if(scanCodeValid) {
  4306     0AA9  0864               	movf	main@scanCodeValid^(0+128),w
  4307     0AAA  1903               	btfsc	3,2
  4308     0AAB  2AAF               	goto	l6409
  4309                           
  4310                           ;main.c: 39:             hndlScanCode = &scanCode;
  4311     0AAC  30E6               	movlw	(low (main@scanCode| 0))& (0+255)
  4312     0AAD  00E5               	movwf	main@hndlScanCode^(0+128)
  4313                           
  4314                           ;main.c: 40:         } else {
  4315     0AAE  2AB0               	goto	l6411
  4316     0AAF                     l6409:
  4317                           
  4318                           ;main.c: 41:             hndlScanCode = ((void*)0);
  4319     0AAF  01E5               	clrf	main@hndlScanCode^(0+128)
  4320     0AB0                     l6411:
  4321                           
  4322                           ;main.c: 43:         if(hndlScanCode != ((void*)0)) {
  4323     0AB0  0865               	movf	main@hndlScanCode^(0+128),w
  4324     0AB1  1903               	btfsc	3,2
  4325     0AB2  2AE1               	goto	l6429
  4326                           
  4327                           ;main.c: 44:             scanCodeStr[0] = hndlScanCode->isExtend ? 'e' : ' ';
  4328     0AB3  0A65               	incf	main@hndlScanCode^(0+128),w
  4329     0AB4  0086               	movwf	6
  4330     0AB5  0187               	clrf	7
  4331     0AB6  0801               	movf	1,w
  4332     0AB7  1D03               	btfss	3,2
  4333     0AB8  2ABB               	goto	l6417
  4334     0AB9  3020               	movlw	32
  4335     0ABA  2ABC               	goto	L1
  4336     0ABB                     l6417:
  4337     0ABB  3065               	movlw	101
  4338     0ABC                     L1:
  4339     0ABC  00E0               	movwf	_main$2579^(0+128)
  4340     0ABD  3000               	movlw	0
  4341     0ABE  00E1               	movwf	(_main$2579^(0+128)+1)
  4342     0ABF  0860               	movf	_main$2579^(0+128),w
  4343     0AC0  00DA               	movwf	main@scanCodeStr^(0+128)
  4344                           
  4345                           ;main.c: 45:             scanCodeStr[1] = hndlScanCode->isBreak ? 'b' : ' ';
  4346     0AC1  0865               	movf	main@hndlScanCode^(0+128),w
  4347     0AC2  3E02               	addlw	2
  4348     0AC3  0086               	movwf	6
  4349     0AC4  0187               	clrf	7
  4350     0AC5  0801               	movf	1,w
  4351     0AC6  1D03               	btfss	3,2
  4352     0AC7  2ACA               	goto	l6423
  4353     0AC8  3020               	movlw	32
  4354     0AC9  2ACB               	goto	L2
  4355     0ACA                     l6423:
  4356     0ACA  3062               	movlw	98
  4357     0ACB                     L2:
  4358     0ACB  00E2               	movwf	_main$2580^(0+128)
  4359     0ACC  3000               	movlw	0
  4360     0ACD  00E3               	movwf	(_main$2580^(0+128)+1)
  4361     0ACE  0862               	movf	_main$2580^(0+128),w
  4362     0ACF  00DB               	movwf	(main@scanCodeStr^(0+128)+1)
  4363                           
  4364                           ;main.c: 46:             Log_UtilityConvertByteToHex(hndlScanCode->value, &scanCodeStr[2
      +                          ], 2);
  4365     0AD0  30DC               	movlw	(low ((main@scanCodeStr| 0+2)))& (0+255)
  4366     0AD1  00AC               	movwf	Log_UtilityConvertByteToHex@buf^(0+128)
  4367     0AD2  3002               	movlw	2
  4368     0AD3  00AD               	movwf	Log_UtilityConvertByteToHex@bufSize^(0+128)
  4369     0AD4  0865               	movf	main@hndlScanCode^(0+128),w
  4370     0AD5  0086               	movwf	6
  4371     0AD6  0187               	clrf	7
  4372     0AD7  0801               	movf	1,w
  4373     0AD8  3192  22B6  318A   	fcall	_Log_UtilityConvertByteToHex
  4374                           
  4375                           ;main.c: 47:             Log_Message((const uint8_t*)scanCodeStr, sizeof(scanCodeStr));
  4376     0ADB  3006               	movlw	6
  4377     0ADC  00AA               	movwf	Log_Message@bufSize^(0+128)
  4378     0ADD  30DA               	movlw	(low (main@scanCodeStr| 0))& (0+255)
  4379     0ADE  3191  2148  318A   	fcall	_Log_Message
  4380     0AE1                     l6429:
  4381                           
  4382                           ;main.c: 49:         APP_KeyboardTasks(hndlScanCode);
  4383     0AE1  0865               	movf	main@hndlScanCode^(0+128),w
  4384     0AE2  3183  230C  318A   	fcall	_APP_KeyboardTasks
  4385     0AE5  2AA4               	goto	l6403
  4386     0AE6                     __end_of_main:
  4387                           
  4388                           	psect	text1
  4389     1EF0                     __ptext1:	
  4390 ;; *************** function _SysTime_Init *****************
  4391 ;; Defined at:
  4392 ;;		line 12 in file "systime.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;		None
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;		None
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  1    wreg      void 
  4399 ;; Registers used:
  4400 ;;		wreg, status,2, status,0, pclath, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 1F/0
  4403 ;;		On exit  : 1F/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;Total ram usage:        0 bytes
  4411 ;; Hardware stack levels used: 1
  4412 ;; Hardware stack levels required when called: 11
  4413 ;; This function calls:
  4414 ;;		_TMR2_SetInterruptHandler
  4415 ;;		_TMR2_StartTimer
  4416 ;; This function is called by:
  4417 ;;		_main
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421     1EF0                     _SysTime_Init:	
  4422                           ;psect for function _SysTime_Init
  4423                           
  4424                           
  4425                           ;systime.c: 14:     TMR2_SetInterruptHandler(SysTimeInterrupt);
  4426                           
  4427                           ;incstack = 0
  4428                           ; Regs used in _SysTime_Init: [wreg+status,2+status,0+pclath+cstack]
  4429     1EF0  30D1               	movlw	low _SysTimeInterrupt
  4430     1EF1  0021               	movlb	1	; select bank1
  4431     1EF2  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4432     1EF3  301E               	movlw	high _SysTimeInterrupt
  4433     1EF4  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4434     1EF5  319E  26C0  319E   	fcall	_TMR2_SetInterruptHandler
  4435                           
  4436                           ;systime.c: 15:     TMR2_StartTimer();
  4437     1EF8  319E  2671         	fcall	_TMR2_StartTimer
  4438     1EFA  0008               	return
  4439     1EFB                     __end_of_SysTime_Init:
  4440                           
  4441                           	psect	text2
  4442     1E71                     __ptext2:	
  4443 ;; *************** function _TMR2_StartTimer *****************
  4444 ;; Defined at:
  4445 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;		None
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;		None
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  1    wreg      void 
  4452 ;; Registers used:
  4453 ;;		None
  4454 ;; Tracked objects:
  4455 ;;		On entry : 1F/2
  4456 ;;		On exit  : 1F/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;Total ram usage:        0 bytes
  4464 ;; Hardware stack levels used: 1
  4465 ;; Hardware stack levels required when called: 10
  4466 ;; This function calls:
  4467 ;;		Nothing
  4468 ;; This function is called by:
  4469 ;;		_SysTime_Init
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473     1E71                     _TMR2_StartTimer:	
  4474                           ;psect for function _TMR2_StartTimer
  4475                           
  4476                           
  4477                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  4478                           
  4479                           ;incstack = 0
  4480                           ; Regs used in _TMR2_StartTimer: []
  4481     1E71  0020               	movlb	0	; select bank0
  4482     1E72  151C               	bsf	28,2	;volatile
  4483     1E73  0008               	return
  4484     1E74                     __end_of_TMR2_StartTimer:
  4485                           
  4486                           	psect	text3
  4487     1FBF                     __ptext3:	
  4488 ;; *************** function _SYSTEM_Initialize *****************
  4489 ;; Defined at:
  4490 ;;		line 49 in file "mcc_generated_files/mcc.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;		None
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;		None
  4495 ;; Return value:  Size  Location     Type
  4496 ;;                  1    wreg      void 
  4497 ;; Registers used:
  4498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4499 ;; Tracked objects:
  4500 ;;		On entry : B1F/0
  4501 ;;		On exit  : 1F/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;Total ram usage:        0 bytes
  4509 ;; Hardware stack levels used: 1
  4510 ;; Hardware stack levels required when called: 12
  4511 ;; This function calls:
  4512 ;;		_EUSART_Initialize
  4513 ;;		_OSCILLATOR_Initialize
  4514 ;;		_PIN_MANAGER_Initialize
  4515 ;;		_TMR2_Initialize
  4516 ;;		_USBDeviceAttach
  4517 ;;		_USBDeviceInit
  4518 ;;		_WDT_Initialize
  4519 ;; This function is called by:
  4520 ;;		_main
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524     1FBF                     _SYSTEM_Initialize:	
  4525                           ;psect for function _SYSTEM_Initialize
  4526                           
  4527                           
  4528                           ;mcc_generated_files/mcc.c: 51:     PIN_MANAGER_Initialize();
  4529                           
  4530                           ;incstack = 0
  4531                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4532     1FBF  3187  27D0  319F   	fcall	_PIN_MANAGER_Initialize
  4533                           
  4534                           ;mcc_generated_files/mcc.c: 52:     OSCILLATOR_Initialize();
  4535     1FC2  319F  2747  319F   	fcall	_OSCILLATOR_Initialize
  4536                           
  4537                           ;mcc_generated_files/mcc.c: 53:     WDT_Initialize();
  4538     1FC5  319E  266E  319F   	fcall	_WDT_Initialize
  4539                           
  4540                           ;mcc_generated_files/mcc.c: 54:     TMR2_Initialize();
  4541     1FC8  319F  2787  319F   	fcall	_TMR2_Initialize
  4542                           
  4543                           ;mcc_generated_files/mcc.c: 55:     EUSART_Initialize();
  4544     1FCB  3194  244F  319F   	fcall	_EUSART_Initialize
  4545                           
  4546                           ;mcc_generated_files/mcc.c: 56:     USBDeviceInit();
  4547     1FCE  318E  26A1  319F   	fcall	_USBDeviceInit
  4548                           
  4549                           ;mcc_generated_files/mcc.c: 57:     USBDeviceAttach();
  4550     1FD1  3190  20DF         	fcall	_USBDeviceAttach
  4551     1FD3  0008               	return
  4552     1FD4                     __end_of_SYSTEM_Initialize:
  4553                           
  4554                           	psect	text4
  4555     1E6E                     __ptext4:	
  4556 ;; *************** function _WDT_Initialize *****************
  4557 ;; Defined at:
  4558 ;;		line 76 in file "mcc_generated_files/mcc.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;		None
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;		None
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		wreg
  4567 ;; Tracked objects:
  4568 ;;		On entry : 1F/1
  4569 ;;		On exit  : 1F/1
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;Total ram usage:        0 bytes
  4577 ;; Hardware stack levels used: 1
  4578 ;; Hardware stack levels required when called: 10
  4579 ;; This function calls:
  4580 ;;		Nothing
  4581 ;; This function is called by:
  4582 ;;		_SYSTEM_Initialize
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586     1E6E                     _WDT_Initialize:	
  4587                           ;psect for function _WDT_Initialize
  4588                           
  4589                           
  4590                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  4591                           
  4592                           ;incstack = 0
  4593                           ; Regs used in _WDT_Initialize: [wreg]
  4594     1E6E  3016               	movlw	22
  4595     1E6F  0097               	movwf	23	;volatile
  4596     1E70  0008               	return
  4597     1E71                     __end_of_WDT_Initialize:
  4598                           
  4599                           	psect	text5
  4600     0EA1                     __ptext5:	
  4601 ;; *************** function _USBDeviceInit *****************
  4602 ;; Defined at:
  4603 ;;		line 281 in file "usb/usb_device.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;		None
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;  p               2    4[BANK1 ] PTR unsigned char 
  4608 ;;		 -> UEP1(1), 
  4609 ;;  i               1    6[BANK1 ] unsigned char 
  4610 ;;  i               1    7[BANK1 ] unsigned char 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      void 
  4613 ;; Registers used:
  4614 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4615 ;; Tracked objects:
  4616 ;;		On entry : 1F/1
  4617 ;;		On exit  : 1F/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4622 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4623 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  4624 ;;Total ram usage:        8 bytes
  4625 ;; Hardware stack levels used: 1
  4626 ;; Hardware stack levels required when called: 10
  4627 ;; This function calls:
  4628 ;;		Nothing
  4629 ;; This function is called by:
  4630 ;;		_SYSTEM_Initialize
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634     0EA1                     _USBDeviceInit:	
  4635                           ;psect for function _USBDeviceInit
  4636                           
  4637                           
  4638                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  4639                           
  4640                           ;incstack = 0
  4641                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  4642     0EA1  1112               	bcf	18,2	;volatile
  4643                           
  4644                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  4645     0EA2  003D               	movlb	29	; select bank29
  4646     0EA3  0193               	clrf	19	;volatile
  4647                           
  4648                           ;usb/usb_device.c: 295:     {UIR = 0;};
  4649     0EA4  0190               	clrf	16	;volatile
  4650                           
  4651                           ;usb/usb_device.c: 298:     UEP0 = 0;
  4652     0EA5  0198               	clrf	24	;volatile
  4653                           
  4654                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  4655     0EA6  300E               	movlw	14
  4656     0EA7  0021               	movlb	1	; select bank1
  4657     0EA8  00AD               	movwf	(USBDeviceInit@p+1)^(0+128)
  4658     0EA9  3099               	movlw	153
  4659     0EAA  00AC               	movwf	USBDeviceInit@p^(0+128)
  4660     0EAB  01AE               	clrf	USBDeviceInit@i_1324^(0+128)
  4661     0EAC                     l5137:
  4662     0EAC  082C               	movf	USBDeviceInit@p^(0+128),w
  4663     0EAD  0086               	movwf	6
  4664     0EAE  082D               	movf	(USBDeviceInit@p+1)^(0+128),w
  4665     0EAF  0087               	movwf	7
  4666     0EB0  0181               	clrf	1
  4667     0EB1  3001               	movlw	1
  4668     0EB2  07AC               	addwf	USBDeviceInit@p^(0+128),f
  4669     0EB3  3000               	movlw	0
  4670     0EB4  3DAD               	addwfc	(USBDeviceInit@p+1)^(0+128),f
  4671     0EB5  3001               	movlw	1
  4672     0EB6  00A8               	movwf	??_USBDeviceInit^(0+128)
  4673     0EB7  0828               	movf	??_USBDeviceInit^(0+128),w
  4674     0EB8  07AE               	addwf	USBDeviceInit@i_1324^(0+128),f
  4675     0EB9  082E               	movf	USBDeviceInit@i_1324^(0+128),w
  4676     0EBA  1903               	btfsc	3,2
  4677     0EBB  2EAC               	goto	l5137
  4678                           
  4679                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  4680     0EBC  3016               	movlw	22
  4681     0EBD  003D               	movlb	29	; select bank29
  4682     0EBE  0091               	movwf	17	;volatile
  4683     0EBF  309F               	movlw	159
  4684     0EC0  0097               	movwf	23	;volatile
  4685     0EC1  307B               	movlw	123
  4686     0EC2  0092               	movwf	18	;volatile
  4687                           
  4688                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  4689     0EC3  0021               	movlb	1	; select bank1
  4690     0EC4  01AF               	clrf	USBDeviceInit@i^(0+128)
  4691     0EC5                     l5153:
  4692                           
  4693                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
  4694     0EC5  082F               	movf	USBDeviceInit@i^(0+128),w
  4695     0EC6  00A8               	movwf	??_USBDeviceInit^(0+128)
  4696     0EC7  3001               	movlw	1
  4697     0EC8                     u4405:
  4698     0EC8  35A8               	lslf	??_USBDeviceInit^(0+128),f
  4699     0EC9  3EFF               	addlw	-1
  4700     0ECA  1D03               	skipz
  4701     0ECB  2EC8               	goto	u4405
  4702     0ECC  3528               	lslf	??_USBDeviceInit^(0+128),w
  4703     0ECD  3E20               	addlw	32
  4704     0ECE  0086               	movwf	6
  4705     0ECF  0187               	clrf	7
  4706     0ED0  3000               	movlw	0
  4707     0ED1  3FC0               	movwi [0]fsr1
  4708     0ED2  3000               	movlw	0
  4709     0ED3  3FC1               	movwi [1]fsr1
  4710     0ED4  3FC2               	movwi [2]fsr1
  4711     0ED5  3FC3               	movwi [3]fsr1
  4712                           
  4713                           ;usb/usb_device.c: 314:     }
  4714     0ED6  3001               	movlw	1
  4715     0ED7  00A8               	movwf	??_USBDeviceInit^(0+128)
  4716     0ED8  0828               	movf	??_USBDeviceInit^(0+128),w
  4717     0ED9  07AF               	addwf	USBDeviceInit@i^(0+128),f
  4718     0EDA  3008               	movlw	8
  4719     0EDB  022F               	subwf	USBDeviceInit@i^(0+128),w
  4720     0EDC  1C03               	skipc
  4721     0EDD  2EC5               	goto	l5153
  4722                           
  4723                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
  4724     0EDE  003D               	movlb	29	; select bank29
  4725     0EDF  170E               	bsf	14,6	;volatile
  4726                           
  4727                           ;usb/usb_device.c: 320:     UADDR = 0x00;
  4728     0EE0  0196               	clrf	22	;volatile
  4729                           
  4730                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
  4731     0EE1  120E               	bcf	14,4	;volatile
  4732                           
  4733                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
  4734     0EE2  130E               	bcf	14,6	;volatile
  4735     0EE3                     l5165:
  4736                           
  4737                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
  4738     0EE3  30F7               	movlw	247
  4739     0EE4  0021               	movlb	1	; select bank1
  4740     0EE5  00A8               	movwf	??_USBDeviceInit^(0+128)
  4741     0EE6  0828               	movf	??_USBDeviceInit^(0+128),w
  4742     0EE7  003D               	movlb	29	; select bank29
  4743     0EE8  0590               	andwf	16,f	;volatile
  4744                           
  4745                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
  4746     0EE9  0021               	movlb	1	; select bank1
  4747     0EEA  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
  4748                           
  4749                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
  4750     0EEB  0022               	movlb	2	; select bank2
  4751     0EEC  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
  4752                           
  4753                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
  4754     0EED  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
  4755     0EEE  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  4756                           
  4757                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
  4758     0EEF  003D               	movlb	29	; select bank29
  4759     0EF0  1990               	btfsc	16,3	;volatile
  4760     0EF1  2EE3               	goto	l5165
  4761                           
  4762                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
  4763     0EF2  3001               	movlw	1
  4764     0EF3  0022               	movlb	2	; select bank2
  4765     0EF4  00DA               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  4766                           
  4767                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
  4768     0EF5  3001               	movlw	1
  4769     0EF6  00D9               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  4770                           
  4771                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
  4772     0EF7  01D8               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  4773                           
  4774                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
  4775     0EF8  01D7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  4776                           
  4777                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
  4778     0EF9  01DF               	clrf	_USBBusIsSuspended^(0+256)	;volatile
  4779                           
  4780                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
  4781     0EFA  0021               	movlb	1	; select bank1
  4782     0EFB  01AF               	clrf	USBDeviceInit@i^(0+128)
  4783     0EFC                     l5187:
  4784                           
  4785                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
  4786     0EFC  352F               	lslf	USBDeviceInit@i^(0+128),w
  4787     0EFD  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  4788     0EFE  0086               	movwf	6
  4789     0EFF  0187               	clrf	7
  4790     0F00  3000               	movlw	0
  4791     0F01  3FC0               	movwi [0]fsr1
  4792     0F02  3FC1               	movwi [1]fsr1
  4793                           
  4794                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
  4795     0F03  352F               	lslf	USBDeviceInit@i^(0+128),w
  4796     0F04  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  4797     0F05  0086               	movwf	6
  4798     0F06  3001               	movlw	1	; select bank2/3
  4799     0F07  0087               	movwf	7
  4800     0F08  3000               	movlw	0
  4801     0F09  3FC0               	movwi [0]fsr1
  4802     0F0A  3FC1               	movwi [1]fsr1
  4803                           
  4804                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
  4805     0F0B  082F               	movf	USBDeviceInit@i^(0+128),w
  4806     0F0C  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  4807     0F0D  0086               	movwf	6
  4808     0F0E  3001               	movlw	1	; select bank2/3
  4809     0F0F  0087               	movwf	7
  4810     0F10  0181               	clrf	1
  4811                           
  4812                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
  4813     0F11  082F               	movf	USBDeviceInit@i^(0+128),w
  4814     0F12  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  4815     0F13  0086               	movwf	6
  4816     0F14  3001               	movlw	1	; select bank2/3
  4817     0F15  0087               	movwf	7
  4818     0F16  0181               	clrf	1
  4819                           
  4820                           ;usb/usb_device.c: 355:     }
  4821     0F17  3001               	movlw	1
  4822     0F18  00A8               	movwf	??_USBDeviceInit^(0+128)
  4823     0F19  0828               	movf	??_USBDeviceInit^(0+128),w
  4824     0F1A  07AF               	addwf	USBDeviceInit@i^(0+128),f
  4825     0F1B  3002               	movlw	2
  4826     0F1C  022F               	subwf	USBDeviceInit@i^(0+128),w
  4827     0F1D  1C03               	skipc
  4828     0F1E  2EFC               	goto	l5187
  4829                           
  4830                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  4831     0F1F  3028               	movlw	40
  4832     0F20  0020               	movlb	0	; select bank0
  4833     0F21  00E3               	movwf	_pBDTEntryIn
  4834     0F22  3000               	movlw	0
  4835     0F23  00E4               	movwf	_pBDTEntryIn+1
  4836                           
  4837                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
  4838     0F24  3016               	movlw	22
  4839     0F25  003D               	movlb	29	; select bank29
  4840     0F26  0098               	movwf	24	;volatile
  4841                           
  4842                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
  4843     0F27  3040               	movlw	64
  4844     0F28  0021               	movlb	1	; select bank1
  4845     0F29  00A8               	movwf	??_USBDeviceInit^(0+128)
  4846     0F2A  3000               	movlw	0
  4847     0F2B  00A9               	movwf	(??_USBDeviceInit^(0+128)+1)
  4848     0F2C  30FF               	movlw	255
  4849     0F2D  0528               	andwf	??_USBDeviceInit^(0+128),w
  4850     0F2E  00AA               	movwf	(??_USBDeviceInit+2)^(0+128)
  4851     0F2F  307F               	movlw	127
  4852     0F30  0529               	andwf	(??_USBDeviceInit+1)^(0+128),w
  4853     0F31  00AB               	movwf	(??_USBDeviceInit+3)^(0+128)
  4854     0F32  082A               	movf	(??_USBDeviceInit+2)^(0+128),w
  4855     0F33  0020               	movlb	0	; select bank0
  4856     0F34  00A2               	movwf	34	;volatile
  4857     0F35  0021               	movlb	1	; select bank1
  4858     0F36  082B               	movf	(??_USBDeviceInit+3)^(0+128),w
  4859     0F37  0020               	movlb	0	; select bank0
  4860     0F38  00A3               	movwf	35	;volatile
  4861                           
  4862                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
  4863     0F39  3008               	movlw	8
  4864     0F3A  00A1               	movwf	33	;volatile
  4865                           
  4866                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
  4867     0F3B  3004               	movlw	4
  4868     0F3C  00A0               	movwf	32	;volatile
  4869                           
  4870                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
  4871     0F3D  17A0               	bsf	32,7	;volatile
  4872                           
  4873                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
  4874     0F3E  01EF               	clrf	_USBActiveConfiguration	;volatile
  4875                           
  4876                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
  4877     0F3F  3000               	movlw	0
  4878     0F40  0023               	movlb	3	; select bank3
  4879     0F41  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
  4880     0F42  3000               	movlw	0
  4881     0F43  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
  4882     0F44  3000               	movlw	0
  4883     0F45  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
  4884     0F46  3000               	movlw	0
  4885     0F47  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
  4886                           
  4887                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
  4888     0F48  0022               	movlb	2	; select bank2
  4889     0F49  01D6               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  4890                           
  4891                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
  4892     0F4A  0020               	movlb	0	; select bank0
  4893     0F4B  01EC               	clrf	_USBDeviceState	;volatile
  4894     0F4C  0008               	return
  4895     0F4D                     __end_of_USBDeviceInit:
  4896                           
  4897                           	psect	text6
  4898     10DF                     __ptext6:	
  4899 ;; *************** function _USBDeviceAttach *****************
  4900 ;; Defined at:
  4901 ;;		line 1356 in file "usb/usb_device.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;		None
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;		None
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  1    wreg      void 
  4908 ;; Registers used:
  4909 ;;		wreg, status,2, status,0
  4910 ;; Tracked objects:
  4911 ;;		On entry : 1F/0
  4912 ;;		On exit  : 1F/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;Total ram usage:        0 bytes
  4920 ;; Hardware stack levels used: 1
  4921 ;; Hardware stack levels required when called: 10
  4922 ;; This function calls:
  4923 ;;		Nothing
  4924 ;; This function is called by:
  4925 ;;		_SYSTEM_Initialize
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929     10DF                     _USBDeviceAttach:	
  4930                           ;psect for function _USBDeviceAttach
  4931                           
  4932                           
  4933                           ;usb/usb_device.c: 1360:     {;usb/usb_device.c: 1361:         if(1 == 1)
  4934                           
  4935                           ;incstack = 0
  4936                           ; Regs used in _USBDeviceAttach: [wreg+status,2+status,0]
  4937     10DF  086C               	movf	_USBDeviceState,w
  4938     10E0  1D03               	btfss	3,2
  4939     10E1  0008               	return
  4940                           
  4941                           ;usb/usb_device.c: 1362:         {;usb/usb_device.c: 1364:             UCON = 0;
  4942     10E2  003D               	movlb	29	; select bank29
  4943     10E3  018E               	clrf	14	;volatile
  4944                           
  4945                           ;usb/usb_device.c: 1367:             UIE = 0;
  4946     10E4  0192               	clrf	18	;volatile
  4947                           
  4948                           ;usb/usb_device.c: 1371:             { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UI
      +                          E = 0x39 | 0x40 | 0x02; };
  4949     10E5  3016               	movlw	22
  4950     10E6  0091               	movwf	17	;volatile
  4951     10E7  309F               	movlw	159
  4952     10E8  0097               	movwf	23	;volatile
  4953     10E9  307B               	movlw	123
  4954     10EA  0092               	movwf	18	;volatile
  4955                           
  4956                           ;usb/usb_device.c: 1373:             {PIE2bits.USBIE = 1;INTCONbits.PEIE = 1; INTCONbits
      +                          .GIE = 1;};
  4957     10EB  0021               	movlb	1	; select bank1
  4958     10EC  1512               	bsf	18,2	;volatile
  4959     10ED  170B               	bsf	11,6	;volatile
  4960     10EE  178B               	bsf	11,7	;volatile
  4961     10EF                     l491:	
  4962                           ;usb/usb_device.c: 1376:             while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  4963                           
  4964     10EF  003D               	movlb	29	; select bank29
  4965     10F0  198E               	btfsc	14,3	;volatile
  4966     10F1  28F4               	goto	l5229
  4967     10F2  158E               	bsf	14,3	;volatile
  4968     10F3  28EF               	goto	l491
  4969     10F4                     l5229:
  4970                           
  4971                           ;usb/usb_device.c: 1379:             USBDeviceState = ATTACHED_STATE;
  4972     10F4  3001               	movlw	1
  4973     10F5  0020               	movlb	0	; select bank0
  4974     10F6  00EC               	movwf	_USBDeviceState	;volatile
  4975     10F7  0008               	return
  4976     10F8                     __end_of_USBDeviceAttach:
  4977                           
  4978                           	psect	text7
  4979     1F87                     __ptext7:	
  4980 ;; *************** function _TMR2_Initialize *****************
  4981 ;; Defined at:
  4982 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;		None
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;		None
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  1    wreg      void 
  4989 ;; Registers used:
  4990 ;;		wreg, status,2, status,0, pclath, cstack
  4991 ;; Tracked objects:
  4992 ;;		On entry : 1F/1
  4993 ;;		On exit  : 1F/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;Total ram usage:        0 bytes
  5001 ;; Hardware stack levels used: 1
  5002 ;; Hardware stack levels required when called: 11
  5003 ;; This function calls:
  5004 ;;		_TMR2_SetInterruptHandler
  5005 ;; This function is called by:
  5006 ;;		_SYSTEM_Initialize
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010     1F87                     _TMR2_Initialize:	
  5011                           ;psect for function _TMR2_Initialize
  5012                           
  5013                           
  5014                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x5D;
  5015                           
  5016                           ;incstack = 0
  5017                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5018     1F87  305D               	movlw	93
  5019     1F88  0020               	movlb	0	; select bank0
  5020     1F89  009B               	movwf	27	;volatile
  5021                           
  5022                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  5023     1F8A  019A               	clrf	26	;volatile
  5024                           
  5025                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  5026     1F8B  1091               	bcf	17,1	;volatile
  5027                           
  5028                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  5029     1F8C  0021               	movlb	1	; select bank1
  5030     1F8D  1491               	bsf	17,1	;volatile
  5031                           
  5032                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  5033     1F8E  30FF               	movlw	low _TMR2_DefaultInterruptHandler
  5034     1F8F  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  5035     1F90  3007               	movlw	high _TMR2_DefaultInterruptHandler
  5036     1F91  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5037     1F92  319E  26C0         	fcall	_TMR2_SetInterruptHandler
  5038                           
  5039                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x0F;
  5040     1F94  300F               	movlw	15
  5041     1F95  0020               	movlb	0	; select bank0
  5042     1F96  009C               	movwf	28	;volatile
  5043     1F97  0008               	return
  5044     1F98                     __end_of_TMR2_Initialize:
  5045                           
  5046                           	psect	text8
  5047     1EC0                     __ptext8:	
  5048 ;; *************** function _TMR2_SetInterruptHandler *****************
  5049 ;; Defined at:
  5050 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5053 ;;		 -> SysTimeInterrupt(1), TMR2_DefaultInterruptHandler(1), 
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;		None
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  1    wreg      void 
  5058 ;; Registers used:
  5059 ;;		wreg
  5060 ;; Tracked objects:
  5061 ;;		On entry : 1F/1
  5062 ;;		On exit  : 1F/2
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5065 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;Total ram usage:        2 bytes
  5070 ;; Hardware stack levels used: 1
  5071 ;; Hardware stack levels required when called: 10
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_TMR2_Initialize
  5076 ;;		_SysTime_Init
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080     1EC0                     _TMR2_SetInterruptHandler:	
  5081                           ;psect for function _TMR2_SetInterruptHandler
  5082                           
  5083                           
  5084                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  5085                           
  5086                           ;incstack = 0
  5087                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5088     1EC0  0829               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5089     1EC1  0022               	movlb	2	; select bank2
  5090     1EC2  00C7               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
  5091     1EC3  0021               	movlb	1	; select bank1
  5092     1EC4  0828               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  5093     1EC5  0022               	movlb	2	; select bank2
  5094     1EC6  00C6               	movwf	_TMR2_InterruptHandler^(0+256)
  5095     1EC7  0008               	return
  5096     1EC8                     __end_of_TMR2_SetInterruptHandler:
  5097                           
  5098                           	psect	text9
  5099     07D0                     __ptext9:	
  5100 ;; *************** function _PIN_MANAGER_Initialize *****************
  5101 ;; Defined at:
  5102 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;		None
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;		None
  5107 ;; Return value:  Size  Location     Type
  5108 ;;                  1    wreg      void 
  5109 ;; Registers used:
  5110 ;;		wreg, status,2, status,0, pclath, cstack
  5111 ;; Tracked objects:
  5112 ;;		On entry : B1F/0
  5113 ;;		On exit  : 1F/3
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5120 ;;Total ram usage:        0 bytes
  5121 ;; Hardware stack levels used: 1
  5122 ;; Hardware stack levels required when called: 11
  5123 ;; This function calls:
  5124 ;;		_IOCAF4_SetInterruptHandler
  5125 ;;		_IOCAF5_SetInterruptHandler
  5126 ;; This function is called by:
  5127 ;;		_SYSTEM_Initialize
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131     07D0                     _PIN_MANAGER_Initialize:	
  5132                           ;psect for function _PIN_MANAGER_Initialize
  5133                           
  5134                           
  5135                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  5136                           
  5137                           ;incstack = 0
  5138                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5139     07D0  0022               	movlb	2	; select bank2
  5140     07D1  018C               	clrf	12	;volatile
  5141                           
  5142                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  5143     07D2  018E               	clrf	14	;volatile
  5144                           
  5145                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x30;
  5146     07D3  3030               	movlw	48
  5147     07D4  0021               	movlb	1	; select bank1
  5148     07D5  008C               	movwf	12	;volatile
  5149                           
  5150                           ;mcc_generated_files/pin_manager.c: 72:     TRISC = 0xFF;
  5151     07D6  30FF               	movlw	255
  5152     07D7  008E               	movwf	14	;volatile
  5153                           
  5154                           ;mcc_generated_files/pin_manager.c: 77:     ANSELC = 0xCF;
  5155     07D8  30CF               	movlw	207
  5156     07D9  0023               	movlb	3	; select bank3
  5157     07DA  008E               	movwf	14	;volatile
  5158                           
  5159                           ;mcc_generated_files/pin_manager.c: 79:     ANSELA = 0x00;
  5160     07DB  018C               	clrf	12	;volatile
  5161                           
  5162                           ;mcc_generated_files/pin_manager.c: 85:     WPUA = 0x30;
  5163     07DC  3030               	movlw	48
  5164     07DD  0024               	movlb	4	; select bank4
  5165     07DE  008C               	movwf	12	;volatile
  5166                           
  5167                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 0;
  5168     07DF  0021               	movlb	1	; select bank1
  5169     07E0  1395               	bcf	21,7	;volatile
  5170                           
  5171                           ;mcc_generated_files/pin_manager.c: 92:     APFCON = 0x00;
  5172     07E1  0022               	movlb	2	; select bank2
  5173     07E2  019D               	clrf	29	;volatile
  5174                           
  5175                           ;mcc_generated_files/pin_manager.c: 98:     IOCAFbits.IOCAF4 = 0;
  5176     07E3  0027               	movlb	7	; select bank7
  5177     07E4  1213               	bcf	19,4	;volatile
  5178                           
  5179                           ;mcc_generated_files/pin_manager.c: 100:     IOCAFbits.IOCAF5 = 0;
  5180     07E5  1293               	bcf	19,5	;volatile
  5181                           
  5182                           ;mcc_generated_files/pin_manager.c: 102:     IOCANbits.IOCAN4 = 1;
  5183     07E6  1612               	bsf	18,4	;volatile
  5184                           
  5185                           ;mcc_generated_files/pin_manager.c: 104:     IOCANbits.IOCAN5 = 1;
  5186     07E7  1692               	bsf	18,5	;volatile
  5187                           
  5188                           ;mcc_generated_files/pin_manager.c: 106:     IOCAPbits.IOCAP4 = 0;
  5189     07E8  1211               	bcf	17,4	;volatile
  5190                           
  5191                           ;mcc_generated_files/pin_manager.c: 108:     IOCAPbits.IOCAP5 = 0;
  5192     07E9  1291               	bcf	17,5	;volatile
  5193                           
  5194                           ;mcc_generated_files/pin_manager.c: 113:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  5195     07EA  3002               	movlw	low _IOCAF4_DefaultInterruptHandler
  5196     07EB  0021               	movlb	1	; select bank1
  5197     07EC  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  5198     07ED  3000               	movlw	high _IOCAF4_DefaultInterruptHandler
  5199     07EE  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5200     07EF  319E  2688  3187   	fcall	_IOCAF4_SetInterruptHandler
  5201                           
  5202                           ;mcc_generated_files/pin_manager.c: 114:     IOCAF5_SetInterruptHandler(IOCAF5_DefaultIn
      +                          terruptHandler);
  5203     07F2  3003               	movlw	low _IOCAF5_DefaultInterruptHandler
  5204     07F3  0021               	movlb	1	; select bank1
  5205     07F4  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  5206     07F5  3000               	movlw	high _IOCAF5_DefaultInterruptHandler
  5207     07F6  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5208     07F7  319E  2690         	fcall	_IOCAF5_SetInterruptHandler
  5209                           
  5210                           ;mcc_generated_files/pin_manager.c: 117:     INTCONbits.IOCIE = 1;
  5211     07F9  158B               	bsf	11,3	;volatile
  5212     07FA  0008               	return
  5213     07FB                     __end_of_PIN_MANAGER_Initialize:
  5214                           
  5215                           	psect	text10
  5216     1F47                     __ptext10:	
  5217 ;; *************** function _OSCILLATOR_Initialize *****************
  5218 ;; Defined at:
  5219 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;		None
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;		None
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  1    wreg      void 
  5226 ;; Registers used:
  5227 ;;		wreg, status,2
  5228 ;; Tracked objects:
  5229 ;;		On entry : 1F/3
  5230 ;;		On exit  : 1F/1
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5237 ;;Total ram usage:        0 bytes
  5238 ;; Hardware stack levels used: 1
  5239 ;; Hardware stack levels required when called: 10
  5240 ;; This function calls:
  5241 ;;		Nothing
  5242 ;; This function is called by:
  5243 ;;		_SYSTEM_Initialize
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247     1F47                     _OSCILLATOR_Initialize:	
  5248                           ;psect for function _OSCILLATOR_Initialize
  5249                           
  5250                           
  5251                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0xFC;
  5252                           
  5253                           ;incstack = 0
  5254                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5255     1F47  30FC               	movlw	252
  5256     1F48  0021               	movlb	1	; select bank1
  5257     1F49  0099               	movwf	25	;volatile
  5258                           
  5259                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;
  5260     1F4A  0198               	clrf	24	;volatile
  5261                           
  5262                           ;mcc_generated_files/mcc.c: 67:     ACTCON = 0x90;
  5263     1F4B  3090               	movlw	144
  5264     1F4C  0027               	movlb	7	; select bank7
  5265     1F4D  009B               	movwf	27	;volatile
  5266                           
  5267                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  5268     1F4E  0022               	movlb	2	; select bank2
  5269     1F4F  0196               	clrf	22	;volatile
  5270     1F50                     l102:	
  5271                           ;mcc_generated_files/mcc.c: 72:     {;mcc_generated_files/mcc.c: 73:     }
  5272                           
  5273                           
  5274                           ;mcc_generated_files/mcc.c: 71:     while(PLLRDY == 0)
  5275     1F50  0021               	movlb	1	; select bank1
  5276     1F51  1B1A               	btfsc	26,6	;volatile
  5277     1F52  0008               	return
  5278     1F53  2F50               	goto	l102
  5279     1F54                     __end_of_OSCILLATOR_Initialize:
  5280                           
  5281                           	psect	text11
  5282     144F                     __ptext11:	
  5283 ;; *************** function _EUSART_Initialize *****************
  5284 ;; Defined at:
  5285 ;;		line 88 in file "mcc_generated_files/eusart.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;		None
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;		None
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  1    wreg      void 
  5292 ;; Registers used:
  5293 ;;		wreg, status,2, status,0, pclath, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : 1F/0
  5296 ;;		On exit  : 1F/1
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;Total ram usage:        0 bytes
  5304 ;; Hardware stack levels used: 1
  5305 ;; Hardware stack levels required when called: 11
  5306 ;; This function calls:
  5307 ;;		_EUSART_SetErrorHandler
  5308 ;;		_EUSART_SetFramingErrorHandler
  5309 ;;		_EUSART_SetOverrunErrorHandler
  5310 ;;		_EUSART_SetRxInterruptHandler
  5311 ;;		_EUSART_SetTxInterruptHandler
  5312 ;; This function is called by:
  5313 ;;		_SYSTEM_Initialize
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317     144F                     _EUSART_Initialize:	
  5318                           ;psect for function _EUSART_Initialize
  5319                           
  5320                           
  5321                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  5322                           
  5323                           ;incstack = 0
  5324                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5325     144F  0021               	movlb	1	; select bank1
  5326     1450  1291               	bcf	17,5	;volatile
  5327                           
  5328                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5329     1451  305E               	movlw	low _EUSART_Receive_ISR
  5330     1452  00A8               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5331     1453  3013               	movlw	high _EUSART_Receive_ISR
  5332     1454  00A9               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5333     1455  319E  26B0  3194   	fcall	_EUSART_SetRxInterruptHandler
  5334                           
  5335                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  5336     1458  0021               	movlb	1	; select bank1
  5337     1459  1211               	bcf	17,4	;volatile
  5338                           
  5339                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  5340     145A  30D3               	movlw	low _EUSART_Transmit_ISR
  5341     145B  00A8               	movwf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128)
  5342     145C  3011               	movlw	high _EUSART_Transmit_ISR
  5343     145D  00A9               	movwf	(EUSART_SetTxInterruptHandler@interruptHandler^(0+128)+1)
  5344     145E  319E  26B8  3194   	fcall	_EUSART_SetTxInterruptHandler
  5345                           
  5346                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  5347     1461  3008               	movlw	8
  5348     1462  0023               	movlb	3	; select bank3
  5349     1463  009F               	movwf	31	;volatile
  5350                           
  5351                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x80;
  5352     1464  3080               	movlw	128
  5353     1465  009D               	movwf	29	;volatile
  5354                           
  5355                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  5356     1466  3024               	movlw	36
  5357     1467  009E               	movwf	30	;volatile
  5358                           
  5359                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xE1;
  5360     1468  30E1               	movlw	225
  5361     1469  009B               	movwf	27	;volatile
  5362                           
  5363                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x04;
  5364     146A  3004               	movlw	4
  5365     146B  009C               	movwf	28	;volatile
  5366                           
  5367                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5368     146C  3067               	movlw	low _EUSART_DefaultFramingErrorHandler
  5369     146D  0021               	movlb	1	; select bank1
  5370     146E  00A8               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5371     146F  301E               	movlw	high _EUSART_DefaultFramingErrorHandler
  5372     1470  00A9               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5373     1471  319E  26A0  3194   	fcall	_EUSART_SetFramingErrorHandler
  5374                           
  5375                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5376     1474  30FB               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5377     1475  0021               	movlb	1	; select bank1
  5378     1476  00A8               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5379     1477  3007               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5380     1478  00A9               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5381     1479  319E  26A8  3194   	fcall	_EUSART_SetOverrunErrorHandler
  5382                           
  5383                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5384     147C  3068               	movlw	low _EUSART_DefaultErrorHandler
  5385     147D  0021               	movlb	1	; select bank1
  5386     147E  00A8               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5387     147F  301E               	movlw	high _EUSART_DefaultErrorHandler
  5388     1480  00A9               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5389     1481  319E  2698         	fcall	_EUSART_SetErrorHandler
  5390                           
  5391                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  5392     1483  01E3               	clrf	_eusartRxLastError^(0+256)	;volatile
  5393                           
  5394                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  5395     1484  01E7               	clrf	_eusartTxHead^(0+256)	;volatile
  5396                           
  5397                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  5398     1485  01E6               	clrf	_eusartTxTail^(0+256)	;volatile
  5399                           
  5400                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  5401     1486  3008               	movlw	8
  5402     1487  0021               	movlb	1	; select bank1
  5403     1488  00EF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  5404                           
  5405                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  5406     1489  01EE               	clrf	_eusartRxHead^(0+128)	;volatile
  5407                           
  5408                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  5409     148A  0022               	movlb	2	; select bank2
  5410     148B  01E5               	clrf	_eusartRxTail^(0+256)	;volatile
  5411                           
  5412                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  5413     148C  01E4               	clrf	_eusartRxCount^(0+256)	;volatile
  5414                           
  5415                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  5416     148D  0021               	movlb	1	; select bank1
  5417     148E  1691               	bsf	17,5	;volatile
  5418     148F  0008               	return
  5419     1490                     __end_of_EUSART_Initialize:
  5420                           
  5421                           	psect	text12
  5422     1EB8                     __ptext12:	
  5423 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  5424 ;; Defined at:
  5425 ;;		line 276 in file "mcc_generated_files/eusart.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5428 ;;		 -> EUSART_Transmit_ISR(1), 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;		None
  5431 ;; Return value:  Size  Location     Type
  5432 ;;                  1    wreg      void 
  5433 ;; Registers used:
  5434 ;;		wreg
  5435 ;; Tracked objects:
  5436 ;;		On entry : 1F/1
  5437 ;;		On exit  : 1F/2
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5440 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;Total ram usage:        2 bytes
  5445 ;; Hardware stack levels used: 1
  5446 ;; Hardware stack levels required when called: 10
  5447 ;; This function calls:
  5448 ;;		Nothing
  5449 ;; This function is called by:
  5450 ;;		_EUSART_Initialize
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454     1EB8                     _EUSART_SetTxInterruptHandler:	
  5455                           ;psect for function _EUSART_SetTxInterruptHandler
  5456                           
  5457                           
  5458                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  5459                           
  5460                           ;incstack = 0
  5461                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  5462     1EB8  0829               	movf	(EUSART_SetTxInterruptHandler@interruptHandler+1)^(0+128),w
  5463     1EB9  0022               	movlb	2	; select bank2
  5464     1EBA  00CB               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
  5465     1EBB  0021               	movlb	1	; select bank1
  5466     1EBC  0828               	movf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128),w
  5467     1EBD  0022               	movlb	2	; select bank2
  5468     1EBE  00CA               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
  5469     1EBF  0008               	return
  5470     1EC0                     __end_of_EUSART_SetTxInterruptHandler:
  5471                           
  5472                           	psect	text13
  5473     1EB0                     __ptext13:	
  5474 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5475 ;; Defined at:
  5476 ;;		line 280 in file "mcc_generated_files/eusart.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5479 ;;		 -> EUSART_Receive_ISR(1), 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;		None
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      void 
  5484 ;; Registers used:
  5485 ;;		wreg
  5486 ;; Tracked objects:
  5487 ;;		On entry : 1F/1
  5488 ;;		On exit  : 1F/2
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5491 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;Total ram usage:        2 bytes
  5496 ;; Hardware stack levels used: 1
  5497 ;; Hardware stack levels required when called: 10
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		_EUSART_Initialize
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505     1EB0                     _EUSART_SetRxInterruptHandler:	
  5506                           ;psect for function _EUSART_SetRxInterruptHandler
  5507                           
  5508                           
  5509                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5510                           
  5511                           ;incstack = 0
  5512                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5513     1EB0  0829               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5514     1EB1  0022               	movlb	2	; select bank2
  5515     1EB2  00C9               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
  5516     1EB3  0021               	movlb	1	; select bank1
  5517     1EB4  0828               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5518     1EB5  0022               	movlb	2	; select bank2
  5519     1EB6  00C8               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
  5520     1EB7  0008               	return
  5521     1EB8                     __end_of_EUSART_SetRxInterruptHandler:
  5522                           
  5523                           	psect	text14
  5524     1EA8                     __ptext14:	
  5525 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5526 ;; Defined at:
  5527 ;;		line 268 in file "mcc_generated_files/eusart.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5530 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;		None
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  1    wreg      void 
  5535 ;; Registers used:
  5536 ;;		wreg
  5537 ;; Tracked objects:
  5538 ;;		On entry : 1F/1
  5539 ;;		On exit  : 1F/2
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5542 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;Total ram usage:        2 bytes
  5547 ;; Hardware stack levels used: 1
  5548 ;; Hardware stack levels required when called: 10
  5549 ;; This function calls:
  5550 ;;		Nothing
  5551 ;; This function is called by:
  5552 ;;		_EUSART_Initialize
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556     1EA8                     _EUSART_SetOverrunErrorHandler:	
  5557                           ;psect for function _EUSART_SetOverrunErrorHandler
  5558                           
  5559                           
  5560                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  5561                           
  5562                           ;incstack = 0
  5563                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5564     1EA8  0829               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5565     1EA9  0022               	movlb	2	; select bank2
  5566     1EAA  00C3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  5567     1EAB  0021               	movlb	1	; select bank1
  5568     1EAC  0828               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5569     1EAD  0022               	movlb	2	; select bank2
  5570     1EAE  00C2               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  5571     1EAF  0008               	return
  5572     1EB0                     __end_of_EUSART_SetOverrunErrorHandler:
  5573                           
  5574                           	psect	text15
  5575     1EA0                     __ptext15:	
  5576 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5577 ;; Defined at:
  5578 ;;		line 264 in file "mcc_generated_files/eusart.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5581 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;		None
  5584 ;; Return value:  Size  Location     Type
  5585 ;;                  1    wreg      void 
  5586 ;; Registers used:
  5587 ;;		wreg
  5588 ;; Tracked objects:
  5589 ;;		On entry : 1F/1
  5590 ;;		On exit  : 1F/2
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5593 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;Total ram usage:        2 bytes
  5598 ;; Hardware stack levels used: 1
  5599 ;; Hardware stack levels required when called: 10
  5600 ;; This function calls:
  5601 ;;		Nothing
  5602 ;; This function is called by:
  5603 ;;		_EUSART_Initialize
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607     1EA0                     _EUSART_SetFramingErrorHandler:	
  5608                           ;psect for function _EUSART_SetFramingErrorHandler
  5609                           
  5610                           
  5611                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  5612                           
  5613                           ;incstack = 0
  5614                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5615     1EA0  0829               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5616     1EA1  0022               	movlb	2	; select bank2
  5617     1EA2  00C5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
  5618     1EA3  0021               	movlb	1	; select bank1
  5619     1EA4  0828               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5620     1EA5  0022               	movlb	2	; select bank2
  5621     1EA6  00C4               	movwf	_EUSART_FramingErrorHandler^(0+256)
  5622     1EA7  0008               	return
  5623     1EA8                     __end_of_EUSART_SetFramingErrorHandler:
  5624                           
  5625                           	psect	text16
  5626     1E98                     __ptext16:	
  5627 ;; *************** function _EUSART_SetErrorHandler *****************
  5628 ;; Defined at:
  5629 ;;		line 272 in file "mcc_generated_files/eusart.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5632 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;		None
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  1    wreg      void 
  5637 ;; Registers used:
  5638 ;;		wreg
  5639 ;; Tracked objects:
  5640 ;;		On entry : 1F/1
  5641 ;;		On exit  : 1F/2
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5644 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;Total ram usage:        2 bytes
  5649 ;; Hardware stack levels used: 1
  5650 ;; Hardware stack levels required when called: 10
  5651 ;; This function calls:
  5652 ;;		Nothing
  5653 ;; This function is called by:
  5654 ;;		_EUSART_Initialize
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658     1E98                     _EUSART_SetErrorHandler:	
  5659                           ;psect for function _EUSART_SetErrorHandler
  5660                           
  5661                           
  5662                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  5663                           
  5664                           ;incstack = 0
  5665                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5666     1E98  0829               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5667     1E99  0022               	movlb	2	; select bank2
  5668     1E9A  00C1               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  5669     1E9B  0021               	movlb	1	; select bank1
  5670     1E9C  0828               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5671     1E9D  0022               	movlb	2	; select bank2
  5672     1E9E  00C0               	movwf	_EUSART_ErrorHandler^(0+256)
  5673     1E9F  0008               	return
  5674     1EA0                     __end_of_EUSART_SetErrorHandler:
  5675                           
  5676                           	psect	text17
  5677     1163                     __ptext17:	
  5678 ;; *************** function _PS2Keyboard_Init *****************
  5679 ;; Defined at:
  5680 ;;		line 43 in file "ps2_keyboard.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;		None
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;		None
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  1    wreg      void 
  5687 ;; Registers used:
  5688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 1F/0
  5691 ;;		On exit  : 1F/3
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;Total ram usage:        0 bytes
  5699 ;; Hardware stack levels used: 1
  5700 ;; Hardware stack levels required when called: 11
  5701 ;; This function calls:
  5702 ;;		_GenericQueue_Init
  5703 ;;		_IOCAF4_SetInterruptHandler
  5704 ;;		_IOCAF5_SetInterruptHandler
  5705 ;; This function is called by:
  5706 ;;		_main
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710     1163                     _PS2Keyboard_Init:	
  5711                           ;psect for function _PS2Keyboard_Init
  5712                           
  5713                           
  5714                           ;ps2_keyboard.c: 44:     GenericQueue_Init(&keyboardScanCodeQueue, sizeof (PS2ScanCode))
      +                          ;
  5715                           
  5716                           ;incstack = 0
  5717                           ; Regs used in _PS2Keyboard_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5718     1163  3091               	movlw	145
  5719     1164  0021               	movlb	1	; select bank1
  5720     1165  00A8               	movwf	GenericQueue_Init@q^(0+128)
  5721     1166  3023               	movlw	35
  5722     1167  00A9               	movwf	(GenericQueue_Init@q^(0+128)+1)
  5723     1168  3003               	movlw	3
  5724     1169  00AA               	movwf	GenericQueue_Init@element_size^(0+128)
  5725     116A  3000               	movlw	0
  5726     116B  00AB               	movwf	(GenericQueue_Init@element_size^(0+128)+1)
  5727     116C  3192  2251  3191   	fcall	_GenericQueue_Init
  5728                           
  5729                           ;ps2_keyboard.c: 45:     IOCAF4_SetInterruptHandler(PS2Keyboard_ClockInterrupt);
  5730     116F  3014               	movlw	low _PS2Keyboard_ClockInterrupt
  5731     1170  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  5732     1171  3005               	movlw	high _PS2Keyboard_ClockInterrupt
  5733     1172  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5734     1173  319E  2688  3191   	fcall	_IOCAF4_SetInterruptHandler
  5735                           
  5736                           ;ps2_keyboard.c: 46:     IOCAF5_SetInterruptHandler(PS2Keyboard_DataInterrupt);
  5737     1176  3054               	movlw	low _PS2Keyboard_DataInterrupt
  5738     1177  0021               	movlb	1	; select bank1
  5739     1178  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  5740     1179  301F               	movlw	high _PS2Keyboard_DataInterrupt
  5741     117A  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5742     117B  319E  2690         	fcall	_IOCAF5_SetInterruptHandler
  5743     117D  0008               	return
  5744     117E                     __end_of_PS2Keyboard_Init:
  5745                           
  5746                           	psect	text18
  5747     1E90                     __ptext18:	
  5748 ;; *************** function _IOCAF5_SetInterruptHandler *****************
  5749 ;; Defined at:
  5750 ;;		line 183 in file "mcc_generated_files/pin_manager.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5753 ;;		 -> PS2Keyboard_DataInterrupt(1), IOCAF5_DefaultInterruptHandler(1), 
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;		None
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg
  5760 ;; Tracked objects:
  5761 ;;		On entry : 1F/1
  5762 ;;		On exit  : 1F/3
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5765 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;Total ram usage:        2 bytes
  5770 ;; Hardware stack levels used: 1
  5771 ;; Hardware stack levels required when called: 10
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_PIN_MANAGER_Initialize
  5776 ;;		_PS2Keyboard_Init
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780     1E90                     _IOCAF5_SetInterruptHandler:	
  5781                           ;psect for function _IOCAF5_SetInterruptHandler
  5782                           
  5783                           
  5784                           ;mcc_generated_files/pin_manager.c: 184:     IOCAF5_InterruptHandler = InterruptHandler;
  5785                           
  5786                           ;incstack = 0
  5787                           ; Regs used in _IOCAF5_SetInterruptHandler: [wreg]
  5788     1E90  0829               	movf	(IOCAF5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5789     1E91  0023               	movlb	3	; select bank3
  5790     1E92  00CE               	movwf	(_IOCAF5_InterruptHandler+1)^(0+384)
  5791     1E93  0021               	movlb	1	; select bank1
  5792     1E94  0828               	movf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128),w
  5793     1E95  0023               	movlb	3	; select bank3
  5794     1E96  00CD               	movwf	_IOCAF5_InterruptHandler^(0+384)
  5795     1E97  0008               	return
  5796     1E98                     __end_of_IOCAF5_SetInterruptHandler:
  5797                           
  5798                           	psect	text19
  5799     1E88                     __ptext19:	
  5800 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  5801 ;; Defined at:
  5802 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5805 ;;		 -> PS2Keyboard_ClockInterrupt(1), IOCAF4_DefaultInterruptHandler(1), 
  5806 ;; Auto vars:     Size  Location     Type
  5807 ;;		None
  5808 ;; Return value:  Size  Location     Type
  5809 ;;                  1    wreg      void 
  5810 ;; Registers used:
  5811 ;;		wreg
  5812 ;; Tracked objects:
  5813 ;;		On entry : 1F/1
  5814 ;;		On exit  : 1F/2
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5817 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5820 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;Total ram usage:        2 bytes
  5822 ;; Hardware stack levels used: 1
  5823 ;; Hardware stack levels required when called: 10
  5824 ;; This function calls:
  5825 ;;		Nothing
  5826 ;; This function is called by:
  5827 ;;		_PIN_MANAGER_Initialize
  5828 ;;		_PS2Keyboard_Init
  5829 ;; This function uses a non-reentrant model
  5830 ;;
  5831                           
  5832     1E88                     _IOCAF4_SetInterruptHandler:	
  5833                           ;psect for function _IOCAF4_SetInterruptHandler
  5834                           
  5835                           
  5836                           ;mcc_generated_files/pin_manager.c: 154:     IOCAF4_InterruptHandler = InterruptHandler;
  5837                           
  5838                           ;incstack = 0
  5839                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  5840     1E88  0829               	movf	(IOCAF4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5841     1E89  0022               	movlb	2	; select bank2
  5842     1E8A  00EE               	movwf	(_IOCAF4_InterruptHandler+1)^(0+256)
  5843     1E8B  0021               	movlb	1	; select bank1
  5844     1E8C  0828               	movf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128),w
  5845     1E8D  0022               	movlb	2	; select bank2
  5846     1E8E  00ED               	movwf	_IOCAF4_InterruptHandler^(0+256)
  5847     1E8F  0008               	return
  5848     1E90                     __end_of_IOCAF4_SetInterruptHandler:
  5849                           
  5850                           	psect	text20
  5851     1251                     __ptext20:	
  5852 ;; *************** function _GenericQueue_Init *****************
  5853 ;; Defined at:
  5854 ;;		line 4 in file "generic_queue.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;  q               2    0[BANK1 ] PTR struct .
  5857 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  5858 ;;  element_size    2    2[BANK1 ] unsigned int 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;		None
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      void 
  5863 ;; Registers used:
  5864 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5865 ;; Tracked objects:
  5866 ;;		On entry : 1F/1
  5867 ;;		On exit  : 1F/1
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5870 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5873 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5874 ;;Total ram usage:        4 bytes
  5875 ;; Hardware stack levels used: 1
  5876 ;; Hardware stack levels required when called: 10
  5877 ;; This function calls:
  5878 ;;		Nothing
  5879 ;; This function is called by:
  5880 ;;		_PS2Keyboard_Init
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884     1251                     _GenericQueue_Init:	
  5885                           ;psect for function _GenericQueue_Init
  5886                           
  5887                           
  5888                           ;generic_queue.c: 5:     q->element_size = element_size;
  5889                           
  5890                           ;incstack = 0
  5891                           ; Regs used in _GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  5892     1251  0828               	movf	GenericQueue_Init@q^(0+128),w
  5893     1252  3E5A               	addlw	90
  5894     1253  0086               	movwf	6
  5895     1254  3000               	movlw	0
  5896     1255  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5897     1256  0087               	movwf	7
  5898     1257  082A               	movf	GenericQueue_Init@element_size^(0+128),w
  5899     1258  3FC0               	movwi [0]fsr1
  5900     1259  082B               	movf	(GenericQueue_Init@element_size+1)^(0+128),w
  5901     125A  3FC1               	movwi [1]fsr1
  5902                           
  5903                           ;generic_queue.c: 6:     q->front = 0;
  5904     125B  0828               	movf	GenericQueue_Init@q^(0+128),w
  5905     125C  3E5C               	addlw	92
  5906     125D  0086               	movwf	6
  5907     125E  3000               	movlw	0
  5908     125F  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5909     1260  0087               	movwf	7
  5910     1261  0181               	clrf	1
  5911                           
  5912                           ;generic_queue.c: 7:     q->rear = 0;
  5913     1262  0828               	movf	GenericQueue_Init@q^(0+128),w
  5914     1263  3E5D               	addlw	93
  5915     1264  0086               	movwf	6
  5916     1265  3000               	movlw	0
  5917     1266  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5918     1267  0087               	movwf	7
  5919     1268  0181               	clrf	1
  5920                           
  5921                           ;generic_queue.c: 8:     q->size = 0;
  5922     1269  0828               	movf	GenericQueue_Init@q^(0+128),w
  5923     126A  3E5E               	addlw	94
  5924     126B  0086               	movwf	6
  5925     126C  3000               	movlw	0
  5926     126D  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5927     126E  0087               	movwf	7
  5928     126F  0181               	clrf	1
  5929     1270  0008               	return
  5930     1271                     __end_of_GenericQueue_Init:
  5931                           
  5932                           	psect	text21
  5933     119A                     __ptext21:	
  5934 ;; *************** function _PS2Keyboard_GetScanCode *****************
  5935 ;; Defined at:
  5936 ;;		line 49 in file "ps2_keyboard.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;  scanCode        1    wreg     PTR struct PS2ScanCode
  5939 ;;		 -> main@scanCode(3), 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;  scanCode        1   31[BANK1 ] PTR struct PS2ScanCode
  5942 ;;		 -> main@scanCode(3), 
  5943 ;;  ret             1   32[BANK1 ] _Bool 
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  1    wreg      _Bool 
  5946 ;; Registers used:
  5947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5948 ;; Tracked objects:
  5949 ;;		On entry : 2/1
  5950 ;;		On exit  : 1F/1
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;Total ram usage:        2 bytes
  5958 ;; Hardware stack levels used: 1
  5959 ;; Hardware stack levels required when called: 12
  5960 ;; This function calls:
  5961 ;;		_GenericQueue_Dequeue
  5962 ;;		_GenericQueue_IsEmpty
  5963 ;; This function is called by:
  5964 ;;		_main
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968     119A                     _PS2Keyboard_GetScanCode:	
  5969                           ;psect for function _PS2Keyboard_GetScanCode
  5970                           
  5971                           
  5972                           ;incstack = 0
  5973                           ; Regs used in _PS2Keyboard_GetScanCode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5974                           ;PS2Keyboard_GetScanCode@scanCode stored from wreg
  5975     119A  0021               	movlb	1	; select bank1
  5976     119B  00C7               	movwf	PS2Keyboard_GetScanCode@scanCode^(0+128)
  5977                           
  5978                           ;ps2_keyboard.c: 51:     if (!GenericQueue_IsEmpty(&keyboardScanCodeQueue)) {
  5979     119C  3091               	movlw	145
  5980     119D  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  5981     119E  3023               	movlw	35
  5982     119F  00A9               	movwf	(GenericQueue_IsEmpty@q^(0+128)+1)
  5983     11A0  319F  2798  3191   	fcall	_GenericQueue_IsEmpty
  5984     11A3  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  5985     11A4  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  5986     11A5  1D03               	btfss	3,2
  5987     11A6  29B3               	goto	l5755
  5988                           
  5989                           ;ps2_keyboard.c: 52:         GenericQueue_Dequeue(&keyboardScanCodeQueue, scanCode);
  5990     11A7  3091               	movlw	145
  5991     11A8  00C0               	movwf	GenericQueue_Dequeue@q^(0+128)
  5992     11A9  3023               	movlw	35
  5993     11AA  00C1               	movwf	(GenericQueue_Dequeue@q^(0+128)+1)
  5994     11AB  0847               	movf	PS2Keyboard_GetScanCode@scanCode^(0+128),w
  5995     11AC  00C2               	movwf	GenericQueue_Dequeue@item^(0+128)
  5996     11AD  3188  20BA  3191   	fcall	_GenericQueue_Dequeue
  5997                           
  5998                           ;ps2_keyboard.c: 53:         ret = 1;
  5999     11B0  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  6000     11B1  0AC8               	incf	PS2Keyboard_GetScanCode@ret^(0+128),f
  6001                           
  6002                           ;ps2_keyboard.c: 54:     } else {
  6003     11B2  29B4               	goto	l5757
  6004     11B3                     l5755:
  6005                           
  6006                           ;ps2_keyboard.c: 55:         ret = 0;
  6007     11B3  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  6008     11B4                     l5757:
  6009                           
  6010                           ;ps2_keyboard.c: 57:     return ret;
  6011     11B4  0848               	movf	PS2Keyboard_GetScanCode@ret^(0+128),w
  6012     11B5  0008               	return
  6013     11B6                     __end_of_PS2Keyboard_GetScanCode:
  6014                           
  6015                           	psect	text22
  6016     08BA                     __ptext22:	
  6017 ;; *************** function _GenericQueue_Dequeue *****************
  6018 ;; Defined at:
  6019 ;;		line 27 in file "generic_queue.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;  q               2   24[BANK1 ] PTR struct .
  6022 ;;		 -> keyboardScanCodeQueue(95), 
  6023 ;;  item            1   26[BANK1 ] PTR void 
  6024 ;;		 -> main@scanCode(3), 
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;		None
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  1    wreg      void 
  6029 ;; Registers used:
  6030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6031 ;; Tracked objects:
  6032 ;;		On entry : 1F/1
  6033 ;;		On exit  : 1F/1
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6036 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;Total ram usage:        7 bytes
  6041 ;; Hardware stack levels used: 1
  6042 ;; Hardware stack levels required when called: 11
  6043 ;; This function calls:
  6044 ;;		_GenericQueue_IsEmpty
  6045 ;;		___awmod
  6046 ;;		___wmul
  6047 ;;		_memcpy
  6048 ;; This function is called by:
  6049 ;;		_PS2Keyboard_GetScanCode
  6050 ;; This function uses a non-reentrant model
  6051 ;;
  6052                           
  6053     08BA                     _GenericQueue_Dequeue:	
  6054                           ;psect for function _GenericQueue_Dequeue
  6055                           
  6056                           
  6057                           ;generic_queue.c: 28:     if (!GenericQueue_IsEmpty(q)) {
  6058                           
  6059                           ;incstack = 0
  6060                           ; Regs used in _GenericQueue_Dequeue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6061     08BA  0841               	movf	(GenericQueue_Dequeue@q+1)^(0+128),w
  6062     08BB  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  6063     08BC  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6064     08BD  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  6065     08BE  319F  2798  3188   	fcall	_GenericQueue_IsEmpty
  6066     08C1  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  6067     08C2  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  6068     08C3  1D03               	btfss	3,2
  6069     08C4  0008               	return
  6070                           
  6071                           ;generic_queue.c: 29:         memcpy(item, &q->buffer[q->front * q->element_size], q->el
      +                          ement_size);
  6072     08C5  0842               	movf	GenericQueue_Dequeue@item^(0+128),w
  6073     08C6  00B5               	movwf	memcpy@d1^(0+128)
  6074     08C7  01B6               	clrf	(memcpy@d1+1)^(0+128)
  6075     08C8  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6076     08C9  3E5C               	addlw	92
  6077     08CA  0086               	movwf	6
  6078     08CB  3000               	movlw	0
  6079     08CC  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6080     08CD  0087               	movwf	7
  6081     08CE  0801               	movf	1,w
  6082     08CF  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  6083     08D0  01C4               	clrf	(??_GenericQueue_Dequeue^(0+128)+1)
  6084     08D1  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  6085     08D2  00AF               	movwf	___wmul@multiplier^(0+128)
  6086     08D3  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  6087     08D4  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  6088     08D5  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6089     08D6  3E5A               	addlw	90
  6090     08D7  0086               	movwf	6
  6091     08D8  3000               	movlw	0
  6092     08D9  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6093     08DA  0087               	movwf	7
  6094     08DB  3F40               	moviw [0]fsr1
  6095     08DC  00B1               	movwf	___wmul@multiplicand^(0+128)
  6096     08DD  3F41               	moviw [1]fsr1
  6097     08DE  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  6098     08DF  3191  212D  3188   	fcall	___wmul
  6099     08E2  082F               	movf	?___wmul^(0+128),w
  6100     08E3  0740               	addwf	GenericQueue_Dequeue@q^(0+128),w
  6101     08E4  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  6102     08E5  0830               	movf	(?___wmul+1)^(0+128),w
  6103     08E6  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6104     08E7  00C6               	movwf	(??_GenericQueue_Dequeue+3)^(0+128)
  6105     08E8  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  6106     08E9  00B7               	movwf	memcpy@s1^(0+128)
  6107     08EA  0846               	movf	(??_GenericQueue_Dequeue+3)^(0+128),w
  6108     08EB  00B8               	movwf	(memcpy@s1+1)^(0+128)
  6109     08EC  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6110     08ED  3E5A               	addlw	90
  6111     08EE  0086               	movwf	6
  6112     08EF  3000               	movlw	0
  6113     08F0  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6114     08F1  0087               	movwf	7
  6115     08F2  3F40               	moviw [0]fsr1
  6116     08F3  00B9               	movwf	memcpy@n^(0+128)
  6117     08F4  3F41               	moviw [1]fsr1
  6118     08F5  00BA               	movwf	(memcpy@n+1)^(0+128)
  6119     08F6  3193  2301  3188   	fcall	_memcpy
  6120                           
  6121                           ;generic_queue.c: 30:         q->front = (q->front + 1) % 15;
  6122     08F9  300F               	movlw	15
  6123     08FA  00A8               	movwf	___awmod@divisor^(0+128)
  6124     08FB  3000               	movlw	0
  6125     08FC  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  6126     08FD  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6127     08FE  3E5C               	addlw	92
  6128     08FF  0086               	movwf	6
  6129     0900  3000               	movlw	0
  6130     0901  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6131     0902  0087               	movwf	7
  6132     0903  0801               	movf	1,w
  6133     0904  3E01               	addlw	1
  6134     0905  00AA               	movwf	___awmod@dividend^(0+128)
  6135     0906  3000               	movlw	0
  6136     0907  1803               	skipnc
  6137     0908  3001               	movlw	1
  6138     0909  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  6139     090A  3194  24D5         	fcall	___awmod
  6140     090C  0828               	movf	?___awmod^(0+128),w
  6141     090D  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  6142     090E  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6143     090F  3E5C               	addlw	92
  6144     0910  00C4               	movwf	(??_GenericQueue_Dequeue+1)^(0+128)
  6145     0911  3000               	movlw	0
  6146     0912  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6147     0913  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  6148     0914  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  6149     0915  0086               	movwf	6
  6150     0916  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  6151     0917  0087               	movwf	7
  6152     0918  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  6153     0919  0081               	movwf	1
  6154                           
  6155                           ;generic_queue.c: 31:         q->size--;
  6156     091A  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6157     091B  3E5E               	addlw	94
  6158     091C  0086               	movwf	6
  6159     091D  3000               	movlw	0
  6160     091E  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6161     091F  0087               	movwf	7
  6162     0920  3001               	movlw	1
  6163     0921  0281               	subwf	1,f
  6164     0922  0008               	return
  6165     0923                     __end_of_GenericQueue_Dequeue:
  6166                           
  6167                           	psect	text23
  6168     12B6                     __ptext23:	
  6169 ;; *************** function _Log_UtilityConvertByteToHex *****************
  6170 ;; Defined at:
  6171 ;;		line 14 in file "log.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;  byte            1    wreg     unsigned char 
  6174 ;;  buf             1    4[BANK1 ] PTR unsigned char 
  6175 ;;		 -> main@scanCodeStr(6), 
  6176 ;;  bufSize         1    5[BANK1 ] unsigned char 
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;  byte            1    8[BANK1 ] unsigned char 
  6179 ;;  d1              1    9[BANK1 ] unsigned char 
  6180 ;;  d0              1    7[BANK1 ] unsigned char 
  6181 ;; Return value:  Size  Location     Type
  6182 ;;                  1    wreg      void 
  6183 ;; Registers used:
  6184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6185 ;; Tracked objects:
  6186 ;;		On entry : 1F/1
  6187 ;;		On exit  : 1F/1
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6190 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;Total ram usage:        6 bytes
  6195 ;; Hardware stack levels used: 1
  6196 ;; Hardware stack levels required when called: 11
  6197 ;; This function calls:
  6198 ;;		___bmul
  6199 ;;		_hex2str
  6200 ;; This function is called by:
  6201 ;;		_main
  6202 ;; This function uses a non-reentrant model
  6203 ;;
  6204                           
  6205     12B6                     _Log_UtilityConvertByteToHex:	
  6206                           ;psect for function _Log_UtilityConvertByteToHex
  6207                           
  6208                           
  6209                           ;incstack = 0
  6210                           ; Regs used in _Log_UtilityConvertByteToHex: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6211                           ;Log_UtilityConvertByteToHex@byte stored from wreg
  6212     12B6  00B0               	movwf	Log_UtilityConvertByteToHex@byte^(0+128)
  6213                           
  6214                           ;log.c: 15:     if (bufSize < 2) {
  6215     12B7  3002               	movlw	2
  6216     12B8  022D               	subwf	Log_UtilityConvertByteToHex@bufSize^(0+128),w
  6217     12B9  1C03               	btfss	3,0
  6218     12BA  0008               	return
  6219                           
  6220                           ;log.c: 18:     uint8_t d1 = byte / 16;
  6221     12BB  0830               	movf	Log_UtilityConvertByteToHex@byte^(0+128),w
  6222     12BC  00AE               	movwf	??_Log_UtilityConvertByteToHex^(0+128)
  6223     12BD  3004               	movlw	4
  6224     12BE                     u5335:
  6225     12BE  36AE               	lsrf	??_Log_UtilityConvertByteToHex^(0+128),f
  6226     12BF  0B89               	decfsz	9,f
  6227     12C0  2ABE               	goto	u5335
  6228     12C1  082E               	movf	??_Log_UtilityConvertByteToHex^(0+128),w
  6229     12C2  00B1               	movwf	Log_UtilityConvertByteToHex@d1^(0+128)
  6230                           
  6231                           ;log.c: 19:     uint8_t d0 = byte - d1 * 16;
  6232     12C3  30F0               	movlw	240
  6233     12C4  00A8               	movwf	___bmul@multiplicand^(0+128)
  6234     12C5  0831               	movf	Log_UtilityConvertByteToHex@d1^(0+128),w
  6235     12C6  319F  2765  3192   	fcall	___bmul
  6236     12C9  0730               	addwf	Log_UtilityConvertByteToHex@byte^(0+128),w
  6237     12CA  00AF               	movwf	Log_UtilityConvertByteToHex@d0^(0+128)
  6238                           
  6239                           ;log.c: 20:     buf[0] = hex2str(d1);
  6240     12CB  082C               	movf	Log_UtilityConvertByteToHex@buf^(0+128),w
  6241     12CC  0086               	movwf	6
  6242     12CD  0187               	clrf	7
  6243     12CE  0831               	movf	Log_UtilityConvertByteToHex@d1^(0+128),w
  6244     12CF  319F  2776  3192   	fcall	_hex2str
  6245     12D2  0081               	movwf	1
  6246                           
  6247                           ;log.c: 21:     buf[1] = hex2str(d0);
  6248     12D3  0A2C               	incf	Log_UtilityConvertByteToHex@buf^(0+128),w
  6249     12D4  0086               	movwf	6
  6250     12D5  0187               	clrf	7
  6251     12D6  082F               	movf	Log_UtilityConvertByteToHex@d0^(0+128),w
  6252     12D7  319F  2776         	fcall	_hex2str
  6253     12D9  0081               	movwf	1
  6254     12DA  0008               	return
  6255     12DB                     __end_of_Log_UtilityConvertByteToHex:
  6256                           
  6257                           	psect	text24
  6258     1F76                     __ptext24:	
  6259 ;; *************** function _hex2str *****************
  6260 ;; Defined at:
  6261 ;;		line 4 in file "log.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;  val             1    wreg     unsigned char 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  val             1    0[BANK1 ] unsigned char 
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      unsigned char 
  6268 ;; Registers used:
  6269 ;;		wreg, status,2, status,0
  6270 ;; Tracked objects:
  6271 ;;		On entry : 1F/1
  6272 ;;		On exit  : 1F/1
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6276 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6278 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;Total ram usage:        1 bytes
  6280 ;; Hardware stack levels used: 1
  6281 ;; Hardware stack levels required when called: 10
  6282 ;; This function calls:
  6283 ;;		Nothing
  6284 ;; This function is called by:
  6285 ;;		_Log_UtilityConvertByteToHex
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289     1F76                     _hex2str:	
  6290                           ;psect for function _hex2str
  6291                           
  6292                           
  6293                           ;incstack = 0
  6294                           ; Regs used in _hex2str: [wreg+status,2+status,0]
  6295                           ;hex2str@val stored from wreg
  6296     1F76  00A8               	movwf	hex2str@val^(0+128)
  6297                           
  6298                           ;log.c: 5:     if (val < 10) {
  6299     1F77  300A               	movlw	10
  6300     1F78  0228               	subwf	hex2str@val^(0+128),w
  6301     1F79  1803               	skipnc
  6302     1F7A  2F7E               	goto	l5485
  6303                           
  6304                           ;log.c: 6:         return val + '0';
  6305     1F7B  0828               	movf	hex2str@val^(0+128),w
  6306     1F7C  3E30               	addlw	48
  6307     1F7D  0008               	return
  6308     1F7E                     l5485:
  6309     1F7E  3010               	movlw	16
  6310     1F7F  0228               	subwf	hex2str@val^(0+128),w
  6311     1F80  1803               	skipnc
  6312     1F81  2F85               	goto	l5493
  6313                           
  6314                           ;log.c: 8:         return val - 10 + 'A';
  6315     1F82  0828               	movf	hex2str@val^(0+128),w
  6316     1F83  3E37               	addlw	55
  6317     1F84  0008               	return
  6318     1F85                     l5493:
  6319                           
  6320                           ;log.c: 10:         return 'X';
  6321     1F85  3058               	movlw	88
  6322     1F86  0008               	return
  6323     1F87                     __end_of_hex2str:
  6324                           
  6325                           	psect	text25
  6326     1148                     __ptext25:	
  6327 ;; *************** function _Log_Message *****************
  6328 ;; Defined at:
  6329 ;;		line 24 in file "log.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;  buf             1    wreg     PTR const unsigned char 
  6332 ;;		 -> main@scanCodeStr(6), 
  6333 ;;  bufSize         1    2[BANK1 ] unsigned char 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  buf             1    4[BANK1 ] PTR const unsigned char 
  6336 ;;		 -> main@scanCodeStr(6), 
  6337 ;;  i               1    5[BANK1 ] unsigned char 
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  1    wreg      void 
  6340 ;; Registers used:
  6341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6342 ;; Tracked objects:
  6343 ;;		On entry : 1F/1
  6344 ;;		On exit  : 1F/1
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6347 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;Total ram usage:        4 bytes
  6352 ;; Hardware stack levels used: 1
  6353 ;; Hardware stack levels required when called: 11
  6354 ;; This function calls:
  6355 ;;		_EUSART_Write
  6356 ;;		_EUSART_is_tx_ready
  6357 ;; This function is called by:
  6358 ;;		_main
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362     1148                     _Log_Message:	
  6363                           ;psect for function _Log_Message
  6364                           
  6365                           
  6366                           ;incstack = 0
  6367                           ; Regs used in _Log_Message: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6368                           ;Log_Message@buf stored from wreg
  6369     1148  00AC               	movwf	Log_Message@buf^(0+128)
  6370                           
  6371                           ;log.c: 25:     for (uint8_t i = 0; i < bufSize; i++) {
  6372     1149  01AD               	clrf	Log_Message@i^(0+128)
  6373     114A                     l5781:
  6374     114A  082A               	movf	Log_Message@bufSize^(0+128),w
  6375     114B  022D               	subwf	Log_Message@i^(0+128),w
  6376     114C  1803               	btfsc	3,0
  6377     114D  0008               	return
  6378     114E                     l5775:
  6379     114E  319E  2681  3191   	fcall	_EUSART_is_tx_ready
  6380     1151  3A00               	xorlw	0
  6381     1152  1903               	skipnz
  6382     1153  294E               	goto	l5775
  6383                           
  6384                           ;log.c: 27:         EUSART_Write(buf[i]);
  6385     1154  082D               	movf	Log_Message@i^(0+128),w
  6386     1155  072C               	addwf	Log_Message@buf^(0+128),w
  6387     1156  00AB               	movwf	??_Log_Message^(0+128)
  6388     1157  082B               	movf	??_Log_Message^(0+128),w
  6389     1158  0086               	movwf	6
  6390     1159  0187               	clrf	7
  6391     115A  0801               	movf	1,w
  6392     115B  3192  2293  3191   	fcall	_EUSART_Write
  6393                           
  6394                           ;log.c: 28:     }
  6395     115E  3001               	movlw	1
  6396     115F  00AB               	movwf	??_Log_Message^(0+128)
  6397     1160  082B               	movf	??_Log_Message^(0+128),w
  6398     1161  07AD               	addwf	Log_Message@i^(0+128),f
  6399     1162  294A               	goto	l5781
  6400     1163                     __end_of_Log_Message:
  6401                           
  6402                           	psect	text26
  6403     1E81                     __ptext26:	
  6404 ;; *************** function _EUSART_is_tx_ready *****************
  6405 ;; Defined at:
  6406 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;		None
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;		None
  6411 ;; Return value:  Size  Location     Type
  6412 ;;                  1    wreg      _Bool 
  6413 ;; Registers used:
  6414 ;;		wreg, status,2, status,0
  6415 ;; Tracked objects:
  6416 ;;		On entry : 1F/1
  6417 ;;		On exit  : 1F/1
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;Total ram usage:        0 bytes
  6425 ;; Hardware stack levels used: 1
  6426 ;; Hardware stack levels required when called: 10
  6427 ;; This function calls:
  6428 ;;		Nothing
  6429 ;; This function is called by:
  6430 ;;		_Log_Message
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434     1E81                     _EUSART_is_tx_ready:	
  6435                           ;psect for function _EUSART_is_tx_ready
  6436                           
  6437                           
  6438                           ;mcc_generated_files/eusart.c: 134:     return (eusartTxBufferRemaining ? 1 : 0);
  6439                           
  6440                           ;incstack = 0
  6441                           ; Regs used in _EUSART_is_tx_ready: [wreg+status,2+status,0]
  6442     1E81  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6443     1E82  1903               	btfsc	3,2
  6444     1E83  2E86               	goto	u4460
  6445     1E84  3001               	movlw	1
  6446     1E85  0008               	return
  6447     1E86                     u4460:
  6448     1E86  3000               	movlw	0
  6449     1E87  0008               	return
  6450     1E88                     __end_of_EUSART_is_tx_ready:
  6451                           
  6452                           	psect	text27
  6453     1293                     __ptext27:	
  6454 ;; *************** function _EUSART_Write *****************
  6455 ;; Defined at:
  6456 ;;		line 173 in file "mcc_generated_files/eusart.c"
  6457 ;; Parameters:    Size  Location     Type
  6458 ;;  txData          1    wreg     unsigned char 
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;  txData          1    1[BANK1 ] unsigned char 
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  1    wreg      void 
  6463 ;; Registers used:
  6464 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6465 ;; Tracked objects:
  6466 ;;		On entry : 1F/1
  6467 ;;		On exit  : 1F/1
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;Total ram usage:        2 bytes
  6475 ;; Hardware stack levels used: 1
  6476 ;; Hardware stack levels required when called: 10
  6477 ;; This function calls:
  6478 ;;		Nothing
  6479 ;; This function is called by:
  6480 ;;		_Log_Message
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484     1293                     _EUSART_Write:	
  6485                           ;psect for function _EUSART_Write
  6486                           
  6487                           
  6488                           ;incstack = 0
  6489                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6490                           ;EUSART_Write@txData stored from wreg
  6491     1293  00A9               	movwf	EUSART_Write@txData^(0+128)
  6492     1294                     l5239:	
  6493                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  6494                           
  6495                           
  6496                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  6497     1294  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6498     1295  1903               	btfsc	3,2
  6499     1296  2A94               	goto	l5239
  6500                           
  6501                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  6502     1297  1A11               	btfsc	17,4	;volatile
  6503     1298  2A9D               	goto	l261
  6504                           
  6505                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  6506     1299  0829               	movf	EUSART_Write@txData^(0+128),w
  6507     129A  0023               	movlb	3	; select bank3
  6508     129B  009A               	movwf	26	;volatile
  6509                           
  6510                           ;mcc_generated_files/eusart.c: 182:     }
  6511     129C  2AB3               	goto	l5253
  6512     129D                     l261:	
  6513                           ;mcc_generated_files/eusart.c: 183:     else
  6514                           
  6515                           
  6516                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  6517     129D  1211               	bcf	17,4	;volatile
  6518                           
  6519                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  6520     129E  0022               	movlb	2	; select bank2
  6521     129F  0867               	movf	_eusartTxHead^(0+256),w
  6522     12A0  3EB8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  6523     12A1  0086               	movwf	6
  6524     12A2  3001               	movlw	1	; select bank3/4
  6525     12A3  0087               	movwf	7
  6526     12A4  0021               	movlb	1	; select bank1
  6527     12A5  0829               	movf	EUSART_Write@txData^(0+128),w
  6528     12A6  0081               	movwf	1
  6529     12A7  3001               	movlw	1
  6530     12A8  00A8               	movwf	??_EUSART_Write^(0+128)
  6531     12A9  0828               	movf	??_EUSART_Write^(0+128),w
  6532     12AA  0022               	movlb	2	; select bank2
  6533     12AB  07E7               	addwf	_eusartTxHead^(0+256),f	;volatile
  6534                           
  6535                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6536     12AC  3008               	movlw	8
  6537     12AD  0267               	subwf	_eusartTxHead^(0+256),w
  6538     12AE  1803               	btfsc	3,0
  6539                           
  6540                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  6541     12AF  01E7               	clrf	_eusartTxHead^(0+256)	;volatile
  6542                           
  6543                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  6544     12B0  3001               	movlw	1
  6545     12B1  0021               	movlb	1	; select bank1
  6546     12B2  02EF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  6547     12B3                     l5253:
  6548                           
  6549                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  6550     12B3  0021               	movlb	1	; select bank1
  6551     12B4  1611               	bsf	17,4	;volatile
  6552     12B5  0008               	return
  6553     12B6                     __end_of_EUSART_Write:
  6554                           
  6555                           	psect	text28
  6556     030C                     __ptext28:	
  6557 ;; *************** function _APP_KeyboardTasks *****************
  6558 ;; Defined at:
  6559 ;;		line 336 in file "app_device_keyboard.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  6562 ;;		 -> main@scanCode(3), NULL(0), 
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;  scanCode        1   43[BANK1 ] PTR const struct PS2Scan
  6565 ;;		 -> main@scanCode(3), NULL(0), 
  6566 ;;  TimeDeltaMil    2   45[BANK1 ] int 
  6567 ;;  i               1   47[BANK1 ] unsigned char 
  6568 ;;  needToSendNe    1   44[BANK1 ] _Bool 
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  1    wreg      void 
  6571 ;; Registers used:
  6572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6573 ;; Tracked objects:
  6574 ;;		On entry : 1F/1
  6575 ;;		On exit  : 2/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;Total ram usage:        7 bytes
  6583 ;; Hardware stack levels used: 1
  6584 ;; Hardware stack levels required when called: 13
  6585 ;; This function calls:
  6586 ;;		_APP_KeyboardProcessOutputReport
  6587 ;;		_APP_KeyboardUpdateState
  6588 ;;		_GenericQueue_CopyToArray
  6589 ;;		_USBTransferOnePacket
  6590 ;;		_memset
  6591 ;; This function is called by:
  6592 ;;		_main
  6593 ;; This function uses a non-reentrant model
  6594 ;;
  6595                           
  6596     030C                     _APP_KeyboardTasks:	
  6597                           ;psect for function _APP_KeyboardTasks
  6598                           
  6599                           
  6600                           ;incstack = 0
  6601                           ; Regs used in _APP_KeyboardTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6602                           ;APP_KeyboardTasks@scanCode stored from wreg
  6603     030C  00D3               	movwf	APP_KeyboardTasks@scanCode^(0+128)
  6604                           
  6605                           ;app_device_keyboard.c: 337:     signed int TimeDeltaMilliseconds;;app_device_keyboard.c
      +                          : 338:     unsigned char i;;app_device_keyboard.c: 339:     _Bool needToSendNewReportPac
      +                          ket;;app_device_keyboard.c: 342:     APP_KeyboardUpdateState(scanCode);
  6606     030D  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  6607     030E  3180  2087  3183   	fcall	_APP_KeyboardUpdateState
  6608                           
  6609                           ;app_device_keyboard.c: 347:     if (USBDeviceState < CONFIGURED_STATE) {
  6610     0311  3020               	movlw	32
  6611     0312  0020               	movlb	0	; select bank0
  6612     0313  026C               	subwf	_USBDeviceState,w
  6613     0314  1C03               	btfss	3,0
  6614     0315  0008               	return
  6615                           
  6616                           ;app_device_keyboard.c: 355:     if (UCONbits.SUSPND == 1) {
  6617                           
  6618                           ;app_device_keyboard.c: 349:     }
  6619     0316  003D               	movlb	29	; select bank29
  6620     0317  188E               	btfsc	14,1	;volatile
  6621     0318  0008               	return
  6622     0319                     l868:	
  6623                           ;app_device_keyboard.c: 371:     }
  6624                           
  6625                           
  6626                           ;app_device_keyboard.c: 369:     while (LocalSOFCount != SOFCounter) {
  6627     0319  0022               	movlb	2	; select bank2
  6628     031A  083B               	movf	(_SOFCounter+1)^(0+256),w	;volatile
  6629     031B  0637               	xorwf	(_LocalSOFCount+1)^(0+256),w
  6630     031C  1D03               	skipz
  6631     031D  2B20               	goto	u6185
  6632     031E  083A               	movf	_SOFCounter^(0+256),w	;volatile
  6633     031F  0636               	xorwf	_LocalSOFCount^(0+256),w
  6634     0320                     u6185:
  6635     0320  1903               	btfsc	3,2
  6636     0321  2B27               	goto	l6303
  6637                           
  6638                           ;app_device_keyboard.c: 370:         LocalSOFCount = SOFCounter;
  6639     0322  083B               	movf	(_SOFCounter+1)^(0+256),w	;volatile
  6640     0323  00B7               	movwf	(_LocalSOFCount+1)^(0+256)
  6641     0324  083A               	movf	_SOFCounter^(0+256),w	;volatile
  6642     0325  00B6               	movwf	_LocalSOFCount^(0+256)
  6643     0326  2B19               	goto	l868
  6644     0327                     l6303:
  6645                           
  6646                           ;app_device_keyboard.c: 375:     TimeDeltaMilliseconds = LocalSOFCount - OldSOFCount;
  6647     0327  0834               	movf	_OldSOFCount^(0+256),w
  6648     0328  0236               	subwf	_LocalSOFCount^(0+256),w
  6649     0329  0021               	movlb	1	; select bank1
  6650     032A  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  6651     032B  0022               	movlb	2	; select bank2
  6652     032C  0835               	movf	(_OldSOFCount+1)^(0+256),w
  6653     032D  3B37               	subwfb	(_LocalSOFCount+1)^(0+256),w
  6654     032E  0021               	movlb	1	; select bank1
  6655     032F  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  6656                           
  6657                           ;app_device_keyboard.c: 377:     if (TimeDeltaMilliseconds < 0) {
  6658     0330  1FD6               	btfss	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),7
  6659     0331  2B42               	goto	l6309
  6660                           
  6661                           ;app_device_keyboard.c: 378:         TimeDeltaMilliseconds = (32767 - OldSOFCount) + Loc
      +                          alSOFCount;
  6662     0332  0022               	movlb	2	; select bank2
  6663     0333  0834               	movf	_OldSOFCount^(0+256),w
  6664     0334  0236               	subwf	_LocalSOFCount^(0+256),w
  6665     0335  0021               	movlb	1	; select bank1
  6666     0336  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6667     0337  0022               	movlb	2	; select bank2
  6668     0338  0835               	movf	(_OldSOFCount+1)^(0+256),w
  6669     0339  3B37               	subwfb	(_LocalSOFCount+1)^(0+256),w
  6670     033A  0021               	movlb	1	; select bank1
  6671     033B  00D2               	movwf	(??_APP_KeyboardTasks+1)^(0+128)
  6672     033C  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6673     033D  3EFF               	addlw	255
  6674     033E  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  6675     033F  307F               	movlw	127
  6676     0340  3D52               	addwfc	(??_APP_KeyboardTasks+1)^(0+128),w
  6677     0341  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  6678     0342                     l6309:
  6679                           
  6680                           ;app_device_keyboard.c: 385:     if (TimeDeltaMilliseconds > 5000) {
  6681     0342  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  6682     0343  3A80               	xorlw	128
  6683     0344  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6684     0345  3093               	movlw	147
  6685     0346  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  6686     0347  1D03               	skipz
  6687     0348  2B4B               	goto	u6205
  6688     0349  3089               	movlw	137
  6689     034A  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  6690     034B                     u6205:
  6691     034B  1C03               	skipc
  6692     034C  2B54               	goto	l6313
  6693                           
  6694                           ;app_device_keyboard.c: 386:         OldSOFCount = LocalSOFCount - 5000;
  6695     034D  0022               	movlb	2	; select bank2
  6696     034E  0836               	movf	_LocalSOFCount^(0+256),w
  6697     034F  3E78               	addlw	120
  6698     0350  00B4               	movwf	_OldSOFCount^(0+256)
  6699     0351  30EC               	movlw	236
  6700     0352  3D37               	addwfc	(_LocalSOFCount+1)^(0+256),w
  6701     0353  00B5               	movwf	(_OldSOFCount+1)^(0+256)
  6702     0354                     l6313:
  6703                           
  6704                           ;app_device_keyboard.c: 392:     if (((keyboard.lastINTransmission != 0x0000) && ((*(vol
      +                          atile uint8_t*)keyboard.lastINTransmission & 0x80) != 0x00)) == 0) {
  6705     0354  302C               	movlw	44
  6706     0355  0086               	movwf	6
  6707     0356  3023               	movlw	35
  6708     0357  0087               	movwf	7
  6709     0358  0016               	moviw fsr1++
  6710     0359  0401               	iorwf	1,w
  6711     035A  1903               	btfsc	3,2
  6712     035B  2B6B               	goto	l6317
  6713     035C  302C               	movlw	44
  6714     035D  0086               	movwf	6
  6715     035E  3023               	movlw	35
  6716     035F  0087               	movwf	7
  6717     0360  3F40               	moviw [0]fsr1
  6718     0361  0021               	movlb	1	; select bank1
  6719     0362  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6720     0363  3F41               	moviw [1]fsr1
  6721     0364  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  6722     0365  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6723     0366  0086               	movwf	6
  6724     0367  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  6725     0368  0087               	movwf	7
  6726     0369  1B81               	btfsc	1,7
  6727     036A  2BE4               	goto	l6351
  6728     036B                     l6317:
  6729                           
  6730                           ;app_device_keyboard.c: 394:         memset(&inputReport, 0, sizeof (inputReport));
  6731     036B  3000               	movlw	0
  6732     036C  0021               	movlb	1	; select bank1
  6733     036D  00A8               	movwf	memset@c^(0+128)
  6734     036E  00A9               	movwf	(memset@c+1)^(0+128)
  6735     036F  3008               	movlw	8
  6736     0370  00AA               	movwf	memset@n^(0+128)
  6737     0371  3000               	movlw	0
  6738     0372  00AB               	movwf	(memset@n^(0+128)+1)
  6739     0373  30A0               	movlw	160
  6740     0374  319F  27EA  3183   	fcall	_memset
  6741                           
  6742                           ;app_device_keyboard.c: 396:         GenericQueue_CopyToArray(&keyboard.keys, inputRepor
      +                          t.keys);
  6743     0377  3030               	movlw	48
  6744     0378  00C0               	movwf	GenericQueue_CopyToArray@q^(0+128)
  6745     0379  3023               	movlw	35
  6746     037A  00C1               	movwf	(GenericQueue_CopyToArray@q^(0+128)+1)
  6747     037B  30A2               	movlw	162
  6748     037C  00C2               	movwf	GenericQueue_CopyToArray@array^(0+128)
  6749     037D  3196  2668  3183   	fcall	_GenericQueue_CopyToArray
  6750                           
  6751                           ;app_device_keyboard.c: 397:         inputReport.modifiers.value = keyboard.modifiers.va
      +                          lue;
  6752     0380  308F               	movlw	143
  6753     0381  0086               	movwf	6
  6754     0382  3023               	movlw	35
  6755     0383  0087               	movwf	7
  6756     0384  0801               	movf	1,w
  6757     0385  00A0               	movwf	32
  6758                           
  6759                           ;app_device_keyboard.c: 400:         needToSendNewReportPacket = 0;
  6760     0386  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6761                           
  6762                           ;app_device_keyboard.c: 401:         for (i = 0; i < sizeof (inputReport); i++) {
  6763     0387  01D7               	clrf	APP_KeyboardTasks@i^(0+128)
  6764     0388                     l6329:
  6765                           
  6766                           ;app_device_keyboard.c: 402:             if (*((uint8_t*) & oldInputReport + i) != *((ui
      +                          nt8_t*) & inputReport + i)) {
  6767     0388  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  6768     0389  3EA0               	addlw	160
  6769     038A  0086               	movwf	6
  6770     038B  0187               	clrf	7
  6771     038C  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  6772     038D  3EA0               	addlw	(low (_oldInputReport| (0+256)))& (0+255)
  6773     038E  0084               	movwf	4
  6774     038F  3001               	movlw	1	; select bank3/4
  6775     0390  0085               	movwf	5
  6776     0391  0800               	movf	0,w
  6777     0392  0601               	xorwf	1,w
  6778     0393  1903               	skipnz
  6779     0394  2B98               	goto	l6333
  6780                           
  6781                           ;app_device_keyboard.c: 403:                 needToSendNewReportPacket = 1;
  6782     0395  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6783     0396  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  6784                           
  6785                           ;app_device_keyboard.c: 404:                 break;
  6786     0397  2BA0               	goto	l6337
  6787     0398                     l6333:
  6788                           
  6789                           ;app_device_keyboard.c: 406:         }
  6790     0398  3001               	movlw	1
  6791     0399  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6792     039A  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6793     039B  07D7               	addwf	APP_KeyboardTasks@i^(0+128),f
  6794     039C  3008               	movlw	8
  6795     039D  0257               	subwf	APP_KeyboardTasks@i^(0+128),w
  6796     039E  1C03               	skipc
  6797     039F  2B88               	goto	l6329
  6798     03A0                     l6337:
  6799                           
  6800                           ;app_device_keyboard.c: 411:         if (keyboardIdleRate != 0) {
  6801     03A0  0022               	movlb	2	; select bank2
  6802     03A1  0838               	movf	_keyboardIdleRate^(0+256),w
  6803     03A2  0439               	iorwf	(_keyboardIdleRate+1)^(0+256),w
  6804     03A3  1903               	btfsc	3,2
  6805     03A4  2BB9               	goto	l6343
  6806                           
  6807                           ;app_device_keyboard.c: 413:             if (TimeDeltaMilliseconds >= keyboardIdleRate) 
      +                          {
  6808     03A5  0021               	movlb	1	; select bank1
  6809     03A6  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  6810     03A7  3A80               	xorlw	128
  6811     03A8  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6812     03A9  0022               	movlb	2	; select bank2
  6813     03AA  0839               	movf	(_keyboardIdleRate+1)^(0+256),w
  6814     03AB  3A80               	xorlw	128
  6815     03AC  0021               	movlb	1	; select bank1
  6816     03AD  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  6817     03AE  1D03               	skipz
  6818     03AF  2BB4               	goto	u6265
  6819     03B0  0022               	movlb	2	; select bank2
  6820     03B1  0838               	movf	_keyboardIdleRate^(0+256),w
  6821     03B2  0021               	movlb	1	; select bank1
  6822     03B3  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  6823     03B4                     u6265:
  6824     03B4  1C03               	skipc
  6825     03B5  2BB9               	goto	l6343
  6826                           
  6827                           ;app_device_keyboard.c: 414:                 needToSendNewReportPacket = 1;
  6828     03B6  0021               	movlb	1	; select bank1
  6829     03B7  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6830     03B8  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  6831     03B9                     l6343:
  6832                           
  6833                           ;app_device_keyboard.c: 420:         if (needToSendNewReportPacket == 1) {
  6834     03B9  0021               	movlb	1	; select bank1
  6835     03BA  0354               	decf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),w
  6836     03BB  1D03               	btfss	3,2
  6837     03BC  2BE4               	goto	l6351
  6838                           
  6839                           ;app_device_keyboard.c: 424:             oldInputReport = inputReport;
  6840     03BD  30A0               	movlw	160
  6841     03BE  0086               	movwf	6
  6842     03BF  3000               	movlw	0
  6843     03C0  0087               	movwf	7
  6844     03C1  30A0               	movlw	low _oldInputReport
  6845     03C2  0084               	movwf	4
  6846     03C3  3001               	movlw	high _oldInputReport
  6847     03C4  0085               	movwf	5
  6848     03C5  3008               	movlw	8
  6849     03C6  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6850     03C7                     u6280:
  6851     03C7  0016               	moviw fsr1++
  6852     03C8  001A               	movwi fsr0++
  6853     03C9  0BD1               	decfsz	??_APP_KeyboardTasks^(0+128),f
  6854     03CA  2BC7               	goto	u6280
  6855                           
  6856                           ;app_device_keyboard.c: 427:             keyboard.lastINTransmission = USBTransferOnePac
      +                          ket(1,1,(uint8_t*) & inputReport,sizeof (inputReport));
  6857     03CB  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  6858     03CC  0AA8               	incf	USBTransferOnePacket@dir^(0+128),f
  6859     03CD  30A0               	movlw	160
  6860     03CE  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  6861     03CF  3000               	movlw	0
  6862     03D0  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  6863     03D1  3008               	movlw	8
  6864     03D2  00AB               	movwf	USBTransferOnePacket@len^(0+128)
  6865     03D3  3001               	movlw	1
  6866     03D4  318B  23E1  3183   	fcall	_USBTransferOnePacket
  6867     03D7  302C               	movlw	44
  6868     03D8  0086               	movwf	6
  6869     03D9  3023               	movlw	35
  6870     03DA  0087               	movwf	7
  6871     03DB  0828               	movf	?_USBTransferOnePacket^(0+128),w
  6872     03DC  3FC0               	movwi [0]fsr1
  6873     03DD  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  6874     03DE  3FC1               	movwi [1]fsr1
  6875                           
  6876                           ;app_device_keyboard.c: 428:             OldSOFCount = LocalSOFCount;
  6877     03DF  0022               	movlb	2	; select bank2
  6878     03E0  0837               	movf	(_LocalSOFCount+1)^(0+256),w
  6879     03E1  00B5               	movwf	(_OldSOFCount+1)^(0+256)
  6880     03E2  0836               	movf	_LocalSOFCount^(0+256),w
  6881     03E3  00B4               	movwf	_OldSOFCount^(0+256)
  6882     03E4                     l6351:
  6883                           
  6884                           ;app_device_keyboard.c: 440:     if (((keyboard.lastOUTTransmission != 0x0000) && ((*(vo
      +                          latile uint8_t*)keyboard.lastOUTTransmission & 0x80) != 0x00)) == 0) {
  6885     03E4  302C               	movlw	44
  6886     03E5  0086               	movwf	6
  6887     03E6  3023               	movlw	35
  6888     03E7  0087               	movwf	7
  6889     03E8  3142               	addfsr 1,2
  6890     03E9  0016               	moviw fsr1++
  6891     03EA  0401               	iorwf	1,w
  6892     03EB  1903               	btfsc	3,2
  6893     03EC  2BFD               	goto	l6355
  6894     03ED  302C               	movlw	44
  6895     03EE  0086               	movwf	6
  6896     03EF  3023               	movlw	35
  6897     03F0  0087               	movwf	7
  6898     03F1  3142               	addfsr 1,2
  6899     03F2  3F40               	moviw [0]fsr1
  6900     03F3  0021               	movlb	1	; select bank1
  6901     03F4  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6902     03F5  3F41               	moviw [1]fsr1
  6903     03F6  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  6904     03F7  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6905     03F8  0086               	movwf	6
  6906     03F9  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  6907     03FA  0087               	movwf	7
  6908     03FB  1B81               	btfsc	1,7
  6909     03FC  0008               	return
  6910     03FD                     l6355:
  6911                           
  6912                           ;app_device_keyboard.c: 441:         APP_KeyboardProcessOutputReport();
  6913     03FD  319E  26E5  3183   	fcall	_APP_KeyboardProcessOutputReport
  6914                           
  6915                           ;app_device_keyboard.c: 442:         keyboard.lastOUTTransmission = USBTransferOnePacket
      +                          (1,0,(uint8_t*) & outputReport,sizeof (outputReport));
  6916     0400  0021               	movlb	1	; select bank1
  6917     0401  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  6918     0402  3020               	movlw	32
  6919     0403  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  6920     0404  3001               	movlw	1
  6921     0405  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  6922     0406  01AB               	clrf	USBTransferOnePacket@len^(0+128)
  6923     0407  0AAB               	incf	USBTransferOnePacket@len^(0+128),f
  6924     0408  3001               	movlw	1
  6925     0409  318B  23E1         	fcall	_USBTransferOnePacket
  6926     040B  302C               	movlw	44
  6927     040C  0086               	movwf	6
  6928     040D  3023               	movlw	35
  6929     040E  0087               	movwf	7
  6930     040F  3142               	addfsr 1,2
  6931     0410  0828               	movf	?_USBTransferOnePacket^(0+128),w
  6932     0411  3FC0               	movwi [0]fsr1
  6933     0412  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  6934     0413  3FC1               	movwi [1]fsr1
  6935     0414  0008               	return
  6936     0415                     __end_of_APP_KeyboardTasks:
  6937                           
  6938                           	psect	text29
  6939     1FEA                     __ptext29:	
  6940 ;; *************** function _memset *****************
  6941 ;; Defined at:
  6942 ;;		line 3 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memset.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  dest            1    wreg     PTR void 
  6945 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  6946 ;;  c               2    0[BANK1 ] int 
  6947 ;;  n               2    2[BANK1 ] unsigned int 
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;  dest            1    6[BANK1 ] PTR void 
  6950 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  6951 ;;  p               1    5[BANK1 ] PTR unsigned char 
  6952 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  6953 ;; Return value:  Size  Location     Type
  6954 ;;                  1    wreg      PTR void 
  6955 ;; Registers used:
  6956 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6957 ;; Tracked objects:
  6958 ;;		On entry : 1F/1
  6959 ;;		On exit  : 1F/1
  6960 ;;		Unchanged: 0/0
  6961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6962 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6963 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6964 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6965 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6966 ;;Total ram usage:        7 bytes
  6967 ;; Hardware stack levels used: 1
  6968 ;; Hardware stack levels required when called: 10
  6969 ;; This function calls:
  6970 ;;		Nothing
  6971 ;; This function is called by:
  6972 ;;		_APP_KeyboardTasks
  6973 ;; This function uses a non-reentrant model
  6974 ;;
  6975                           
  6976     1FEA                     _memset:	
  6977                           ;psect for function _memset
  6978                           
  6979                           
  6980                           ;incstack = 0
  6981                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6982                           ;memset@dest stored from wreg
  6983     1FEA  00AE               	movwf	memset@dest^(0+128)
  6984     1FEB  082E               	movf	memset@dest^(0+128),w
  6985     1FEC  00AD               	movwf	memset@p^(0+128)
  6986     1FED                     l5361:
  6987     1FED  3001               	movlw	1
  6988     1FEE  02AA               	subwf	memset@n^(0+128),f
  6989     1FEF  3000               	movlw	0
  6990     1FF0  3BAB               	subwfb	(memset@n+1)^(0+128),f
  6991     1FF1  0A2A               	incf	memset@n^(0+128),w
  6992     1FF2  1903               	btfsc	3,2
  6993     1FF3  0A2B               	incf	(memset@n+1)^(0+128),w
  6994     1FF4  1903               	btfsc	3,2
  6995     1FF5  0008               	return
  6996     1FF6  082D               	movf	memset@p^(0+128),w
  6997     1FF7  0086               	movwf	6
  6998     1FF8  0187               	clrf	7
  6999     1FF9  0828               	movf	memset@c^(0+128),w
  7000     1FFA  0081               	movwf	1
  7001     1FFB  3001               	movlw	1
  7002     1FFC  00AC               	movwf	??_memset^(0+128)
  7003     1FFD  082C               	movf	??_memset^(0+128),w
  7004     1FFE  07AD               	addwf	memset@p^(0+128),f
  7005     1FFF  2FED               	goto	l5361
  7006     2000                     __end_of_memset:
  7007                           
  7008                           	psect	text30
  7009     0BE1                     __ptext30:	
  7010 ;; *************** function _USBTransferOnePacket *****************
  7011 ;; Defined at:
  7012 ;;		line 999 in file "usb/usb_device.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;  ep              1    wreg     unsigned char 
  7015 ;;  dir             1    0[BANK1 ] unsigned char 
  7016 ;;  data            2    1[BANK1 ] PTR unsigned char 
  7017 ;;		 -> inputReport(8), outputReport(1), 
  7018 ;;  len             1    3[BANK1 ] unsigned char 
  7019 ;; Auto vars:     Size  Location     Type
  7020 ;;  ep              1    8[BANK1 ] unsigned char 
  7021 ;;  handle          2    9[BANK1 ] PTR volatile struct __BD
  7022 ;;		 -> RAM(4096), NULL(0), BDT(32), 
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  2    0[BANK1 ] PTR void 
  7025 ;; Registers used:
  7026 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7027 ;; Tracked objects:
  7028 ;;		On entry : 1F/1
  7029 ;;		On exit  : 1F/1
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7032 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;Total ram usage:       11 bytes
  7037 ;; Hardware stack levels used: 1
  7038 ;; Hardware stack levels required when called: 10
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_APP_KeyboardTasks
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046     0BE1                     _USBTransferOnePacket:	
  7047                           ;psect for function _USBTransferOnePacket
  7048                           
  7049                           
  7050                           ;incstack = 0
  7051                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  7052                           ;USBTransferOnePacket@ep stored from wreg
  7053     0BE1  00B0               	movwf	USBTransferOnePacket@ep^(0+128)
  7054                           
  7055                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
  7056     0BE2  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  7057     0BE3  1903               	btfsc	3,2
  7058     0BE4  2BED               	goto	l5331
  7059                           
  7060                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
  7061     0BE5  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7062     0BE6  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7063     0BE7  0086               	movwf	6
  7064     0BE8  0187               	clrf	7
  7065     0BE9  3F40               	moviw [0]fsr1
  7066     0BEA  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  7067     0BEB  3F41               	moviw [1]fsr1
  7068     0BEC  2BF5               	goto	L3
  7069     0BED                     l5331:	
  7070                           ;usb/usb_device.c: 1008:     }
  7071                           
  7072                           
  7073                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
  7074     0BED  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7075     0BEE  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7076     0BEF  0086               	movwf	6
  7077     0BF0  3001               	movlw	1	; select bank2/3
  7078     0BF1  0087               	movwf	7
  7079     0BF2  3F40               	moviw [0]fsr1
  7080     0BF3  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  7081     0BF4  3F41               	moviw [1]fsr1
  7082     0BF5                     L3:
  7083     0BF5  00B2               	movwf	(USBTransferOnePacket@handle+1)^(0+128)
  7084                           
  7085                           ;usb/usb_device.c: 1017:     if(handle == 0)
  7086     0BF6  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7087     0BF7  0432               	iorwf	(USBTransferOnePacket@handle+1)^(0+128),w
  7088     0BF8  1D03               	btfss	3,2
  7089     0BF9  2BFD               	goto	l5339
  7090                           
  7091                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
  7092     0BFA  01A8               	clrf	?_USBTransferOnePacket^(0+128)
  7093     0BFB  01A9               	clrf	(?_USBTransferOnePacket+1)^(0+128)
  7094     0BFC  0008               	return
  7095     0BFD                     l5339:
  7096                           
  7097                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
  7098     0BFD  30FF               	movlw	255
  7099     0BFE  0529               	andwf	USBTransferOnePacket@data^(0+128),w
  7100     0BFF  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7101     0C00  307F               	movlw	127
  7102     0C01  052A               	andwf	(USBTransferOnePacket@data+1)^(0+128),w
  7103     0C02  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  7104     0C03  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7105     0C04  0086               	movwf	6
  7106     0C05  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7107     0C06  0087               	movwf	7
  7108     0C07  3142               	addfsr 1,2
  7109     0C08  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7110     0C09  3FC0               	movwi [0]fsr1
  7111     0C0A  082D               	movf	(??_USBTransferOnePacket^(0+128)+1),w
  7112     0C0B  3FC1               	movwi [1]fsr1
  7113                           
  7114                           ;usb/usb_device.c: 1034:     handle->CNT = len;
  7115     0C0C  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7116     0C0D  3E01               	addlw	1
  7117     0C0E  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7118     0C0F  3000               	movlw	0
  7119     0C10  3D32               	addwfc	(USBTransferOnePacket@handle+1)^(0+128),w
  7120     0C11  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  7121     0C12  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7122     0C13  0086               	movwf	6
  7123     0C14  082D               	movf	(??_USBTransferOnePacket+1)^(0+128),w
  7124     0C15  0087               	movwf	7
  7125     0C16  082B               	movf	USBTransferOnePacket@len^(0+128),w
  7126     0C17  0081               	movwf	1
  7127                           
  7128                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
  7129     0C18  3040               	movlw	64
  7130     0C19  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7131     0C1A  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7132     0C1B  0086               	movwf	6
  7133     0C1C  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7134     0C1D  0087               	movwf	7
  7135     0C1E  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7136     0C1F  0581               	andwf	1,f
  7137                           
  7138                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
  7139     0C20  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7140     0C21  0086               	movwf	6
  7141     0C22  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7142     0C23  0087               	movwf	7
  7143     0C24  1581               	bsf	1,3
  7144                           
  7145                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
  7146     0C25  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7147     0C26  0086               	movwf	6
  7148     0C27  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7149     0C28  0087               	movwf	7
  7150     0C29  1781               	bsf	1,7
  7151                           
  7152                           ;usb/usb_device.c: 1040:     if(dir != 0)
  7153     0C2A  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  7154     0C2B  1903               	btfsc	3,2
  7155     0C2C  2C44               	goto	l5349
  7156                           
  7157                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
  7158     0C2D  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7159     0C2E  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7160     0C2F  0086               	movwf	6
  7161     0C30  0187               	clrf	7
  7162     0C31  3F40               	moviw [0]fsr1
  7163     0C32  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7164     0C33  3F41               	moviw [1]fsr1
  7165     0C34  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  7166     0C35  3004               	movlw	4
  7167     0C36  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  7168     0C37  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  7169     0C38  3000               	movlw	0
  7170     0C39  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  7171     0C3A  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  7172     0C3B  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7173     0C3C  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7174     0C3D  0086               	movwf	6
  7175     0C3E  0187               	clrf	7
  7176     0C3F  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  7177     0C40  3FC0               	movwi [0]fsr1
  7178     0C41  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  7179     0C42  3FC1               	movwi [1]fsr1
  7180                           
  7181                           ;usb/usb_device.c: 1044:     }
  7182     0C43  2C5C               	goto	l5351
  7183     0C44                     l5349:
  7184                           
  7185                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
  7186     0C44  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7187     0C45  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7188     0C46  0086               	movwf	6
  7189     0C47  3001               	movlw	1	; select bank2/3
  7190     0C48  0087               	movwf	7
  7191     0C49  3F40               	moviw [0]fsr1
  7192     0C4A  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7193     0C4B  3F41               	moviw [1]fsr1
  7194     0C4C  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  7195     0C4D  3004               	movlw	4
  7196     0C4E  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  7197     0C4F  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  7198     0C50  3000               	movlw	0
  7199     0C51  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  7200     0C52  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  7201     0C53  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7202     0C54  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7203     0C55  0086               	movwf	6
  7204     0C56  3001               	movlw	1	; select bank2/3
  7205     0C57  0087               	movwf	7
  7206     0C58  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  7207     0C59  3FC0               	movwi [0]fsr1
  7208     0C5A  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  7209     0C5B  3FC1               	movwi [1]fsr1
  7210     0C5C                     l5351:
  7211                           
  7212                           ;usb/usb_device.c: 1050:     return (void*)handle;
  7213     0C5C  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7214     0C5D  00A9               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  7215     0C5E  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7216     0C5F  00A8               	movwf	?_USBTransferOnePacket^(0+128)
  7217     0C60  0008               	return
  7218     0C61                     __end_of_USBTransferOnePacket:
  7219                           
  7220                           	psect	text31
  7221     1668                     __ptext31:	
  7222 ;; *************** function _GenericQueue_CopyToArray *****************
  7223 ;; Defined at:
  7224 ;;		line 63 in file "generic_queue.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;  q               2   24[BANK1 ] PTR struct .
  7227 ;;		 -> keyboard(101), 
  7228 ;;  array           1   26[BANK1 ] PTR void 
  7229 ;;		 -> inputReport(8), 
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;  count           1   32[BANK1 ] unsigned char 
  7232 ;;  index           1   31[BANK1 ] unsigned char 
  7233 ;; Return value:  Size  Location     Type
  7234 ;;                  1    wreg      void 
  7235 ;; Registers used:
  7236 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7237 ;; Tracked objects:
  7238 ;;		On entry : 1F/1
  7239 ;;		On exit  : 1F/1
  7240 ;;		Unchanged: 0/0
  7241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7242 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;Total ram usage:        9 bytes
  7247 ;; Hardware stack levels used: 1
  7248 ;; Hardware stack levels required when called: 11
  7249 ;; This function calls:
  7250 ;;		___awmod
  7251 ;;		___bmul
  7252 ;;		___wmul
  7253 ;;		_memcpy
  7254 ;; This function is called by:
  7255 ;;		_APP_KeyboardTasks
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259     1668                     _GenericQueue_CopyToArray:	
  7260                           ;psect for function _GenericQueue_CopyToArray
  7261                           
  7262                           
  7263                           ;generic_queue.c: 64:     uint8_t index = q->front;
  7264                           
  7265                           ;incstack = 0
  7266                           ; Regs used in _GenericQueue_CopyToArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7267     1668  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7268     1669  3E5C               	addlw	92
  7269     166A  0086               	movwf	6
  7270     166B  3000               	movlw	0
  7271     166C  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7272     166D  0087               	movwf	7
  7273     166E  0801               	movf	1,w
  7274     166F  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  7275                           
  7276                           ;generic_queue.c: 65:     uint8_t count = 0;
  7277     1670  01C8               	clrf	GenericQueue_CopyToArray@count^(0+128)
  7278     1671                     l1136:	
  7279                           ;generic_queue.c: 72:     }
  7280                           
  7281                           ;generic_queue.c: 66:     while (count < q->size) {
  7282                           
  7283                           
  7284                           ;generic_queue.c: 66:     while (count < q->size) {
  7285     1671  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7286     1672  3E5E               	addlw	94
  7287     1673  0086               	movwf	6
  7288     1674  3000               	movlw	0
  7289     1675  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7290     1676  0087               	movwf	7
  7291     1677  0801               	movf	1,w
  7292     1678  0248               	subwf	GenericQueue_CopyToArray@count^(0+128),w
  7293     1679  1803               	btfsc	3,0
  7294     167A  0008               	return
  7295                           
  7296                           ;generic_queue.c: 67:         memcpy((char*)array + (count * q->element_size),
  7297     167B  0848               	movf	GenericQueue_CopyToArray@count^(0+128),w
  7298     167C  00A8               	movwf	___bmul@multiplicand^(0+128)
  7299     167D  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7300     167E  3E5A               	addlw	90
  7301     167F  0086               	movwf	6
  7302     1680  3000               	movlw	0
  7303     1681  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7304     1682  0087               	movwf	7
  7305     1683  0801               	movf	1,w
  7306     1684  319F  2765  3196   	fcall	___bmul
  7307     1687  0742               	addwf	GenericQueue_CopyToArray@array^(0+128),w
  7308     1688  00B5               	movwf	memcpy@d1^(0+128)
  7309     1689  01B6               	clrf	(memcpy@d1+1)^(0+128)
  7310     168A  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  7311     168B  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  7312     168C  01C4               	clrf	(??_GenericQueue_CopyToArray^(0+128)+1)
  7313     168D  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  7314     168E  00AF               	movwf	___wmul@multiplier^(0+128)
  7315     168F  0844               	movf	(??_GenericQueue_CopyToArray+1)^(0+128),w
  7316     1690  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  7317     1691  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7318     1692  3E5A               	addlw	90
  7319     1693  0086               	movwf	6
  7320     1694  3000               	movlw	0
  7321     1695  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7322     1696  0087               	movwf	7
  7323     1697  3F40               	moviw [0]fsr1
  7324     1698  00B1               	movwf	___wmul@multiplicand^(0+128)
  7325     1699  3F41               	moviw [1]fsr1
  7326     169A  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  7327     169B  3191  212D  3196   	fcall	___wmul
  7328     169E  082F               	movf	?___wmul^(0+128),w
  7329     169F  0740               	addwf	GenericQueue_CopyToArray@q^(0+128),w
  7330     16A0  00C5               	movwf	(??_GenericQueue_CopyToArray+2)^(0+128)
  7331     16A1  0830               	movf	(?___wmul+1)^(0+128),w
  7332     16A2  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7333     16A3  00C6               	movwf	(??_GenericQueue_CopyToArray+3)^(0+128)
  7334     16A4  0845               	movf	(??_GenericQueue_CopyToArray+2)^(0+128),w
  7335     16A5  00B7               	movwf	memcpy@s1^(0+128)
  7336     16A6  0846               	movf	(??_GenericQueue_CopyToArray+3)^(0+128),w
  7337     16A7  00B8               	movwf	(memcpy@s1+1)^(0+128)
  7338     16A8  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7339     16A9  3E5A               	addlw	90
  7340     16AA  0086               	movwf	6
  7341     16AB  3000               	movlw	0
  7342     16AC  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7343     16AD  0087               	movwf	7
  7344     16AE  3F40               	moviw [0]fsr1
  7345     16AF  00B9               	movwf	memcpy@n^(0+128)
  7346     16B0  3F41               	moviw [1]fsr1
  7347     16B1  00BA               	movwf	(memcpy@n+1)^(0+128)
  7348     16B2  3193  2301  3196   	fcall	_memcpy
  7349                           
  7350                           ;generic_queue.c: 70:         index = (index + 1) % 15;
  7351     16B5  300F               	movlw	15
  7352     16B6  00A8               	movwf	___awmod@divisor^(0+128)
  7353     16B7  3000               	movlw	0
  7354     16B8  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  7355     16B9  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  7356     16BA  3E01               	addlw	1
  7357     16BB  00AA               	movwf	___awmod@dividend^(0+128)
  7358     16BC  3000               	movlw	0
  7359     16BD  1803               	skipnc
  7360     16BE  3001               	movlw	1
  7361     16BF  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  7362     16C0  3194  24D5  3196   	fcall	___awmod
  7363     16C3  0828               	movf	?___awmod^(0+128),w
  7364     16C4  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  7365                           
  7366                           ;generic_queue.c: 71:         count++;
  7367     16C5  3001               	movlw	1
  7368     16C6  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  7369     16C7  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  7370     16C8  07C8               	addwf	GenericQueue_CopyToArray@count^(0+128),f
  7371     16C9  2E71               	goto	l1136
  7372     16CA                     __end_of_GenericQueue_CopyToArray:
  7373                           
  7374                           	psect	text32
  7375     1F65                     __ptext32:	
  7376 ;; *************** function ___bmul *****************
  7377 ;; Defined at:
  7378 ;;		line 4 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/Umul8.c"
  7379 ;; Parameters:    Size  Location     Type
  7380 ;;  multiplier      1    wreg     unsigned char 
  7381 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  7382 ;; Auto vars:     Size  Location     Type
  7383 ;;  multiplier      1    3[BANK1 ] unsigned char 
  7384 ;;  product         1    2[BANK1 ] unsigned char 
  7385 ;; Return value:  Size  Location     Type
  7386 ;;                  1    wreg      unsigned char 
  7387 ;; Registers used:
  7388 ;;		wreg, status,2, status,0
  7389 ;; Tracked objects:
  7390 ;;		On entry : 1F/1
  7391 ;;		On exit  : 1F/1
  7392 ;;		Unchanged: 0/0
  7393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7394 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7395 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7396 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7397 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7398 ;;Total ram usage:        4 bytes
  7399 ;; Hardware stack levels used: 1
  7400 ;; Hardware stack levels required when called: 10
  7401 ;; This function calls:
  7402 ;;		Nothing
  7403 ;; This function is called by:
  7404 ;;		_GenericQueue_CopyToArray
  7405 ;;		_Log_UtilityConvertByteToHex
  7406 ;; This function uses a non-reentrant model
  7407 ;;
  7408                           
  7409     1F65                     ___bmul:	
  7410                           ;psect for function ___bmul
  7411                           
  7412                           
  7413                           ;incstack = 0
  7414                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7415                           ;___bmul@multiplier stored from wreg
  7416     1F65  00AB               	movwf	___bmul@multiplier^(0+128)
  7417     1F66  01AA               	clrf	___bmul@product^(0+128)
  7418     1F67                     l5019:
  7419     1F67  1C2B               	btfss	___bmul@multiplier^(0+128),0
  7420     1F68  2F6D               	goto	l5023
  7421     1F69  0828               	movf	___bmul@multiplicand^(0+128),w
  7422     1F6A  00A9               	movwf	??___bmul^(0+128)
  7423     1F6B  0829               	movf	??___bmul^(0+128),w
  7424     1F6C  07AA               	addwf	___bmul@product^(0+128),f
  7425     1F6D                     l5023:
  7426     1F6D  1003               	clrc
  7427     1F6E  0DA8               	rlf	___bmul@multiplicand^(0+128),f
  7428     1F6F  1003               	clrc
  7429     1F70  0CAB               	rrf	___bmul@multiplier^(0+128),f
  7430     1F71  082B               	movf	___bmul@multiplier^(0+128),w
  7431     1F72  1D03               	btfss	3,2
  7432     1F73  2F67               	goto	l5019
  7433     1F74  082A               	movf	___bmul@product^(0+128),w
  7434     1F75  0008               	return
  7435     1F76                     __end_of___bmul:
  7436                           
  7437                           	psect	text33
  7438     0087                     __ptext33:	
  7439 ;; *************** function _APP_KeyboardUpdateState *****************
  7440 ;; Defined at:
  7441 ;;		line 448 in file "app_device_keyboard.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  7444 ;;		 -> main@scanCode(3), NULL(0), 
  7445 ;; Auto vars:     Size  Location     Type
  7446 ;;  scanCode        1   40[BANK1 ] PTR const struct PS2Scan
  7447 ;;		 -> main@scanCode(3), NULL(0), 
  7448 ;;  usbHidCode      1   39[BANK1 ] unsigned char 
  7449 ;;  leds            1   35[BANK1 ] unsigned char 
  7450 ;;  usbHidCode      1   37[BANK1 ] unsigned char 
  7451 ;;  usbHidCode      1   38[BANK1 ] unsigned char 
  7452 ;;  usbHidCode      1   36[BANK1 ] unsigned char 
  7453 ;; Return value:  Size  Location     Type
  7454 ;;                  1    wreg      void 
  7455 ;; Registers used:
  7456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7457 ;; Tracked objects:
  7458 ;;		On entry : 1F/1
  7459 ;;		On exit  : 1C/0
  7460 ;;		Unchanged: 0/0
  7461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7463 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7464 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;Total ram usage:        8 bytes
  7467 ;; Hardware stack levels used: 1
  7468 ;; Hardware stack levels required when called: 12
  7469 ;; This function calls:
  7470 ;;		_GenericQueue_Contains
  7471 ;;		_GenericQueue_Enqueue
  7472 ;;		_GenericQueue_Remove
  7473 ;;		_PS2Keyboard_GetLastCommand
  7474 ;;		_PS2Keyboard_SendCommand
  7475 ;;		_PS2USB_ScanCodeToUSBHID
  7476 ;; This function is called by:
  7477 ;;		_APP_KeyboardTasks
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481     0087                     _APP_KeyboardUpdateState:	
  7482                           ;psect for function _APP_KeyboardUpdateState
  7483                           
  7484                           
  7485                           ;incstack = 0
  7486                           ; Regs used in _APP_KeyboardUpdateState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7487                           ;APP_KeyboardUpdateState@scanCode stored from wreg
  7488     0087  00D0               	movwf	APP_KeyboardUpdateState@scanCode^(0+128)
  7489                           
  7490                           ;app_device_keyboard.c: 449:     if (scanCode != ((void*)0)) {
  7491     0088  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7492     0089  1903               	btfsc	3,2
  7493     008A  0008               	return
  7494                           
  7495                           ;app_device_keyboard.c: 450:         if (scanCode->isExtend) {
  7496     008B  0A50               	incf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7497     008C  0086               	movwf	6
  7498     008D  0187               	clrf	7
  7499     008E  0801               	movf	1,w
  7500     008F  1903               	btfsc	3,2
  7501     0090  28F6               	goto	l6217
  7502                           
  7503                           ;app_device_keyboard.c: 451:             if (scanCode->isBreak) {
  7504     0091  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7505     0092  3E02               	addlw	2
  7506     0093  0086               	movwf	6
  7507     0094  0187               	clrf	7
  7508     0095  0801               	movf	1,w
  7509     0096  1903               	btfsc	3,2
  7510     0097  28C0               	goto	l6205
  7511                           
  7512                           ;app_device_keyboard.c: 452:                 if (scanCode->value == 0X14) {
  7513     0098  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7514     0099  0086               	movwf	6
  7515     009A  0187               	clrf	7
  7516     009B  3014               	movlw	20
  7517     009C  0601               	xorwf	1,w
  7518     009D  1D03               	btfss	3,2
  7519     009E  28A5               	goto	l6199
  7520                           
  7521                           ;app_device_keyboard.c: 453:                     keyboard.modifiers.bits.rightControl = 
      +                          0;
  7522     009F  308F               	movlw	143
  7523     00A0  0086               	movwf	6
  7524     00A1  3023               	movlw	35
  7525     00A2  0087               	movwf	7
  7526     00A3  1201               	bcf	1,4
  7527                           
  7528                           ;app_device_keyboard.c: 454:                 } else if (scanCode->value == 0x11) {
  7529     00A4  0008               	return
  7530     00A5                     l6199:
  7531     00A5  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7532     00A6  0086               	movwf	6
  7533     00A7  0187               	clrf	7
  7534     00A8  3011               	movlw	17
  7535     00A9  0601               	xorwf	1,w
  7536     00AA  1D03               	btfss	3,2
  7537     00AB  28B2               	goto	l6203
  7538                           
  7539                           ;app_device_keyboard.c: 455:                     keyboard.modifiers.bits.rightAlt = 0;
  7540     00AC  308F               	movlw	143
  7541     00AD  0086               	movwf	6
  7542     00AE  3023               	movlw	35
  7543     00AF  0087               	movwf	7
  7544     00B0  1301               	bcf	1,6
  7545                           
  7546                           ;app_device_keyboard.c: 456:                 } else {
  7547     00B1  0008               	return
  7548     00B2                     l6203:
  7549                           
  7550                           ;app_device_keyboard.c: 457:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7551     00B2  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7552     00B3  3191  21F2  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7553     00B6  00CC               	movwf	APP_KeyboardUpdateState@usbHidCode^(0+128)
  7554                           
  7555                           ;app_device_keyboard.c: 458:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  7556     00B7  3030               	movlw	48
  7557     00B8  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  7558     00B9  3023               	movlw	35
  7559     00BA  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  7560     00BB  30CC               	movlw	(low (APP_KeyboardUpdateState@usbHidCode| 0))& (0+255)
  7561     00BC  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  7562     00BD  3186  2609         	fcall	_GenericQueue_Remove
  7563                           
  7564                           ;app_device_keyboard.c: 460:             } else {
  7565     00BF  0008               	return
  7566     00C0                     l6205:
  7567                           
  7568                           ;app_device_keyboard.c: 461:                 if (scanCode->value == 0X14) {
  7569     00C0  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7570     00C1  0086               	movwf	6
  7571     00C2  0187               	clrf	7
  7572     00C3  3014               	movlw	20
  7573     00C4  0601               	xorwf	1,w
  7574     00C5  1D03               	btfss	3,2
  7575     00C6  28CD               	goto	l6209
  7576                           
  7577                           ;app_device_keyboard.c: 462:                     keyboard.modifiers.bits.rightControl = 
      +                          1;
  7578     00C7  308F               	movlw	143
  7579     00C8  0086               	movwf	6
  7580     00C9  3023               	movlw	35
  7581     00CA  0087               	movwf	7
  7582     00CB  1601               	bsf	1,4
  7583                           
  7584                           ;app_device_keyboard.c: 463:                 } else if (scanCode->value == 0x11) {
  7585     00CC  0008               	return
  7586     00CD                     l6209:
  7587     00CD  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7588     00CE  0086               	movwf	6
  7589     00CF  0187               	clrf	7
  7590     00D0  3011               	movlw	17
  7591     00D1  0601               	xorwf	1,w
  7592     00D2  1D03               	btfss	3,2
  7593     00D3  28DA               	goto	l6213
  7594                           
  7595                           ;app_device_keyboard.c: 464:                     keyboard.modifiers.bits.rightAlt = 1;
  7596     00D4  308F               	movlw	143
  7597     00D5  0086               	movwf	6
  7598     00D6  3023               	movlw	35
  7599     00D7  0087               	movwf	7
  7600     00D8  1701               	bsf	1,6
  7601                           
  7602                           ;app_device_keyboard.c: 465:                 } else {
  7603     00D9  0008               	return
  7604     00DA                     l6213:
  7605                           
  7606                           ;app_device_keyboard.c: 466:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7607     00DA  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7608     00DB  3191  21F2  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7609     00DE  00CE               	movwf	APP_KeyboardUpdateState@usbHidCode_2855^(0+128)
  7610                           
  7611                           ;app_device_keyboard.c: 467:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  7612     00DF  3030               	movlw	48
  7613     00E0  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  7614     00E1  3023               	movlw	35
  7615     00E2  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  7616     00E3  30CE               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2855| 0))& (0+255)
  7617     00E4  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  7618     00E5  3196  2606  3180   	fcall	_GenericQueue_Contains
  7619     00E8  3A00               	xorlw	0
  7620     00E9  1D03               	skipz
  7621     00EA  0008               	return
  7622                           
  7623                           ;app_device_keyboard.c: 468:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  7624     00EB  3030               	movlw	48
  7625     00EC  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  7626     00ED  3023               	movlw	35
  7627     00EE  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  7628     00EF  30CE               	movlw	low APP_KeyboardUpdateState@usbHidCode_2855
  7629     00F0  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  7630     00F1  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2855
  7631     00F2  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  7632     00F3  3188  2052         	fcall	_GenericQueue_Enqueue
  7633     00F5  0008               	return
  7634     00F6                     l6217:
  7635                           
  7636                           ;app_device_keyboard.c: 473:             if (scanCode->isBreak) {
  7637     00F6  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7638     00F7  3E02               	addlw	2
  7639     00F8  0086               	movwf	6
  7640     00F9  0187               	clrf	7
  7641     00FA  0801               	movf	1,w
  7642     00FB  1903               	btfsc	3,2
  7643     00FC  294C               	goto	l6241
  7644                           
  7645                           ;app_device_keyboard.c: 475:                 if (scanCode->value == 0x12) {
  7646     00FD  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7647     00FE  0086               	movwf	6
  7648     00FF  0187               	clrf	7
  7649     0100  3012               	movlw	18
  7650     0101  0601               	xorwf	1,w
  7651     0102  1D03               	btfss	3,2
  7652     0103  290A               	goto	l6223
  7653                           
  7654                           ;app_device_keyboard.c: 476:                     keyboard.modifiers.bits.leftShift = 0;
  7655     0104  308F               	movlw	143
  7656     0105  0086               	movwf	6
  7657     0106  3023               	movlw	35
  7658     0107  0087               	movwf	7
  7659     0108  1081               	bcf	1,1
  7660                           
  7661                           ;app_device_keyboard.c: 477:                 } else if (scanCode->value == 0X14) {
  7662     0109  0008               	return
  7663     010A                     l6223:
  7664     010A  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7665     010B  0086               	movwf	6
  7666     010C  0187               	clrf	7
  7667     010D  3014               	movlw	20
  7668     010E  0601               	xorwf	1,w
  7669     010F  1D03               	btfss	3,2
  7670     0110  2917               	goto	l6227
  7671                           
  7672                           ;app_device_keyboard.c: 478:                     keyboard.modifiers.bits.leftControl = 0
      +                          ;
  7673     0111  308F               	movlw	143
  7674     0112  0086               	movwf	6
  7675     0113  3023               	movlw	35
  7676     0114  0087               	movwf	7
  7677     0115  1001               	bcf	1,0
  7678                           
  7679                           ;app_device_keyboard.c: 479:                 } else if (scanCode->value == 0x11) {
  7680     0116  0008               	return
  7681     0117                     l6227:
  7682     0117  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7683     0118  0086               	movwf	6
  7684     0119  0187               	clrf	7
  7685     011A  3011               	movlw	17
  7686     011B  0601               	xorwf	1,w
  7687     011C  1D03               	btfss	3,2
  7688     011D  2924               	goto	l6231
  7689                           
  7690                           ;app_device_keyboard.c: 480:                     keyboard.modifiers.bits.leftAlt = 0;
  7691     011E  308F               	movlw	143
  7692     011F  0086               	movwf	6
  7693     0120  3023               	movlw	35
  7694     0121  0087               	movwf	7
  7695     0122  1101               	bcf	1,2
  7696                           
  7697                           ;app_device_keyboard.c: 481:                 } else if (scanCode->value == 0x59) {
  7698     0123  0008               	return
  7699     0124                     l6231:
  7700     0124  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7701     0125  0086               	movwf	6
  7702     0126  0187               	clrf	7
  7703     0127  3059               	movlw	89
  7704     0128  0601               	xorwf	1,w
  7705     0129  1D03               	btfss	3,2
  7706     012A  2931               	goto	l6235
  7707                           
  7708                           ;app_device_keyboard.c: 482:                     keyboard.modifiers.bits.rightShift = 0;
  7709     012B  308F               	movlw	143
  7710     012C  0086               	movwf	6
  7711     012D  3023               	movlw	35
  7712     012E  0087               	movwf	7
  7713     012F  1281               	bcf	1,5
  7714                           
  7715                           ;app_device_keyboard.c: 483:                 } else if (scanCode->value == 0x58) {
  7716     0130  0008               	return
  7717     0131                     l6235:
  7718     0131  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7719     0132  0086               	movwf	6
  7720     0133  0187               	clrf	7
  7721     0134  3058               	movlw	88
  7722     0135  0601               	xorwf	1,w
  7723     0136  1D03               	btfss	3,2
  7724     0137  293E               	goto	l6239
  7725                           
  7726                           ;app_device_keyboard.c: 484:                     keyboard.modifiers.bits.leftGUI = 0;
  7727     0138  308F               	movlw	143
  7728     0139  0086               	movwf	6
  7729     013A  3023               	movlw	35
  7730     013B  0087               	movwf	7
  7731     013C  1181               	bcf	1,3
  7732                           
  7733                           ;app_device_keyboard.c: 485:                 } else {
  7734     013D  0008               	return
  7735     013E                     l6239:
  7736                           
  7737                           ;app_device_keyboard.c: 486:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7738     013E  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7739     013F  3191  21F2  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7740     0142  00CD               	movwf	APP_KeyboardUpdateState@usbHidCode_2856^(0+128)
  7741                           
  7742                           ;app_device_keyboard.c: 487:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  7743     0143  3030               	movlw	48
  7744     0144  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  7745     0145  3023               	movlw	35
  7746     0146  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  7747     0147  30CD               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2856| 0))& (0+255)
  7748     0148  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  7749     0149  3186  2609         	fcall	_GenericQueue_Remove
  7750     014B  0008               	return
  7751     014C                     l6241:
  7752     014C  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7753     014D  0086               	movwf	6
  7754     014E  0187               	clrf	7
  7755     014F  30FA               	movlw	250
  7756     0150  0601               	xorwf	1,w
  7757     0151  1D03               	btfss	3,2
  7758     0152  297B               	goto	l6249
  7759                           
  7760                           ;app_device_keyboard.c: 490:                 if (PS2Keyboard_GetLastCommand() == 0xED) {
  7761     0153  319E  266B  3180   	fcall	_PS2Keyboard_GetLastCommand
  7762     0156  3AED               	xorlw	237
  7763     0157  1D03               	skipz
  7764     0158  0008               	return
  7765                           
  7766                           ;app_device_keyboard.c: 491:                     uint8_t leds = (uint8_t)(keyboard.leds.
      +                          bits.numLock << 1)
  7767     0159  3090               	movlw	144
  7768     015A  0086               	movwf	6
  7769     015B  3023               	movlw	35
  7770     015C  0087               	movwf	7
  7771     015D  0C01               	rrf	1,w
  7772     015E  0C89               	rrf	9,f
  7773     015F  3901               	andlw	1
  7774     0160  0021               	movlb	1	; select bank1
  7775     0161  00C9               	movwf	??_APP_KeyboardUpdateState^(0+128)
  7776     0162  3090               	movlw	144
  7777     0163  0086               	movwf	6
  7778     0164  3023               	movlw	35
  7779     0165  0087               	movwf	7
  7780     0166  0C01               	rrf	1,w
  7781     0167  3901               	andlw	1
  7782     0168  00CA               	movwf	(??_APP_KeyboardUpdateState+1)^(0+128)
  7783     0169  3002               	movlw	2
  7784     016A                     u6045:
  7785     016A  35CA               	lslf	(??_APP_KeyboardUpdateState+1)^(0+128),f
  7786     016B  0B89               	decfsz	9,f
  7787     016C  296A               	goto	u6045
  7788     016D  3090               	movlw	144
  7789     016E  0086               	movwf	6
  7790     016F  3023               	movlw	35
  7791     0170  0087               	movwf	7
  7792     0171  0801               	movf	1,w
  7793     0172  3901               	andlw	1
  7794     0173  0709               	addwf	9,w
  7795     0174  044A               	iorwf	(??_APP_KeyboardUpdateState+1)^(0+128),w
  7796     0175  0449               	iorwf	??_APP_KeyboardUpdateState^(0+128),w
  7797     0176  00CB               	movwf	APP_KeyboardUpdateState@leds^(0+128)
  7798                           
  7799                           ;app_device_keyboard.c: 494:                     PS2Keyboard_SendCommand(leds);
  7800     0177  084B               	movf	APP_KeyboardUpdateState@leds^(0+128),w
  7801     0178  3191  217E         	fcall	_PS2Keyboard_SendCommand
  7802     017A  0008               	return
  7803     017B                     l6249:
  7804     017B  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7805     017C  0086               	movwf	6
  7806     017D  0187               	clrf	7
  7807     017E  30FC               	movlw	252
  7808     017F  0601               	xorwf	1,w
  7809     0180  1903               	btfsc	3,2
  7810     0181  0008               	return
  7811     0182  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7812     0183  0086               	movwf	6
  7813     0184  0187               	clrf	7
  7814     0185  0A01               	incf	1,w
  7815     0186  1903               	btfsc	3,2
  7816     0187  0008               	return
  7817     0188  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7818     0189  0086               	movwf	6
  7819     018A  0187               	clrf	7
  7820     018B  30AA               	movlw	170
  7821     018C  0601               	xorwf	1,w
  7822     018D  1903               	btfsc	3,2
  7823     018E  0008               	return
  7824                           
  7825                           ;app_device_keyboard.c: 502:                 if (scanCode->value == 0x12) {
  7826     018F  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7827     0190  0086               	movwf	6
  7828     0191  0187               	clrf	7
  7829     0192  3012               	movlw	18
  7830     0193  0601               	xorwf	1,w
  7831     0194  1D03               	btfss	3,2
  7832     0195  299C               	goto	l6259
  7833                           
  7834                           ;app_device_keyboard.c: 503:                     keyboard.modifiers.bits.leftShift = 1;
  7835     0196  308F               	movlw	143
  7836     0197  0086               	movwf	6
  7837     0198  3023               	movlw	35
  7838     0199  0087               	movwf	7
  7839     019A  1481               	bsf	1,1
  7840                           
  7841                           ;app_device_keyboard.c: 504:                 } else if (scanCode->value == 0X14) {
  7842     019B  0008               	return
  7843     019C                     l6259:
  7844     019C  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7845     019D  0086               	movwf	6
  7846     019E  0187               	clrf	7
  7847     019F  3014               	movlw	20
  7848     01A0  0601               	xorwf	1,w
  7849     01A1  1D03               	btfss	3,2
  7850     01A2  29A9               	goto	l6263
  7851                           
  7852                           ;app_device_keyboard.c: 505:                     keyboard.modifiers.bits.leftControl = 1
      +                          ;
  7853     01A3  308F               	movlw	143
  7854     01A4  0086               	movwf	6
  7855     01A5  3023               	movlw	35
  7856     01A6  0087               	movwf	7
  7857     01A7  1401               	bsf	1,0
  7858                           
  7859                           ;app_device_keyboard.c: 506:                 } else if (scanCode->value == 0x11) {
  7860     01A8  0008               	return
  7861     01A9                     l6263:
  7862     01A9  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7863     01AA  0086               	movwf	6
  7864     01AB  0187               	clrf	7
  7865     01AC  3011               	movlw	17
  7866     01AD  0601               	xorwf	1,w
  7867     01AE  1D03               	btfss	3,2
  7868     01AF  29B6               	goto	l6267
  7869                           
  7870                           ;app_device_keyboard.c: 507:                     keyboard.modifiers.bits.leftAlt = 1;
  7871     01B0  308F               	movlw	143
  7872     01B1  0086               	movwf	6
  7873     01B2  3023               	movlw	35
  7874     01B3  0087               	movwf	7
  7875     01B4  1501               	bsf	1,2
  7876                           
  7877                           ;app_device_keyboard.c: 508:                 } else if (scanCode->value == 0x59) {
  7878     01B5  0008               	return
  7879     01B6                     l6267:
  7880     01B6  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7881     01B7  0086               	movwf	6
  7882     01B8  0187               	clrf	7
  7883     01B9  3059               	movlw	89
  7884     01BA  0601               	xorwf	1,w
  7885     01BB  1D03               	btfss	3,2
  7886     01BC  29C3               	goto	l6271
  7887                           
  7888                           ;app_device_keyboard.c: 509:                     keyboard.modifiers.bits.rightShift = 1;
  7889     01BD  308F               	movlw	143
  7890     01BE  0086               	movwf	6
  7891     01BF  3023               	movlw	35
  7892     01C0  0087               	movwf	7
  7893     01C1  1681               	bsf	1,5
  7894                           
  7895                           ;app_device_keyboard.c: 510:                 } else if (scanCode->value == 0x58) {
  7896     01C2  0008               	return
  7897     01C3                     l6271:
  7898     01C3  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7899     01C4  0086               	movwf	6
  7900     01C5  0187               	clrf	7
  7901     01C6  3058               	movlw	88
  7902     01C7  0601               	xorwf	1,w
  7903     01C8  1D03               	btfss	3,2
  7904     01C9  29D0               	goto	l6275
  7905                           
  7906                           ;app_device_keyboard.c: 511:                     keyboard.modifiers.bits.leftGUI = 1;
  7907     01CA  308F               	movlw	143
  7908     01CB  0086               	movwf	6
  7909     01CC  3023               	movlw	35
  7910     01CD  0087               	movwf	7
  7911     01CE  1581               	bsf	1,3
  7912                           
  7913                           ;app_device_keyboard.c: 512:                 } else {
  7914     01CF  0008               	return
  7915     01D0                     l6275:
  7916                           
  7917                           ;app_device_keyboard.c: 513:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7918     01D0  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7919     01D1  3191  21F2  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7920     01D4  00CF               	movwf	APP_KeyboardUpdateState@usbHidCode_2864^(0+128)
  7921                           
  7922                           ;app_device_keyboard.c: 514:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  7923     01D5  3030               	movlw	48
  7924     01D6  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  7925     01D7  3023               	movlw	35
  7926     01D8  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  7927     01D9  30CF               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2864| 0))& (0+255)
  7928     01DA  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  7929     01DB  3196  2606  3180   	fcall	_GenericQueue_Contains
  7930     01DE  3A00               	xorlw	0
  7931     01DF  1D03               	skipz
  7932     01E0  0008               	return
  7933                           
  7934                           ;app_device_keyboard.c: 515:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  7935     01E1  3030               	movlw	48
  7936     01E2  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  7937     01E3  3023               	movlw	35
  7938     01E4  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  7939     01E5  30CF               	movlw	low APP_KeyboardUpdateState@usbHidCode_2864
  7940     01E6  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  7941     01E7  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2864
  7942     01E8  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  7943     01E9  3188  2052         	fcall	_GenericQueue_Enqueue
  7944     01EB  0008               	return
  7945     01EC                     __end_of_APP_KeyboardUpdateState:
  7946                           
  7947                           	psect	text34
  7948     11F2                     __ptext34:	
  7949 ;; *************** function _PS2USB_ScanCodeToUSBHID *****************
  7950 ;; Defined at:
  7951 ;;		line 404 in file "ps2usb.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  7954 ;;		 -> main@scanCode(3), NULL(0), 
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  scanCode        1    0[BANK1 ] PTR const struct PS2Scan
  7957 ;;		 -> main@scanCode(3), NULL(0), 
  7958 ;; Return value:  Size  Location     Type
  7959 ;;                  1    wreg      unsigned char 
  7960 ;; Registers used:
  7961 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7962 ;; Tracked objects:
  7963 ;;		On entry : 1F/1
  7964 ;;		On exit  : 1F/1
  7965 ;;		Unchanged: 0/0
  7966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;Total ram usage:        1 bytes
  7972 ;; Hardware stack levels used: 1
  7973 ;; Hardware stack levels required when called: 10
  7974 ;; This function calls:
  7975 ;;		Nothing
  7976 ;; This function is called by:
  7977 ;;		_APP_KeyboardUpdateState
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981     11F2                     _PS2USB_ScanCodeToUSBHID:	
  7982                           ;psect for function _PS2USB_ScanCodeToUSBHID
  7983                           
  7984                           
  7985                           ;incstack = 0
  7986                           ; Regs used in _PS2USB_ScanCodeToUSBHID: [wreg-fsr1h+status,2+status,0+pclath]
  7987                           ;PS2USB_ScanCodeToUSBHID@scanCode stored from wreg
  7988     11F2  00A8               	movwf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128)
  7989                           
  7990                           ;ps2usb.c: 429:     if (scanCode->isExtend) {
  7991     11F3  0A28               	incf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  7992     11F4  0086               	movwf	6
  7993     11F5  0187               	clrf	7
  7994     11F6  0801               	movf	1,w
  7995     11F7  1903               	btfsc	3,2
  7996     11F8  2A05               	goto	l4857
  7997                           
  7998                           ;ps2usb.c: 435:         return ps2ExtUsbMap[scanCode->value];
  7999     11F9  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  8000     11FA  0086               	movwf	6
  8001     11FB  0187               	clrf	7
  8002     11FC  0801               	movf	1,w
  8003     11FD  3E15               	addlw	low (_ps2ExtUsbMap| (0+32768))
  8004     11FE  0084               	movwf	4
  8005     11FF  3084               	movlw	high (_ps2ExtUsbMap| (0+32768))
  8006     1200  1803               	skipnc
  8007     1201  3E01               	addlw	1
  8008     1202  0085               	movwf	5
  8009     1203  0800               	movf	0,w	;code access
  8010     1204  0008               	return
  8011     1205                     l4857:
  8012                           
  8013                           ;ps2usb.c: 442:         return ps2UsbMap[scanCode->value];
  8014     1205  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  8015     1206  0086               	movwf	6
  8016     1207  0187               	clrf	7
  8017     1208  0801               	movf	1,w
  8018     1209  3E00               	addlw	low (_ps2UsbMap| (0+32768))
  8019     120A  0084               	movwf	4
  8020     120B  3090               	movlw	high (_ps2UsbMap| (0+32768))
  8021     120C  1803               	skipnc
  8022     120D  3E01               	addlw	1
  8023     120E  0085               	movwf	5
  8024     120F  0800               	movf	0,w	;code access
  8025     1210  0008               	return
  8026     1211                     __end_of_PS2USB_ScanCodeToUSBHID:
  8027                           
  8028                           	psect	text35
  8029     1E6B                     __ptext35:	
  8030 ;; *************** function _PS2Keyboard_GetLastCommand *****************
  8031 ;; Defined at:
  8032 ;;		line 75 in file "ps2_keyboard.c"
  8033 ;; Parameters:    Size  Location     Type
  8034 ;;		None
  8035 ;; Auto vars:     Size  Location     Type
  8036 ;;		None
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  1    wreg      unsigned char 
  8039 ;; Registers used:
  8040 ;;		wreg
  8041 ;; Tracked objects:
  8042 ;;		On entry : 1F/1
  8043 ;;		On exit  : 1F/2
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;Total ram usage:        0 bytes
  8051 ;; Hardware stack levels used: 1
  8052 ;; Hardware stack levels required when called: 10
  8053 ;; This function calls:
  8054 ;;		Nothing
  8055 ;; This function is called by:
  8056 ;;		_APP_KeyboardUpdateState
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060     1E6B                     _PS2Keyboard_GetLastCommand:	
  8061                           ;psect for function _PS2Keyboard_GetLastCommand
  8062                           
  8063                           
  8064                           ;ps2_keyboard.c: 76:     return keyboardCommand;
  8065                           
  8066                           ;incstack = 0
  8067                           ; Regs used in _PS2Keyboard_GetLastCommand: [wreg]
  8068     1E6B  0022               	movlb	2	; select bank2
  8069     1E6C  084E               	movf	_keyboardCommand^(0+256),w	;volatile
  8070     1E6D  0008               	return
  8071     1E6E                     __end_of_PS2Keyboard_GetLastCommand:
  8072                           
  8073                           	psect	text36
  8074     0609                     __ptext36:	
  8075 ;; *************** function _GenericQueue_Remove *****************
  8076 ;; Defined at:
  8077 ;;		line 35 in file "generic_queue.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;  q               2   24[BANK1 ] PTR struct .
  8080 ;;		 -> keyboard(101), 
  8081 ;;  item            1   26[BANK1 ] PTR const void 
  8082 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2856(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  j               1   32[BANK1 ] unsigned char 
  8085 ;;  i               1   31[BANK1 ] unsigned char 
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  1    wreg      void 
  8088 ;; Registers used:
  8089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8090 ;; Tracked objects:
  8091 ;;		On entry : 1F/1
  8092 ;;		On exit  : 1F/1
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8095 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;Total ram usage:        9 bytes
  8100 ;; Hardware stack levels used: 1
  8101 ;; Hardware stack levels required when called: 11
  8102 ;; This function calls:
  8103 ;;		_GenericQueue_IsEmpty
  8104 ;;		___awmod
  8105 ;;		___wmul
  8106 ;;		_memcmp
  8107 ;;		_memcpy
  8108 ;; This function is called by:
  8109 ;;		_APP_KeyboardUpdateState
  8110 ;; This function uses a non-reentrant model
  8111 ;;
  8112                           
  8113     0609                     _GenericQueue_Remove:	
  8114                           ;psect for function _GenericQueue_Remove
  8115                           
  8116                           
  8117                           ;generic_queue.c: 36:     if (!GenericQueue_IsEmpty(q)) {
  8118                           
  8119                           ;incstack = 0
  8120                           ; Regs used in _GenericQueue_Remove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8121     0609  0841               	movf	(GenericQueue_Remove@q+1)^(0+128),w
  8122     060A  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  8123     060B  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8124     060C  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  8125     060D  319F  2798  3186   	fcall	_GenericQueue_IsEmpty
  8126     0610  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  8127     0611  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  8128     0612  1D03               	btfss	3,2
  8129     0613  0008               	return
  8130                           
  8131                           ;generic_queue.c: 37:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  8132     0614  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8133     0615  3E5C               	addlw	92
  8134     0616  0086               	movwf	6
  8135     0617  3000               	movlw	0
  8136     0618  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8137     0619  0087               	movwf	7
  8138     061A  0801               	movf	1,w
  8139     061B                     L4:
  8140     061B  00C7               	movwf	GenericQueue_Remove@i^(0+128)
  8141     061C  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8142     061D  3E5D               	addlw	93
  8143     061E  0086               	movwf	6
  8144     061F  3000               	movlw	0
  8145     0620  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8146     0621  0087               	movwf	7
  8147     0622  0801               	movf	1,w
  8148     0623  0647               	xorwf	GenericQueue_Remove@i^(0+128),w
  8149     0624  1903               	btfsc	3,2
  8150     0625  0008               	return
  8151                           
  8152                           ;generic_queue.c: 38:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  8153     0626  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8154     0627  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8155     0628  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  8156     0629  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8157     062A  00AF               	movwf	___wmul@multiplier^(0+128)
  8158     062B  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8159     062C  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8160     062D  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8161     062E  3E5A               	addlw	90
  8162     062F  0086               	movwf	6
  8163     0630  3000               	movlw	0
  8164     0631  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8165     0632  0087               	movwf	7
  8166     0633  3F40               	moviw [0]fsr1
  8167     0634  00B1               	movwf	___wmul@multiplicand^(0+128)
  8168     0635  3F41               	moviw [1]fsr1
  8169     0636  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8170     0637  3191  212D  3186   	fcall	___wmul
  8171     063A  082F               	movf	?___wmul^(0+128),w
  8172     063B  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8173     063C  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8174     063D  0830               	movf	(?___wmul+1)^(0+128),w
  8175     063E  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8176     063F  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  8177     0640  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8178     0641  00B5               	movwf	memcmp@vl^(0+128)
  8179     0642  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  8180     0643  00B6               	movwf	(memcmp@vl+1)^(0+128)
  8181     0644  0842               	movf	GenericQueue_Remove@item^(0+128),w
  8182     0645  00B7               	movwf	memcmp@vr^(0+128)
  8183     0646  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8184     0647  3E5A               	addlw	90
  8185     0648  0086               	movwf	6
  8186     0649  3000               	movlw	0
  8187     064A  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8188     064B  0087               	movwf	7
  8189     064C  3F40               	moviw [0]fsr1
  8190     064D  00B8               	movwf	memcmp@n^(0+128)
  8191     064E  3F41               	moviw [1]fsr1
  8192     064F  00B9               	movwf	(memcmp@n+1)^(0+128)
  8193     0650  3193  2327  3186   	fcall	_memcmp
  8194     0653  0835               	movf	?_memcmp^(0+128),w
  8195     0654  0436               	iorwf	(?_memcmp+1)^(0+128),w
  8196     0655  1D03               	btfss	3,2
  8197     0656  2EED               	goto	l4879
  8198                           
  8199                           ;generic_queue.c: 39:                 for (uint8_t j = i; j != q->rear; j = (j + 1) % 15
      +                          ) {
  8200     0657  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8201     0658                     L5:
  8202     0658  00C8               	movwf	GenericQueue_Remove@j^(0+128)
  8203     0659  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8204     065A  3E5D               	addlw	93
  8205     065B  0086               	movwf	6
  8206     065C  3000               	movlw	0
  8207     065D  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8208     065E  0087               	movwf	7
  8209     065F  0801               	movf	1,w
  8210     0660  0648               	xorwf	GenericQueue_Remove@j^(0+128),w
  8211     0661  1903               	btfsc	3,2
  8212     0662  2EC3               	goto	l4875
  8213                           
  8214                           ;generic_queue.c: 40:                     memcpy(&q->buffer[j * q->element_size],
  8215     0663  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8216     0664  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8217     0665  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  8218     0666  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8219     0667  00AF               	movwf	___wmul@multiplier^(0+128)
  8220     0668  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8221     0669  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8222     066A  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8223     066B  3E5A               	addlw	90
  8224     066C  0086               	movwf	6
  8225     066D  3000               	movlw	0
  8226     066E  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8227     066F  0087               	movwf	7
  8228     0670  3F40               	moviw [0]fsr1
  8229     0671  00B1               	movwf	___wmul@multiplicand^(0+128)
  8230     0672  3F41               	moviw [1]fsr1
  8231     0673  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8232     0674  3191  212D  3186   	fcall	___wmul
  8233     0677  082F               	movf	?___wmul^(0+128),w
  8234     0678  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8235     0679  00B5               	movwf	memcpy@d1^(0+128)
  8236     067A  0830               	movf	(?___wmul+1)^(0+128),w
  8237     067B  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8238     067C  00B6               	movwf	(memcpy@d1+1)^(0+128)
  8239     067D  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8240     067E  3E01               	addlw	1
  8241     067F  00AA               	movwf	___awmod@dividend^(0+128)
  8242     0680  3000               	movlw	0
  8243     0681  1803               	skipnc
  8244     0682  3001               	movlw	1
  8245     0683  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8246     0684  300F               	movlw	15
  8247     0685  00A8               	movwf	___awmod@divisor^(0+128)
  8248     0686  3000               	movlw	0
  8249     0687  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8250     0688  3194  24D5  3186   	fcall	___awmod
  8251     068B  0829               	movf	(?___awmod+1)^(0+128),w
  8252     068C  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8253     068D  0828               	movf	?___awmod^(0+128),w
  8254     068E  00AF               	movwf	___wmul@multiplier^(0+128)
  8255     068F  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8256     0690  3E5A               	addlw	90
  8257     0691  0086               	movwf	6
  8258     0692  3000               	movlw	0
  8259     0693  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8260     0694  0087               	movwf	7
  8261     0695  3F40               	moviw [0]fsr1
  8262     0696  00B1               	movwf	___wmul@multiplicand^(0+128)
  8263     0697  3F41               	moviw [1]fsr1
  8264     0698  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8265     0699  3191  212D  3186   	fcall	___wmul
  8266     069C  082F               	movf	?___wmul^(0+128),w
  8267     069D  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8268     069E  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8269     069F  0830               	movf	(?___wmul+1)^(0+128),w
  8270     06A0  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8271     06A1  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  8272     06A2  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8273     06A3  00B7               	movwf	memcpy@s1^(0+128)
  8274     06A4  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  8275     06A5  00B8               	movwf	(memcpy@s1+1)^(0+128)
  8276     06A6  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8277     06A7  3E5A               	addlw	90
  8278     06A8  0086               	movwf	6
  8279     06A9  3000               	movlw	0
  8280     06AA  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8281     06AB  0087               	movwf	7
  8282     06AC  3F40               	moviw [0]fsr1
  8283     06AD  00B9               	movwf	memcpy@n^(0+128)
  8284     06AE  3F41               	moviw [1]fsr1
  8285     06AF  00BA               	movwf	(memcpy@n+1)^(0+128)
  8286     06B0  3193  2301  3186   	fcall	_memcpy
  8287                           
  8288                           ;generic_queue.c: 43:                 }
  8289     06B3  300F               	movlw	15
  8290     06B4  00A8               	movwf	___awmod@divisor^(0+128)
  8291     06B5  3000               	movlw	0
  8292     06B6  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8293     06B7  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8294     06B8  3E01               	addlw	1
  8295     06B9  00AA               	movwf	___awmod@dividend^(0+128)
  8296     06BA  3000               	movlw	0
  8297     06BB  1803               	skipnc
  8298     06BC  3001               	movlw	1
  8299     06BD  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8300     06BE  3194  24D5  3186   	fcall	___awmod
  8301     06C1  0828               	movf	?___awmod^(0+128),w
  8302     06C2  2E58               	goto	L5
  8303     06C3                     l4875:
  8304                           
  8305                           ;generic_queue.c: 44:                 q->rear = (q->rear - 1 + 15) % 15;
  8306     06C3  300F               	movlw	15
  8307     06C4  00A8               	movwf	___awmod@divisor^(0+128)
  8308     06C5  3000               	movlw	0
  8309     06C6  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8310     06C7  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8311     06C8  3E5D               	addlw	93
  8312     06C9  0086               	movwf	6
  8313     06CA  3000               	movlw	0
  8314     06CB  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8315     06CC  0087               	movwf	7
  8316     06CD  0801               	movf	1,w
  8317     06CE  3E0E               	addlw	14
  8318     06CF  00AA               	movwf	___awmod@dividend^(0+128)
  8319     06D0  3000               	movlw	0
  8320     06D1  1803               	skipnc
  8321     06D2  3001               	movlw	1
  8322     06D3  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8323     06D4  3194  24D5         	fcall	___awmod
  8324     06D6  0828               	movf	?___awmod^(0+128),w
  8325     06D7  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8326     06D8  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8327     06D9  3E5D               	addlw	93
  8328     06DA  00C4               	movwf	(??_GenericQueue_Remove+1)^(0+128)
  8329     06DB  3000               	movlw	0
  8330     06DC  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8331     06DD  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8332     06DE  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8333     06DF  0086               	movwf	6
  8334     06E0  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8335     06E1  0087               	movwf	7
  8336     06E2  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8337     06E3  0081               	movwf	1
  8338                           
  8339                           ;generic_queue.c: 45:                 q->size--;
  8340     06E4  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8341     06E5  3E5E               	addlw	94
  8342     06E6  0086               	movwf	6
  8343     06E7  3000               	movlw	0
  8344     06E8  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8345     06E9  0087               	movwf	7
  8346     06EA  3001               	movlw	1
  8347     06EB  0281               	subwf	1,f
  8348                           
  8349                           ;generic_queue.c: 46:                 break;
  8350     06EC  0008               	return
  8351     06ED                     l4879:
  8352                           
  8353                           ;generic_queue.c: 48:         }
  8354     06ED  300F               	movlw	15
  8355     06EE  00A8               	movwf	___awmod@divisor^(0+128)
  8356     06EF  3000               	movlw	0
  8357     06F0  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8358     06F1  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8359     06F2  3E01               	addlw	1
  8360     06F3  00AA               	movwf	___awmod@dividend^(0+128)
  8361     06F4  3000               	movlw	0
  8362     06F5  1803               	skipnc
  8363     06F6  3001               	movlw	1
  8364     06F7  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8365     06F8  3194  24D5  3186   	fcall	___awmod
  8366     06FB  0828               	movf	?___awmod^(0+128),w
  8367     06FC  2E1B               	goto	L4
  8368     06FD                     __end_of_GenericQueue_Remove:
  8369                           
  8370                           	psect	text37
  8371     0852                     __ptext37:	
  8372 ;; *************** function _GenericQueue_Enqueue *****************
  8373 ;; Defined at:
  8374 ;;		line 19 in file "generic_queue.c"
  8375 ;; Parameters:    Size  Location     Type
  8376 ;;  q               2   24[BANK1 ] PTR struct .
  8377 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  8378 ;;  item            2   26[BANK1 ] PTR const void 
  8379 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2855(1), 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;		None
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  1    wreg      void 
  8384 ;; Registers used:
  8385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : 1F/1
  8388 ;;		On exit  : 1F/1
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8391 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;Total ram usage:        7 bytes
  8396 ;; Hardware stack levels used: 1
  8397 ;; Hardware stack levels required when called: 11
  8398 ;; This function calls:
  8399 ;;		_GenericQueue_IsFull
  8400 ;;		___awmod
  8401 ;;		___wmul
  8402 ;;		_memcpy
  8403 ;; This function is called by:
  8404 ;;		_APP_KeyboardUpdateState
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408     0852                     _GenericQueue_Enqueue:	
  8409                           ;psect for function _GenericQueue_Enqueue
  8410                           
  8411                           
  8412                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
  8413                           
  8414                           ;incstack = 0
  8415                           ; Regs used in _GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8416     0852  0841               	movf	(GenericQueue_Enqueue@q+1)^(0+128),w
  8417     0853  00A9               	movwf	(GenericQueue_IsFull@q+1)^(0+128)
  8418     0854  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8419     0855  00A8               	movwf	GenericQueue_IsFull@q^(0+128)
  8420     0856  3190  2084  3188   	fcall	_GenericQueue_IsFull
  8421     0859  0828               	movf	?_GenericQueue_IsFull^(0+128),w
  8422     085A  0429               	iorwf	(?_GenericQueue_IsFull+1)^(0+128),w
  8423     085B  1D03               	btfss	3,2
  8424     085C  0008               	return
  8425                           
  8426                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
  8427     085D  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8428     085E  3E5D               	addlw	93
  8429     085F  0086               	movwf	6
  8430     0860  3000               	movlw	0
  8431     0861  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8432     0862  0087               	movwf	7
  8433     0863  0801               	movf	1,w
  8434     0864  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8435     0865  01C5               	clrf	(??_GenericQueue_Enqueue^(0+128)+1)
  8436     0866  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8437     0867  00AF               	movwf	___wmul@multiplier^(0+128)
  8438     0868  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  8439     0869  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8440     086A  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8441     086B  3E5A               	addlw	90
  8442     086C  0086               	movwf	6
  8443     086D  3000               	movlw	0
  8444     086E  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8445     086F  0087               	movwf	7
  8446     0870  3F40               	moviw [0]fsr1
  8447     0871  00B1               	movwf	___wmul@multiplicand^(0+128)
  8448     0872  3F41               	moviw [1]fsr1
  8449     0873  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8450     0874  3191  212D  3188   	fcall	___wmul
  8451     0877  082F               	movf	?___wmul^(0+128),w
  8452     0878  0740               	addwf	GenericQueue_Enqueue@q^(0+128),w
  8453     0879  00B5               	movwf	memcpy@d1^(0+128)
  8454     087A  0830               	movf	(?___wmul+1)^(0+128),w
  8455     087B  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8456     087C  00B6               	movwf	(memcpy@d1+1)^(0+128)
  8457     087D  0843               	movf	(GenericQueue_Enqueue@item+1)^(0+128),w
  8458     087E  00B8               	movwf	(memcpy@s1+1)^(0+128)
  8459     087F  0842               	movf	GenericQueue_Enqueue@item^(0+128),w
  8460     0880  00B7               	movwf	memcpy@s1^(0+128)
  8461     0881  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8462     0882  3E5A               	addlw	90
  8463     0883  0086               	movwf	6
  8464     0884  3000               	movlw	0
  8465     0885  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8466     0886  0087               	movwf	7
  8467     0887  3F40               	moviw [0]fsr1
  8468     0888  00B9               	movwf	memcpy@n^(0+128)
  8469     0889  3F41               	moviw [1]fsr1
  8470     088A  00BA               	movwf	(memcpy@n+1)^(0+128)
  8471     088B  3193  2301  3188   	fcall	_memcpy
  8472                           
  8473                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
  8474     088E  300F               	movlw	15
  8475     088F  00A8               	movwf	___awmod@divisor^(0+128)
  8476     0890  3000               	movlw	0
  8477     0891  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8478     0892  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8479     0893  3E5D               	addlw	93
  8480     0894  0086               	movwf	6
  8481     0895  3000               	movlw	0
  8482     0896  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8483     0897  0087               	movwf	7
  8484     0898  0801               	movf	1,w
  8485     0899  3E01               	addlw	1
  8486     089A  00AA               	movwf	___awmod@dividend^(0+128)
  8487     089B  3000               	movlw	0
  8488     089C  1803               	skipnc
  8489     089D  3001               	movlw	1
  8490     089E  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8491     089F  3194  24D5         	fcall	___awmod
  8492     08A1  0828               	movf	?___awmod^(0+128),w
  8493     08A2  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8494     08A3  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8495     08A4  3E5D               	addlw	93
  8496     08A5  00C5               	movwf	(??_GenericQueue_Enqueue+1)^(0+128)
  8497     08A6  3000               	movlw	0
  8498     08A7  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8499     08A8  00C6               	movwf	(??_GenericQueue_Enqueue+2)^(0+128)
  8500     08A9  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  8501     08AA  0086               	movwf	6
  8502     08AB  0846               	movf	(??_GenericQueue_Enqueue+2)^(0+128),w
  8503     08AC  0087               	movwf	7
  8504     08AD  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8505     08AE  0081               	movwf	1
  8506                           
  8507                           ;generic_queue.c: 23:         q->size++;
  8508     08AF  3001               	movlw	1
  8509     08B0  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8510     08B1  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8511     08B2  3E5E               	addlw	94
  8512     08B3  0086               	movwf	6
  8513     08B4  3000               	movlw	0
  8514     08B5  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8515     08B6  0087               	movwf	7
  8516     08B7  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8517     08B8  0781               	addwf	1,f
  8518     08B9  0008               	return
  8519     08BA                     __end_of_GenericQueue_Enqueue:
  8520                           
  8521                           	psect	text38
  8522     1301                     __ptext38:	
  8523 ;; *************** function _memcpy *****************
  8524 ;; Defined at:
  8525 ;;		line 4 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memcpy.c"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;  d1              2   13[BANK1 ] PTR void 
  8528 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  8529 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
  8530 ;;  s1              2   15[BANK1 ] PTR const void 
  8531 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  8532 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2855(1), keyboard(101), CtrlTrfDa
      +ta(8), 
  8533 ;;		 -> SetupPkt(8), 
  8534 ;;  n               2   17[BANK1 ] unsigned int 
  8535 ;; Auto vars:     Size  Location     Type
  8536 ;;  s               2   21[BANK1 ] PTR const unsigned char 
  8537 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  8538 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2855(1), keyboard(101), CtrlTrfDa
      +ta(8), 
  8539 ;;		 -> SetupPkt(8), 
  8540 ;;  d               2   19[BANK1 ] PTR unsigned char 
  8541 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  8542 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
  8543 ;;  tmp             1   23[BANK1 ] unsigned char 
  8544 ;; Return value:  Size  Location     Type
  8545 ;;                  2   13[BANK1 ] PTR void 
  8546 ;; Registers used:
  8547 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8548 ;; Tracked objects:
  8549 ;;		On entry : 1F/1
  8550 ;;		On exit  : 1F/1
  8551 ;;		Unchanged: 0/0
  8552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8553 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;Total ram usage:       11 bytes
  8558 ;; Hardware stack levels used: 1
  8559 ;; Hardware stack levels required when called: 10
  8560 ;; This function calls:
  8561 ;;		Nothing
  8562 ;; This function is called by:
  8563 ;;		_GenericQueue_Enqueue
  8564 ;;		_GenericQueue_Dequeue
  8565 ;;		_GenericQueue_Remove
  8566 ;;		_GenericQueue_CopyToArray
  8567 ;; This function uses a non-reentrant model
  8568 ;;
  8569                           
  8570     1301                     _memcpy:	
  8571                           ;psect for function _memcpy
  8572                           
  8573                           
  8574                           ;incstack = 0
  8575                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  8576     1301  0838               	movf	(memcpy@s1+1)^(0+128),w
  8577     1302  00BE               	movwf	(memcpy@s+1)^(0+128)
  8578     1303  0837               	movf	memcpy@s1^(0+128),w
  8579     1304  00BD               	movwf	memcpy@s^(0+128)
  8580     1305  0836               	movf	(memcpy@d1+1)^(0+128),w
  8581     1306  00BC               	movwf	(memcpy@d+1)^(0+128)
  8582     1307  0835               	movf	memcpy@d1^(0+128),w
  8583     1308  00BB               	movwf	memcpy@d^(0+128)
  8584     1309                     l4609:
  8585     1309  3001               	movlw	1
  8586     130A  02B9               	subwf	memcpy@n^(0+128),f
  8587     130B  3000               	movlw	0
  8588     130C  3BBA               	subwfb	(memcpy@n+1)^(0+128),f
  8589     130D  0A39               	incf	memcpy@n^(0+128),w
  8590     130E  1903               	btfsc	3,2
  8591     130F  0A3A               	incf	(memcpy@n+1)^(0+128),w
  8592     1310  1903               	btfsc	3,2
  8593     1311  0008               	return
  8594     1312  083D               	movf	memcpy@s^(0+128),w
  8595     1313  0086               	movwf	6
  8596     1314  083E               	movf	(memcpy@s+1)^(0+128),w
  8597     1315  0087               	movwf	7
  8598     1316  0801               	movf	1,w
  8599     1317  00BF               	movwf	memcpy@tmp^(0+128)
  8600     1318  3001               	movlw	1
  8601     1319  07BD               	addwf	memcpy@s^(0+128),f
  8602     131A  3000               	movlw	0
  8603     131B  3DBE               	addwfc	(memcpy@s+1)^(0+128),f
  8604     131C  083B               	movf	memcpy@d^(0+128),w
  8605     131D  0086               	movwf	6
  8606     131E  083C               	movf	(memcpy@d+1)^(0+128),w
  8607     131F  0087               	movwf	7
  8608     1320  083F               	movf	memcpy@tmp^(0+128),w
  8609     1321  0081               	movwf	1
  8610     1322  3001               	movlw	1
  8611     1323  07BB               	addwf	memcpy@d^(0+128),f
  8612     1324  3000               	movlw	0
  8613     1325  3DBC               	addwfc	(memcpy@d+1)^(0+128),f
  8614     1326  2B09               	goto	l4609
  8615     1327                     __end_of_memcpy:
  8616                           
  8617                           	psect	text39
  8618     1084                     __ptext39:	
  8619 ;; *************** function _GenericQueue_IsFull *****************
  8620 ;; Defined at:
  8621 ;;		line 15 in file "generic_queue.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;  q               2    0[BANK1 ] PTR struct .
  8624 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  8625 ;; Auto vars:     Size  Location     Type
  8626 ;;		None
  8627 ;; Return value:  Size  Location     Type
  8628 ;;                  2    0[BANK1 ] int 
  8629 ;; Registers used:
  8630 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8631 ;; Tracked objects:
  8632 ;;		On entry : 1F/1
  8633 ;;		On exit  : 1F/1
  8634 ;;		Unchanged: 0/0
  8635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8636 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8638 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8639 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8640 ;;Total ram usage:        4 bytes
  8641 ;; Hardware stack levels used: 1
  8642 ;; Hardware stack levels required when called: 10
  8643 ;; This function calls:
  8644 ;;		Nothing
  8645 ;; This function is called by:
  8646 ;;		_GenericQueue_Enqueue
  8647 ;; This function uses a non-reentrant model
  8648 ;;
  8649                           
  8650     1084                     _GenericQueue_IsFull:	
  8651                           ;psect for function _GenericQueue_IsFull
  8652                           
  8653                           
  8654                           ;generic_queue.c: 16:     return (q->size == 15);
  8655                           
  8656                           ;incstack = 0
  8657                           ; Regs used in _GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
  8658     1084  0828               	movf	GenericQueue_IsFull@q^(0+128),w
  8659     1085  3E5E               	addlw	94
  8660     1086  0086               	movwf	6
  8661     1087  3000               	movlw	0
  8662     1088  3D29               	addwfc	(GenericQueue_IsFull@q+1)^(0+128),w
  8663     1089  0087               	movwf	7
  8664     108A  300F               	movlw	15
  8665     108B  0601               	xorwf	1,w
  8666     108C  1D03               	btfss	3,2
  8667     108D  2890               	goto	u3770
  8668     108E  3001               	movlw	1
  8669     108F  2891               	goto	u3780
  8670     1090                     u3770:
  8671     1090  3000               	movlw	0
  8672     1091                     u3780:
  8673     1091  00AA               	movwf	??_GenericQueue_IsFull^(0+128)
  8674     1092  01AB               	clrf	(??_GenericQueue_IsFull^(0+128)+1)
  8675     1093  082A               	movf	??_GenericQueue_IsFull^(0+128),w
  8676     1094  00A8               	movwf	?_GenericQueue_IsFull^(0+128)
  8677     1095  082B               	movf	(??_GenericQueue_IsFull+1)^(0+128),w
  8678     1096  00A9               	movwf	(?_GenericQueue_IsFull+1)^(0+128)
  8679     1097  0008               	return
  8680     1098                     __end_of_GenericQueue_IsFull:
  8681                           
  8682                           	psect	text40
  8683     1606                     __ptext40:	
  8684 ;; *************** function _GenericQueue_Contains *****************
  8685 ;; Defined at:
  8686 ;;		line 52 in file "generic_queue.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;  q               2   22[BANK1 ] PTR struct .
  8689 ;;		 -> keyboard(101), 
  8690 ;;  item            1   24[BANK1 ] PTR const void 
  8691 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2855(1), 
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;  i               1   29[BANK1 ] unsigned char 
  8694 ;; Return value:  Size  Location     Type
  8695 ;;                  1    wreg      _Bool 
  8696 ;; Registers used:
  8697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8698 ;; Tracked objects:
  8699 ;;		On entry : 1F/1
  8700 ;;		On exit  : 1F/1
  8701 ;;		Unchanged: 0/0
  8702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8703 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;Total ram usage:        8 bytes
  8708 ;; Hardware stack levels used: 1
  8709 ;; Hardware stack levels required when called: 11
  8710 ;; This function calls:
  8711 ;;		_GenericQueue_IsEmpty
  8712 ;;		___awmod
  8713 ;;		___wmul
  8714 ;;		_memcmp
  8715 ;; This function is called by:
  8716 ;;		_APP_KeyboardUpdateState
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720     1606                     _GenericQueue_Contains:	
  8721                           ;psect for function _GenericQueue_Contains
  8722                           
  8723                           
  8724                           ;generic_queue.c: 53:     if (!GenericQueue_IsEmpty(q)) {
  8725                           
  8726                           ;incstack = 0
  8727                           ; Regs used in _GenericQueue_Contains: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8728     1606  083F               	movf	(GenericQueue_Contains@q+1)^(0+128),w
  8729     1607  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  8730     1608  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8731     1609  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  8732     160A  319F  2798  3196   	fcall	_GenericQueue_IsEmpty
  8733     160D  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  8734     160E  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  8735     160F  1D03               	btfss	3,2
  8736     1610  2E66               	goto	l4897
  8737                           
  8738                           ;generic_queue.c: 54:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  8739     1611  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8740     1612  3E5C               	addlw	92
  8741     1613  0086               	movwf	6
  8742     1614  3000               	movlw	0
  8743     1615  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8744     1616  0087               	movwf	7
  8745     1617  0801               	movf	1,w
  8746     1618                     L6:
  8747     1618  00C5               	movwf	GenericQueue_Contains@i^(0+128)
  8748     1619  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8749     161A  3E5D               	addlw	93
  8750     161B  0086               	movwf	6
  8751     161C  3000               	movlw	0
  8752     161D  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8753     161E  0087               	movwf	7
  8754     161F  0801               	movf	1,w
  8755     1620  0645               	xorwf	GenericQueue_Contains@i^(0+128),w
  8756     1621  1903               	btfsc	3,2
  8757     1622  2E66               	goto	l4897
  8758                           
  8759                           ;generic_queue.c: 55:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  8760     1623  0845               	movf	GenericQueue_Contains@i^(0+128),w
  8761     1624  00C1               	movwf	??_GenericQueue_Contains^(0+128)
  8762     1625  01C2               	clrf	(??_GenericQueue_Contains^(0+128)+1)
  8763     1626  0841               	movf	??_GenericQueue_Contains^(0+128),w
  8764     1627  00AF               	movwf	___wmul@multiplier^(0+128)
  8765     1628  0842               	movf	(??_GenericQueue_Contains+1)^(0+128),w
  8766     1629  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8767     162A  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8768     162B  3E5A               	addlw	90
  8769     162C  0086               	movwf	6
  8770     162D  3000               	movlw	0
  8771     162E  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8772     162F  0087               	movwf	7
  8773     1630  3F40               	moviw [0]fsr1
  8774     1631  00B1               	movwf	___wmul@multiplicand^(0+128)
  8775     1632  3F41               	moviw [1]fsr1
  8776     1633  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8777     1634  3191  212D  3196   	fcall	___wmul
  8778     1637  082F               	movf	?___wmul^(0+128),w
  8779     1638  073E               	addwf	GenericQueue_Contains@q^(0+128),w
  8780     1639  00C3               	movwf	(??_GenericQueue_Contains+2)^(0+128)
  8781     163A  0830               	movf	(?___wmul+1)^(0+128),w
  8782     163B  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8783     163C  00C4               	movwf	(??_GenericQueue_Contains+3)^(0+128)
  8784     163D  0843               	movf	(??_GenericQueue_Contains+2)^(0+128),w
  8785     163E  00B5               	movwf	memcmp@vl^(0+128)
  8786     163F  0844               	movf	(??_GenericQueue_Contains+3)^(0+128),w
  8787     1640  00B6               	movwf	(memcmp@vl+1)^(0+128)
  8788     1641  0840               	movf	GenericQueue_Contains@item^(0+128),w
  8789     1642  00B7               	movwf	memcmp@vr^(0+128)
  8790     1643  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8791     1644  3E5A               	addlw	90
  8792     1645  0086               	movwf	6
  8793     1646  3000               	movlw	0
  8794     1647  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8795     1648  0087               	movwf	7
  8796     1649  3F40               	moviw [0]fsr1
  8797     164A  00B8               	movwf	memcmp@n^(0+128)
  8798     164B  3F41               	moviw [1]fsr1
  8799     164C  00B9               	movwf	(memcmp@n+1)^(0+128)
  8800     164D  3193  2327  3196   	fcall	_memcmp
  8801     1650  0835               	movf	?_memcmp^(0+128),w
  8802     1651  0436               	iorwf	(?_memcmp+1)^(0+128),w
  8803     1652  1D03               	btfss	3,2
  8804     1653  2E56               	goto	l4893
  8805                           
  8806                           ;generic_queue.c: 56:                 return 1;
  8807     1654  3001               	movlw	1
  8808     1655  0008               	return
  8809     1656                     l4893:
  8810                           
  8811                           ;generic_queue.c: 58:         }
  8812     1656  300F               	movlw	15
  8813     1657  00A8               	movwf	___awmod@divisor^(0+128)
  8814     1658  3000               	movlw	0
  8815     1659  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8816     165A  0845               	movf	GenericQueue_Contains@i^(0+128),w
  8817     165B  3E01               	addlw	1
  8818     165C  00AA               	movwf	___awmod@dividend^(0+128)
  8819     165D  3000               	movlw	0
  8820     165E  1803               	skipnc
  8821     165F  3001               	movlw	1
  8822     1660  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8823     1661  3194  24D5  3196   	fcall	___awmod
  8824     1664  0828               	movf	?___awmod^(0+128),w
  8825     1665  2E18               	goto	L6
  8826     1666                     l4897:
  8827                           
  8828                           ;generic_queue.c: 60:     return 0;
  8829     1666  3000               	movlw	0
  8830     1667  0008               	return
  8831     1668                     __end_of_GenericQueue_Contains:
  8832                           
  8833                           	psect	text41
  8834     1327                     __ptext41:	
  8835 ;; *************** function _memcmp *****************
  8836 ;; Defined at:
  8837 ;;		line 3 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memcmp.c"
  8838 ;; Parameters:    Size  Location     Type
  8839 ;;  vl              2   13[BANK1 ] PTR const void 
  8840 ;;		 -> keyboard$buffer(90), keyboard(101), 
  8841 ;;  vr              1   15[BANK1 ] PTR const void 
  8842 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2856(1), APP_KeyboardUpdateState@
      +usbHidCode_2855(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8843 ;;  n               2   16[BANK1 ] unsigned int 
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;  l               2   19[BANK1 ] PTR const unsigned char 
  8846 ;;		 -> keyboard$buffer(90), keyboard(101), 
  8847 ;;  r               1   21[BANK1 ] PTR const unsigned char 
  8848 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2856(1), APP_KeyboardUpdateState@
      +usbHidCode_2855(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8849 ;; Return value:  Size  Location     Type
  8850 ;;                  2   13[BANK1 ] int 
  8851 ;; Registers used:
  8852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8853 ;; Tracked objects:
  8854 ;;		On entry : 1F/1
  8855 ;;		On exit  : 1F/1
  8856 ;;		Unchanged: 0/0
  8857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8858 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8859 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;Total ram usage:        9 bytes
  8863 ;; Hardware stack levels used: 1
  8864 ;; Hardware stack levels required when called: 10
  8865 ;; This function calls:
  8866 ;;		Nothing
  8867 ;; This function is called by:
  8868 ;;		_GenericQueue_Remove
  8869 ;;		_GenericQueue_Contains
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873     1327                     _memcmp:	
  8874                           ;psect for function _memcmp
  8875                           
  8876                           
  8877                           ;incstack = 0
  8878                           ; Regs used in _memcmp: [wreg-fsr1h+status,2+status,0]
  8879     1327  0836               	movf	(memcmp@vl+1)^(0+128),w
  8880     1328  00BC               	movwf	(memcmp@l+1)^(0+128)
  8881     1329  0835               	movf	memcmp@vl^(0+128),w
  8882     132A  00BB               	movwf	memcmp@l^(0+128)
  8883     132B  0837               	movf	memcmp@vr^(0+128),w
  8884     132C  00BD               	movwf	memcmp@r^(0+128)
  8885     132D  2B45               	goto	l4671
  8886     132E                     l4673:
  8887     132E  083D               	movf	memcmp@r^(0+128),w
  8888     132F  0086               	movwf	6
  8889     1330  0187               	clrf	7
  8890     1331  083B               	movf	memcmp@l^(0+128),w
  8891     1332  0084               	movwf	4
  8892     1333  083C               	movf	(memcmp@l+1)^(0+128),w
  8893     1334  0085               	movwf	5
  8894     1335  0800               	movf	0,w
  8895     1336  0601               	xorwf	1,w
  8896     1337  1D03               	btfss	3,2
  8897     1338  2B49               	goto	l4675
  8898     1339  3001               	movlw	1
  8899     133A  02B8               	subwf	memcmp@n^(0+128),f
  8900     133B  3000               	movlw	0
  8901     133C  3BB9               	subwfb	(memcmp@n+1)^(0+128),f
  8902     133D  3001               	movlw	1
  8903     133E  07BB               	addwf	memcmp@l^(0+128),f
  8904     133F  3000               	movlw	0
  8905     1340  3DBC               	addwfc	(memcmp@l+1)^(0+128),f
  8906     1341  3001               	movlw	1
  8907     1342  00BA               	movwf	??_memcmp^(0+128)
  8908     1343  083A               	movf	??_memcmp^(0+128),w
  8909     1344  07BD               	addwf	memcmp@r^(0+128),f
  8910     1345                     l4671:
  8911     1345  0838               	movf	memcmp@n^(0+128),w
  8912     1346  0439               	iorwf	(memcmp@n+1)^(0+128),w
  8913     1347  1D03               	btfss	3,2
  8914     1348  2B2E               	goto	l4673
  8915     1349                     l4675:
  8916     1349  0838               	movf	memcmp@n^(0+128),w
  8917     134A  0439               	iorwf	(memcmp@n+1)^(0+128),w
  8918     134B  1D03               	btfss	3,2
  8919     134C  2B50               	goto	l4679
  8920     134D  01B5               	clrf	?_memcmp^(0+128)
  8921     134E  01B6               	clrf	(?_memcmp+1)^(0+128)
  8922     134F  0008               	return
  8923     1350                     l4679:
  8924     1350  083B               	movf	memcmp@l^(0+128),w
  8925     1351  0086               	movwf	6
  8926     1352  083C               	movf	(memcmp@l+1)^(0+128),w
  8927     1353  0087               	movwf	7
  8928     1354  083D               	movf	memcmp@r^(0+128),w
  8929     1355  0084               	movwf	4
  8930     1356  0185               	clrf	5
  8931     1357  0800               	movf	0,w
  8932     1358  0201               	subwf	1,w
  8933     1359  00B5               	movwf	?_memcmp^(0+128)
  8934     135A  01B6               	clrf	(?_memcmp^(0+128)+1)
  8935     135B  1C03               	skipc
  8936     135C  03B6               	decf	(?_memcmp+1)^(0+128),f
  8937     135D  0008               	return
  8938     135E                     __end_of_memcmp:
  8939                           
  8940                           	psect	text42
  8941     112D                     __ptext42:	
  8942 ;; *************** function ___wmul *****************
  8943 ;; Defined at:
  8944 ;;		line 15 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/Umul16.c"
  8945 ;; Parameters:    Size  Location     Type
  8946 ;;  multiplier      2    7[BANK1 ] unsigned int 
  8947 ;;  multiplicand    2    9[BANK1 ] unsigned int 
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;  product         2   11[BANK1 ] unsigned int 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  2    7[BANK1 ] unsigned int 
  8952 ;; Registers used:
  8953 ;;		wreg, status,2, status,0
  8954 ;; Tracked objects:
  8955 ;;		On entry : 1F/1
  8956 ;;		On exit  : 1F/1
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8959 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;Total ram usage:        6 bytes
  8964 ;; Hardware stack levels used: 1
  8965 ;; Hardware stack levels required when called: 10
  8966 ;; This function calls:
  8967 ;;		Nothing
  8968 ;; This function is called by:
  8969 ;;		_GenericQueue_Enqueue
  8970 ;;		_GenericQueue_Dequeue
  8971 ;;		_GenericQueue_Remove
  8972 ;;		_GenericQueue_Contains
  8973 ;;		_GenericQueue_CopyToArray
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977     112D                     ___wmul:	
  8978                           ;psect for function ___wmul
  8979                           
  8980                           
  8981                           ;incstack = 0
  8982                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8983     112D  01B3               	clrf	___wmul@product^(0+128)
  8984     112E  01B4               	clrf	(___wmul@product+1)^(0+128)
  8985     112F                     l4685:
  8986     112F  1C2F               	btfss	___wmul@multiplier^(0+128),0
  8987     1130  2935               	goto	l1231
  8988     1131  0831               	movf	___wmul@multiplicand^(0+128),w
  8989     1132  07B3               	addwf	___wmul@product^(0+128),f
  8990     1133  0832               	movf	(___wmul@multiplicand+1)^(0+128),w
  8991     1134  3DB4               	addwfc	(___wmul@product+1)^(0+128),f
  8992     1135                     l1231:
  8993     1135  3001               	movlw	1
  8994     1136                     u3835:
  8995     1136  35B1               	lslf	___wmul@multiplicand^(0+128),f
  8996     1137  0DB2               	rlf	(___wmul@multiplicand+1)^(0+128),f
  8997     1138  0B89               	decfsz	9,f
  8998     1139  2936               	goto	u3835
  8999     113A  3001               	movlw	1
  9000     113B                     u3845:
  9001     113B  36B0               	lsrf	(___wmul@multiplier+1)^(0+128),f
  9002     113C  0CAF               	rrf	___wmul@multiplier^(0+128),f
  9003     113D  0B89               	decfsz	9,f
  9004     113E  293B               	goto	u3845
  9005     113F  082F               	movf	___wmul@multiplier^(0+128),w
  9006     1140  0430               	iorwf	(___wmul@multiplier+1)^(0+128),w
  9007     1141  1D03               	btfss	3,2
  9008     1142  292F               	goto	l4685
  9009     1143  0834               	movf	(___wmul@product+1)^(0+128),w
  9010     1144  00B0               	movwf	(?___wmul+1)^(0+128)
  9011     1145  0833               	movf	___wmul@product^(0+128),w
  9012     1146  00AF               	movwf	?___wmul^(0+128)
  9013     1147  0008               	return
  9014     1148                     __end_of___wmul:
  9015                           
  9016                           	psect	text43
  9017     14D5                     __ptext43:	
  9018 ;; *************** function ___awmod *****************
  9019 ;; Defined at:
  9020 ;;		line 5 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/awmod.c"
  9021 ;; Parameters:    Size  Location     Type
  9022 ;;  divisor         2    0[BANK1 ] int 
  9023 ;;  dividend        2    2[BANK1 ] int 
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;  sign            1    6[BANK1 ] unsigned char 
  9026 ;;  counter         1    5[BANK1 ] unsigned char 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;                  2    0[BANK1 ] int 
  9029 ;; Registers used:
  9030 ;;		wreg, status,2, status,0
  9031 ;; Tracked objects:
  9032 ;;		On entry : 1F/1
  9033 ;;		On exit  : 1F/1
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9036 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9038 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;Total ram usage:        7 bytes
  9041 ;; Hardware stack levels used: 1
  9042 ;; Hardware stack levels required when called: 10
  9043 ;; This function calls:
  9044 ;;		Nothing
  9045 ;; This function is called by:
  9046 ;;		_GenericQueue_Enqueue
  9047 ;;		_GenericQueue_Dequeue
  9048 ;;		_GenericQueue_Remove
  9049 ;;		_GenericQueue_Contains
  9050 ;;		_GenericQueue_CopyToArray
  9051 ;; This function uses a non-reentrant model
  9052 ;;
  9053                           
  9054     14D5                     ___awmod:	
  9055                           ;psect for function ___awmod
  9056                           
  9057                           
  9058                           ;incstack = 0
  9059                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  9060     14D5  01AE               	clrf	___awmod@sign^(0+128)
  9061     14D6  1FAB               	btfss	(___awmod@dividend+1)^(0+128),7
  9062     14D7  2CDF               	goto	l4705
  9063     14D8  09AA               	comf	___awmod@dividend^(0+128),f
  9064     14D9  09AB               	comf	(___awmod@dividend+1)^(0+128),f
  9065     14DA  0AAA               	incf	___awmod@dividend^(0+128),f
  9066     14DB  1903               	skipnz
  9067     14DC  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
  9068     14DD  01AE               	clrf	___awmod@sign^(0+128)
  9069     14DE  0AAE               	incf	___awmod@sign^(0+128),f
  9070     14DF                     l4705:
  9071     14DF  1FA9               	btfss	(___awmod@divisor+1)^(0+128),7
  9072     14E0  2CE6               	goto	l4709
  9073     14E1  09A8               	comf	___awmod@divisor^(0+128),f
  9074     14E2  09A9               	comf	(___awmod@divisor+1)^(0+128),f
  9075     14E3  0AA8               	incf	___awmod@divisor^(0+128),f
  9076     14E4  1903               	skipnz
  9077     14E5  0AA9               	incf	(___awmod@divisor+1)^(0+128),f
  9078     14E6                     l4709:
  9079     14E6  0828               	movf	___awmod@divisor^(0+128),w
  9080     14E7  0429               	iorwf	(___awmod@divisor+1)^(0+128),w
  9081     14E8  1903               	btfsc	3,2
  9082     14E9  2D0D               	goto	l4727
  9083     14EA  01AD               	clrf	___awmod@counter^(0+128)
  9084     14EB  0AAD               	incf	___awmod@counter^(0+128),f
  9085     14EC                     l4717:
  9086     14EC  1BA9               	btfsc	(___awmod@divisor+1)^(0+128),7
  9087     14ED  2CF8               	goto	l4719
  9088     14EE  3001               	movlw	1
  9089     14EF                     u3895:
  9090     14EF  35A8               	lslf	___awmod@divisor^(0+128),f
  9091     14F0  0DA9               	rlf	(___awmod@divisor+1)^(0+128),f
  9092     14F1  0B89               	decfsz	9,f
  9093     14F2  2CEF               	goto	u3895
  9094     14F3  3001               	movlw	1
  9095     14F4  00AC               	movwf	??___awmod^(0+128)
  9096     14F5  082C               	movf	??___awmod^(0+128),w
  9097     14F6  07AD               	addwf	___awmod@counter^(0+128),f
  9098     14F7  2CEC               	goto	l4717
  9099     14F8                     l4719:
  9100     14F8  0829               	movf	(___awmod@divisor+1)^(0+128),w
  9101     14F9  022B               	subwf	(___awmod@dividend+1)^(0+128),w
  9102     14FA  1D03               	skipz
  9103     14FB  2CFE               	goto	u3915
  9104     14FC  0828               	movf	___awmod@divisor^(0+128),w
  9105     14FD  022A               	subwf	___awmod@dividend^(0+128),w
  9106     14FE                     u3915:
  9107     14FE  1C03               	skipc
  9108     14FF  2D04               	goto	l4723
  9109     1500  0828               	movf	___awmod@divisor^(0+128),w
  9110     1501  02AA               	subwf	___awmod@dividend^(0+128),f
  9111     1502  0829               	movf	(___awmod@divisor+1)^(0+128),w
  9112     1503  3BAB               	subwfb	(___awmod@dividend+1)^(0+128),f
  9113     1504                     l4723:
  9114     1504  3001               	movlw	1
  9115     1505                     u3925:
  9116     1505  36A9               	lsrf	(___awmod@divisor+1)^(0+128),f
  9117     1506  0CA8               	rrf	___awmod@divisor^(0+128),f
  9118     1507  0B89               	decfsz	9,f
  9119     1508  2D05               	goto	u3925
  9120     1509  3001               	movlw	1
  9121     150A  02AD               	subwf	___awmod@counter^(0+128),f
  9122     150B  1D03               	btfss	3,2
  9123     150C  2CF8               	goto	l4719
  9124     150D                     l4727:
  9125     150D  082E               	movf	___awmod@sign^(0+128),w
  9126     150E  1903               	btfsc	3,2
  9127     150F  2D15               	goto	l4731
  9128     1510  09AA               	comf	___awmod@dividend^(0+128),f
  9129     1511  09AB               	comf	(___awmod@dividend+1)^(0+128),f
  9130     1512  0AAA               	incf	___awmod@dividend^(0+128),f
  9131     1513  1903               	skipnz
  9132     1514  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
  9133     1515                     l4731:
  9134     1515  082B               	movf	(___awmod@dividend+1)^(0+128),w
  9135     1516  00A9               	movwf	(?___awmod+1)^(0+128)
  9136     1517  082A               	movf	___awmod@dividend^(0+128),w
  9137     1518  00A8               	movwf	?___awmod^(0+128)
  9138     1519  0008               	return
  9139     151A                     __end_of___awmod:
  9140                           
  9141                           	psect	text44
  9142     1F98                     __ptext44:	
  9143 ;; *************** function _GenericQueue_IsEmpty *****************
  9144 ;; Defined at:
  9145 ;;		line 11 in file "generic_queue.c"
  9146 ;; Parameters:    Size  Location     Type
  9147 ;;  q               2    0[BANK1 ] PTR struct .
  9148 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  9149 ;; Auto vars:     Size  Location     Type
  9150 ;;		None
  9151 ;; Return value:  Size  Location     Type
  9152 ;;                  2    0[BANK1 ] int 
  9153 ;; Registers used:
  9154 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9155 ;; Tracked objects:
  9156 ;;		On entry : 1F/1
  9157 ;;		On exit  : 1F/1
  9158 ;;		Unchanged: 0/0
  9159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9160 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;Total ram usage:        4 bytes
  9165 ;; Hardware stack levels used: 1
  9166 ;; Hardware stack levels required when called: 10
  9167 ;; This function calls:
  9168 ;;		Nothing
  9169 ;; This function is called by:
  9170 ;;		_PS2Keyboard_GetScanCode
  9171 ;;		_GenericQueue_Dequeue
  9172 ;;		_GenericQueue_Remove
  9173 ;;		_GenericQueue_Contains
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177     1F98                     _GenericQueue_IsEmpty:	
  9178                           ;psect for function _GenericQueue_IsEmpty
  9179                           
  9180                           
  9181                           ;generic_queue.c: 12:     return (q->size == 0);
  9182                           
  9183                           ;incstack = 0
  9184                           ; Regs used in _GenericQueue_IsEmpty: [wreg+fsr1l+fsr1h+status,2+status,0]
  9185     1F98  0828               	movf	GenericQueue_IsEmpty@q^(0+128),w
  9186     1F99  3E5E               	addlw	94
  9187     1F9A  0086               	movwf	6
  9188     1F9B  3000               	movlw	0
  9189     1F9C  3D29               	addwfc	(GenericQueue_IsEmpty@q+1)^(0+128),w
  9190     1F9D  0087               	movwf	7
  9191     1F9E  0801               	movf	1,w
  9192     1F9F  1D03               	btfss	3,2
  9193     1FA0  2FA3               	goto	u3750
  9194     1FA1  3001               	movlw	1
  9195     1FA2  2FA4               	goto	u3760
  9196     1FA3                     u3750:
  9197     1FA3  3000               	movlw	0
  9198     1FA4                     u3760:
  9199     1FA4  00AA               	movwf	??_GenericQueue_IsEmpty^(0+128)
  9200     1FA5  01AB               	clrf	(??_GenericQueue_IsEmpty^(0+128)+1)
  9201     1FA6  082A               	movf	??_GenericQueue_IsEmpty^(0+128),w
  9202     1FA7  00A8               	movwf	?_GenericQueue_IsEmpty^(0+128)
  9203     1FA8  082B               	movf	(??_GenericQueue_IsEmpty+1)^(0+128),w
  9204     1FA9  00A9               	movwf	(?_GenericQueue_IsEmpty+1)^(0+128)
  9205     1FAA  0008               	return
  9206     1FAB                     __end_of_GenericQueue_IsEmpty:
  9207                           
  9208                           	psect	text45
  9209     1EE5                     __ptext45:	
  9210 ;; *************** function _APP_KeyboardProcessOutputReport *****************
  9211 ;; Defined at:
  9212 ;;		line 523 in file "app_device_keyboard.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;		None
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;		None
  9217 ;; Return value:  Size  Location     Type
  9218 ;;                  1    wreg      void 
  9219 ;; Registers used:
  9220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9221 ;; Tracked objects:
  9222 ;;		On entry : 1C/1
  9223 ;;		On exit  : 1F/2
  9224 ;;		Unchanged: 0/0
  9225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;Total ram usage:        0 bytes
  9231 ;; Hardware stack levels used: 1
  9232 ;; Hardware stack levels required when called: 11
  9233 ;; This function calls:
  9234 ;;		_PS2Keyboard_SendCommand
  9235 ;; This function is called by:
  9236 ;;		_APP_KeyboardTasks
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240     1EE5                     _APP_KeyboardProcessOutputReport:	
  9241                           ;psect for function _APP_KeyboardProcessOutputReport
  9242                           
  9243                           
  9244                           ;app_device_keyboard.c: 524:     keyboard.leds.value = outputReport.value;
  9245                           
  9246                           ;incstack = 0
  9247                           ; Regs used in _APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  9248     1EE5  3090               	movlw	144
  9249     1EE6  0086               	movwf	6
  9250     1EE7  3023               	movlw	35
  9251     1EE8  0087               	movwf	7
  9252     1EE9  0022               	movlb	2	; select bank2
  9253     1EEA  0820               	movf	32,w	;volatile
  9254     1EEB  0081               	movwf	1
  9255                           
  9256                           ;app_device_keyboard.c: 525:     PS2Keyboard_SendCommand(0xED);
  9257     1EEC  30ED               	movlw	237
  9258     1EED  3191  217E         	fcall	_PS2Keyboard_SendCommand
  9259     1EEF  0008               	return
  9260     1EF0                     __end_of_APP_KeyboardProcessOutputReport:
  9261                           
  9262                           	psect	text46
  9263     117E                     __ptext46:	
  9264 ;; *************** function _PS2Keyboard_SendCommand *****************
  9265 ;; Defined at:
  9266 ;;		line 60 in file "ps2_keyboard.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;  cmd             1    wreg     unsigned char 
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;  cmd             1    0[BANK1 ] unsigned char 
  9271 ;; Return value:  Size  Location     Type
  9272 ;;                  1    wreg      void 
  9273 ;; Registers used:
  9274 ;;		wreg, status,2
  9275 ;; Tracked objects:
  9276 ;;		On entry : 1C/1
  9277 ;;		On exit  : 1F/2
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;Total ram usage:        1 bytes
  9285 ;; Hardware stack levels used: 1
  9286 ;; Hardware stack levels required when called: 10
  9287 ;; This function calls:
  9288 ;;		Nothing
  9289 ;; This function is called by:
  9290 ;;		_APP_KeyboardUpdateState
  9291 ;;		_APP_KeyboardProcessOutputReport
  9292 ;; This function uses a non-reentrant model
  9293 ;;
  9294                           
  9295     117E                     _PS2Keyboard_SendCommand:	
  9296                           ;psect for function _PS2Keyboard_SendCommand
  9297                           
  9298                           
  9299                           ;incstack = 0
  9300                           ; Regs used in _PS2Keyboard_SendCommand: [wreg+status,2]
  9301                           ;PS2Keyboard_SendCommand@cmd stored from wreg
  9302     117E  0021               	movlb	1	; select bank1
  9303     117F  00A8               	movwf	PS2Keyboard_SendCommand@cmd^(0+128)
  9304                           
  9305                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
  9306     1180  0828               	movf	PS2Keyboard_SendCommand@cmd^(0+128),w
  9307     1181  0022               	movlb	2	; select bank2
  9308     1182  00CE               	movwf	_keyboardCommand^(0+256)	;volatile
  9309                           
  9310                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
  9311     1183  138B               	bcf	11,7	;volatile
  9312     1184  0021               	movlb	1	; select bank1
  9313     1185  120C               	bcf	12,4	;volatile
  9314     1186  0022               	movlb	2	; select bank2
  9315     1187  120C               	bcf	12,4	;volatile
  9316                           
  9317                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
  9318     1188  30F0               	movlw	240
  9319     1189                     u6487:
  9320     1189  3200               	nop2
  9321     118A  0B89               	decfsz	9,f
  9322     118B  2989               	goto	u6487
  9323     118C  0021               	movlb	1	; select bank1
  9324     118D  160C               	bsf	12,4	;volatile
  9325                           
  9326                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
  9327     118E  0020               	movlb	0	; select bank0
  9328     118F  01E9               	clrf	_keyboardCommandCount	;volatile
  9329                           
  9330                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
  9331     1190  300C               	movlw	12
  9332     1191  0022               	movlb	2	; select bank2
  9333     1192  00CD               	movwf	_keyboardCommandBits^(0+256)	;volatile
  9334                           
  9335                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
  9336     1193  01CC               	clrf	_keyboardCommandOnes^(0+256)	;volatile
  9337     1194  0021               	movlb	1	; select bank1
  9338     1195  128C               	bcf	12,5	;volatile
  9339     1196  0022               	movlb	2	; select bank2
  9340     1197  128C               	bcf	12,5	;volatile
  9341                           
  9342                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
  9343     1198  178B               	bsf	11,7	;volatile
  9344     1199  0008               	return
  9345     119A                     __end_of_PS2Keyboard_SendCommand:
  9346                           
  9347                           	psect	intentry
  9348     0004                     __pintentry:	
  9349 ;; *************** function _INTERRUPT_InterruptManager *****************
  9350 ;; Defined at:
  9351 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  9352 ;; Parameters:    Size  Location     Type
  9353 ;;		None
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;		None
  9356 ;; Return value:  Size  Location     Type
  9357 ;;                  1    wreg      void 
  9358 ;; Registers used:
  9359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9360 ;; Tracked objects:
  9361 ;;		On entry : 0/0
  9362 ;;		On exit  : 0/0
  9363 ;;		Unchanged: 0/0
  9364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;Total ram usage:        0 bytes
  9370 ;; Hardware stack levels used: 1
  9371 ;; Hardware stack levels required when called: 9
  9372 ;; This function calls:
  9373 ;;		NULL
  9374 ;;		_EUSART_Receive_ISR
  9375 ;;		_EUSART_Transmit_ISR
  9376 ;;		_PIN_MANAGER_IOC
  9377 ;;		_TMR2_ISR
  9378 ;;		_USBDeviceTasks
  9379 ;; This function is called by:
  9380 ;;		Interrupt level 1
  9381 ;; This function uses a non-reentrant model
  9382 ;;
  9383                           
  9384     0004                     _INTERRUPT_InterruptManager:
  9385                           
  9386                           ;incstack = 0
  9387     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9388                           
  9389                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9390     0005  3180               	pagesel	$
  9391                           
  9392                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  9393     0006  198B               	btfsc	11,3	;volatile
  9394     0007  1C0B               	btfss	11,0	;volatile
  9395     0008  280D               	goto	i1l133
  9396                           
  9397                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  9398     0009  319E  26DA  3180   	fcall	_PIN_MANAGER_IOC
  9399                           
  9400                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  9401     000C  283B               	goto	i1l145
  9402     000D                     i1l133:	
  9403                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  9404                           
  9405     000D  1F0B               	btfss	11,6	;volatile
  9406     000E  283B               	goto	i1l145
  9407                           
  9408                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.USBIE == 1 && PIR2bits.USBIF == 1)
  9409     000F  0021               	movlb	1	; select bank1
  9410     0010  1D12               	btfss	18,2	;volatile
  9411     0011  2819               	goto	i1l136
  9412     0012  0020               	movlb	0	; select bank0
  9413     0013  1D12               	btfss	18,2	;volatile
  9414     0014  2819               	goto	i1l136
  9415                           
  9416                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             USBDeviceTasks();
  9417     0015  3186  26FD  3180   	fcall	_USBDeviceTasks
  9418                           
  9419                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  9420     0018  283B               	goto	i1l145
  9421     0019                     i1l136:	
  9422                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
  9423                           
  9424     0019  0021               	movlb	1	; select bank1
  9425     001A  1E11               	btfss	17,4	;volatile
  9426     001B  2826               	goto	i1l138
  9427     001C  0020               	movlb	0	; select bank0
  9428     001D  1E11               	btfss	17,4	;volatile
  9429     001E  2826               	goto	i1l138
  9430                           
  9431                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_TxDefaultInterruptHandler();
  9432     001F  0022               	movlb	2	; select bank2
  9433     0020  084B               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
  9434     0021  008A               	movwf	10
  9435     0022  084A               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
  9436     0023  000A               	callw
  9437     0024  3180               	pagesel	$
  9438                           
  9439                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  9440     0025  283B               	goto	i1l145
  9441     0026                     i1l138:	
  9442                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  9443                           
  9444     0026  0021               	movlb	1	; select bank1
  9445     0027  1E91               	btfss	17,5	;volatile
  9446     0028  2833               	goto	i1l140
  9447     0029  0020               	movlb	0	; select bank0
  9448     002A  1E91               	btfss	17,5	;volatile
  9449     002B  2833               	goto	i1l140
  9450                           
  9451                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             EUSART_RxDefaultInterruptHandler();
  9452     002C  0022               	movlb	2	; select bank2
  9453     002D  0849               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
  9454     002E  008A               	movwf	10
  9455     002F  0848               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
  9456     0030  000A               	callw
  9457     0031  3180               	pagesel	$
  9458                           
  9459                           ;mcc_generated_files/interrupt_manager.c: 72:         }
  9460     0032  283B               	goto	i1l145
  9461     0033                     i1l140:	
  9462                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
  9463                           
  9464     0033  0021               	movlb	1	; select bank1
  9465     0034  1C91               	btfss	17,1	;volatile
  9466     0035  283B               	goto	i1l145
  9467     0036  0020               	movlb	0	; select bank0
  9468     0037  1C91               	btfss	17,1	;volatile
  9469     0038  283B               	goto	i1l145
  9470                           
  9471                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR2_ISR();
  9472     0039  319E  26FB         	fcall	_TMR2_ISR
  9473     003B                     i1l145:	
  9474                           ;mcc_generated_files/interrupt_manager.c: 76:         }
  9475                           
  9476     003B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9477     003C  0009               	retfie
  9478     003D                     __end_of_INTERRUPT_InterruptManager:
  9479                           
  9480                           	psect	text48
  9481     06FD                     __ptext48:	
  9482 ;; *************** function _USBDeviceTasks *****************
  9483 ;; Defined at:
  9484 ;;		line 481 in file "usb/usb_device.c"
  9485 ;; Parameters:    Size  Location     Type
  9486 ;;		None
  9487 ;; Auto vars:     Size  Location     Type
  9488 ;;  i               1   18[BANK0 ] unsigned char 
  9489 ;; Return value:  Size  Location     Type
  9490 ;;                  1    wreg      void 
  9491 ;; Registers used:
  9492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9493 ;; Tracked objects:
  9494 ;;		On entry : 1F/0
  9495 ;;		On exit  : 1F/0
  9496 ;;		Unchanged: 0/0
  9497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;Total ram usage:        2 bytes
  9503 ;; Hardware stack levels used: 1
  9504 ;; Hardware stack levels required when called: 8
  9505 ;; This function calls:
  9506 ;;		_USBCtrlEPAllowStatusStage
  9507 ;;		_USBCtrlEPService
  9508 ;;		_USBIncrement1msInternalTimers
  9509 ;;		_USBStallHandler
  9510 ;;		_USBSuspend
  9511 ;;		_USBWakeFromSuspend
  9512 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9513 ;;		i1_USBDeviceInit
  9514 ;; This function is called by:
  9515 ;;		_INTERRUPT_InterruptManager
  9516 ;; This function uses a non-reentrant model
  9517 ;;
  9518                           
  9519     06FD                     _USBDeviceTasks:	
  9520                           ;psect for function _USBDeviceTasks
  9521                           
  9522                           
  9523                           ;usb/usb_device.c: 483:     uint8_t i;;usb/usb_device.c: 594:     if(USBDeviceState == A
      +                          TTACHED_STATE)
  9524                           
  9525                           ;incstack = 0
  9526                           ; Regs used in _USBDeviceTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9527     06FD  036C               	decf	_USBDeviceState,w
  9528     06FE  1D03               	btfss	3,2
  9529     06FF  2F09               	goto	i1l5609
  9530                           
  9531                           ;usb/usb_device.c: 595:     {;usb/usb_device.c: 605:         if(!UCONbits.SE0)
  9532     0700  003D               	movlb	29	; select bank29
  9533     0701  1A8E               	btfsc	14,5	;volatile
  9534     0702  2F09               	goto	i1l5609
  9535                           
  9536                           ;usb/usb_device.c: 606:         {;usb/usb_device.c: 612:                 {UIR = 0;};
  9537     0703  0190               	clrf	16	;volatile
  9538                           
  9539                           ;usb/usb_device.c: 618:             UIEbits.URSTIE = 1;
  9540     0704  1412               	bsf	18,0	;volatile
  9541                           
  9542                           ;usb/usb_device.c: 619:             UIEbits.IDLEIE = 1;
  9543     0705  1612               	bsf	18,4	;volatile
  9544                           
  9545                           ;usb/usb_device.c: 620:             USBDeviceState = POWERED_STATE;
  9546     0706  3002               	movlw	2
  9547     0707  0020               	movlb	0	; select bank0
  9548     0708  00EC               	movwf	_USBDeviceState	;volatile
  9549     0709                     i1l5609:
  9550                           
  9551                           ;usb/usb_device.c: 638:     if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  9552     0709  003D               	movlb	29	; select bank29
  9553     070A  1910               	btfsc	16,2	;volatile
  9554     070B  1D12               	btfss	18,2	;volatile
  9555     070C  2F16               	goto	i1l5617
  9556                           
  9557                           ;usb/usb_device.c: 639:     {;usb/usb_device.c: 640:         (UIR &= 0xFB);
  9558     070D  30FB               	movlw	251
  9559     070E  0020               	movlb	0	; select bank0
  9560     070F  00E1               	movwf	??_USBDeviceTasks
  9561     0710  0861               	movf	??_USBDeviceTasks,w
  9562     0711  003D               	movlb	29	; select bank29
  9563     0712  0590               	andwf	16,f	;volatile
  9564                           
  9565                           ;usb/usb_device.c: 644:             USBWakeFromSuspend();
  9566     0713  3191  21B6  3186   	fcall	_USBWakeFromSuspend
  9567     0716                     i1l5617:
  9568                           
  9569                           ;usb/usb_device.c: 651:     if(UCONbits.SUSPND==1)
  9570     0716  003D               	movlb	29	; select bank29
  9571     0717  1C8E               	btfss	14,1	;volatile
  9572     0718  2F1C               	goto	i1l454
  9573                           
  9574                           ;usb/usb_device.c: 652:     {;usb/usb_device.c: 653:         PIR2bits.USBIF = 0;;
  9575     0719  0020               	movlb	0	; select bank0
  9576     071A  1112               	bcf	18,2	;volatile
  9577                           
  9578                           ;usb/usb_device.c: 654:         return;
  9579     071B  0008               	return
  9580     071C                     i1l454:	
  9581                           ;usb/usb_device.c: 655:     }
  9582                           
  9583                           
  9584                           ;usb/usb_device.c: 667:     if(UIRbits.URSTIF && UIEbits.URSTIE)
  9585     071C  1810               	btfsc	16,0	;volatile
  9586     071D  1C12               	btfss	18,0	;volatile
  9587     071E  2F2C               	goto	i1l5631
  9588                           
  9589                           ;usb/usb_device.c: 668:     {;usb/usb_device.c: 669:         USBDeviceInit();
  9590     071F  318D  25FE  3186   	fcall	i1_USBDeviceInit
  9591                           
  9592                           ;usb/usb_device.c: 673:         {PIE2bits.USBIE = 1;};
  9593     0722  0021               	movlb	1	; select bank1
  9594     0723  1512               	bsf	18,2	;volatile
  9595                           
  9596                           ;usb/usb_device.c: 675:         USBDeviceState = DEFAULT_STATE;
  9597     0724  3004               	movlw	4
  9598     0725  0020               	movlb	0	; select bank0
  9599     0726  00EC               	movwf	_USBDeviceState	;volatile
  9600                           
  9601                           ;usb/usb_device.c: 685:         (UIR &= 0xFE);
  9602     0727  30FE               	movlw	254
  9603     0728  00E1               	movwf	??_USBDeviceTasks
  9604     0729  0861               	movf	??_USBDeviceTasks,w
  9605     072A  003D               	movlb	29	; select bank29
  9606     072B  0590               	andwf	16,f	;volatile
  9607     072C                     i1l5631:
  9608                           
  9609                           ;usb/usb_device.c: 691:     if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  9610     072C  1A10               	btfsc	16,4	;volatile
  9611     072D  1E12               	btfss	18,4	;volatile
  9612     072E  2F32               	goto	i1l5637
  9613                           
  9614                           ;usb/usb_device.c: 692:     {;usb/usb_device.c: 698:             USBSuspend();
  9615     072F  3190  20C7  3186   	fcall	_USBSuspend
  9616     0732                     i1l5637:
  9617                           
  9618                           ;usb/usb_device.c: 712:     if(UIRbits.SOFIF)
  9619     0732  003D               	movlb	29	; select bank29
  9620     0733  1F10               	btfss	16,6	;volatile
  9621     0734  2F5A               	goto	i1l5653
  9622                           
  9623                           ;usb/usb_device.c: 713:     {;usb/usb_device.c: 715:         if(UIEbits.SOFIE)
  9624     0735  1F12               	btfss	18,6	;volatile
  9625     0736  2F46               	goto	i1l5643
  9626                           
  9627                           ;usb/usb_device.c: 716:         {;usb/usb_device.c: 717:             USER_USB_CALLBACK_E
      +                          VENT_HANDLER((USB_EVENT)EVENT_SOF,0,1);
  9628     0737  3073               	movlw	115
  9629     0738  0020               	movlb	0	; select bank0
  9630     0739  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9631     073A  3000               	movlw	0
  9632     073B  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9633     073C  3000               	movlw	0
  9634     073D  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9635     073E  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9636     073F  3001               	movlw	1
  9637     0740  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9638     0741  3000               	movlw	0
  9639     0742  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9640     0743  3193  23D2  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9641     0746                     i1l5643:
  9642                           
  9643                           ;usb/usb_device.c: 719:         (UIR &= 0xBF);
  9644     0746  30BF               	movlw	191
  9645     0747  0020               	movlb	0	; select bank0
  9646     0748  00E1               	movwf	??_USBDeviceTasks
  9647     0749  0861               	movf	??_USBDeviceTasks,w
  9648     074A  003D               	movlb	29	; select bank29
  9649     074B  0590               	andwf	16,f	;volatile
  9650                           
  9651                           ;usb/usb_device.c: 722:             USBIncrement1msInternalTimers();
  9652     074C  3190  2098  3186   	fcall	_USBIncrement1msInternalTimers
  9653                           
  9654                           ;usb/usb_device.c: 739:             if(USBStatusStageTimeoutCounter != 0u)
  9655     074F  085C               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  9656     0750  1903               	btfsc	3,2
  9657     0751  2F54               	goto	i1l460
  9658                           
  9659                           ;usb/usb_device.c: 740:             {;usb/usb_device.c: 741:                 USBStatusSt
      +                          ageTimeoutCounter--;
  9660     0752  3001               	movlw	1
  9661     0753  02DC               	subwf	_USBStatusStageTimeoutCounter^(0+256),f	;volatile
  9662     0754                     i1l460:	
  9663                           ;usb/usb_device.c: 742:             }
  9664                           
  9665                           
  9666                           ;usb/usb_device.c: 748:             if(USBStatusStageTimeoutCounter == 0)
  9667     0754  085C               	movf	_USBStatusStageTimeoutCounter^(0+256),w	;volatile
  9668     0755  1D03               	btfss	3,2
  9669     0756  2F5A               	goto	i1l5653
  9670                           
  9671                           ;usb/usb_device.c: 749:             {;usb/usb_device.c: 750:                 USBCtrlEPAl
      +                          lowStatusStage();
  9672     0757  318A  2200  3186   	fcall	_USBCtrlEPAllowStatusStage
  9673     075A                     i1l5653:
  9674                           
  9675                           ;usb/usb_device.c: 755:     if(UIRbits.STALLIF && UIEbits.STALLIE)
  9676     075A  003D               	movlb	29	; select bank29
  9677     075B  1A90               	btfsc	16,5	;volatile
  9678     075C  1E92               	btfss	18,5	;volatile
  9679     075D  2F61               	goto	i1l5659
  9680                           
  9681                           ;usb/usb_device.c: 756:     {;usb/usb_device.c: 757:         USBStallHandler();
  9682     075E  3192  2271  3186   	fcall	_USBStallHandler
  9683     0761                     i1l5659:
  9684                           
  9685                           ;usb/usb_device.c: 760:     if(UIRbits.UERRIF && UIEbits.UERRIE)
  9686     0761  1890               	btfsc	16,1	;volatile
  9687     0762  1C92               	btfss	18,1	;volatile
  9688     0763  2F75               	goto	i1l5667
  9689                           
  9690                           ;usb/usb_device.c: 761:     {;usb/usb_device.c: 762:         USER_USB_CALLBACK_EVENT_HAN
      +                          DLER((USB_EVENT)EVENT_BUS_ERROR,0,1);
  9691     0764  30FF               	movlw	255
  9692     0765  0020               	movlb	0	; select bank0
  9693     0766  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9694     0767  307F               	movlw	127
  9695     0768  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9696     0769  3000               	movlw	0
  9697     076A  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9698     076B  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9699     076C  3001               	movlw	1
  9700     076D  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9701     076E  3000               	movlw	0
  9702     076F  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9703     0770  3193  23D2  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9704                           
  9705                           ;usb/usb_device.c: 763:         {UEIR = 0;};
  9706     0773  003D               	movlb	29	; select bank29
  9707     0774  0193               	clrf	19	;volatile
  9708     0775                     i1l5667:
  9709                           
  9710                           ;usb/usb_device.c: 778:     if(USBDeviceState < DEFAULT_STATE)
  9711     0775  3004               	movlw	4
  9712     0776  0020               	movlb	0	; select bank0
  9713     0777  026C               	subwf	_USBDeviceState,w
  9714     0778  1803               	skipnc
  9715     0779  2F7C               	goto	i1l464
  9716                           
  9717                           ;usb/usb_device.c: 779:     {;usb/usb_device.c: 780:         PIR2bits.USBIF = 0;;
  9718     077A  1112               	bcf	18,2	;volatile
  9719                           
  9720                           ;usb/usb_device.c: 781:         return;
  9721     077B  0008               	return
  9722     077C                     i1l464:	
  9723                           ;usb/usb_device.c: 782:     }
  9724                           
  9725                           
  9726                           ;usb/usb_device.c: 787:     if(UIEbits.TRNIE)
  9727     077C  003D               	movlb	29	; select bank29
  9728     077D  1D92               	btfss	18,3	;volatile
  9729     077E  2FCD               	goto	i1l465
  9730                           
  9731                           ;usb/usb_device.c: 788:     {;usb/usb_device.c: 789:         for(i = 0; i < 4u; i++)
  9732     077F  0020               	movlb	0	; select bank0
  9733     0780  01E2               	clrf	USBDeviceTasks@i
  9734     0781  2FCA               	goto	i1l466
  9735     0782                     i1l5677:
  9736                           
  9737                           ;usb/usb_device.c: 792:             {;usb/usb_device.c: 794:                 USTATcopy.V
      +                          al = USTAT;
  9738     0782  080F               	movf	15,w	;volatile
  9739     0783  0020               	movlb	0	; select bank0
  9740     0784  00ED               	movwf	_USTATcopy	;volatile
  9741                           
  9742                           ;usb/usb_device.c: 795:                 endpoint_number = USTATcopy.endpoint_number;
  9743     0785  0C6D               	rrf	_USTATcopy,w	;volatile
  9744     0786  00E1               	movwf	??_USBDeviceTasks
  9745     0787  0CE1               	rrf	??_USBDeviceTasks,f
  9746     0788  0C61               	rrf	??_USBDeviceTasks,w
  9747     0789  390F               	andlw	15
  9748     078A  0022               	movlb	2	; select bank2
  9749     078B  00DE               	movwf	_endpoint_number^(0+256)	;volatile
  9750                           
  9751                           ;usb/usb_device.c: 797:                 (UIR &= 0xF7);
  9752     078C  30F7               	movlw	247
  9753     078D  0020               	movlb	0	; select bank0
  9754     078E  00E1               	movwf	??_USBDeviceTasks
  9755     078F  0861               	movf	??_USBDeviceTasks,w
  9756     0790  003D               	movlb	29	; select bank29
  9757     0791  0590               	andwf	16,f	;volatile
  9758                           
  9759                           ;usb/usb_device.c: 802:                 if(USTATcopy.direction == 0)
  9760     0792  0020               	movlb	0	; select bank0
  9761     0793  196D               	btfsc	_USTATcopy,2	;volatile
  9762     0794  2F99               	goto	i1l5687
  9763                           
  9764                           ;usb/usb_device.c: 803:                 {;usb/usb_device.c: 804:                     ep_
      +                          data_out[endpoint_number].bits.ping_pong_state ^= 1;
  9765     0795  0022               	movlb	2	; select bank2
  9766     0796  085E               	movf	_endpoint_number^(0+256),w	;volatile
  9767     0797  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  9768     0798  2F9C               	goto	L7
  9769     0799                     i1l5687:	
  9770                           ;usb/usb_device.c: 805:                 }
  9771                           
  9772                           
  9773                           ;usb/usb_device.c: 807:                 {;usb/usb_device.c: 808:                     ep_
      +                          data_in[endpoint_number].bits.ping_pong_state ^= 1;
  9774     0799  0022               	movlb	2	; select bank2
  9775     079A  085E               	movf	_endpoint_number^(0+256),w	;volatile
  9776     079B  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  9777     079C                     L7:
  9778     079C  0086               	movwf	6
  9779     079D  3001               	movlw	1	; select bank2/3
  9780     079E  0087               	movwf	7
  9781     079F  0801               	movf	1,w
  9782     07A0  3901               	andlw	1
  9783     07A1  0020               	movlb	0	; select bank0
  9784     07A2  00E1               	movwf	??_USBDeviceTasks
  9785     07A3  3001               	movlw	1
  9786     07A4  06E1               	xorwf	??_USBDeviceTasks,f
  9787     07A5  0801               	movf	1,w
  9788     07A6  0661               	xorwf	??_USBDeviceTasks,w
  9789     07A7  39FE               	andlw	-2
  9790     07A8  0661               	xorwf	??_USBDeviceTasks,w
  9791     07A9  0081               	movwf	1
  9792                           
  9793                           ;usb/usb_device.c: 814:                 if(endpoint_number == 0)
  9794     07AA  0022               	movlb	2	; select bank2
  9795     07AB  085E               	movf	_endpoint_number^(0+256),w	;volatile
  9796     07AC  1D03               	btfss	3,2
  9797     07AD  2FB2               	goto	i1l5693
  9798                           
  9799                           ;usb/usb_device.c: 815:                 {;usb/usb_device.c: 816:                     USB
      +                          CtrlEPService();
  9800     07AE  3195  251A  3186   	fcall	_USBCtrlEPService
  9801                           
  9802                           ;usb/usb_device.c: 817:                 }
  9803     07B1  2FC1               	goto	i1l5695
  9804     07B2                     i1l5693:
  9805                           
  9806                           ;usb/usb_device.c: 819:                 {;usb/usb_device.c: 820:                     USE
      +                          R_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_TRANSFER,(uint8_t*)&USTATcopy.Val,0);
  9807     07B2  3072               	movlw	114
  9808     07B3  0020               	movlb	0	; select bank0
  9809     07B4  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9810     07B5  3000               	movlw	0
  9811     07B6  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9812     07B7  306D               	movlw	low _USTATcopy
  9813     07B8  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9814     07B9  3000               	movlw	high _USTATcopy
  9815     07BA  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9816     07BB  3000               	movlw	0
  9817     07BC  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9818     07BD  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9819     07BE  3193  23D2  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9820     07C1                     i1l5695:
  9821                           
  9822                           ;usb/usb_device.c: 827:         }
  9823     07C1  3001               	movlw	1
  9824     07C2  0020               	movlb	0	; select bank0
  9825     07C3  00E1               	movwf	??_USBDeviceTasks
  9826     07C4  0861               	movf	??_USBDeviceTasks,w
  9827     07C5  07E2               	addwf	USBDeviceTasks@i,f
  9828     07C6  3004               	movlw	4
  9829     07C7  0262               	subwf	USBDeviceTasks@i,w
  9830     07C8  1803               	btfsc	3,0
  9831     07C9  2FCD               	goto	i1l465
  9832     07CA                     i1l466:
  9833                           
  9834                           ;usb/usb_device.c: 790:         {;usb/usb_device.c: 791:             if(UIRbits.TRNIF)
  9835     07CA  003D               	movlb	29	; select bank29
  9836     07CB  1990               	btfsc	16,3	;volatile
  9837     07CC  2F82               	goto	i1l5677
  9838     07CD                     i1l465:	
  9839                           ;usb/usb_device.c: 828:     }
  9840                           
  9841                           
  9842                           ;usb/usb_device.c: 830:     PIR2bits.USBIF = 0;;
  9843     07CD  0020               	movlb	0	; select bank0
  9844     07CE  1112               	bcf	18,2	;volatile
  9845     07CF  0008               	return
  9846     07D0                     __end_of_USBDeviceTasks:
  9847                           
  9848                           	psect	text49
  9849     0DFE                     __ptext49:	
  9850 ;; *************** function i1_USBDeviceInit *****************
  9851 ;; Defined at:
  9852 ;;		line 281 in file "usb/usb_device.c"
  9853 ;; Parameters:    Size  Location     Type
  9854 ;;		None
  9855 ;; Auto vars:     Size  Location     Type
  9856 ;;  p               2    4[COMMON] PTR unsigned char 
  9857 ;;		 -> UEP1(1), 
  9858 ;;  i               1    7[COMMON] unsigned char 
  9859 ;;  i               1    6[COMMON] unsigned char 
  9860 ;; Return value:  Size  Location     Type
  9861 ;;                  1    wreg      void 
  9862 ;; Registers used:
  9863 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9864 ;; Tracked objects:
  9865 ;;		On entry : 1F/1D
  9866 ;;		On exit  : 1F/0
  9867 ;;		Unchanged: 0/0
  9868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9870 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;Total ram usage:        8 bytes
  9874 ;; Hardware stack levels used: 1
  9875 ;; This function calls:
  9876 ;;		Nothing
  9877 ;; This function is called by:
  9878 ;;		_USBDeviceTasks
  9879 ;; This function uses a non-reentrant model
  9880 ;;
  9881                           
  9882     0DFE                     i1_USBDeviceInit:	
  9883                           ;psect for function i1_USBDeviceInit
  9884                           
  9885                           
  9886                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  9887                           
  9888                           ;incstack = 0
  9889                           ; Regs used in i1_USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  9890     0DFE  0021               	movlb	1	; select bank1
  9891     0DFF  1112               	bcf	18,2	;volatile
  9892                           
  9893                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  9894     0E00  003D               	movlb	29	; select bank29
  9895     0E01  0193               	clrf	19	;volatile
  9896                           
  9897                           ;usb/usb_device.c: 295:     {UIR = 0;};
  9898     0E02  0190               	clrf	16	;volatile
  9899                           
  9900                           ;usb/usb_device.c: 298:     UEP0 = 0;
  9901     0E03  0198               	clrf	24	;volatile
  9902                           
  9903                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  9904     0E04  300E               	movlw	14
  9905     0E05  00F5               	movwf	i1USBDeviceInit@p+1
  9906     0E06  3099               	movlw	153
  9907     0E07  00F4               	movwf	i1USBDeviceInit@p
  9908     0E08  01F6               	clrf	i1USBDeviceInit@i_1324
  9909     0E09                     i1l5507:
  9910     0E09  0874               	movf	i1USBDeviceInit@p,w
  9911     0E0A  0086               	movwf	6
  9912     0E0B  0875               	movf	i1USBDeviceInit@p+1,w
  9913     0E0C  0087               	movwf	7
  9914     0E0D  0181               	clrf	1
  9915     0E0E  3001               	movlw	1
  9916     0E0F  07F4               	addwf	i1USBDeviceInit@p,f
  9917     0E10  3000               	movlw	0
  9918     0E11  3DF5               	addwfc	i1USBDeviceInit@p+1,f
  9919     0E12  3001               	movlw	1
  9920     0E13  00F0               	movwf	??i1_USBDeviceInit
  9921     0E14  0870               	movf	??i1_USBDeviceInit,w
  9922     0E15  07F6               	addwf	i1USBDeviceInit@i_1324,f
  9923     0E16  0876               	movf	i1USBDeviceInit@i_1324,w
  9924     0E17  1903               	btfsc	3,2
  9925     0E18  2E09               	goto	i1l5507
  9926                           
  9927                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  9928     0E19  3016               	movlw	22
  9929     0E1A  0091               	movwf	17	;volatile
  9930     0E1B  309F               	movlw	159
  9931     0E1C  0097               	movwf	23	;volatile
  9932     0E1D  307B               	movlw	123
  9933     0E1E  0092               	movwf	18	;volatile
  9934                           
  9935                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  9936     0E1F  01F7               	clrf	i1USBDeviceInit@i
  9937     0E20                     i1l5523:
  9938                           
  9939                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
  9940     0E20  0877               	movf	i1USBDeviceInit@i,w
  9941     0E21  00F0               	movwf	??i1_USBDeviceInit
  9942     0E22  3001               	movlw	1
  9943     0E23                     u496_25:
  9944     0E23  35F0               	lslf	??i1_USBDeviceInit,f
  9945     0E24  3EFF               	addlw	-1
  9946     0E25  1D03               	skipz
  9947     0E26  2E23               	goto	u496_25
  9948     0E27  3570               	lslf	??i1_USBDeviceInit,w
  9949     0E28  3E20               	addlw	32
  9950     0E29  0086               	movwf	6
  9951     0E2A  0187               	clrf	7
  9952     0E2B  3000               	movlw	0
  9953     0E2C  3FC0               	movwi [0]fsr1
  9954     0E2D  3000               	movlw	0
  9955     0E2E  3FC1               	movwi [1]fsr1
  9956     0E2F  3FC2               	movwi [2]fsr1
  9957     0E30  3FC3               	movwi [3]fsr1
  9958                           
  9959                           ;usb/usb_device.c: 314:     }
  9960     0E31  3001               	movlw	1
  9961     0E32  00F0               	movwf	??i1_USBDeviceInit
  9962     0E33  0870               	movf	??i1_USBDeviceInit,w
  9963     0E34  07F7               	addwf	i1USBDeviceInit@i,f
  9964     0E35  3008               	movlw	8
  9965     0E36  0277               	subwf	i1USBDeviceInit@i,w
  9966     0E37  1C03               	skipc
  9967     0E38  2E20               	goto	i1l5523
  9968                           
  9969                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
  9970     0E39  170E               	bsf	14,6	;volatile
  9971                           
  9972                           ;usb/usb_device.c: 320:     UADDR = 0x00;
  9973     0E3A  0196               	clrf	22	;volatile
  9974                           
  9975                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
  9976     0E3B  120E               	bcf	14,4	;volatile
  9977                           
  9978                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
  9979     0E3C  130E               	bcf	14,6	;volatile
  9980     0E3D                     i1l5535:
  9981                           
  9982                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
  9983     0E3D  30F7               	movlw	247
  9984     0E3E  00F0               	movwf	??i1_USBDeviceInit
  9985     0E3F  0870               	movf	??i1_USBDeviceInit,w
  9986     0E40  0590               	andwf	16,f	;volatile
  9987                           
  9988                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
  9989     0E41  0021               	movlb	1	; select bank1
  9990     0E42  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
  9991                           
  9992                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
  9993     0E43  0022               	movlb	2	; select bank2
  9994     0E44  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
  9995                           
  9996                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
  9997     0E45  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
  9998     0E46  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  9999                           
 10000                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
 10001     0E47  003D               	movlb	29	; select bank29
 10002     0E48  1990               	btfsc	16,3	;volatile
 10003     0E49  2E3D               	goto	i1l5535
 10004                           
 10005                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
 10006     0E4A  3001               	movlw	1
 10007     0E4B  0022               	movlb	2	; select bank2
 10008     0E4C  00DA               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10009                           
 10010                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
 10011     0E4D  3001               	movlw	1
 10012     0E4E  00D9               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10013                           
 10014                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
 10015     0E4F  01D8               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10016                           
 10017                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
 10018     0E50  01D7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10019                           
 10020                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
 10021     0E51  01DF               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 10022                           
 10023                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
 10024     0E52  01F7               	clrf	i1USBDeviceInit@i
 10025     0E53                     i1l5557:
 10026                           
 10027                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
 10028     0E53  3577               	lslf	i1USBDeviceInit@i,w
 10029     0E54  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 10030     0E55  0086               	movwf	6
 10031     0E56  0187               	clrf	7
 10032     0E57  3000               	movlw	0
 10033     0E58  3FC0               	movwi [0]fsr1
 10034     0E59  3FC1               	movwi [1]fsr1
 10035                           
 10036                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
 10037     0E5A  3577               	lslf	i1USBDeviceInit@i,w
 10038     0E5B  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 10039     0E5C  0086               	movwf	6
 10040     0E5D  3001               	movlw	1	; select bank2/3
 10041     0E5E  0087               	movwf	7
 10042     0E5F  3000               	movlw	0
 10043     0E60  3FC0               	movwi [0]fsr1
 10044     0E61  3FC1               	movwi [1]fsr1
 10045                           
 10046                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
 10047     0E62  0877               	movf	i1USBDeviceInit@i,w
 10048     0E63  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 10049     0E64  0086               	movwf	6
 10050     0E65  3001               	movlw	1	; select bank2/3
 10051     0E66  0087               	movwf	7
 10052     0E67  0181               	clrf	1
 10053                           
 10054                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
 10055     0E68  0877               	movf	i1USBDeviceInit@i,w
 10056     0E69  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 10057     0E6A  0086               	movwf	6
 10058     0E6B  3001               	movlw	1	; select bank2/3
 10059     0E6C  0087               	movwf	7
 10060     0E6D  0181               	clrf	1
 10061                           
 10062                           ;usb/usb_device.c: 355:     }
 10063     0E6E  3001               	movlw	1
 10064     0E6F  00F0               	movwf	??i1_USBDeviceInit
 10065     0E70  0870               	movf	??i1_USBDeviceInit,w
 10066     0E71  07F7               	addwf	i1USBDeviceInit@i,f
 10067     0E72  3002               	movlw	2
 10068     0E73  0277               	subwf	i1USBDeviceInit@i,w
 10069     0E74  1C03               	skipc
 10070     0E75  2E53               	goto	i1l5557
 10071                           
 10072                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 10073     0E76  3028               	movlw	40
 10074     0E77  0020               	movlb	0	; select bank0
 10075     0E78  00E3               	movwf	_pBDTEntryIn
 10076     0E79  3000               	movlw	0
 10077     0E7A  00E4               	movwf	_pBDTEntryIn+1
 10078                           
 10079                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
 10080     0E7B  3016               	movlw	22
 10081     0E7C  003D               	movlb	29	; select bank29
 10082     0E7D  0098               	movwf	24	;volatile
 10083                           
 10084                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
 10085     0E7E  3040               	movlw	64
 10086     0E7F  00F0               	movwf	??i1_USBDeviceInit
 10087     0E80  3000               	movlw	0
 10088     0E81  00F1               	movwf	??i1_USBDeviceInit+1
 10089     0E82  30FF               	movlw	255
 10090     0E83  0570               	andwf	??i1_USBDeviceInit,w
 10091     0E84  00F2               	movwf	??i1_USBDeviceInit+2
 10092     0E85  307F               	movlw	127
 10093     0E86  0571               	andwf	??i1_USBDeviceInit+1,w
 10094     0E87  00F3               	movwf	??i1_USBDeviceInit+3
 10095     0E88  0872               	movf	??i1_USBDeviceInit+2,w
 10096     0E89  0020               	movlb	0	; select bank0
 10097     0E8A  00A2               	movwf	34	;volatile
 10098     0E8B  0873               	movf	??i1_USBDeviceInit+3,w
 10099     0E8C  00A3               	movwf	35	;volatile
 10100                           
 10101                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
 10102     0E8D  3008               	movlw	8
 10103     0E8E  00A1               	movwf	33	;volatile
 10104                           
 10105                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
 10106     0E8F  3004               	movlw	4
 10107     0E90  00A0               	movwf	32	;volatile
 10108                           
 10109                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
 10110     0E91  17A0               	bsf	32,7	;volatile
 10111                           
 10112                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
 10113     0E92  01EF               	clrf	_USBActiveConfiguration	;volatile
 10114                           
 10115                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
 10116     0E93  3000               	movlw	0
 10117     0E94  0023               	movlb	3	; select bank3
 10118     0E95  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
 10119     0E96  3000               	movlw	0
 10120     0E97  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
 10121     0E98  3000               	movlw	0
 10122     0E99  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
 10123     0E9A  3000               	movlw	0
 10124     0E9B  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
 10125                           
 10126                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
 10127     0E9C  0022               	movlb	2	; select bank2
 10128     0E9D  01D6               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10129                           
 10130                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
 10131     0E9E  0020               	movlb	0	; select bank0
 10132     0E9F  01EC               	clrf	_USBDeviceState	;volatile
 10133     0EA0  0008               	return
 10134     0EA1                     __end_ofi1_USBDeviceInit:
 10135                           
 10136                           	psect	text50
 10137     11B6                     __ptext50:	
 10138 ;; *************** function _USBWakeFromSuspend *****************
 10139 ;; Defined at:
 10140 ;;		line 2310 in file "usb/usb_device.c"
 10141 ;; Parameters:    Size  Location     Type
 10142 ;;		None
 10143 ;; Auto vars:     Size  Location     Type
 10144 ;;		None
 10145 ;; Return value:  Size  Location     Type
 10146 ;;                  1    wreg      void 
 10147 ;; Registers used:
 10148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10149 ;; Tracked objects:
 10150 ;;		On entry : 1F/1D
 10151 ;;		On exit  : 1F/2
 10152 ;;		Unchanged: 0/0
 10153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;Total ram usage:        1 bytes
 10159 ;; Hardware stack levels used: 1
 10160 ;; Hardware stack levels required when called: 4
 10161 ;; This function calls:
 10162 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10163 ;; This function is called by:
 10164 ;;		_USBDeviceTasks
 10165 ;; This function uses a non-reentrant model
 10166 ;;
 10167                           
 10168     11B6                     _USBWakeFromSuspend:	
 10169                           ;psect for function _USBWakeFromSuspend
 10170                           
 10171                           
 10172                           ;usb/usb_device.c: 2312:     USBBusIsSuspended = 0;
 10173                           
 10174                           ;incstack = 0
 10175                           ; Regs used in _USBWakeFromSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10176     11B6  0022               	movlb	2	; select bank2
 10177     11B7  01DF               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 10178                           
 10179                           ;usb/usb_device.c: 2318:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_RESUME,0,0
      +                          );
 10180     11B8  3074               	movlw	116
 10181     11B9  0020               	movlb	0	; select bank0
 10182     11BA  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10183     11BB  3000               	movlw	0
 10184     11BC  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10185     11BD  3000               	movlw	0
 10186     11BE  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10187     11BF  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10188     11C0  3000               	movlw	0
 10189     11C1  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10190     11C2  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10191     11C3  3193  23D2  3191   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10192                           
 10193                           ;usb/usb_device.c: 2325:         UCONbits.SUSPND = 0;
 10194     11C6  003D               	movlb	29	; select bank29
 10195     11C7  108E               	bcf	14,1	;volatile
 10196                           
 10197                           ;usb/usb_device.c: 2330:     UIEbits.ACTVIE = 0;
 10198     11C8  1112               	bcf	18,2	;volatile
 10199     11C9                     i1l5269:	
 10200                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 10201                           
 10202                           
 10203                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 10204     11C9  1D10               	btfss	16,2	;volatile
 10205     11CA  29D0               	goto	i1l5271
 10206                           
 10207                           ;usb/usb_device.c: 2350:     {;usb/usb_device.c: 2351:         (UIR &= 0xFB);
 10208     11CB  30FB               	movlw	251
 10209     11CC  00FD               	movwf	??_USBWakeFromSuspend
 10210     11CD  087D               	movf	??_USBWakeFromSuspend,w
 10211     11CE  0590               	andwf	16,f	;volatile
 10212     11CF  29C9               	goto	i1l5269
 10213     11D0                     i1l5271:
 10214                           
 10215                           ;usb/usb_device.c: 2354:     USBTicksSinceSuspendEnd = 0;
 10216     11D0  0022               	movlb	2	; select bank2
 10217     11D1  01D6               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10218     11D2  0008               	return
 10219     11D3                     __end_of_USBWakeFromSuspend:
 10220                           
 10221                           	psect	text51
 10222     10C7                     __ptext51:	
 10223 ;; *************** function _USBSuspend *****************
 10224 ;; Defined at:
 10225 ;;		line 2252 in file "usb/usb_device.c"
 10226 ;; Parameters:    Size  Location     Type
 10227 ;;		None
 10228 ;; Auto vars:     Size  Location     Type
 10229 ;;		None
 10230 ;; Return value:  Size  Location     Type
 10231 ;;                  1    wreg      void 
 10232 ;; Registers used:
 10233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10234 ;; Tracked objects:
 10235 ;;		On entry : 1F/1D
 10236 ;;		On exit  : 0/0
 10237 ;;		Unchanged: 0/0
 10238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;Total ram usage:        1 bytes
 10244 ;; Hardware stack levels used: 1
 10245 ;; Hardware stack levels required when called: 4
 10246 ;; This function calls:
 10247 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10248 ;; This function is called by:
 10249 ;;		_USBDeviceTasks
 10250 ;; This function uses a non-reentrant model
 10251 ;;
 10252                           
 10253     10C7                     _USBSuspend:	
 10254                           ;psect for function _USBSuspend
 10255                           
 10256                           
 10257                           ;usb/usb_device.c: 2277:     UIEbits.ACTVIE = 1;
 10258                           
 10259                           ;incstack = 0
 10260                           ; Regs used in _USBSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10261     10C7  1512               	bsf	18,2	;volatile
 10262                           
 10263                           ;usb/usb_device.c: 2278:     (UIR &= 0xEF);
 10264     10C8  30EF               	movlw	239
 10265     10C9  00FD               	movwf	??_USBSuspend
 10266     10CA  087D               	movf	??_USBSuspend,w
 10267     10CB  0590               	andwf	16,f	;volatile
 10268                           
 10269                           ;usb/usb_device.c: 2281:         UCONbits.SUSPND = 1;
 10270     10CC  148E               	bsf	14,1	;volatile
 10271                           
 10272                           ;usb/usb_device.c: 2284:     USBBusIsSuspended = 1;
 10273     10CD  3001               	movlw	1
 10274     10CE  0022               	movlb	2	; select bank2
 10275     10CF  00DF               	movwf	_USBBusIsSuspended^(0+256)	;volatile
 10276                           
 10277                           ;usb/usb_device.c: 2285:     USBTicksSinceSuspendEnd = 0;
 10278     10D0  01D6               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10279                           
 10280                           ;usb/usb_device.c: 2292:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SUSPEND,0,
      +                          0);
 10281     10D1  3075               	movlw	117
 10282     10D2  0020               	movlb	0	; select bank0
 10283     10D3  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10284     10D4  3000               	movlw	0
 10285     10D5  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10286     10D6  3000               	movlw	0
 10287     10D7  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10288     10D8  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10289     10D9  3000               	movlw	0
 10290     10DA  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10291     10DB  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10292     10DC  3193  23D2         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10293     10DE  0008               	return
 10294     10DF                     __end_of_USBSuspend:
 10295                           
 10296                           	psect	text52
 10297     1271                     __ptext52:	
 10298 ;; *************** function _USBStallHandler *****************
 10299 ;; Defined at:
 10300 ;;		line 2209 in file "usb/usb_device.c"
 10301 ;; Parameters:    Size  Location     Type
 10302 ;;		None
 10303 ;; Auto vars:     Size  Location     Type
 10304 ;;		None
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  1    wreg      void 
 10307 ;; Registers used:
 10308 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10309 ;; Tracked objects:
 10310 ;;		On entry : 1F/1D
 10311 ;;		On exit  : 1F/1D
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;Total ram usage:        1 bytes
 10319 ;; Hardware stack levels used: 1
 10320 ;; This function calls:
 10321 ;;		Nothing
 10322 ;; This function is called by:
 10323 ;;		_USBDeviceTasks
 10324 ;; This function uses a non-reentrant model
 10325 ;;
 10326                           
 10327     1271                     _USBStallHandler:	
 10328                           ;psect for function _USBStallHandler
 10329                           
 10330                           
 10331                           ;usb/usb_device.c: 2221:     if(UEP0bits.EPSTALL == 1)
 10332                           
 10333                           ;incstack = 0
 10334                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10335     1271  1C18               	btfss	24,0	;volatile
 10336     1272  2A8E               	goto	i1l5303
 10337                           
 10338                           ;usb/usb_device.c: 2222:     {;usb/usb_device.c: 2224:         if((pBDTEntryEP0OutCurren
      +                          t->STAT.Val == 0x80) && (pBDTEntryIn[0]->STAT.Val == (0x80|0x04)))
 10339     1273  0020               	movlb	0	; select bank0
 10340     1274  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10341     1275  0086               	movwf	6
 10342     1276  0187               	clrf	7
 10343     1277  3080               	movlw	128
 10344     1278  0601               	xorwf	1,w
 10345     1279  1D03               	btfss	3,2
 10346     127A  2A8C               	goto	i1l5301
 10347     127B  0863               	movf	_pBDTEntryIn,w
 10348     127C  0086               	movwf	6
 10349     127D  0864               	movf	_pBDTEntryIn+1,w
 10350     127E  0087               	movwf	7
 10351     127F  3084               	movlw	132
 10352     1280  0601               	xorwf	1,w
 10353     1281  1D03               	btfss	3,2
 10354     1282  2A8C               	goto	i1l5301
 10355                           
 10356                           ;usb/usb_device.c: 2225:         {;usb/usb_device.c: 2227:             pBDTEntryEP0OutCu
      +                          rrent->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 10357     1283  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10358     1284  0086               	movwf	6
 10359     1285  0187               	clrf	7
 10360     1286  300C               	movlw	12
 10361     1287  0081               	movwf	1
 10362                           
 10363                           ;usb/usb_device.c: 2228:             pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 10364     1288  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10365     1289  0086               	movwf	6
 10366     128A  0187               	clrf	7
 10367     128B  1781               	bsf	1,7
 10368     128C                     i1l5301:
 10369                           
 10370                           ;usb/usb_device.c: 2230:         UEP0bits.EPSTALL = 0;
 10371     128C  003D               	movlb	29	; select bank29
 10372     128D  1018               	bcf	24,0	;volatile
 10373     128E                     i1l5303:
 10374                           
 10375                           ;usb/usb_device.c: 2233:     (UIR &= 0xDF);
 10376     128E  30DF               	movlw	223
 10377     128F  00F0               	movwf	??_USBStallHandler
 10378     1290  0870               	movf	??_USBStallHandler,w
 10379     1291  0590               	andwf	16,f	;volatile
 10380     1292  0008               	return
 10381     1293                     __end_of_USBStallHandler:
 10382                           
 10383                           	psect	text53
 10384     1098                     __ptext53:	
 10385 ;; *************** function _USBIncrement1msInternalTimers *****************
 10386 ;; Defined at:
 10387 ;;		line 2998 in file "usb/usb_device.c"
 10388 ;; Parameters:    Size  Location     Type
 10389 ;;		None
 10390 ;; Auto vars:     Size  Location     Type
 10391 ;;		None
 10392 ;; Return value:  Size  Location     Type
 10393 ;;                  1    wreg      void 
 10394 ;; Registers used:
 10395 ;;		wreg, status,2, status,0
 10396 ;; Tracked objects:
 10397 ;;		On entry : 1F/1D
 10398 ;;		On exit  : 1F/2
 10399 ;;		Unchanged: 0/0
 10400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;Total ram usage:        1 bytes
 10406 ;; Hardware stack levels used: 1
 10407 ;; This function calls:
 10408 ;;		Nothing
 10409 ;; This function is called by:
 10410 ;;		_USBDeviceTasks
 10411 ;; This function uses a non-reentrant model
 10412 ;;
 10413                           
 10414     1098                     _USBIncrement1msInternalTimers:	
 10415                           ;psect for function _USBIncrement1msInternalTimers
 10416                           
 10417                           
 10418                           ;usb/usb_device.c: 3006:     USB1msTickCount++;
 10419                           
 10420                           ;incstack = 0
 10421                           ; Regs used in _USBIncrement1msInternalTimers: [wreg+status,2+status,0]
 10422     1098  3001               	movlw	1
 10423     1099  0023               	movlb	3	; select bank3
 10424     109A  07C0               	addwf	_USB1msTickCount^(0+384),f	;volatile
 10425     109B  3000               	movlw	0
 10426     109C  3DC1               	addwfc	(_USB1msTickCount+1)^(0+384),f	;volatile
 10427     109D  3000               	movlw	0
 10428     109E  3DC2               	addwfc	(_USB1msTickCount+2)^(0+384),f	;volatile
 10429     109F  3000               	movlw	0
 10430     10A0  3DC3               	addwfc	(_USB1msTickCount+3)^(0+384),f	;volatile
 10431                           
 10432                           ;usb/usb_device.c: 3007:     if(USBBusIsSuspended == 0)
 10433     10A1  0022               	movlb	2	; select bank2
 10434     10A2  085F               	movf	_USBBusIsSuspended^(0+256),w	;volatile
 10435     10A3  1D03               	btfss	3,2
 10436     10A4  0008               	return
 10437                           
 10438                           ;usb/usb_device.c: 3008:     {;usb/usb_device.c: 3009:         USBTicksSinceSuspendEnd++
      +                          ;
 10439     10A5  3001               	movlw	1
 10440     10A6  00F0               	movwf	??_USBIncrement1msInternalTimers
 10441     10A7  0870               	movf	??_USBIncrement1msInternalTimers,w
 10442     10A8  07D6               	addwf	_USBTicksSinceSuspendEnd^(0+256),f	;volatile
 10443                           
 10444                           ;usb/usb_device.c: 3011:         if(USBTicksSinceSuspendEnd == 0)
 10445     10A9  0856               	movf	_USBTicksSinceSuspendEnd^(0+256),w	;volatile
 10446     10AA  1D03               	btfss	3,2
 10447     10AB  0008               	return
 10448                           
 10449                           ;usb/usb_device.c: 3012:         {;usb/usb_device.c: 3013:             USBTicksSinceSusp
      +                          endEnd = 255;
 10450     10AC  30FF               	movlw	255
 10451     10AD  00D6               	movwf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10452     10AE  0008               	return
 10453     10AF                     __end_of_USBIncrement1msInternalTimers:
 10454                           
 10455                           	psect	text54
 10456     151A                     __ptext54:	
 10457 ;; *************** function _USBCtrlEPService *****************
 10458 ;; Defined at:
 10459 ;;		line 2379 in file "usb/usb_device.c"
 10460 ;; Parameters:    Size  Location     Type
 10461 ;;		None
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;		None
 10464 ;; Return value:  Size  Location     Type
 10465 ;;                  1    wreg      void 
 10466 ;; Registers used:
 10467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10468 ;; Tracked objects:
 10469 ;;		On entry : 1F/2
 10470 ;;		On exit  : 1D/0
 10471 ;;		Unchanged: 0/0
 10472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10477 ;;Total ram usage:        1 bytes
 10478 ;; Hardware stack levels used: 1
 10479 ;; Hardware stack levels required when called: 7
 10480 ;; This function calls:
 10481 ;;		_USBCtrlTrfInHandler
 10482 ;;		_USBCtrlTrfOutHandler
 10483 ;;		_USBCtrlTrfSetupHandler
 10484 ;;		i1_memcpy
 10485 ;; This function is called by:
 10486 ;;		_USBDeviceTasks
 10487 ;; This function uses a non-reentrant model
 10488 ;;
 10489                           
 10490     151A                     _USBCtrlEPService:	
 10491                           ;psect for function _USBCtrlEPService
 10492                           
 10493                           
 10494                           ;usb/usb_device.c: 2385:         USBStatusStageTimeoutCounter = (uint8_t)45;
 10495                           
 10496                           ;incstack = 0
 10497                           ; Regs used in _USBCtrlEPService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10498     151A  302D               	movlw	45
 10499     151B  00DC               	movwf	_USBStatusStageTimeoutCounter^(0+256)	;volatile
 10500                           
 10501                           ;usb/usb_device.c: 2389:     if((USTATcopy.Val & ~0x02) == 0x00)
 10502     151C  0020               	movlb	0	; select bank0
 10503     151D  086D               	movf	_USTATcopy,w	;volatile
 10504     151E  39FD               	andlw	253
 10505     151F  1D03               	btfss	3,2
 10506     1520  2D57               	goto	i1l5323
 10507                           
 10508                           ;usb/usb_device.c: 2390:     {;usb/usb_device.c: 2393:             pBDTEntryEP0OutCurren
      +                          t = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val & 0x7E)>>1];
 10509     1521  366D               	lsrf	_USTATcopy,w	;volatile
 10510     1522  393F               	andlw	63
 10511     1523  00E0               	movwf	??_USBCtrlEPService
 10512     1524  3001               	movlw	1
 10513     1525                     u458_25:
 10514     1525  35E0               	lslf	??_USBCtrlEPService,f
 10515     1526  3EFF               	addlw	-1
 10516     1527  1D03               	skipz
 10517     1528  2D25               	goto	u458_25
 10518     1529  3560               	lslf	??_USBCtrlEPService,w
 10519     152A  3E20               	addlw	32
 10520     152B  00EB               	movwf	_pBDTEntryEP0OutCurrent
 10521                           
 10522                           ;usb/usb_device.c: 2401:         pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 10523     152C  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10524     152D  00E7               	movwf	_pBDTEntryEP0OutNext
 10525     152E  01E8               	clrf	_pBDTEntryEP0OutNext+1
 10526                           
 10527                           ;usb/usb_device.c: 2403:         pBDTEntryEP0OutNext = (volatile BDT_ENTRY*)(((uint16_t)
      +                          pBDTEntryEP0OutNext) ^ 0x0004);
 10528     152F  3004               	movlw	4
 10529     1530  0667               	xorwf	_pBDTEntryEP0OutNext,w
 10530     1531  00E7               	movwf	_pBDTEntryEP0OutNext
 10531     1532  3000               	movlw	0
 10532     1533  0668               	xorwf	_pBDTEntryEP0OutNext+1,w
 10533     1534  00E8               	movwf	_pBDTEntryEP0OutNext+1
 10534                           
 10535                           ;usb/usb_device.c: 2406:         if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
 10536     1535  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10537     1536  0086               	movwf	6
 10538     1537  0187               	clrf	7
 10539     1538  0C01               	rrf	1,w
 10540     1539  0C89               	rrf	9,f
 10541     153A  390F               	andlw	15
 10542     153B  3A0D               	xorlw	13
 10543     153C  1D03               	skipz
 10544     153D  2D54               	goto	i1l5321
 10545                           
 10546                           ;usb/usb_device.c: 2407:         {;usb/usb_device.c: 2412:             memcpy((uint8_t*)
      +                          &SetupPkt, (uint8_t*)((void *)(pBDTEntryEP0OutCurrent->ADR)), 8);
 10547     153E  3040               	movlw	64
 10548     153F  00F6               	movwf	i1memcpy@d1
 10549     1540  3000               	movlw	0
 10550     1541  00F7               	movwf	i1memcpy@d1+1
 10551     1542  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10552     1543  3E02               	addlw	2
 10553     1544  0086               	movwf	6
 10554     1545  0187               	clrf	7
 10555     1546  3F40               	moviw [0]fsr1
 10556     1547  00F8               	movwf	i1memcpy@s1
 10557     1548  3F41               	moviw [1]fsr1
 10558     1549  00F9               	movwf	i1memcpy@s1+1
 10559     154A  3008               	movlw	8
 10560     154B  00FA               	movwf	i1memcpy@n
 10561     154C  3000               	movlw	0
 10562     154D  00FB               	movwf	i1memcpy@n+1
 10563     154E  3192  22DB  3195   	fcall	i1_memcpy
 10564                           
 10565                           ;usb/usb_device.c: 2415:             USBCtrlTrfSetupHandler();
 10566     1551  3188  200A         	fcall	_USBCtrlTrfSetupHandler
 10567                           
 10568                           ;usb/usb_device.c: 2416:         }
 10569     1553  0008               	return
 10570     1554                     i1l5321:
 10571                           
 10572                           ;usb/usb_device.c: 2418:         {;usb/usb_device.c: 2420:             USBCtrlTrfOutHand
      +                          ler();
 10573     1554  3193  2398         	fcall	_USBCtrlTrfOutHandler
 10574     1556  0008               	return
 10575     1557                     i1l5323:
 10576     1557  30FD               	movlw	253
 10577     1558  056D               	andwf	_USTATcopy,w	;volatile
 10578     1559  00E0               	movwf	??_USBCtrlEPService
 10579     155A  3004               	movlw	4
 10580     155B  0660               	xorwf	??_USBCtrlEPService,w
 10581     155C  1D03               	btfss	3,2
 10582     155D  0008               	return
 10583                           
 10584                           ;usb/usb_device.c: 2424:     {;usb/usb_device.c: 2427:         USBCtrlTrfInHandler();
 10585     155E  318A  22E6         	fcall	_USBCtrlTrfInHandler
 10586     1560  0008               	return
 10587     1561                     __end_of_USBCtrlEPService:
 10588                           
 10589                           	psect	text55
 10590     080A                     __ptext55:	
 10591 ;; *************** function _USBCtrlTrfSetupHandler *****************
 10592 ;; Defined at:
 10593 ;;		line 2472 in file "usb/usb_device.c"
 10594 ;; Parameters:    Size  Location     Type
 10595 ;;		None
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;		None
 10598 ;; Return value:  Size  Location     Type
 10599 ;;                  1    wreg      void 
 10600 ;; Registers used:
 10601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10602 ;; Tracked objects:
 10603 ;;		On entry : 1F/0
 10604 ;;		On exit  : 1D/0
 10605 ;;		Unchanged: 0/0
 10606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;Total ram usage:        1 bytes
 10612 ;; Hardware stack levels used: 1
 10613 ;; Hardware stack levels required when called: 6
 10614 ;; This function calls:
 10615 ;;		_USBCheckStdRequest
 10616 ;;		_USBCtrlEPServiceComplete
 10617 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10618 ;; This function is called by:
 10619 ;;		_USBCtrlEPService
 10620 ;; This function uses a non-reentrant model
 10621 ;;
 10622                           
 10623     080A                     _USBCtrlTrfSetupHandler:	
 10624                           ;psect for function _USBCtrlTrfSetupHandler
 10625                           
 10626                           
 10627                           ;usb/usb_device.c: 2477:     shortPacketStatus = 0;
 10628                           
 10629                           ;incstack = 0
 10630                           ; Regs used in _USBCtrlTrfSetupHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10631     080A  0022               	movlb	2	; select bank2
 10632     080B  01E2               	clrf	_shortPacketStatus^(0+256)	;volatile
 10633                           
 10634                           ;usb/usb_device.c: 2478:     USBDeferStatusStagePacket = 0;
 10635     080C  01DB               	clrf	_USBDeferStatusStagePacket^(0+256)	;volatile
 10636                           
 10637                           ;usb/usb_device.c: 2479:     USBDeferINDataStagePackets = 0;
 10638     080D  01D8               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10639                           
 10640                           ;usb/usb_device.c: 2480:     USBDeferOUTDataStagePackets = 0;
 10641     080E  01D7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10642                           
 10643                           ;usb/usb_device.c: 2481:     BothEP0OutUOWNsSet = 0;
 10644     080F  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 10645                           
 10646                           ;usb/usb_device.c: 2482:     controlTransferState = 0;
 10647     0810  0020               	movlb	0	; select bank0
 10648     0811  01EA               	clrf	_controlTransferState	;volatile
 10649                           
 10650                           ;usb/usb_device.c: 2491:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 10651     0812  307F               	movlw	127
 10652     0813  00DF               	movwf	??_USBCtrlTrfSetupHandler
 10653     0814  0863               	movf	_pBDTEntryIn,w
 10654     0815  0086               	movwf	6
 10655     0816  0864               	movf	_pBDTEntryIn+1,w
 10656     0817  0087               	movwf	7
 10657     0818  085F               	movf	??_USBCtrlTrfSetupHandler,w
 10658     0819  0581               	andwf	1,f
 10659                           
 10660                           ;usb/usb_device.c: 2493:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 10661     081A  3004               	movlw	4
 10662     081B  0663               	xorwf	_pBDTEntryIn,w
 10663     081C  00E3               	movwf	_pBDTEntryIn
 10664     081D  3000               	movlw	0
 10665     081E  0664               	xorwf	_pBDTEntryIn+1,w
 10666     081F  00E4               	movwf	_pBDTEntryIn+1
 10667                           
 10668                           ;usb/usb_device.c: 2494:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 10669     0820  307F               	movlw	127
 10670     0821  00DF               	movwf	??_USBCtrlTrfSetupHandler
 10671     0822  0863               	movf	_pBDTEntryIn,w
 10672     0823  0086               	movwf	6
 10673     0824  0864               	movf	_pBDTEntryIn+1,w
 10674     0825  0087               	movwf	7
 10675     0826  085F               	movf	??_USBCtrlTrfSetupHandler,w
 10676     0827  0581               	andwf	1,f
 10677                           
 10678                           ;usb/usb_device.c: 2495:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 10679     0828  3004               	movlw	4
 10680     0829  0663               	xorwf	_pBDTEntryIn,w
 10681     082A  00E3               	movwf	_pBDTEntryIn
 10682     082B  3000               	movlw	0
 10683     082C  0664               	xorwf	_pBDTEntryIn+1,w
 10684     082D  00E4               	movwf	_pBDTEntryIn+1
 10685                           
 10686                           ;usb/usb_device.c: 2496:     pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
 10687     082E  307F               	movlw	127
 10688     082F  00DF               	movwf	??_USBCtrlTrfSetupHandler
 10689     0830  0867               	movf	_pBDTEntryEP0OutNext,w
 10690     0831  0086               	movwf	6
 10691     0832  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10692     0833  0087               	movwf	7
 10693     0834  085F               	movf	??_USBCtrlTrfSetupHandler,w
 10694     0835  0581               	andwf	1,f
 10695                           
 10696                           ;usb/usb_device.c: 2498:     inPipes[0].info.Val = 0;
 10697     0836  0021               	movlb	1	; select bank1
 10698     0837  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 10699                           
 10700                           ;usb/usb_device.c: 2499:     inPipes[0].wCount.Val = 0;
 10701     0838  01EC               	clrf	(_inPipes^(0+128)+3)	;volatile
 10702     0839  01ED               	clrf	((_inPipes+1)^(0+128)+3)	;volatile
 10703                           
 10704                           ;usb/usb_device.c: 2500:     outPipes[0].info.Val = 0;
 10705     083A  0022               	movlb	2	; select bank2
 10706     083B  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 10707                           
 10708                           ;usb/usb_device.c: 2501:     outPipes[0].wCount.Val = 0;
 10709     083C  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 10710     083D  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 10711                           
 10712                           ;usb/usb_device.c: 2507:     USBCheckStdRequest();
 10713     083E  3189  218F  3188   	fcall	_USBCheckStdRequest
 10714                           
 10715                           ;usb/usb_device.c: 2508:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_EP0_REQUES
      +                          T,0,0);
 10716     0841  3003               	movlw	3
 10717     0842  0020               	movlb	0	; select bank0
 10718     0843  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10719     0844  3000               	movlw	0
 10720     0845  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10721     0846  3000               	movlw	0
 10722     0847  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10723     0848  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10724     0849  3000               	movlw	0
 10725     084A  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10726     084B  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10727     084C  3193  23D2  3188   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10728                           
 10729                           ;usb/usb_device.c: 2521:     USBCtrlEPServiceComplete();
 10730     084F  318D  2570         	fcall	_USBCtrlEPServiceComplete
 10731     0851  0008               	return
 10732     0852                     __end_of_USBCtrlTrfSetupHandler:
 10733                           
 10734                           	psect	text56
 10735     0D70                     __ptext56:	
 10736 ;; *************** function _USBCtrlEPServiceComplete *****************
 10737 ;; Defined at:
 10738 ;;		line 1620 in file "usb/usb_device.c"
 10739 ;; Parameters:    Size  Location     Type
 10740 ;;		None
 10741 ;; Auto vars:     Size  Location     Type
 10742 ;;		None
 10743 ;; Return value:  Size  Location     Type
 10744 ;;                  1    wreg      void 
 10745 ;; Registers used:
 10746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10747 ;; Tracked objects:
 10748 ;;		On entry : 0/2
 10749 ;;		On exit  : 1D/0
 10750 ;;		Unchanged: 0/0
 10751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;Total ram usage:        4 bytes
 10757 ;; Hardware stack levels used: 1
 10758 ;; Hardware stack levels required when called: 2
 10759 ;; This function calls:
 10760 ;;		_USBCtrlEPAllowDataStage
 10761 ;;		_USBCtrlEPAllowStatusStage
 10762 ;; This function is called by:
 10763 ;;		_USBCtrlTrfSetupHandler
 10764 ;; This function uses a non-reentrant model
 10765 ;;
 10766                           
 10767     0D70                     _USBCtrlEPServiceComplete:	
 10768                           ;psect for function _USBCtrlEPServiceComplete
 10769                           
 10770                           
 10771                           ;usb/usb_device.c: 1626:     UCONbits.PKTDIS = 0;
 10772                           
 10773                           ;incstack = 0
 10774                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10775     0D70  003D               	movlb	29	; select bank29
 10776     0D71  120E               	bcf	14,4	;volatile
 10777                           
 10778                           ;usb/usb_device.c: 1632:     if(inPipes[0].info.bits.busy == 0)
 10779     0D72  0021               	movlb	1	; select bank1
 10780     0D73  1BEB               	btfsc	(_inPipes^(0+128)+2),7	;volatile
 10781     0D74  2DBC               	goto	i1l516
 10782                           
 10783                           ;usb/usb_device.c: 1633:     {;usb/usb_device.c: 1634:         if(outPipes[0].info.bits.
      +                          busy == 1)
 10784     0D75  0022               	movlb	2	; select bank2
 10785     0D76  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 10786     0D77  2D85               	goto	i1l4513
 10787                           
 10788                           ;usb/usb_device.c: 1635:         {;usb/usb_device.c: 1636:             controlTransferSt
      +                          ate = 2;
 10789     0D78  3002               	movlw	2
 10790     0D79  0020               	movlb	0	; select bank0
 10791     0D7A  00EA               	movwf	_controlTransferState	;volatile
 10792                           
 10793                           ;usb/usb_device.c: 1647:             if(USBDeferOUTDataStagePackets == 0)
 10794     0D7B  0022               	movlb	2	; select bank2
 10795     0D7C  0857               	movf	_USBDeferOUTDataStagePackets^(0+256),w	;volatile
 10796     0D7D  1D03               	btfss	3,2
 10797     0D7E  2D81               	goto	i1l4509
 10798                           
 10799                           ;usb/usb_device.c: 1648:             {;usb/usb_device.c: 1649:                 USBCtrlEP
      +                          AllowDataStage();
 10800     0D7F  3197  2731         	fcall	_USBCtrlEPAllowDataStage
 10801     0D81                     i1l4509:
 10802                           
 10803                           ;usb/usb_device.c: 1654:             USBStatusStageEnabledFlag2 = 0;
 10804     0D81  0022               	movlb	2	; select bank2
 10805     0D82  01D9               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10806                           
 10807                           ;usb/usb_device.c: 1655:             USBStatusStageEnabledFlag1 = 0;
 10808     0D83  01DA               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10809                           
 10810                           ;usb/usb_device.c: 1656:         }
 10811     0D84  0008               	return
 10812     0D85                     i1l4513:
 10813                           
 10814                           ;usb/usb_device.c: 1658:         {;usb/usb_device.c: 1663:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 10815     0D85  0020               	movlb	0	; select bank0
 10816     0D86  0867               	movf	_pBDTEntryEP0OutNext,w
 10817     0D87  3E01               	addlw	1
 10818     0D88  00F7               	movwf	??_USBCtrlEPServiceComplete
 10819     0D89  3000               	movlw	0
 10820     0D8A  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 10821     0D8B  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10822     0D8C  0877               	movf	??_USBCtrlEPServiceComplete,w
 10823     0D8D  0086               	movwf	6
 10824     0D8E  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 10825     0D8F  0087               	movwf	7
 10826     0D90  3008               	movlw	8
 10827     0D91  0081               	movwf	1
 10828                           
 10829                           ;usb/usb_device.c: 1664:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 10830     0D92  3040               	movlw	64
 10831     0D93  00F7               	movwf	??_USBCtrlEPServiceComplete
 10832     0D94  3000               	movlw	0
 10833     0D95  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10834     0D96  30FF               	movlw	255
 10835     0D97  0577               	andwf	??_USBCtrlEPServiceComplete,w
 10836     0D98  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 10837     0D99  307F               	movlw	127
 10838     0D9A  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 10839     0D9B  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 10840     0D9C  0867               	movf	_pBDTEntryEP0OutNext,w
 10841     0D9D  0086               	movwf	6
 10842     0D9E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10843     0D9F  0087               	movwf	7
 10844     0DA0  3142               	addfsr 1,2
 10845     0DA1  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 10846     0DA2  3FC0               	movwi [0]fsr1
 10847     0DA3  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 10848     0DA4  3FC1               	movwi [1]fsr1
 10849                           
 10850                           ;usb/usb_device.c: 1665:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 10851     0DA5  0867               	movf	_pBDTEntryEP0OutNext,w
 10852     0DA6  0086               	movwf	6
 10853     0DA7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10854     0DA8  0087               	movwf	7
 10855     0DA9  300C               	movlw	12
 10856     0DAA  0081               	movwf	1
 10857                           
 10858                           ;usb/usb_device.c: 1666:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 10859     0DAB  0867               	movf	_pBDTEntryEP0OutNext,w
 10860     0DAC  0086               	movwf	6
 10861     0DAD  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10862     0DAE  0087               	movwf	7
 10863     0DAF  1781               	bsf	1,7
 10864                           
 10865                           ;usb/usb_device.c: 1667:             pBDTEntryIn[0]->STAT.Val = 0x04;
 10866     0DB0  0863               	movf	_pBDTEntryIn,w
 10867     0DB1  0086               	movwf	6
 10868     0DB2  0864               	movf	_pBDTEntryIn+1,w
 10869     0DB3  0087               	movwf	7
 10870     0DB4  3004               	movlw	4
 10871     0DB5  0081               	movwf	1
 10872                           
 10873                           ;usb/usb_device.c: 1668:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 10874     0DB6  0863               	movf	_pBDTEntryIn,w
 10875     0DB7  0086               	movwf	6
 10876     0DB8  0864               	movf	_pBDTEntryIn+1,w
 10877     0DB9  0087               	movwf	7
 10878     0DBA  1781               	bsf	1,7
 10879     0DBB  0008               	return
 10880     0DBC                     i1l516:	
 10881                           ;usb/usb_device.c: 1671:     else
 10882                           
 10883                           
 10884                           ;usb/usb_device.c: 1672:     {;usb/usb_device.c: 1673:   if(SetupPkt.DataDir == (0x80>>7
      +                          ))
 10885     0DBC  0020               	movlb	0	; select bank0
 10886     0DBD  1FC0               	btfss	64,7	;volatile
 10887     0DBE  2DD1               	goto	i1l4539
 10888                           
 10889                           ;usb/usb_device.c: 1674:   {;usb/usb_device.c: 1675:    controlTransferState = 1;
 10890     0DBF  3001               	movlw	1
 10891     0DC0  00EA               	movwf	_controlTransferState	;volatile
 10892                           
 10893                           ;usb/usb_device.c: 1689:    if(USBDeferINDataStagePackets == 0)
 10894     0DC1  0022               	movlb	2	; select bank2
 10895     0DC2  0858               	movf	_USBDeferINDataStagePackets^(0+256),w	;volatile
 10896     0DC3  1D03               	btfss	3,2
 10897     0DC4  2DC8               	goto	i1l4531
 10898                           
 10899                           ;usb/usb_device.c: 1690:             {;usb/usb_device.c: 1691:                 USBCtrlEP
      +                          AllowDataStage();
 10900     0DC5  3197  2731  318D   	fcall	_USBCtrlEPAllowDataStage
 10901     0DC8                     i1l4531:
 10902                           
 10903                           ;usb/usb_device.c: 1714:             USBStatusStageEnabledFlag2 = 0;
 10904     0DC8  0022               	movlb	2	; select bank2
 10905     0DC9  01D9               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10906                           
 10907                           ;usb/usb_device.c: 1715:             USBStatusStageEnabledFlag1 = 0;
 10908     0DCA  01DA               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10909                           
 10910                           ;usb/usb_device.c: 1716:             if(USBDeferStatusStagePacket == 0)
 10911     0DCB  085B               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 10912     0DCC  1D03               	btfss	3,2
 10913     0DCD  0008               	return
 10914                           
 10915                           ;usb/usb_device.c: 1717:             {;usb/usb_device.c: 1718:                 USBCtrlEP
      +                          AllowStatusStage();
 10916     0DCE  318A  2200         	fcall	_USBCtrlEPAllowStatusStage
 10917     0DD0  0008               	return
 10918     0DD1                     i1l4539:
 10919                           
 10920                           ;usb/usb_device.c: 1722:   {;usb/usb_device.c: 1733:    controlTransferState = 2;
 10921     0DD1  3002               	movlw	2
 10922     0DD2  00EA               	movwf	_controlTransferState	;volatile
 10923                           
 10924                           ;usb/usb_device.c: 1736:    pBDTEntryEP0OutNext->CNT = 8;
 10925     0DD3  0867               	movf	_pBDTEntryEP0OutNext,w
 10926     0DD4  3E01               	addlw	1
 10927     0DD5  00F7               	movwf	??_USBCtrlEPServiceComplete
 10928     0DD6  3000               	movlw	0
 10929     0DD7  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 10930     0DD8  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10931     0DD9  0877               	movf	??_USBCtrlEPServiceComplete,w
 10932     0DDA  0086               	movwf	6
 10933     0DDB  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 10934     0DDC  0087               	movwf	7
 10935     0DDD  3008               	movlw	8
 10936     0DDE  0081               	movwf	1
 10937                           
 10938                           ;usb/usb_device.c: 1737:    pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF
      +                          );
 10939     0DDF  3040               	movlw	64
 10940     0DE0  00F7               	movwf	??_USBCtrlEPServiceComplete
 10941     0DE1  3000               	movlw	0
 10942     0DE2  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10943     0DE3  30FF               	movlw	255
 10944     0DE4  0577               	andwf	??_USBCtrlEPServiceComplete,w
 10945     0DE5  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 10946     0DE6  307F               	movlw	127
 10947     0DE7  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 10948     0DE8  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 10949     0DE9  0867               	movf	_pBDTEntryEP0OutNext,w
 10950     0DEA  0086               	movwf	6
 10951     0DEB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10952     0DEC  0087               	movwf	7
 10953     0DED  3142               	addfsr 1,2
 10954     0DEE  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 10955     0DEF  3FC0               	movwi [0]fsr1
 10956     0DF0  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 10957     0DF1  3FC1               	movwi [1]fsr1
 10958                           
 10959                           ;usb/usb_device.c: 1738:    pBDTEntryEP0OutNext->STAT.Val = 0x04;
 10960     0DF2  0867               	movf	_pBDTEntryEP0OutNext,w
 10961     0DF3  0086               	movwf	6
 10962     0DF4  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10963     0DF5  0087               	movwf	7
 10964     0DF6  3004               	movlw	4
 10965     0DF7  0081               	movwf	1
 10966                           
 10967                           ;usb/usb_device.c: 1739:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 10968     0DF8  0867               	movf	_pBDTEntryEP0OutNext,w
 10969     0DF9  0086               	movwf	6
 10970     0DFA  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10971     0DFB  0087               	movwf	7
 10972     0DFC  1781               	bsf	1,7
 10973     0DFD  2DC8               	goto	i1l4531
 10974     0DFE                     __end_of_USBCtrlEPServiceComplete:	
 10975                           ;usb/usb_device.c: 1744:    if(USBDeferStatusStagePacket == 0)
 10976                           
 10977                           ;usb/usb_device.c: 1743:             USBStatusStageEnabledFlag1 = 0;
 10978                           
 10979                           ;usb/usb_device.c: 1742:             USBStatusStageEnabledFlag2 = 0;
 10980                           
 10981                           
 10982                           	psect	text57
 10983     1731                     __ptext57:	
 10984 ;; *************** function _USBCtrlEPAllowDataStage *****************
 10985 ;; Defined at:
 10986 ;;		line 1492 in file "usb/usb_device.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;		None
 10989 ;; Auto vars:     Size  Location     Type
 10990 ;;		None
 10991 ;; Return value:  Size  Location     Type
 10992 ;;                  1    wreg      void 
 10993 ;; Registers used:
 10994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10995 ;; Tracked objects:
 10996 ;;		On entry : 1F/2
 10997 ;;		On exit  : 1F/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;Total ram usage:        4 bytes
 11005 ;; Hardware stack levels used: 1
 11006 ;; Hardware stack levels required when called: 1
 11007 ;; This function calls:
 11008 ;;		_USBCtrlTrfTxService
 11009 ;; This function is called by:
 11010 ;;		_USBCtrlEPServiceComplete
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014     1731                     _USBCtrlEPAllowDataStage:	
 11015                           ;psect for function _USBCtrlEPAllowDataStage
 11016                           
 11017                           
 11018                           ;usb/usb_device.c: 1494:     USBDeferINDataStagePackets = 0;
 11019                           
 11020                           ;incstack = 0
 11021                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11022     1731  01D8               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 11023                           
 11024                           ;usb/usb_device.c: 1495:     USBDeferOUTDataStagePackets = 0;
 11025     1732  01D7               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 11026                           
 11027                           ;usb/usb_device.c: 1497:     if(controlTransferState == 2)
 11028     1733  3002               	movlw	2
 11029     1734  0020               	movlb	0	; select bank0
 11030     1735  066A               	xorwf	_controlTransferState,w	;volatile
 11031     1736  1D03               	btfss	3,2
 11032     1737  2F63               	goto	i1l4209
 11033                           
 11034                           ;usb/usb_device.c: 1498:     {;usb/usb_device.c: 1500:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 11035     1738  0867               	movf	_pBDTEntryEP0OutNext,w
 11036     1739  3E01               	addlw	1
 11037     173A  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11038     173B  3000               	movlw	0
 11039     173C  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 11040     173D  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11041     173E  0873               	movf	??_USBCtrlEPAllowDataStage,w
 11042     173F  0086               	movwf	6
 11043     1740  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 11044     1741  0087               	movwf	7
 11045     1742  3008               	movlw	8
 11046     1743  0081               	movwf	1
 11047                           
 11048                           ;usb/usb_device.c: 1501:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 11049     1744  3048               	movlw	72
 11050     1745  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11051     1746  3000               	movlw	0
 11052     1747  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11053     1748  30FF               	movlw	255
 11054     1749  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 11055     174A  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 11056     174B  307F               	movlw	127
 11057     174C  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 11058     174D  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 11059     174E  0867               	movf	_pBDTEntryEP0OutNext,w
 11060     174F  0086               	movwf	6
 11061     1750  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11062     1751  0087               	movwf	7
 11063     1752  3142               	addfsr 1,2
 11064     1753  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 11065     1754  3FC0               	movwi [0]fsr1
 11066     1755  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 11067     1756  3FC1               	movwi [1]fsr1
 11068                           
 11069                           ;usb/usb_device.c: 1502:         pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 0x08);
 11070     1757  0867               	movf	_pBDTEntryEP0OutNext,w
 11071     1758  0086               	movwf	6
 11072     1759  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11073     175A  0087               	movwf	7
 11074     175B  3048               	movlw	72
 11075     175C  0081               	movwf	1
 11076                           
 11077                           ;usb/usb_device.c: 1503:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 11078     175D  0867               	movf	_pBDTEntryEP0OutNext,w
 11079     175E  0086               	movwf	6
 11080     175F  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11081     1760  0087               	movwf	7
 11082     1761  1781               	bsf	1,7
 11083                           
 11084                           ;usb/usb_device.c: 1504:     }
 11085     1762  0008               	return
 11086     1763                     i1l4209:
 11087                           
 11088                           ;usb/usb_device.c: 1506:     {;usb/usb_device.c: 1509:   if(SetupPkt.wLength < inPipes[0
      +                          ].wCount.Val)
 11089     1763  0021               	movlb	1	; select bank1
 11090     1764  086D               	movf	((_inPipes+1)^(0+128)+3),w	;volatile
 11091     1765  0020               	movlb	0	; select bank0
 11092     1766  0247               	subwf	71,w	;volatile
 11093     1767  1D03               	skipz
 11094     1768  2F6D               	goto	u313_25
 11095     1769  0021               	movlb	1	; select bank1
 11096     176A  086C               	movf	(_inPipes^(0+128)+3),w	;volatile
 11097     176B  0020               	movlb	0	; select bank0
 11098     176C  0246               	subwf	70,w	;volatile
 11099     176D                     u313_25:
 11100     176D  1803               	skipnc
 11101     176E  2F76               	goto	i1l4213
 11102                           
 11103                           ;usb/usb_device.c: 1510:   {;usb/usb_device.c: 1511:    inPipes[0].wCount.Val = SetupPkt
      +                          .wLength;
 11104     176F  0847               	movf	71,w	;volatile
 11105     1770  0021               	movlb	1	; select bank1
 11106     1771  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11107     1772  0020               	movlb	0	; select bank0
 11108     1773  0846               	movf	70,w	;volatile
 11109     1774  0021               	movlb	1	; select bank1
 11110     1775  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11111     1776                     i1l4213:
 11112                           
 11113                           ;usb/usb_device.c: 1513:   USBCtrlTrfTxService();
 11114     1776  3196  26CA         	fcall	_USBCtrlTrfTxService
 11115                           
 11116                           ;usb/usb_device.c: 1518:   pBDTEntryIn[0]->ADR = (((uint16_t)(&CtrlTrfData)) & 0x7FFF);
 11117     1778  3048               	movlw	72
 11118     1779  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11119     177A  3000               	movlw	0
 11120     177B  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11121     177C  30FF               	movlw	255
 11122     177D  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 11123     177E  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 11124     177F  307F               	movlw	127
 11125     1780  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 11126     1781  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 11127     1782  0020               	movlb	0	; select bank0
 11128     1783  0863               	movf	_pBDTEntryIn,w
 11129     1784  0086               	movwf	6
 11130     1785  0864               	movf	_pBDTEntryIn+1,w
 11131     1786  0087               	movwf	7
 11132     1787  3142               	addfsr 1,2
 11133     1788  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 11134     1789  3FC0               	movwi [0]fsr1
 11135     178A  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 11136     178B  3FC1               	movwi [1]fsr1
 11137                           
 11138                           ;usb/usb_device.c: 1519:   pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 11139     178C  0863               	movf	_pBDTEntryIn,w
 11140     178D  0086               	movwf	6
 11141     178E  0864               	movf	_pBDTEntryIn+1,w
 11142     178F  0087               	movwf	7
 11143     1790  3048               	movlw	72
 11144     1791  0081               	movwf	1
 11145                           
 11146                           ;usb/usb_device.c: 1520:         pBDTEntryIn[0]->STAT.Val |= 0x80;
 11147     1792  0863               	movf	_pBDTEntryIn,w
 11148     1793  0086               	movwf	6
 11149     1794  0864               	movf	_pBDTEntryIn+1,w
 11150     1795  0087               	movwf	7
 11151     1796  1781               	bsf	1,7
 11152     1797  0008               	return
 11153     1798                     __end_of_USBCtrlEPAllowDataStage:
 11154                           
 11155                           	psect	text58
 11156     098F                     __ptext58:	
 11157 ;; *************** function _USBCheckStdRequest *****************
 11158 ;; Defined at:
 11159 ;;		line 2693 in file "usb/usb_device.c"
 11160 ;; Parameters:    Size  Location     Type
 11161 ;;		None
 11162 ;; Auto vars:     Size  Location     Type
 11163 ;;		None
 11164 ;; Return value:  Size  Location     Type
 11165 ;;                  1    wreg      void 
 11166 ;; Registers used:
 11167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11168 ;; Tracked objects:
 11169 ;;		On entry : 1F/2
 11170 ;;		On exit  : 0/0
 11171 ;;		Unchanged: 0/0
 11172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11176 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11177 ;;Total ram usage:        2 bytes
 11178 ;; Hardware stack levels used: 1
 11179 ;; Hardware stack levels required when called: 5
 11180 ;; This function calls:
 11181 ;;		_USBStdFeatureReqHandler
 11182 ;;		_USBStdGetDscHandler
 11183 ;;		_USBStdGetStatusHandler
 11184 ;;		_USBStdSetCfgHandler
 11185 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11186 ;; This function is called by:
 11187 ;;		_USBCtrlTrfSetupHandler
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191     098F                     _USBCheckStdRequest:	
 11192                           ;psect for function _USBCheckStdRequest
 11193                           
 11194                           
 11195                           ;usb/usb_device.c: 2695:     if(SetupPkt.RequestType != (0x00>>5)) return;
 11196                           
 11197                           ;incstack = 0
 11198                           ; Regs used in _USBCheckStdRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11199     098F  0020               	movlb	0	; select bank0
 11200     0990  0E40               	swapf	64,w	;volatile
 11201     0991  0C89               	rrf	9,f
 11202     0992  3903               	andlw	3
 11203     0993  3A00               	xorlw	0
 11204     0994  1D03               	btfss	3,2
 11205     0995  0008               	return
 11206     0996  29D4               	goto	i1l4647
 11207     0997                     i1l644:	
 11208                           ;usb/usb_device.c: 2698:     {;usb/usb_device.c: 2699:         case 5:
 11209                           
 11210                           
 11211                           ;usb/usb_device.c: 2700:             inPipes[0].info.bits.busy = 1;
 11212     0997  0021               	movlb	1	; select bank1
 11213     0998  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11214                           
 11215                           ;usb/usb_device.c: 2701:             USBDeviceState = ADR_PENDING_STATE;
 11216     0999  3008               	movlw	8
 11217     099A  0020               	movlb	0	; select bank0
 11218     099B  00EC               	movwf	_USBDeviceState	;volatile
 11219                           
 11220                           ;usb/usb_device.c: 2703:             break;
 11221     099C  0008               	return
 11222     099D                     i1l4617:
 11223                           
 11224                           ;usb/usb_device.c: 2705:             USBStdGetDscHandler();
 11225     099D  318C  2461         	fcall	_USBStdGetDscHandler
 11226                           
 11227                           ;usb/usb_device.c: 2706:             break;
 11228     099F  0008               	return
 11229     09A0                     i1l4619:
 11230                           
 11231                           ;usb/usb_device.c: 2708:             USBStdSetCfgHandler();
 11232     09A0  3189  2123         	fcall	_USBStdSetCfgHandler
 11233                           
 11234                           ;usb/usb_device.c: 2709:             break;
 11235     09A2  0008               	return
 11236     09A3                     i1l4621:
 11237                           
 11238                           ;usb/usb_device.c: 2711:             inPipes[0].pSrc.bRam = (uint8_t*)&USBActiveConfigur
      +                          ation;
 11239     09A3  306F               	movlw	low _USBActiveConfiguration
 11240     09A4  0021               	movlb	1	; select bank1
 11241     09A5  00E9               	movwf	_inPipes^(0+128)	;volatile
 11242     09A6  3000               	movlw	high _USBActiveConfiguration
 11243     09A7  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 11244                           
 11245                           ;usb/usb_device.c: 2712:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11246     09A8  146B               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11247                           
 11248                           ;usb/usb_device.c: 2713:             inPipes[0].wCount.v[0] = 1;
 11249     09A9  3001               	movlw	1
 11250     09AA  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11251                           
 11252                           ;usb/usb_device.c: 2714:             inPipes[0].info.bits.busy = 1;
 11253     09AB  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11254                           
 11255                           ;usb/usb_device.c: 2715:             break;
 11256     09AC  0008               	return
 11257     09AD                     i1l4629:
 11258                           
 11259                           ;usb/usb_device.c: 2717:             USBStdGetStatusHandler();
 11260     09AD  3195  25A9         	fcall	_USBStdGetStatusHandler
 11261                           
 11262                           ;usb/usb_device.c: 2718:             break;
 11263     09AF  0008               	return
 11264     09B0                     i1l4631:
 11265                           
 11266                           ;usb/usb_device.c: 2721:             USBStdFeatureReqHandler();
 11267     09B0  3181  21EC         	fcall	_USBStdFeatureReqHandler
 11268                           
 11269                           ;usb/usb_device.c: 2722:             break;
 11270     09B2  0008               	return
 11271     09B3                     i1l4633:
 11272                           
 11273                           ;usb/usb_device.c: 2724:             inPipes[0].pSrc.bRam = (uint8_t*)&USBAlternateInter
      +                          face[SetupPkt.bIntfID];
 11274     09B3  0844               	movf	68,w	;volatile
 11275     09B4  3E6E               	addlw	(low (_USBAlternateInterface| 0))& (0+255)
 11276     09B5  0021               	movlb	1	; select bank1
 11277     09B6  00E9               	movwf	_inPipes^(0+128)	;volatile
 11278     09B7  01EA               	clrf	(_inPipes+1)^(0+128)	;volatile
 11279                           
 11280                           ;usb/usb_device.c: 2725:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11281     09B8  146B               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11282                           
 11283                           ;usb/usb_device.c: 2726:             inPipes[0].wCount.v[0] = 1;
 11284     09B9  3001               	movlw	1
 11285     09BA  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11286                           
 11287                           ;usb/usb_device.c: 2727:             inPipes[0].info.bits.busy = 1;
 11288     09BB  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11289                           
 11290                           ;usb/usb_device.c: 2728:             break;
 11291     09BC  0008               	return
 11292     09BD                     i1l653:	
 11293                           ;usb/usb_device.c: 2729:         case 11:
 11294                           
 11295                           
 11296                           ;usb/usb_device.c: 2730:             inPipes[0].info.bits.busy = 1;
 11297     09BD  0021               	movlb	1	; select bank1
 11298     09BE  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11299                           
 11300                           ;usb/usb_device.c: 2731:             USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.
      +                          bAltID;
 11301     09BF  0020               	movlb	0	; select bank0
 11302     09C0  0844               	movf	68,w	;volatile
 11303     09C1  3E6E               	addlw	(low (_USBAlternateInterface| 0))& (0+255)
 11304     09C2  0086               	movwf	6
 11305     09C3  0187               	clrf	7
 11306     09C4  0842               	movf	66,w	;volatile
 11307     09C5  0081               	movwf	1
 11308                           
 11309                           ;usb/usb_device.c: 2732:             break;
 11310     09C6  0008               	return
 11311     09C7                     i1l4643:
 11312                           
 11313                           ;usb/usb_device.c: 2734:             USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SE
      +                          T_DESCRIPTOR,0,0);
 11314     09C7  3002               	movlw	2
 11315     09C8  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11316     09C9  3000               	movlw	0
 11317     09CA  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11318     09CB  3000               	movlw	0
 11319     09CC  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11320     09CD  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11321     09CE  3000               	movlw	0
 11322     09CF  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11323     09D0  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11324     09D1  3193  23D2         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11325                           
 11326                           ;usb/usb_device.c: 2735:             break;
 11327     09D3  0008               	return
 11328     09D4                     i1l4647:
 11329     09D4  0841               	movf	65,w	;volatile
 11330     09D5  00DD               	movwf	??_USBCheckStdRequest
 11331     09D6  01DE               	clrf	??_USBCheckStdRequest+1
 11332                           
 11333                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11334                           ; Switch size 1, requested type "simple"
 11335                           ; Number of cases is 1, Range of values is 0 to 0
 11336                           ; switch strategies available:
 11337                           ; Name         Instructions Cycles
 11338                           ; simple_byte            4     3 (average)
 11339                           ; direct_byte            8     6 (fixed)
 11340                           ; jumptable            260     6 (fixed)
 11341                           ;	Chosen strategy is simple_byte
 11342     09D7  085E               	movf	??_USBCheckStdRequest+1,w
 11343     09D8  3A00               	xorlw	0	; case 0
 11344     09D9  1903               	skipnz
 11345     09DA  29DC               	goto	i1l6601
 11346     09DB  29FF               	goto	i1l642
 11347     09DC                     i1l6601:
 11348                           
 11349                           ; Switch size 1, requested type "simple"
 11350                           ; Number of cases is 11, Range of values is 0 to 12
 11351                           ; switch strategies available:
 11352                           ; Name         Instructions Cycles
 11353                           ; direct_byte           32     6 (fixed)
 11354                           ; simple_byte           34    18 (average)
 11355                           ; jumptable            260     6 (fixed)
 11356                           ;	Chosen strategy is simple_byte
 11357     09DC  085D               	movf	??_USBCheckStdRequest,w
 11358     09DD  3A00               	xorlw	0	; case 0
 11359     09DE  1903               	skipnz
 11360     09DF  29AD               	goto	i1l4629
 11361     09E0  3A01               	xorlw	1	; case 1
 11362     09E1  1903               	skipnz
 11363     09E2  29B0               	goto	i1l4631
 11364     09E3  3A02               	xorlw	2	; case 3
 11365     09E4  1903               	skipnz
 11366     09E5  29B0               	goto	i1l4631
 11367     09E6  3A06               	xorlw	6	; case 5
 11368     09E7  1903               	skipnz
 11369     09E8  2997               	goto	i1l644
 11370     09E9  3A03               	xorlw	3	; case 6
 11371     09EA  1903               	skipnz
 11372     09EB  299D               	goto	i1l4617
 11373     09EC  3A01               	xorlw	1	; case 7
 11374     09ED  1903               	skipnz
 11375     09EE  29C7               	goto	i1l4643
 11376     09EF  3A0F               	xorlw	15	; case 8
 11377     09F0  1903               	skipnz
 11378     09F1  29A3               	goto	i1l4621
 11379     09F2  3A01               	xorlw	1	; case 9
 11380     09F3  1903               	skipnz
 11381     09F4  29A0               	goto	i1l4619
 11382     09F5  3A03               	xorlw	3	; case 10
 11383     09F6  1903               	skipnz
 11384     09F7  29B3               	goto	i1l4633
 11385     09F8  3A01               	xorlw	1	; case 11
 11386     09F9  1903               	skipnz
 11387     09FA  29BD               	goto	i1l653
 11388     09FB  3A07               	xorlw	7	; case 12
 11389     09FC  1903               	skipnz
 11390     09FD  29FF               	goto	i1l642
 11391     09FE  29FF               	goto	i1l642
 11392     09FF                     i1l642:
 11393     09FF  0008               	return
 11394     0A00                     __end_of_USBCheckStdRequest:
 11395                           
 11396                           	psect	text59
 11397     0923                     __ptext59:	
 11398 ;; *************** function _USBStdSetCfgHandler *****************
 11399 ;; Defined at:
 11400 ;;		line 1972 in file "usb/usb_device.c"
 11401 ;; Parameters:    Size  Location     Type
 11402 ;;		None
 11403 ;; Auto vars:     Size  Location     Type
 11404 ;;  p               2    6[BANK0 ] PTR unsigned char 
 11405 ;;		 -> UEP1(1), 
 11406 ;;  i               1    8[BANK0 ] unsigned char 
 11407 ;;  i               1    9[BANK0 ] unsigned char 
 11408 ;; Return value:  Size  Location     Type
 11409 ;;                  1    wreg      void 
 11410 ;; Registers used:
 11411 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11412 ;; Tracked objects:
 11413 ;;		On entry : 1D/0
 11414 ;;		On exit  : 1F/0
 11415 ;;		Unchanged: 0/0
 11416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11418 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11419 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11420 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11421 ;;Total ram usage:        5 bytes
 11422 ;; Hardware stack levels used: 1
 11423 ;; Hardware stack levels required when called: 4
 11424 ;; This function calls:
 11425 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11426 ;;		i1_memset
 11427 ;; This function is called by:
 11428 ;;		_USBCheckStdRequest
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432     0923                     _USBStdSetCfgHandler:	
 11433                           ;psect for function _USBStdSetCfgHandler
 11434                           
 11435                           
 11436                           ;usb/usb_device.c: 1974:     uint8_t i;;usb/usb_device.c: 1977:     inPipes[0].info.bits
      +                          .busy = 1;
 11437                           
 11438                           ;incstack = 0
 11439                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11440     0923  0021               	movlb	1	; select bank1
 11441     0924  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11442                           
 11443                           ;usb/usb_device.c: 1980:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++)
      +                           *p++ = 0; };
 11444     0925  300E               	movlw	14
 11445     0926  0020               	movlb	0	; select bank0
 11446     0927  00D7               	movwf	USBStdSetCfgHandler@p+1
 11447     0928  3099               	movlw	153
 11448     0929  00D6               	movwf	USBStdSetCfgHandler@p
 11449     092A  01D8               	clrf	USBStdSetCfgHandler@i_2020
 11450     092B                     i1l4229:
 11451     092B  0856               	movf	USBStdSetCfgHandler@p,w
 11452     092C  0086               	movwf	6
 11453     092D  0857               	movf	USBStdSetCfgHandler@p+1,w
 11454     092E  0087               	movwf	7
 11455     092F  0181               	clrf	1
 11456     0930  3001               	movlw	1
 11457     0931  07D6               	addwf	USBStdSetCfgHandler@p,f
 11458     0932  3000               	movlw	0
 11459     0933  3DD7               	addwfc	USBStdSetCfgHandler@p+1,f
 11460     0934  3001               	movlw	1
 11461     0935  00FD               	movwf	??_USBStdSetCfgHandler
 11462     0936  087D               	movf	??_USBStdSetCfgHandler,w
 11463     0937  07D8               	addwf	USBStdSetCfgHandler@i_2020,f
 11464     0938  0858               	movf	USBStdSetCfgHandler@i_2020,w
 11465     0939  1903               	btfsc	3,2
 11466     093A  292B               	goto	i1l4229
 11467                           
 11468                           ;usb/usb_device.c: 1983:     memset((void*)&BDT[0], 0x00, sizeof(BDT));
 11469     093B  3000               	movlw	0
 11470     093C  00F0               	movwf	i1memset@c
 11471     093D  00F1               	movwf	i1memset@c+1
 11472     093E  3020               	movlw	32
 11473     093F  00F2               	movwf	i1memset@n
 11474     0940  3000               	movlw	0
 11475     0941  00F3               	movwf	i1memset@n+1
 11476     0942  3020               	movlw	32
 11477     0943  319F  27D4  3189   	fcall	i1_memset
 11478                           
 11479                           ;usb/usb_device.c: 1986:     UCONbits.PPBRST = 1;
 11480     0946  003D               	movlb	29	; select bank29
 11481     0947  170E               	bsf	14,6	;volatile
 11482                           
 11483                           ;usb/usb_device.c: 1991:  for(i = 0; i < (uint8_t)(1 +1u); i++)
 11484     0948  0020               	movlb	0	; select bank0
 11485     0949  01D9               	clrf	USBStdSetCfgHandler@i
 11486     094A                     i1l4247:
 11487                           
 11488                           ;usb/usb_device.c: 1992:  {;usb/usb_device.c: 1993:   ep_data_in[i].Val = 0u;
 11489     094A  0859               	movf	USBStdSetCfgHandler@i,w
 11490     094B  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11491     094C  0086               	movwf	6
 11492     094D  3001               	movlw	1	; select bank2/3
 11493     094E  0087               	movwf	7
 11494     094F  0181               	clrf	1
 11495                           
 11496                           ;usb/usb_device.c: 1994:         ep_data_out[i].Val = 0u;
 11497     0950  0859               	movf	USBStdSetCfgHandler@i,w
 11498     0951  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11499     0952  0086               	movwf	6
 11500     0953  3001               	movlw	1	; select bank2/3
 11501     0954  0087               	movwf	7
 11502     0955  0181               	clrf	1
 11503                           
 11504                           ;usb/usb_device.c: 1995:  }
 11505     0956  3001               	movlw	1
 11506     0957  00FD               	movwf	??_USBStdSetCfgHandler
 11507     0958  087D               	movf	??_USBStdSetCfgHandler,w
 11508     0959  07D9               	addwf	USBStdSetCfgHandler@i,f
 11509     095A  3002               	movlw	2
 11510     095B  0259               	subwf	USBStdSetCfgHandler@i,w
 11511     095C  1C03               	skipc
 11512     095D  294A               	goto	i1l4247
 11513                           
 11514                           ;usb/usb_device.c: 1998:     memset((void*)&USBAlternateInterface,0x00,1);
 11515     095E  3000               	movlw	0
 11516     095F  00F0               	movwf	i1memset@c
 11517     0960  00F1               	movwf	i1memset@c+1
 11518     0961  3001               	movlw	1
 11519     0962  00F2               	movwf	i1memset@n
 11520     0963  3000               	movlw	0
 11521     0964  00F3               	movwf	i1memset@n+1
 11522     0965  306E               	movlw	(low (_USBAlternateInterface| 0))& (0+255)
 11523     0966  319F  27D4  3189   	fcall	i1_memset
 11524                           
 11525                           ;usb/usb_device.c: 2001:     UCONbits.PPBRST = 0;
 11526     0969  003D               	movlb	29	; select bank29
 11527     096A  130E               	bcf	14,6	;volatile
 11528                           
 11529                           ;usb/usb_device.c: 2003:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 11530     096B  3028               	movlw	40
 11531     096C  0020               	movlb	0	; select bank0
 11532     096D  00E3               	movwf	_pBDTEntryIn
 11533     096E  3000               	movlw	0
 11534     096F  00E4               	movwf	_pBDTEntryIn+1
 11535                           
 11536                           ;usb/usb_device.c: 2006:     pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 11537     0970  3020               	movlw	32
 11538     0971  00EB               	movwf	_pBDTEntryEP0OutCurrent
 11539                           
 11540                           ;usb/usb_device.c: 2007:     pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 11541     0972  086B               	movf	_pBDTEntryEP0OutCurrent,w
 11542     0973  00E7               	movwf	_pBDTEntryEP0OutNext
 11543     0974  01E8               	clrf	_pBDTEntryEP0OutNext+1
 11544                           
 11545                           ;usb/usb_device.c: 2010:     USBActiveConfiguration = SetupPkt.bConfigurationValue;
 11546     0975  0842               	movf	66,w	;volatile
 11547     0976  00EF               	movwf	_USBActiveConfiguration	;volatile
 11548                           
 11549                           ;usb/usb_device.c: 2013:     if(USBActiveConfiguration == 0)
 11550     0977  086F               	movf	_USBActiveConfiguration,w	;volatile
 11551     0978  1D03               	btfss	3,2
 11552     0979  297D               	goto	i1l4269
 11553                           
 11554                           ;usb/usb_device.c: 2014:     {;usb/usb_device.c: 2016:         USBDeviceState = ADDRESS_
      +                          STATE;
 11555     097A  3010               	movlw	16
 11556     097B  00EC               	movwf	_USBDeviceState	;volatile
 11557                           
 11558                           ;usb/usb_device.c: 2017:     }
 11559     097C  0008               	return
 11560     097D                     i1l4269:
 11561                           
 11562                           ;usb/usb_device.c: 2019:     {;usb/usb_device.c: 2021:         USER_USB_CALLBACK_EVENT_H
      +                          ANDLER((USB_EVENT)EVENT_CONFIGURED,(void*)&USBActiveConfiguration,1);
 11563     097D  3001               	movlw	1
 11564     097E  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11565     097F  3000               	movlw	0
 11566     0980  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11567     0981  306F               	movlw	low _USBActiveConfiguration
 11568     0982  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11569     0983  3000               	movlw	high _USBActiveConfiguration
 11570     0984  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11571     0985  3001               	movlw	1
 11572     0986  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11573     0987  3000               	movlw	0
 11574     0988  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11575     0989  3193  23D2         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11576                           
 11577                           ;usb/usb_device.c: 2026:         USBDeviceState = CONFIGURED_STATE;
 11578     098B  3020               	movlw	32
 11579     098C  0020               	movlb	0	; select bank0
 11580     098D  00EC               	movwf	_USBDeviceState	;volatile
 11581     098E  0008               	return
 11582     098F                     __end_of_USBStdSetCfgHandler:
 11583                           
 11584                           	psect	text60
 11585     1FD4                     __ptext60:	
 11586 ;; *************** function i1_memset *****************
 11587 ;; Defined at:
 11588 ;;		line 3 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memset.c"
 11589 ;; Parameters:    Size  Location     Type
 11590 ;;  dest            1    wreg     PTR void 
 11591 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11592 ;;  c               2    0[COMMON] int 
 11593 ;;  n               2    2[COMMON] unsigned int 
 11594 ;; Auto vars:     Size  Location     Type
 11595 ;;  dest            1    5[COMMON] PTR void 
 11596 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11597 ;;  p               1    6[COMMON] PTR unsigned char 
 11598 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11599 ;; Return value:  Size  Location     Type
 11600 ;;                  2    0[COMMON] PTR void 
 11601 ;; Registers used:
 11602 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11603 ;; Tracked objects:
 11604 ;;		On entry : 1F/0
 11605 ;;		On exit  : 1F/0
 11606 ;;		Unchanged: 1F/0
 11607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11608 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11610 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11611 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11612 ;;Total ram usage:        7 bytes
 11613 ;; Hardware stack levels used: 1
 11614 ;; This function calls:
 11615 ;;		Nothing
 11616 ;; This function is called by:
 11617 ;;		_USBStdSetCfgHandler
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621     1FD4                     i1_memset:	
 11622                           ;psect for function i1_memset
 11623                           
 11624                           
 11625                           ;incstack = 0
 11626                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11627                           ;i1memset@dest stored from wreg
 11628     1FD4  00F5               	movwf	i1memset@dest
 11629     1FD5  0875               	movf	i1memset@dest,w
 11630     1FD6  00F6               	movwf	i1memset@p
 11631     1FD7                     i1l4159:
 11632     1FD7  3001               	movlw	1
 11633     1FD8  02F2               	subwf	i1memset@n,f
 11634     1FD9  3000               	movlw	0
 11635     1FDA  3BF3               	subwfb	i1memset@n+1,f
 11636     1FDB  0A72               	incf	i1memset@n,w
 11637     1FDC  1903               	btfsc	3,2
 11638     1FDD  0A73               	incf	i1memset@n+1,w
 11639     1FDE  1903               	btfsc	3,2
 11640     1FDF  0008               	return
 11641     1FE0  0876               	movf	i1memset@p,w
 11642     1FE1  0086               	movwf	6
 11643     1FE2  0187               	clrf	7
 11644     1FE3  0870               	movf	i1memset@c,w
 11645     1FE4  0081               	movwf	1
 11646     1FE5  3001               	movlw	1
 11647     1FE6  00F4               	movwf	??i1_memset
 11648     1FE7  0874               	movf	??i1_memset,w
 11649     1FE8  07F6               	addwf	i1memset@p,f
 11650     1FE9  2FD7               	goto	i1l4159
 11651     1FEA                     __end_ofi1_memset:
 11652                           
 11653                           	psect	text61
 11654     15A9                     __ptext61:	
 11655 ;; *************** function _USBStdGetStatusHandler *****************
 11656 ;; Defined at:
 11657 ;;		line 2133 in file "usb/usb_device.c"
 11658 ;; Parameters:    Size  Location     Type
 11659 ;;		None
 11660 ;; Auto vars:     Size  Location     Type
 11661 ;;  p               2    2[COMMON] PTR struct __BDT
 11662 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 11663 ;; Return value:  Size  Location     Type
 11664 ;;                  1    wreg      void 
 11665 ;; Registers used:
 11666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11667 ;; Tracked objects:
 11668 ;;		On entry : 1D/0
 11669 ;;		On exit  : 1F/1
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11673 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11674 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11675 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11676 ;;Total ram usage:        4 bytes
 11677 ;; Hardware stack levels used: 1
 11678 ;; This function calls:
 11679 ;;		Nothing
 11680 ;; This function is called by:
 11681 ;;		_USBCheckStdRequest
 11682 ;; This function uses a non-reentrant model
 11683 ;;
 11684                           
 11685     15A9                     _USBStdGetStatusHandler:	
 11686                           ;psect for function _USBStdGetStatusHandler
 11687                           
 11688                           
 11689                           ;usb/usb_device.c: 2135:     CtrlTrfData[0] = 0;
 11690                           
 11691                           ;incstack = 0
 11692                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
 11693     15A9  0020               	movlb	0	; select bank0
 11694     15AA  01C8               	clrf	72	;volatile
 11695                           
 11696                           ;usb/usb_device.c: 2136:     CtrlTrfData[1] = 0;
 11697     15AB  01C9               	clrf	73	;volatile
 11698                           
 11699                           ;usb/usb_device.c: 2138:     switch(SetupPkt.Recipient)
 11700     15AC  2DE7               	goto	i1l4333
 11701     15AD                     i1l581:	
 11702                           ;usb/usb_device.c: 2139:     {;usb/usb_device.c: 2140:         case (0x00):
 11703                           
 11704                           
 11705                           ;usb/usb_device.c: 2141:             inPipes[0].info.bits.busy = 1;
 11706     15AD  0021               	movlb	1	; select bank1
 11707     15AE  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11708                           
 11709                           ;usb/usb_device.c: 2151:             if(RemoteWakeup == 1)
 11710                           
 11711                           ;usb/usb_device.c: 2146:             if(0 == 1)
 11712     15AF  0022               	movlb	2	; select bank2
 11713     15B0  0360               	decf	_RemoteWakeup^(0+256),w	;volatile
 11714     15B1  1D03               	btfss	3,2
 11715     15B2  2DFB               	goto	i1l584
 11716                           
 11717                           ;usb/usb_device.c: 2152:             {;usb/usb_device.c: 2153:                 CtrlTrfDa
      +                          ta[0]|=0x02;
 11718     15B3  0020               	movlb	0	; select bank0
 11719     15B4  14C8               	bsf	72,1	;volatile
 11720     15B5  2DFB               	goto	i1l584
 11721     15B6                     i1l585:	
 11722                           ;usb/usb_device.c: 2156:         case (0x01):
 11723                           
 11724                           
 11725                           ;usb/usb_device.c: 2157:             inPipes[0].info.bits.busy = 1;
 11726     15B6  0021               	movlb	1	; select bank1
 11727     15B7  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11728                           
 11729                           ;usb/usb_device.c: 2158:             break;
 11730     15B8  2DFB               	goto	i1l584
 11731     15B9                     i1l586:	
 11732                           ;usb/usb_device.c: 2159:         case (0x02):
 11733                           
 11734                           
 11735                           ;usb/usb_device.c: 2160:             inPipes[0].info.bits.busy = 1;
 11736     15B9  0021               	movlb	1	; select bank1
 11737     15BA  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11738                           
 11739                           ;usb/usb_device.c: 2164:             if(SetupPkt.EPNum != 0)
 11740     15BB  0020               	movlb	0	; select bank0
 11741     15BC  0844               	movf	68,w	;volatile
 11742     15BD  390F               	andlw	15
 11743     15BE  3A00               	xorlw	0
 11744     15BF  1903               	skipnz
 11745     15C0  2DFB               	goto	i1l584
 11746                           
 11747                           ;usb/usb_device.c: 2165:             {;usb/usb_device.c: 2166:                 BDT_ENTRY
      +                           *p;;usb/usb_device.c: 2168:                 if(SetupPkt.EPDir == 0)
 11748     15C1  1BC4               	btfsc	68,7	;volatile
 11749     15C2  2DCE               	goto	i1l4323
 11750                           
 11751                           ;usb/usb_device.c: 2169:                 {;usb/usb_device.c: 2170:                     p
      +                           = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 11752     15C3  0844               	movf	68,w	;volatile
 11753     15C4  390F               	andlw	15
 11754     15C5  0709               	addwf	9,w
 11755     15C6  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 11756     15C7  0086               	movwf	6
 11757     15C8  3001               	movlw	1	; select bank2/3
 11758     15C9  0087               	movwf	7
 11759     15CA  3F40               	moviw [0]fsr1
 11760     15CB  00F2               	movwf	USBStdGetStatusHandler@p
 11761     15CC  3F41               	moviw [1]fsr1
 11762     15CD  2DD7               	goto	L8
 11763     15CE                     i1l4323:	
 11764                           ;usb/usb_device.c: 2171:                 }
 11765                           
 11766                           
 11767                           ;usb/usb_device.c: 2173:                 {;usb/usb_device.c: 2174:                     p
      +                           = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 11768     15CE  0844               	movf	68,w	;volatile
 11769     15CF  390F               	andlw	15
 11770     15D0  0709               	addwf	9,w
 11771     15D1  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 11772     15D2  0086               	movwf	6
 11773     15D3  0187               	clrf	7
 11774     15D4  3F40               	moviw [0]fsr1
 11775     15D5  00F2               	movwf	USBStdGetStatusHandler@p
 11776     15D6  3F41               	moviw [1]fsr1
 11777     15D7                     L8:
 11778     15D7  00F3               	movwf	USBStdGetStatusHandler@p+1
 11779                           
 11780                           ;usb/usb_device.c: 2177:                 if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1)
      +                          )
 11781     15D8  0872               	movf	USBStdGetStatusHandler@p,w
 11782     15D9  0086               	movwf	6
 11783     15DA  0873               	movf	USBStdGetStatusHandler@p+1,w
 11784     15DB  0087               	movwf	7
 11785     15DC  1F81               	btfss	1,7
 11786     15DD  2DFB               	goto	i1l584
 11787     15DE  0872               	movf	USBStdGetStatusHandler@p,w
 11788     15DF  0086               	movwf	6
 11789     15E0  0873               	movf	USBStdGetStatusHandler@p+1,w
 11790     15E1  0087               	movwf	7
 11791     15E2  1D01               	btfss	1,2
 11792     15E3  2DFB               	goto	i1l584
 11793                           
 11794                           ;usb/usb_device.c: 2178:                 {;usb/usb_device.c: 2179:                     C
      +                          trlTrfData[0]=0x01;
 11795     15E4  3001               	movlw	1
 11796     15E5  00C8               	movwf	72	;volatile
 11797     15E6  2DFB               	goto	i1l584
 11798     15E7                     i1l4333:
 11799     15E7  0840               	movf	64,w	;volatile
 11800     15E8  391F               	andlw	31
 11801     15E9  00F0               	movwf	??_USBStdGetStatusHandler
 11802     15EA  01F1               	clrf	??_USBStdGetStatusHandler+1
 11803                           
 11804                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11805                           ; Switch size 1, requested type "simple"
 11806                           ; Number of cases is 1, Range of values is 0 to 0
 11807                           ; switch strategies available:
 11808                           ; Name         Instructions Cycles
 11809                           ; simple_byte            4     3 (average)
 11810                           ; direct_byte            8     6 (fixed)
 11811                           ; jumptable            260     6 (fixed)
 11812                           ;	Chosen strategy is simple_byte
 11813     15EB  0871               	movf	??_USBStdGetStatusHandler+1,w
 11814     15EC  3A00               	xorlw	0	; case 0
 11815     15ED  1903               	skipnz
 11816     15EE  2DF0               	goto	i1l6603
 11817     15EF  2DFB               	goto	i1l584
 11818     15F0                     i1l6603:
 11819                           
 11820                           ; Switch size 1, requested type "simple"
 11821                           ; Number of cases is 3, Range of values is 0 to 2
 11822                           ; switch strategies available:
 11823                           ; Name         Instructions Cycles
 11824                           ; simple_byte           10     6 (average)
 11825                           ; direct_byte           12     6 (fixed)
 11826                           ; jumptable            260     6 (fixed)
 11827                           ;	Chosen strategy is simple_byte
 11828     15F0  0870               	movf	??_USBStdGetStatusHandler,w
 11829     15F1  3A00               	xorlw	0	; case 0
 11830     15F2  1903               	skipnz
 11831     15F3  2DAD               	goto	i1l581
 11832     15F4  3A01               	xorlw	1	; case 1
 11833     15F5  1903               	skipnz
 11834     15F6  2DB6               	goto	i1l585
 11835     15F7  3A03               	xorlw	3	; case 2
 11836     15F8  1903               	skipnz
 11837     15F9  2DB9               	goto	i1l586
 11838     15FA  2DFB               	goto	i1l584
 11839     15FB                     i1l584:
 11840                           
 11841                           ;usb/usb_device.c: 2185:     if(inPipes[0].info.bits.busy == 1)
 11842     15FB  0021               	movlb	1	; select bank1
 11843     15FC  1FEB               	btfss	(_inPipes^(0+128)+2),7	;volatile
 11844     15FD  0008               	return
 11845                           
 11846                           ;usb/usb_device.c: 2186:     {;usb/usb_device.c: 2187:         inPipes[0].pSrc.bRam = (u
      +                          int8_t*)&CtrlTrfData;
 11847     15FE  3048               	movlw	72
 11848     15FF  00E9               	movwf	_inPipes^(0+128)	;volatile
 11849     1600  3000               	movlw	0
 11850     1601  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 11851                           
 11852                           ;usb/usb_device.c: 2188:         inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11853     1602  146B               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11854                           
 11855                           ;usb/usb_device.c: 2189:         inPipes[0].wCount.v[0] = 2;
 11856     1603  3002               	movlw	2
 11857     1604  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11858     1605  0008               	return
 11859     1606                     __end_of_USBStdGetStatusHandler:
 11860                           
 11861                           	psect	text62
 11862     0C61                     __ptext62:	
 11863 ;; *************** function _USBStdGetDscHandler *****************
 11864 ;; Defined at:
 11865 ;;		line 2047 in file "usb/usb_device.c"
 11866 ;; Parameters:    Size  Location     Type
 11867 ;;		None
 11868 ;; Auto vars:     Size  Location     Type
 11869 ;;		None
 11870 ;; Return value:  Size  Location     Type
 11871 ;;                  1    wreg      void 
 11872 ;; Registers used:
 11873 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11874 ;; Tracked objects:
 11875 ;;		On entry : 1D/0
 11876 ;;		On exit  : 1E/0
 11877 ;;		Unchanged: 0/0
 11878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11881 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;Total ram usage:        3 bytes
 11884 ;; Hardware stack levels used: 1
 11885 ;; This function calls:
 11886 ;;		Nothing
 11887 ;; This function is called by:
 11888 ;;		_USBCheckStdRequest
 11889 ;; This function uses a non-reentrant model
 11890 ;;
 11891                           
 11892     0C61                     _USBStdGetDscHandler:	
 11893                           ;psect for function _USBStdGetDscHandler
 11894                           
 11895                           
 11896                           ;usb/usb_device.c: 2049:     if(SetupPkt.bmRequestType == 0x80)
 11897                           
 11898                           ;incstack = 0
 11899                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 11900     0C61  3080               	movlw	128
 11901     0C62  0020               	movlb	0	; select bank0
 11902     0C63  0640               	xorwf	64,w	;volatile
 11903     0C64  1D03               	btfss	3,2
 11904     0C65  0008               	return
 11905                           
 11906                           ;usb/usb_device.c: 2050:     {;usb/usb_device.c: 2051:         inPipes[0].info.Val = 0x0
      +                          0 | 0x80 | 0x40;
 11907     0C66  30C0               	movlw	192
 11908     0C67  0021               	movlb	1	; select bank1
 11909     0C68  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 11910                           
 11911                           ;usb/usb_device.c: 2053:         switch(SetupPkt.bDescriptorType)
 11912     0C69  2CCD               	goto	i1l4303
 11913     0C6A                     i1l4277:
 11914                           
 11915                           ;usb/usb_device.c: 2057:                     inPipes[0].pSrc.bRom = (const uint8_t*)&dev
      +                          ice_dsc;
 11916     0C6A  309C               	movlw	low (_device_dsc| (0+32768))
 11917     0C6B  0021               	movlb	1	; select bank1
 11918     0C6C  00E9               	movwf	_inPipes^(0+128)	;volatile
 11919     0C6D  3098               	movlw	high (_device_dsc| (0+32768))
 11920     0C6E  00EA               	movwf	(_inPipes^(0+128)+1)	;volatile
 11921                           
 11922                           ;usb/usb_device.c: 2061:                 inPipes[0].wCount.Val = sizeof(device_dsc);
 11923     0C6F  3000               	movlw	0
 11924     0C70  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11925     0C71  3012               	movlw	18
 11926     0C72  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11927                           
 11928                           ;usb/usb_device.c: 2062:                 break;
 11929     0C73  0008               	return
 11930     0C74                     i1l4281:
 11931                           
 11932                           ;usb/usb_device.c: 2067:                 if(SetupPkt.bDscIndex < 1)
 11933     0C74  0842               	movf	66,w	;volatile
 11934     0C75  1D03               	btfss	3,2
 11935     0C76  2CA3               	goto	i1l4289
 11936                           
 11937                           ;usb/usb_device.c: 2068:                 {;usb/usb_device.c: 2070:                      
      +                             inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 11938     0C77  0842               	movf	66,w	;volatile
 11939     0C78  00F0               	movwf	??_USBStdGetDscHandler
 11940     0C79  01F1               	clrf	??_USBStdGetDscHandler+1
 11941     0C7A  35F0               	lslf	??_USBStdGetDscHandler,f
 11942     0C7B  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 11943     0C7C  30C6               	movlw	low _USB_CD_Ptr
 11944     0C7D  0770               	addwf	??_USBStdGetDscHandler,w
 11945     0C7E  0084               	movwf	4
 11946     0C7F  3018               	movlw	high _USB_CD_Ptr
 11947     0C80  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 11948     0C81  3880               	iorlw	128
 11949     0C82  0085               	movwf	5
 11950     0C83  3F00               	moviw [0]fsr0
 11951     0C84  0021               	movlb	1	; select bank1
 11952     0C85  00E9               	movwf	_inPipes^(0+128)	;volatile
 11953     0C86  3F01               	moviw [1]fsr0
 11954     0C87  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 11955                           
 11956                           ;usb/usb_device.c: 2078:                     inPipes[0].wCount.byte.LB = *(inPipes[0].pS
      +                          rc.bRom+2);
 11957     0C88  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 11958     0C89  00F1               	movwf	??_USBStdGetDscHandler+1
 11959     0C8A  0869               	movf	_inPipes^(0+128),w	;volatile
 11960     0C8B  00F0               	movwf	??_USBStdGetDscHandler
 11961     0C8C  3002               	movlw	2
 11962     0C8D  0770               	addwf	??_USBStdGetDscHandler,w
 11963     0C8E  0084               	movwf	4
 11964     0C8F  0871               	movf	??_USBStdGetDscHandler+1,w
 11965     0C90  1803               	skipnc
 11966     0C91  0A71               	incf	??_USBStdGetDscHandler+1,w
 11967     0C92  0085               	movwf	5
 11968     0C93  0800               	movf	0,w	;code access
 11969     0C94  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11970                           
 11971                           ;usb/usb_device.c: 2079:                     inPipes[0].wCount.byte.HB = *(inPipes[0].pS
      +                          rc.bRom+3);
 11972     0C95  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 11973     0C96  00F1               	movwf	??_USBStdGetDscHandler+1
 11974     0C97  0869               	movf	_inPipes^(0+128),w	;volatile
 11975     0C98  00F0               	movwf	??_USBStdGetDscHandler
 11976     0C99  3003               	movlw	3
 11977     0C9A  0770               	addwf	??_USBStdGetDscHandler,w
 11978     0C9B  0084               	movwf	4
 11979     0C9C  0871               	movf	??_USBStdGetDscHandler+1,w
 11980     0C9D  1803               	skipnc
 11981     0C9E  0A71               	incf	??_USBStdGetDscHandler+1,w
 11982     0C9F  0085               	movwf	5
 11983     0CA0  0800               	movf	0,w	;code access
 11984     0CA1  00ED               	movwf	(_inPipes^(0+128)+4)	;volatile
 11985                           
 11986                           ;usb/usb_device.c: 2080:                 }
 11987     0CA2  0008               	return
 11988     0CA3                     i1l4289:
 11989                           
 11990                           ;usb/usb_device.c: 2082:     {;usb/usb_device.c: 2083:      inPipes[0].info.Val = 0;
 11991     0CA3  0021               	movlb	1	; select bank1
 11992     0CA4  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 11993     0CA5  0008               	return
 11994     0CA6                     i1l4291:
 11995                           
 11996                           ;usb/usb_device.c: 2090:                 if(SetupPkt.bDscIndex<3)
 11997     0CA6  3003               	movlw	3
 11998     0CA7  0242               	subwf	66,w	;volatile
 11999     0CA8  1803               	skipnc
 12000     0CA9  2CC7               	goto	i1l4297
 12001                           
 12002                           ;usb/usb_device.c: 2091:                 {;usb/usb_device.c: 2093:                     i
      +                          nPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 12003     0CAA  0842               	movf	66,w	;volatile
 12004     0CAB  00F0               	movwf	??_USBStdGetDscHandler
 12005     0CAC  01F1               	clrf	??_USBStdGetDscHandler+1
 12006     0CAD  35F0               	lslf	??_USBStdGetDscHandler,f
 12007     0CAE  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 12008     0CAF  30BC               	movlw	low _USB_SD_Ptr
 12009     0CB0  0770               	addwf	??_USBStdGetDscHandler,w
 12010     0CB1  0084               	movwf	4
 12011     0CB2  3018               	movlw	high _USB_SD_Ptr
 12012     0CB3  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 12013     0CB4  3880               	iorlw	128
 12014     0CB5  0085               	movwf	5
 12015     0CB6  3F00               	moviw [0]fsr0
 12016     0CB7  0021               	movlb	1	; select bank1
 12017     0CB8  00E9               	movwf	_inPipes^(0+128)	;volatile
 12018     0CB9  3F01               	moviw [1]fsr0
 12019     0CBA  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12020                           
 12021                           ;usb/usb_device.c: 2095:                     inPipes[0].wCount.Val = *inPipes[0].pSrc.bR
      +                          om;
 12022     0CBB  0869               	movf	_inPipes^(0+128),w	;volatile
 12023     0CBC  0084               	movwf	4
 12024     0CBD  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 12025     0CBE  0085               	movwf	5
 12026     0CBF  0800               	movf	0,w	;code access
 12027     0CC0  00F0               	movwf	??_USBStdGetDscHandler
 12028     0CC1  01F1               	clrf	??_USBStdGetDscHandler+1
 12029     0CC2  0870               	movf	??_USBStdGetDscHandler,w
 12030     0CC3  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12031     0CC4  0871               	movf	??_USBStdGetDscHandler+1,w
 12032     0CC5  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12033                           
 12034                           ;usb/usb_device.c: 2096:                 }
 12035     0CC6  0008               	return
 12036     0CC7                     i1l4297:
 12037                           
 12038                           ;usb/usb_device.c: 2107:                 {;usb/usb_device.c: 2108:                     i
      +                          nPipes[0].info.Val = 0;
 12039     0CC7  0021               	movlb	1	; select bank1
 12040     0CC8  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 12041     0CC9  0008               	return
 12042     0CCA                     i1l4299:
 12043                           
 12044                           ;usb/usb_device.c: 2112:                 inPipes[0].info.Val = 0;
 12045     0CCA  0021               	movlb	1	; select bank1
 12046     0CCB  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 12047                           
 12048                           ;usb/usb_device.c: 2113:                 break;
 12049     0CCC  0008               	return
 12050     0CCD                     i1l4303:
 12051     0CCD  0020               	movlb	0	; select bank0
 12052     0CCE  0843               	movf	67,w	;volatile
 12053     0CCF  00F0               	movwf	??_USBStdGetDscHandler
 12054     0CD0  01F1               	clrf	??_USBStdGetDscHandler+1
 12055                           
 12056                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12057                           ; Switch size 1, requested type "simple"
 12058                           ; Number of cases is 1, Range of values is 0 to 0
 12059                           ; switch strategies available:
 12060                           ; Name         Instructions Cycles
 12061                           ; simple_byte            4     3 (average)
 12062                           ; direct_byte            8     6 (fixed)
 12063                           ; jumptable            260     6 (fixed)
 12064                           ;	Chosen strategy is simple_byte
 12065     0CD1  0871               	movf	??_USBStdGetDscHandler+1,w
 12066     0CD2  3A00               	xorlw	0	; case 0
 12067     0CD3  1903               	skipnz
 12068     0CD4  2CD6               	goto	i1l6605
 12069     0CD5  2CCA               	goto	i1l4299
 12070     0CD6                     i1l6605:
 12071                           
 12072                           ; Switch size 1, requested type "simple"
 12073                           ; Number of cases is 3, Range of values is 1 to 3
 12074                           ; switch strategies available:
 12075                           ; Name         Instructions Cycles
 12076                           ; simple_byte           10     6 (average)
 12077                           ; direct_byte           15     9 (fixed)
 12078                           ; jumptable            263     9 (fixed)
 12079                           ;	Chosen strategy is simple_byte
 12080     0CD6  0870               	movf	??_USBStdGetDscHandler,w
 12081     0CD7  3A01               	xorlw	1	; case 1
 12082     0CD8  1903               	skipnz
 12083     0CD9  2C6A               	goto	i1l4277
 12084     0CDA  3A03               	xorlw	3	; case 2
 12085     0CDB  1903               	skipnz
 12086     0CDC  2C74               	goto	i1l4281
 12087     0CDD  3A01               	xorlw	1	; case 3
 12088     0CDE  1903               	skipnz
 12089     0CDF  2CA6               	goto	i1l4291
 12090     0CE0  2CCA               	goto	i1l4299
 12091     0CE1  0008               	return
 12092     0CE2                     __end_of_USBStdGetDscHandler:
 12093                           
 12094                           	psect	text63
 12095     01EC                     __ptext63:	
 12096 ;; *************** function _USBStdFeatureReqHandler *****************
 12097 ;; Defined at:
 12098 ;;		line 2761 in file "usb/usb_device.c"
 12099 ;; Parameters:    Size  Location     Type
 12100 ;;		None
 12101 ;; Auto vars:     Size  Location     Type
 12102 ;;  p               2   11[BANK0 ] PTR struct __BDT
 12103 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 12104 ;;  pUEP            2    8[BANK0 ] PTR unsigned char 
 12105 ;;		 -> UEP0(1), 
 12106 ;;  current_ep_d    1   10[BANK0 ] struct .
 12107 ;; Return value:  Size  Location     Type
 12108 ;;                  1    wreg      void 
 12109 ;; Registers used:
 12110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12111 ;; Tracked objects:
 12112 ;;		On entry : 1D/0
 12113 ;;		On exit  : 1F/0
 12114 ;;		Unchanged: 0/0
 12115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12117 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12119 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12120 ;;Total ram usage:        7 bytes
 12121 ;; Hardware stack levels used: 1
 12122 ;; Hardware stack levels required when called: 4
 12123 ;; This function calls:
 12124 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12125 ;; This function is called by:
 12126 ;;		_USBCheckStdRequest
 12127 ;; This function uses a non-reentrant model
 12128 ;;
 12129                           
 12130     01EC                     _USBStdFeatureReqHandler:	
 12131                           ;psect for function _USBStdFeatureReqHandler
 12132                           
 12133                           
 12134                           ;usb/usb_device.c: 2763:     BDT_ENTRY *p;;usb/usb_device.c: 2764:     EP_STATUS current
      +                          _ep_data;;usb/usb_device.c: 2768:         unsigned char* pUEP;;usb/usb_device.c: 2772:  
      +                             if((SetupPkt.bFeature == 1)&&
 12135                           
 12136                           ;incstack = 0
 12137                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12138     01EC  0020               	movlb	0	; select bank0
 12139     01ED  0342               	decf	66,w	;volatile
 12140     01EE  1D03               	btfss	3,2
 12141     01EF  2A02               	goto	i1l4357
 12142     01F0  0840               	movf	64,w	;volatile
 12143     01F1  391F               	andlw	31
 12144     01F2  3A00               	xorlw	0
 12145     01F3  1D03               	skipz
 12146     01F4  2A02               	goto	i1l4357
 12147                           
 12148                           ;usb/usb_device.c: 2774:     {;usb/usb_device.c: 2775:         inPipes[0].info.bits.busy
      +                           = 1;
 12149     01F5  0021               	movlb	1	; select bank1
 12150     01F6  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12151                           
 12152                           ;usb/usb_device.c: 2776:         if(SetupPkt.bRequest == 3)
 12153     01F7  3003               	movlw	3
 12154     01F8  0020               	movlb	0	; select bank0
 12155     01F9  0641               	xorwf	65,w	;volatile
 12156     01FA  1D03               	btfss	3,2
 12157     01FB  2A00               	goto	i1l4355
 12158                           
 12159                           ;usb/usb_device.c: 2777:             RemoteWakeup = 1;
 12160     01FC  3001               	movlw	1
 12161     01FD  0022               	movlb	2	; select bank2
 12162     01FE  00E0               	movwf	_RemoteWakeup^(0+256)	;volatile
 12163     01FF  2A02               	goto	i1l4357
 12164     0200                     i1l4355:
 12165                           
 12166                           ;usb/usb_device.c: 2779:             RemoteWakeup = 0;
 12167     0200  0022               	movlb	2	; select bank2
 12168     0201  01E0               	clrf	_RemoteWakeup^(0+256)	;volatile
 12169     0202                     i1l4357:
 12170                           
 12171                           ;usb/usb_device.c: 2783:     if((SetupPkt.bFeature == 0)&&
 12172     0202  0020               	movlb	0	; select bank0
 12173     0203  0842               	movf	66,w	;volatile
 12174     0204  1D03               	btfss	3,2
 12175     0205  0008               	return
 12176     0206  0840               	movf	64,w	;volatile
 12177     0207  391F               	andlw	31
 12178     0208  3A02               	xorlw	2
 12179     0209  1D03               	skipz
 12180     020A  0008               	return
 12181     020B  0844               	movf	68,w	;volatile
 12182     020C  390F               	andlw	15
 12183     020D  3A00               	xorlw	0
 12184     020E  1903               	skipnz
 12185     020F  0008               	return
 12186     0210  0844               	movf	68,w	;volatile
 12187     0211  390F               	andlw	15
 12188     0212  00D6               	movwf	??_USBStdFeatureReqHandler
 12189     0213  3002               	movlw	2
 12190     0214  0256               	subwf	??_USBStdFeatureReqHandler,w
 12191     0215  1803               	skipnc
 12192     0216  0008               	return
 12193     0217  3020               	movlw	32
 12194     0218  066C               	xorwf	_USBDeviceState,w
 12195     0219  1D03               	btfss	3,2
 12196     021A  0008               	return
 12197                           
 12198                           ;usb/usb_device.c: 2787:     {;usb/usb_device.c: 2790:   inPipes[0].info.bits.busy = 1;
 12199     021B  0021               	movlb	1	; select bank1
 12200     021C  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12201                           
 12202                           ;usb/usb_device.c: 2793:         if(SetupPkt.EPDir == 0)
 12203     021D  0020               	movlb	0	; select bank0
 12204     021E  1BC4               	btfsc	68,7	;volatile
 12205     021F  2A2F               	goto	i1l4371
 12206                           
 12207                           ;usb/usb_device.c: 2794:         {;usb/usb_device.c: 2795:             p = (BDT_ENTRY*)p
      +                          BDTEntryOut[SetupPkt.EPNum];
 12208     0220  0844               	movf	68,w	;volatile
 12209     0221  390F               	andlw	15
 12210     0222  0709               	addwf	9,w
 12211     0223  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12212     0224  0086               	movwf	6
 12213     0225  3001               	movlw	1	; select bank2/3
 12214     0226  0087               	movwf	7
 12215     0227  3F40               	moviw [0]fsr1
 12216     0228  00DB               	movwf	USBStdFeatureReqHandler@p
 12217     0229  3F41               	moviw [1]fsr1
 12218     022A  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12219                           
 12220                           ;usb/usb_device.c: 2796:             current_ep_data.Val = ep_data_out[SetupPkt.EPNum].V
      +                          al;
 12221     022B  0844               	movf	68,w	;volatile
 12222     022C  390F               	andlw	15
 12223     022D  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12224     022E  2A3C               	goto	L9
 12225     022F                     i1l4371:	
 12226                           ;usb/usb_device.c: 2797:         }
 12227                           
 12228                           
 12229                           ;usb/usb_device.c: 2799:         {;usb/usb_device.c: 2800:             p = (BDT_ENTRY*)p
      +                          BDTEntryIn[SetupPkt.EPNum];
 12230     022F  0844               	movf	68,w	;volatile
 12231     0230  390F               	andlw	15
 12232     0231  0709               	addwf	9,w
 12233     0232  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12234     0233  0086               	movwf	6
 12235     0234  0187               	clrf	7
 12236     0235  3F40               	moviw [0]fsr1
 12237     0236  00DB               	movwf	USBStdFeatureReqHandler@p
 12238     0237  3F41               	moviw [1]fsr1
 12239     0238  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12240                           
 12241                           ;usb/usb_device.c: 2801:             current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Va
      +                          l;
 12242     0239  0844               	movf	68,w	;volatile
 12243     023A  390F               	andlw	15
 12244     023B  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12245     023C                     L9:
 12246     023C  0086               	movwf	6
 12247     023D  3001               	movlw	1	; select bank2/3
 12248     023E  0087               	movwf	7
 12249     023F  0801               	movf	1,w
 12250     0240  00DA               	movwf	USBStdFeatureReqHandler@current_ep_data
 12251                           
 12252                           ;usb/usb_device.c: 2808:             if(current_ep_data.bits.ping_pong_state == 0)
 12253     0241  185A               	btfsc	USBStdFeatureReqHandler@current_ep_data,0
 12254     0242  2A4D               	goto	i1l4377
 12255                           
 12256                           ;usb/usb_device.c: 2809:             {;usb/usb_device.c: 2810:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) & (~0x0004));
 12257     0243  30FB               	movlw	251
 12258     0244  00D6               	movwf	??_USBStdFeatureReqHandler
 12259     0245  30FF               	movlw	255
 12260     0246  00D7               	movwf	??_USBStdFeatureReqHandler+1
 12261     0247  085B               	movf	USBStdFeatureReqHandler@p,w
 12262     0248  0556               	andwf	??_USBStdFeatureReqHandler,w
 12263     0249  00DB               	movwf	USBStdFeatureReqHandler@p
 12264     024A  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12265     024B  0557               	andwf	??_USBStdFeatureReqHandler+1,w
 12266     024C  2A52               	goto	L10
 12267     024D                     i1l4377:	
 12268                           ;usb/usb_device.c: 2811:             }
 12269                           
 12270                           
 12271                           ;usb/usb_device.c: 2813:             {;usb/usb_device.c: 2814:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) | 0x0004);
 12272     024D  3004               	movlw	4
 12273     024E  045B               	iorwf	USBStdFeatureReqHandler@p,w
 12274     024F  00DB               	movwf	USBStdFeatureReqHandler@p
 12275     0250  3000               	movlw	0
 12276     0251  045C               	iorwf	USBStdFeatureReqHandler@p+1,w
 12277     0252                     L10:
 12278     0252  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12279                           
 12280                           ;usb/usb_device.c: 2820:         if(SetupPkt.EPDir == 0)
 12281     0253  1BC4               	btfsc	68,7	;volatile
 12282     0254  2A61               	goto	i1l4383
 12283                           
 12284                           ;usb/usb_device.c: 2821:         {;usb/usb_device.c: 2822:             pBDTEntryOut[Setu
      +                          pPkt.EPNum] = (volatile BDT_ENTRY *)p;
 12285     0255  0844               	movf	68,w	;volatile
 12286     0256  390F               	andlw	15
 12287     0257  0709               	addwf	9,w
 12288     0258  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12289     0259  0086               	movwf	6
 12290     025A  3001               	movlw	1	; select bank2/3
 12291     025B  0087               	movwf	7
 12292     025C  085B               	movf	USBStdFeatureReqHandler@p,w
 12293     025D  3FC0               	movwi [0]fsr1
 12294     025E  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12295     025F  3FC1               	movwi [1]fsr1
 12296                           
 12297                           ;usb/usb_device.c: 2823:         }
 12298     0260  2A6B               	goto	i1l4385
 12299     0261                     i1l4383:
 12300                           
 12301                           ;usb/usb_device.c: 2825:         {;usb/usb_device.c: 2826:             pBDTEntryIn[Setup
      +                          Pkt.EPNum] = (volatile BDT_ENTRY *)p;
 12302     0261  0844               	movf	68,w	;volatile
 12303     0262  390F               	andlw	15
 12304     0263  0709               	addwf	9,w
 12305     0264  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12306     0265  0086               	movwf	6
 12307     0266  0187               	clrf	7
 12308     0267  085B               	movf	USBStdFeatureReqHandler@p,w
 12309     0268  3FC0               	movwi [0]fsr1
 12310     0269  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12311     026A  3FC1               	movwi [1]fsr1
 12312     026B                     i1l4385:
 12313                           
 12314                           ;usb/usb_device.c: 2830:         if(SetupPkt.bRequest == 3)
 12315     026B  3003               	movlw	3
 12316     026C  0641               	xorwf	65,w	;volatile
 12317     026D  1D03               	btfss	3,2
 12318     026E  2A8D               	goto	i1l4399
 12319                           
 12320                           ;usb/usb_device.c: 2831:         {;usb/usb_device.c: 2832:             if(p->STAT.UOWN =
      +                          = 1)
 12321     026F  085B               	movf	USBStdFeatureReqHandler@p,w
 12322     0270  0086               	movwf	6
 12323     0271  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12324     0272  0087               	movwf	7
 12325     0273  1F81               	btfss	1,7
 12326     0274  2A82               	goto	i1l4395
 12327                           
 12328                           ;usb/usb_device.c: 2833:             {;usb/usb_device.c: 2836:                 if(SetupP
      +                          kt.EPDir == 0)
 12329     0275  1BC4               	btfsc	68,7	;volatile
 12330     0276  2A7B               	goto	i1l4393
 12331                           
 12332                           ;usb/usb_device.c: 2837:                 {;usb/usb_device.c: 2838:                     e
      +                          p_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 12333     0277  0844               	movf	68,w	;volatile
 12334     0278  390F               	andlw	15
 12335     0279  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12336     027A  2A7E               	goto	L11
 12337     027B                     i1l4393:	
 12338                           ;usb/usb_device.c: 2839:                 }
 12339                           
 12340                           
 12341                           ;usb/usb_device.c: 2841:                 {;usb/usb_device.c: 2842:                     e
      +                          p_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 12342     027B  0844               	movf	68,w	;volatile
 12343     027C  390F               	andlw	15
 12344     027D  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12345     027E                     L11:
 12346     027E  0086               	movwf	6
 12347     027F  3001               	movlw	1	; select bank2/3
 12348     0280  0087               	movwf	7
 12349     0281  1481               	bsf	1,1
 12350     0282                     i1l4395:
 12351                           
 12352                           ;usb/usb_device.c: 2847:             p->STAT.Val |= 0x04;
 12353     0282  085B               	movf	USBStdFeatureReqHandler@p,w
 12354     0283  0086               	movwf	6
 12355     0284  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12356     0285  0087               	movwf	7
 12357     0286  1501               	bsf	1,2
 12358                           
 12359                           ;usb/usb_device.c: 2848:             p->STAT.Val |= 0x80;
 12360     0287  085B               	movf	USBStdFeatureReqHandler@p,w
 12361     0288  0086               	movwf	6
 12362     0289  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12363     028A  0087               	movwf	7
 12364     028B  1781               	bsf	1,7
 12365                           
 12366                           ;usb/usb_device.c: 2849:         }
 12367     028C  0008               	return
 12368     028D                     i1l4399:
 12369                           
 12370                           ;usb/usb_device.c: 2851:         {;usb/usb_device.c: 2855:                 p = (BDT_ENTR
      +                          Y*)(((uint16_t)p) ^ 0x0004);
 12371     028D  3004               	movlw	4
 12372     028E  065B               	xorwf	USBStdFeatureReqHandler@p,w
 12373     028F  00DB               	movwf	USBStdFeatureReqHandler@p
 12374     0290  3000               	movlw	0
 12375     0291  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 12376     0292  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12377                           
 12378                           ;usb/usb_device.c: 2857:                 if(p->STAT.UOWN == 1)
 12379     0293  085B               	movf	USBStdFeatureReqHandler@p,w
 12380     0294  0086               	movwf	6
 12381     0295  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12382     0296  0087               	movwf	7
 12383     0297  1F81               	btfss	1,7
 12384     0298  2AB6               	goto	i1l4409
 12385                           
 12386                           ;usb/usb_device.c: 2858:                 {;usb/usb_device.c: 2861:                     p
      +                          ->STAT.Val &= (~0x80);
 12387     0299  307F               	movlw	127
 12388     029A  00D6               	movwf	??_USBStdFeatureReqHandler
 12389     029B  085B               	movf	USBStdFeatureReqHandler@p,w
 12390     029C  0086               	movwf	6
 12391     029D  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12392     029E  0087               	movwf	7
 12393     029F  0856               	movf	??_USBStdFeatureReqHandler,w
 12394     02A0  0581               	andwf	1,f
 12395                           
 12396                           ;usb/usb_device.c: 2862:                     p->STAT.Val |= 0x40;
 12397     02A1  085B               	movf	USBStdFeatureReqHandler@p,w
 12398     02A2  0086               	movwf	6
 12399     02A3  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12400     02A4  0087               	movwf	7
 12401     02A5  1701               	bsf	1,6
 12402                           
 12403                           ;usb/usb_device.c: 2863:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 12404     02A6  3005               	movlw	5
 12405     02A7  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12406     02A8  3000               	movlw	0
 12407     02A9  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12408     02AA  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12409     02AB  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12410     02AC  085B               	movf	USBStdFeatureReqHandler@p,w
 12411     02AD  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12412     02AE  3002               	movlw	2
 12413     02AF  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12414     02B0  3000               	movlw	0
 12415     02B1  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12416     02B2  3193  23D2  3181   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12417                           
 12418                           ;usb/usb_device.c: 2864:                 }
 12419     02B5  2ABB               	goto	i1l4411
 12420     02B6                     i1l4409:
 12421                           
 12422                           ;usb/usb_device.c: 2866:                 {;usb/usb_device.c: 2868:      p->STAT.Val |= 0
      +                          x40;
 12423     02B6  085B               	movf	USBStdFeatureReqHandler@p,w
 12424     02B7  0086               	movwf	6
 12425     02B8  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12426     02B9  0087               	movwf	7
 12427     02BA  1701               	bsf	1,6
 12428     02BB                     i1l4411:
 12429                           
 12430                           ;usb/usb_device.c: 2873:                 p = (BDT_ENTRY*)(((uint16_t)p) ^ 0x0004);
 12431     02BB  3004               	movlw	4
 12432     02BC  0020               	movlb	0	; select bank0
 12433     02BD  065B               	xorwf	USBStdFeatureReqHandler@p,w
 12434     02BE  00DB               	movwf	USBStdFeatureReqHandler@p
 12435     02BF  3000               	movlw	0
 12436     02C0  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 12437     02C1  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12438                           
 12439                           ;usb/usb_device.c: 2879:                 if((current_ep_data.bits.transfer_terminated !=
      +                           0) || (p->STAT.UOWN == 1))
 12440     02C2  18DA               	btfsc	USBStdFeatureReqHandler@current_ep_data,1
 12441     02C3  2ACA               	goto	i1l678
 12442     02C4  085B               	movf	USBStdFeatureReqHandler@p,w
 12443     02C5  0086               	movwf	6
 12444     02C6  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12445     02C7  0087               	movwf	7
 12446     02C8  1F81               	btfss	1,7
 12447     02C9  2AEF               	goto	i1l4423
 12448     02CA                     i1l678:
 12449                           
 12450                           ;usb/usb_device.c: 2880:                 {;usb/usb_device.c: 2881:                     i
      +                          f(SetupPkt.EPDir == 0)
 12451     02CA  1BC4               	btfsc	68,7	;volatile
 12452     02CB  2AD0               	goto	i1l4419
 12453                           
 12454                           ;usb/usb_device.c: 2882:                     {;usb/usb_device.c: 2883:                  
      +                                 ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 12455     02CC  0844               	movf	68,w	;volatile
 12456     02CD  390F               	andlw	15
 12457     02CE  3E3C               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12458     02CF  2AD3               	goto	L12
 12459     02D0                     i1l4419:	
 12460                           ;usb/usb_device.c: 2884:                     }
 12461                           
 12462                           
 12463                           ;usb/usb_device.c: 2886:                     {;usb/usb_device.c: 2887:                  
      +                                 ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 12464     02D0  0844               	movf	68,w	;volatile
 12465     02D1  390F               	andlw	15
 12466     02D2  3E3E               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12467     02D3                     L12:
 12468     02D3  0086               	movwf	6
 12469     02D4  3001               	movlw	1	; select bank2/3
 12470     02D5  0087               	movwf	7
 12471     02D6  1081               	bcf	1,1
 12472                           
 12473                           ;usb/usb_device.c: 2890:                     p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 12474                           
 12475                           ;usb/usb_device.c: 2888:                     }
 12476     02D7  303B               	movlw	59
 12477     02D8  00D6               	movwf	??_USBStdFeatureReqHandler
 12478     02D9  085B               	movf	USBStdFeatureReqHandler@p,w
 12479     02DA  0086               	movwf	6
 12480     02DB  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12481     02DC  0087               	movwf	7
 12482     02DD  0856               	movf	??_USBStdFeatureReqHandler,w
 12483     02DE  0581               	andwf	1,f
 12484                           
 12485                           ;usb/usb_device.c: 2893:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 12486     02DF  3005               	movlw	5
 12487     02E0  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12488     02E1  3000               	movlw	0
 12489     02E2  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12490     02E3  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12491     02E4  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12492     02E5  085B               	movf	USBStdFeatureReqHandler@p,w
 12493     02E6  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12494     02E7  3002               	movlw	2
 12495     02E8  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12496     02E9  3000               	movlw	0
 12497     02EA  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12498     02EB  3193  23D2  3181   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12499                           
 12500                           ;usb/usb_device.c: 2894:                 }
 12501     02EE  2AF7               	goto	i1l4425
 12502     02EF                     i1l4423:
 12503                           
 12504                           ;usb/usb_device.c: 2896:                 {;usb/usb_device.c: 2898:                     p
      +                          ->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 12505     02EF  303B               	movlw	59
 12506     02F0  00D6               	movwf	??_USBStdFeatureReqHandler
 12507     02F1  085B               	movf	USBStdFeatureReqHandler@p,w
 12508     02F2  0086               	movwf	6
 12509     02F3  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12510     02F4  0087               	movwf	7
 12511     02F5  0856               	movf	??_USBStdFeatureReqHandler,w
 12512     02F6  0581               	andwf	1,f
 12513     02F7                     i1l4425:
 12514                           
 12515                           ;usb/usb_device.c: 2946:                 pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 12516     02F7  0020               	movlb	0	; select bank0
 12517     02F8  0844               	movf	68,w	;volatile
 12518     02F9  390F               	andlw	15
 12519     02FA  3E98               	addlw	152
 12520     02FB  00D6               	movwf	??_USBStdFeatureReqHandler
 12521     02FC  01D7               	clrf	??_USBStdFeatureReqHandler+1
 12522     02FD  300E               	movlw	14
 12523     02FE  3DD7               	addwfc	??_USBStdFeatureReqHandler+1,f
 12524     02FF  0856               	movf	??_USBStdFeatureReqHandler,w
 12525     0300  00D8               	movwf	USBStdFeatureReqHandler@pUEP
 12526     0301  0857               	movf	??_USBStdFeatureReqHandler+1,w
 12527     0302  00D9               	movwf	USBStdFeatureReqHandler@pUEP+1
 12528                           
 12529                           ;usb/usb_device.c: 2950:             *pUEP &= ~0x0001;
 12530     0303  30FE               	movlw	254
 12531     0304  00D6               	movwf	??_USBStdFeatureReqHandler
 12532     0305  0858               	movf	USBStdFeatureReqHandler@pUEP,w
 12533     0306  0086               	movwf	6
 12534     0307  0859               	movf	USBStdFeatureReqHandler@pUEP+1,w
 12535     0308  0087               	movwf	7
 12536     0309  0856               	movf	??_USBStdFeatureReqHandler,w
 12537     030A  0581               	andwf	1,f
 12538     030B  0008               	return
 12539     030C                     __end_of_USBStdFeatureReqHandler:
 12540                           
 12541                           	psect	text64
 12542     13D2                     __ptext64:	
 12543 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 12544 ;; Defined at:
 12545 ;;		line 66 in file "usb/usb_events.c"
 12546 ;; Parameters:    Size  Location     Type
 12547 ;;  event           2    0[BANK0 ] enum E238
 12548 ;;  pdata           2    2[BANK0 ] PTR void 
 12549 ;;		 -> RAM(4096), USTATcopy(1), USBActiveConfiguration(1), NULL(0), 
 12550 ;;		 -> BDT(32), 
 12551 ;;  size            2    4[BANK0 ] unsigned short 
 12552 ;; Auto vars:     Size  Location     Type
 12553 ;;		None
 12554 ;; Return value:  Size  Location     Type
 12555 ;;                  1    wreg      _Bool 
 12556 ;; Registers used:
 12557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12558 ;; Tracked objects:
 12559 ;;		On entry : 1F/0
 12560 ;;		On exit  : 0/0
 12561 ;;		Unchanged: 0/0
 12562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12563 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12567 ;;Total ram usage:        6 bytes
 12568 ;; Hardware stack levels used: 1
 12569 ;; Hardware stack levels required when called: 3
 12570 ;; This function calls:
 12571 ;;		_APP_KeyboardInit
 12572 ;;		_USBCheckHIDRequest
 12573 ;; This function is called by:
 12574 ;;		_USBDeviceTasks
 12575 ;;		_USBStdSetCfgHandler
 12576 ;;		_USBSuspend
 12577 ;;		_USBWakeFromSuspend
 12578 ;;		_USBCtrlTrfSetupHandler
 12579 ;;		_USBCheckStdRequest
 12580 ;;		_USBStdFeatureReqHandler
 12581 ;; This function uses a non-reentrant model
 12582 ;;
 12583                           
 12584     13D2                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 12585                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 12586                           
 12587                           
 12588                           ;usb/usb_events.c: 66: _Bool USER_USB_CALLBACK_EVENT_HANDLER(USB_EVENT event, void *pdat
      +                          a, uint16_t size);usb/usb_events.c: 67: {;usb/usb_events.c: 68:     switch((int)event)
 12589                           
 12590                           ;incstack = 0
 12591                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12592     13D2  2BE8               	goto	i1l4095
 12593     13D3                     i1l4083:
 12594                           
 12595                           ;usb/usb_events.c: 77:             if(SOFCounter < 32767)
 12596     13D3  0022               	movlb	2	; select bank2
 12597     13D4  0A3A               	incf	_SOFCounter^(0+256),w	;volatile
 12598     13D5  307F               	movlw	127
 12599     13D6  1903               	skipnz
 12600     13D7  063B               	xorwf	(_SOFCounter+1)^(0+256),w	;volatile
 12601     13D8  1903               	btfsc	3,2
 12602     13D9  2BDF               	goto	i1l4087
 12603                           
 12604                           ;usb/usb_events.c: 78:             {;usb/usb_events.c: 79:                 SOFCounter++;
 12605     13DA  3001               	movlw	1
 12606     13DB  07BA               	addwf	_SOFCounter^(0+256),f	;volatile
 12607     13DC  3000               	movlw	0
 12608     13DD  3DBB               	addwfc	(_SOFCounter+1)^(0+256),f	;volatile
 12609                           
 12610                           ;usb/usb_events.c: 80:             }
 12611     13DE  0008               	return
 12612     13DF                     i1l4087:
 12613                           
 12614                           ;usb/usb_events.c: 82:             {;usb/usb_events.c: 83:                 SOFCounter = 
      +                          0;
 12615     13DF  01BA               	clrf	_SOFCounter^(0+256)	;volatile
 12616     13E0  01BB               	clrf	(_SOFCounter+1)^(0+256)	;volatile
 12617     13E1  0008               	return
 12618     13E2                     i1l4089:
 12619                           
 12620                           ;usb/usb_events.c: 114:             APP_KeyboardInit();
 12621     13E2  3195  2561         	fcall	_APP_KeyboardInit
 12622                           
 12623                           ;usb/usb_events.c: 115:             break;
 12624     13E4  0008               	return
 12625     13E5                     i1l4091:
 12626                           
 12627                           ;usb/usb_events.c: 123:             USBCheckHIDRequest();
 12628     13E5  318C  24E2         	fcall	_USBCheckHIDRequest
 12629                           
 12630                           ;usb/usb_events.c: 124:             break;
 12631     13E7  0008               	return
 12632     13E8                     i1l4095:
 12633                           
 12634                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12635                           ; Switch size 1, requested type "simple"
 12636                           ; Number of cases is 2, Range of values is 0 to 127
 12637                           ; switch strategies available:
 12638                           ; Name         Instructions Cycles
 12639                           ; simple_byte            7     4 (average)
 12640                           ; direct_byte          262     6 (fixed)
 12641                           ; jumptable            260     6 (fixed)
 12642                           ;	Chosen strategy is simple_byte
 12643     13E8  0851               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
 12644     13E9  3A00               	xorlw	0	; case 0
 12645     13EA  1903               	skipnz
 12646     13EB  2BF0               	goto	i1l6607
 12647     13EC  3A7F               	xorlw	127	; case 127
 12648     13ED  1903               	skipnz
 12649     13EE  2C0A               	goto	i1l6609
 12650     13EF  2C0F               	goto	i1l763
 12651     13F0                     i1l6607:
 12652                           
 12653                           ; Switch size 1, requested type "simple"
 12654                           ; Number of cases is 8, Range of values is 1 to 117
 12655                           ; switch strategies available:
 12656                           ; Name         Instructions Cycles
 12657                           ; simple_byte           25    13 (average)
 12658                           ; direct_byte          243     9 (fixed)
 12659                           ; jumptable            263     9 (fixed)
 12660                           ;	Chosen strategy is simple_byte
 12661     13F0  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 12662     13F1  3A01               	xorlw	1	; case 1
 12663     13F2  1903               	skipnz
 12664     13F3  2BE2               	goto	i1l4089
 12665     13F4  3A03               	xorlw	3	; case 2
 12666     13F5  1903               	skipnz
 12667     13F6  2C0F               	goto	i1l763
 12668     13F7  3A01               	xorlw	1	; case 3
 12669     13F8  1903               	skipnz
 12670     13F9  2BE5               	goto	i1l4091
 12671     13FA  3A06               	xorlw	6	; case 5
 12672     13FB  1903               	skipnz
 12673     13FC  2C0F               	goto	i1l763
 12674     13FD  3A77               	xorlw	119	; case 114
 12675     13FE  1903               	skipnz
 12676     13FF  2C0F               	goto	i1l763
 12677     1400  3A01               	xorlw	1	; case 115
 12678     1401  1903               	skipnz
 12679     1402  2BD3               	goto	i1l4083
 12680     1403  3A07               	xorlw	7	; case 116
 12681     1404  1903               	skipnz
 12682     1405  2C0F               	goto	i1l763
 12683     1406  3A01               	xorlw	1	; case 117
 12684     1407  1903               	skipnz
 12685     1408  2C0F               	goto	i1l763
 12686     1409  2C0F               	goto	i1l763
 12687     140A                     i1l6609:
 12688                           
 12689                           ; Switch size 1, requested type "simple"
 12690                           ; Number of cases is 1, Range of values is 255 to 255
 12691                           ; switch strategies available:
 12692                           ; Name         Instructions Cycles
 12693                           ; simple_byte            4     3 (average)
 12694                           ; direct_byte            7     5 (fixed)
 12695                           ; jumptable            263     9 (fixed)
 12696                           ;	Chosen strategy is simple_byte
 12697     140A  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 12698     140B  3AFF               	xorlw	255	; case 255
 12699     140C  1903               	skipnz
 12700     140D  2C0F               	goto	i1l763
 12701     140E  2C0F               	goto	i1l763
 12702     140F                     i1l763:
 12703     140F  0008               	return
 12704     1410                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:
 12705                           
 12706                           	psect	text65
 12707     0CE2                     __ptext65:	
 12708 ;; *************** function _USBCheckHIDRequest *****************
 12709 ;; Defined at:
 12710 ;;		line 161 in file "usb/usb_device_hid.c"
 12711 ;; Parameters:    Size  Location     Type
 12712 ;;		None
 12713 ;; Auto vars:     Size  Location     Type
 12714 ;;		None
 12715 ;; Return value:  Size  Location     Type
 12716 ;;                  1    wreg      void 
 12717 ;; Registers used:
 12718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12719 ;; Tracked objects:
 12720 ;;		On entry : 1F/0
 12721 ;;		On exit  : 1C/0
 12722 ;;		Unchanged: 0/0
 12723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;Total ram usage:        2 bytes
 12729 ;; Hardware stack levels used: 1
 12730 ;; Hardware stack levels required when called: 1
 12731 ;; This function calls:
 12732 ;;		_USBHIDCBSetIdleRateHandler
 12733 ;;		_USBHIDCBSetReportHandler
 12734 ;; This function is called by:
 12735 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12736 ;; This function uses a non-reentrant model
 12737 ;;
 12738                           
 12739     0CE2                     _USBCheckHIDRequest:	
 12740                           ;psect for function _USBCheckHIDRequest
 12741                           
 12742                           
 12743                           ;usb/usb_device_hid.c: 163:     if(SetupPkt.Recipient != (0x01)) return;
 12744                           
 12745                           ;incstack = 0
 12746                           ; Regs used in _USBCheckHIDRequest: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12747     0CE2  0840               	movf	64,w	;volatile
 12748     0CE3  391F               	andlw	31
 12749     0CE4  3A01               	xorlw	1
 12750     0CE5  1D03               	btfss	3,2
 12751     0CE6  0008               	return
 12752                           
 12753                           ;usb/usb_device_hid.c: 164:     if(SetupPkt.bIntfID != 0x00) return;
 12754     0CE7  0844               	movf	68,w	;volatile
 12755     0CE8  1D03               	btfss	3,2
 12756     0CE9  0008               	return
 12757                           
 12758                           ;usb/usb_device_hid.c: 171:     if(SetupPkt.bRequest == 6)
 12759     0CEA  3006               	movlw	6
 12760     0CEB  0641               	xorwf	65,w	;volatile
 12761     0CEC  1903               	btfsc	3,2
 12762     0CED  2D07               	goto	i1l4009
 12763     0CEE  2D1A               	goto	i1l4011
 12764     0CEF                     i1l3997:
 12765                           
 12766                           ;usb/usb_device_hid.c: 176:                 if(USBActiveConfiguration == 1)
 12767     0CEF  036F               	decf	_USBActiveConfiguration,w	;volatile
 12768     0CF0  1D03               	btfss	3,2
 12769     0CF1  2D1A               	goto	i1l4011
 12770                           
 12771                           ;usb/usb_device_hid.c: 177:                 {;usb/usb_device_hid.c: 178:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&configDescriptor1 + 18; inPipes[0].wCount
      +                          .Val = sizeof(USB_HID_DSC)+3; inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 12772     0CF2  3085               	movlw	low ((_configDescriptor1| (0+32768)+18))
 12773     0CF3  0021               	movlb	1	; select bank1
 12774     0CF4  00E9               	movwf	_inPipes^(0+128)	;volatile
 12775     0CF5  3098               	movlw	high ((_configDescriptor1| (0+32768)+18))
 12776     0CF6  00EA               	movwf	(_inPipes^(0+128)+1)	;volatile
 12777     0CF7  3000               	movlw	0
 12778     0CF8  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12779     0CF9  3009               	movlw	9
 12780     0CFA  2D03               	goto	L14
 12781     0CFB                     i1l4003:
 12782                           
 12783                           ;usb/usb_device_hid.c: 186:                 {;usb/usb_device_hid.c: 187:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&hid_rpt01; inPipes[0].wCount.Val = 63; in
      +                          Pipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 12784     0CFB  3000               	movlw	low (_hid_rpt01| (0+32768))
 12785     0CFC  0021               	movlb	1	; select bank1
 12786     0CFD  00E9               	movwf	_inPipes^(0+128)	;volatile
 12787     0CFE  3098               	movlw	high (_hid_rpt01| (0+32768))
 12788     0CFF  00EA               	movwf	(_inPipes^(0+128)+1)	;volatile
 12789     0D00  3000               	movlw	0
 12790     0D01  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12791     0D02  303F               	movlw	63
 12792     0D03                     L14:
 12793     0D03  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12794     0D04  30C0               	movlw	192
 12795     0D05  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12796                           
 12797                           ;usb/usb_device_hid.c: 191:                 };usb/usb_device_hid.c: 192:                
      +                           break;
 12798     0D06  2D1A               	goto	i1l4011
 12799     0D07                     i1l4009:
 12800     0D07  0843               	movf	67,w	;volatile
 12801     0D08  00F4               	movwf	??_USBCheckHIDRequest
 12802     0D09  01F5               	clrf	??_USBCheckHIDRequest+1
 12803                           
 12804                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12805                           ; Switch size 1, requested type "simple"
 12806                           ; Number of cases is 1, Range of values is 0 to 0
 12807                           ; switch strategies available:
 12808                           ; Name         Instructions Cycles
 12809                           ; simple_byte            4     3 (average)
 12810                           ; direct_byte            8     6 (fixed)
 12811                           ; jumptable            260     6 (fixed)
 12812                           ;	Chosen strategy is simple_byte
 12813     0D0A  0875               	movf	??_USBCheckHIDRequest+1,w
 12814     0D0B  3A00               	xorlw	0	; case 0
 12815     0D0C  1903               	skipnz
 12816     0D0D  2D0F               	goto	i1l6611
 12817     0D0E  2D1A               	goto	i1l4011
 12818     0D0F                     i1l6611:
 12819                           
 12820                           ; Switch size 1, requested type "simple"
 12821                           ; Number of cases is 3, Range of values is 33 to 35
 12822                           ; switch strategies available:
 12823                           ; Name         Instructions Cycles
 12824                           ; simple_byte           10     6 (average)
 12825                           ; direct_byte           15     9 (fixed)
 12826                           ; jumptable            263     9 (fixed)
 12827                           ;	Chosen strategy is simple_byte
 12828     0D0F  0874               	movf	??_USBCheckHIDRequest,w
 12829     0D10  3A21               	xorlw	33	; case 33
 12830     0D11  1903               	skipnz
 12831     0D12  2CEF               	goto	i1l3997
 12832     0D13  3A03               	xorlw	3	; case 34
 12833     0D14  1903               	skipnz
 12834     0D15  2CFB               	goto	i1l4003
 12835     0D16  3A01               	xorlw	1	; case 35
 12836     0D17  1903               	skipnz
 12837     0D18  2D1A               	goto	i1l4011
 12838     0D19  2D1A               	goto	i1l4011
 12839     0D1A                     i1l4011:
 12840                           
 12841                           ;usb/usb_device_hid.c: 209:     if(SetupPkt.RequestType != (0x20>>5))
 12842     0D1A  0020               	movlb	0	; select bank0
 12843     0D1B  0E40               	swapf	64,w	;volatile
 12844     0D1C  0C89               	rrf	9,f
 12845     0D1D  3903               	andlw	3
 12846     0D1E  3A01               	xorlw	1
 12847     0D1F  1D03               	btfss	3,2
 12848     0D20  0008               	return
 12849     0D21  2D53               	goto	i1l4037
 12850     0D22                     i1l4015:
 12851                           
 12852                           ;usb/usb_device_hid.c: 223:                 USBHIDCBSetReportHandler();
 12853     0D22  319F  273A         	fcall	_USBHIDCBSetReportHandler
 12854                           
 12855                           ;usb/usb_device_hid.c: 225:             break;
 12856     0D24  0008               	return
 12857     0D25                     i1l4017:
 12858                           
 12859                           ;usb/usb_device_hid.c: 227:             { inPipes[0].pSrc.bRam = (uint8_t*)&idle_rate; i
      +                          nPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 12860     0D25  306C               	movlw	low _idle_rate
 12861     0D26  0021               	movlb	1	; select bank1
 12862     0D27  00E9               	movwf	_inPipes^(0+128)	;volatile
 12863     0D28  3001               	movlw	high _idle_rate
 12864     0D29  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12865     0D2A  3000               	movlw	0
 12866     0D2B  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12867     0D2C  3001               	movlw	1
 12868     0D2D  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12869     0D2E  30C1               	movlw	193
 12870     0D2F  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12871                           
 12872                           ;usb/usb_device_hid.c: 231:             break;
 12873     0D30  0008               	return
 12874     0D31                     i1l4023:
 12875                           
 12876                           ;usb/usb_device_hid.c: 233:             inPipes[0].info.Val = 0x00 | 0x80;
 12877     0D31  3080               	movlw	128
 12878     0D32  0021               	movlb	1	; select bank1
 12879     0D33  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12880                           
 12881                           ;usb/usb_device_hid.c: 234:             idle_rate = SetupPkt.W_Value.byte.HB;
 12882     0D34  0020               	movlb	0	; select bank0
 12883     0D35  0843               	movf	67,w	;volatile
 12884     0D36  0022               	movlb	2	; select bank2
 12885     0D37  00EC               	movwf	_idle_rate^(0+256)
 12886                           
 12887                           ;usb/usb_device_hid.c: 235:             USBHIDCBSetIdleRateHandler(SetupPkt.W_Value.byte
      +                          .LB, idle_rate);
 12888     0D38  086C               	movf	_idle_rate^(0+256),w
 12889     0D39  00F0               	movwf	USBHIDCBSetIdleRateHandler@newIdleRate
 12890     0D3A  0020               	movlb	0	; select bank0
 12891     0D3B  0842               	movf	66,w	;volatile
 12892     0D3C  319F  272D         	fcall	_USBHIDCBSetIdleRateHandler
 12893                           
 12894                           ;usb/usb_device_hid.c: 236:             break;
 12895     0D3E  0008               	return
 12896     0D3F                     i1l4027:
 12897                           
 12898                           ;usb/usb_device_hid.c: 238:             { inPipes[0].pSrc.bRam = (uint8_t*)&active_proto
      +                          col; inPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
 12899     0D3F  306B               	movlw	low _active_protocol
 12900     0D40  0021               	movlb	1	; select bank1
 12901     0D41  00E9               	movwf	_inPipes^(0+128)	;volatile
 12902     0D42  3001               	movlw	high _active_protocol
 12903     0D43  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12904     0D44  3000               	movlw	0
 12905     0D45  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12906     0D46  3001               	movlw	1
 12907     0D47  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12908     0D48  3081               	movlw	129
 12909     0D49  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12910                           
 12911                           ;usb/usb_device_hid.c: 242:             break;
 12912     0D4A  0008               	return
 12913     0D4B                     i1l4033:
 12914                           
 12915                           ;usb/usb_device_hid.c: 244:             inPipes[0].info.Val = 0x00 | 0x80;
 12916     0D4B  3080               	movlw	128
 12917     0D4C  0021               	movlb	1	; select bank1
 12918     0D4D  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12919                           
 12920                           ;usb/usb_device_hid.c: 245:             active_protocol = SetupPkt.W_Value.byte.LB;
 12921     0D4E  0020               	movlb	0	; select bank0
 12922     0D4F  0842               	movf	66,w	;volatile
 12923     0D50  0022               	movlb	2	; select bank2
 12924     0D51  00EB               	movwf	_active_protocol^(0+256)
 12925                           
 12926                           ;usb/usb_device_hid.c: 246:             break;
 12927     0D52  0008               	return
 12928     0D53                     i1l4037:
 12929     0D53  0841               	movf	65,w	;volatile
 12930     0D54  00F4               	movwf	??_USBCheckHIDRequest
 12931     0D55  01F5               	clrf	??_USBCheckHIDRequest+1
 12932                           
 12933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12934                           ; Switch size 1, requested type "simple"
 12935                           ; Number of cases is 1, Range of values is 0 to 0
 12936                           ; switch strategies available:
 12937                           ; Name         Instructions Cycles
 12938                           ; simple_byte            4     3 (average)
 12939                           ; direct_byte            8     6 (fixed)
 12940                           ; jumptable            260     6 (fixed)
 12941                           ;	Chosen strategy is simple_byte
 12942     0D56  0875               	movf	??_USBCheckHIDRequest+1,w
 12943     0D57  3A00               	xorlw	0	; case 0
 12944     0D58  1903               	skipnz
 12945     0D59  2D5B               	goto	i1l6613
 12946     0D5A  2D6F               	goto	i1l709
 12947     0D5B                     i1l6613:
 12948                           
 12949                           ; Switch size 1, requested type "simple"
 12950                           ; Number of cases is 6, Range of values is 1 to 11
 12951                           ; switch strategies available:
 12952                           ; Name         Instructions Cycles
 12953                           ; simple_byte           19    10 (average)
 12954                           ; direct_byte           31     9 (fixed)
 12955                           ; jumptable            263     9 (fixed)
 12956                           ;	Chosen strategy is simple_byte
 12957     0D5B  0874               	movf	??_USBCheckHIDRequest,w
 12958     0D5C  3A01               	xorlw	1	; case 1
 12959     0D5D  1903               	skipnz
 12960     0D5E  2D6F               	goto	i1l709
 12961     0D5F  3A03               	xorlw	3	; case 2
 12962     0D60  1903               	skipnz
 12963     0D61  2D25               	goto	i1l4017
 12964     0D62  3A01               	xorlw	1	; case 3
 12965     0D63  1903               	skipnz
 12966     0D64  2D3F               	goto	i1l4027
 12967     0D65  3A0A               	xorlw	10	; case 9
 12968     0D66  1903               	skipnz
 12969     0D67  2D22               	goto	i1l4015
 12970     0D68  3A03               	xorlw	3	; case 10
 12971     0D69  1903               	skipnz
 12972     0D6A  2D31               	goto	i1l4023
 12973     0D6B  3A01               	xorlw	1	; case 11
 12974     0D6C  1903               	skipnz
 12975     0D6D  2D4B               	goto	i1l4033
 12976     0D6E  2D6F               	goto	i1l709
 12977     0D6F                     i1l709:
 12978     0D6F  0008               	return
 12979     0D70                     __end_of_USBCheckHIDRequest:
 12980                           
 12981                           	psect	text66
 12982     1F3A                     __ptext66:	
 12983 ;; *************** function _USBHIDCBSetReportHandler *****************
 12984 ;; Defined at:
 12985 ;;		line 537 in file "app_device_keyboard.c"
 12986 ;; Parameters:    Size  Location     Type
 12987 ;;		None
 12988 ;; Auto vars:     Size  Location     Type
 12989 ;;		None
 12990 ;; Return value:  Size  Location     Type
 12991 ;;                  1    wreg      void 
 12992 ;; Registers used:
 12993 ;;		wreg
 12994 ;; Tracked objects:
 12995 ;;		On entry : 1F/0
 12996 ;;		On exit  : 1F/2
 12997 ;;		Unchanged: 0/0
 12998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13003 ;;Total ram usage:        0 bytes
 13004 ;; Hardware stack levels used: 1
 13005 ;; This function calls:
 13006 ;;		Nothing
 13007 ;; This function is called by:
 13008 ;;		_USBCheckHIDRequest
 13009 ;; This function uses a non-reentrant model
 13010 ;;
 13011                           
 13012     1F3A                     _USBHIDCBSetReportHandler:	
 13013                           ;psect for function _USBHIDCBSetReportHandler
 13014                           
 13015                           
 13016                           ;app_device_keyboard.c: 541:     {outPipes[0].pDst.bRam = (uint8_t*) & CtrlTrfData;outPi
      +                          pes[0].wCount.Val = 8;outPipes[0].pFunc = USBHIDCBSetReportComplete;outPipes[0].info.bit
      +                          s.busy = 1; };
 13017                           
 13018                           ;incstack = 0
 13019                           ; Regs used in _USBHIDCBSetReportHandler: [wreg]
 13020     1F3A  3048               	movlw	72
 13021     1F3B  0022               	movlb	2	; select bank2
 13022     1F3C  00A1               	movwf	_outPipes^(0+256)	;volatile
 13023     1F3D  3000               	movlw	0
 13024     1F3E  00A5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 13025     1F3F  3008               	movlw	8
 13026     1F40  00A4               	movwf	(_outPipes^(0+256)+3)	;volatile
 13027     1F41  301E               	movlw	high _USBHIDCBSetReportComplete
 13028     1F42  00A7               	movwf	((low ((_outPipes| (0+256)+5))+1))^0	;volatile
 13029     1F43  307A               	movlw	low _USBHIDCBSetReportComplete
 13030     1F44  00A6               	movwf	(low ((_outPipes| (0+256)+5)))^0	;volatile
 13031     1F45  17A3               	bsf	(_outPipes^(0+256)+2),7	;volatile
 13032     1F46  0008               	return
 13033     1F47                     __end_of_USBHIDCBSetReportHandler:
 13034                           
 13035                           	psect	text67
 13036     1F2D                     __ptext67:	
 13037 ;; *************** function _USBHIDCBSetIdleRateHandler *****************
 13038 ;; Defined at:
 13039 ;;		line 548 in file "app_device_keyboard.c"
 13040 ;; Parameters:    Size  Location     Type
 13041 ;;  reportID        1    wreg     unsigned char 
 13042 ;;  newIdleRate     1    0[COMMON] unsigned char 
 13043 ;; Auto vars:     Size  Location     Type
 13044 ;;  reportID        1    3[COMMON] unsigned char 
 13045 ;; Return value:  Size  Location     Type
 13046 ;;                  1    wreg      void 
 13047 ;; Registers used:
 13048 ;;		wreg, status,2, status,0
 13049 ;; Tracked objects:
 13050 ;;		On entry : 1F/0
 13051 ;;		On exit  : 1D/0
 13052 ;;		Unchanged: 0/0
 13053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13054 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;Total ram usage:        4 bytes
 13059 ;; Hardware stack levels used: 1
 13060 ;; This function calls:
 13061 ;;		Nothing
 13062 ;; This function is called by:
 13063 ;;		_USBCheckHIDRequest
 13064 ;; This function uses a non-reentrant model
 13065 ;;
 13066                           
 13067     1F2D                     _USBHIDCBSetIdleRateHandler:	
 13068                           ;psect for function _USBHIDCBSetIdleRateHandler
 13069                           
 13070                           
 13071                           ;incstack = 0
 13072                           ; Regs used in _USBHIDCBSetIdleRateHandler: [wreg+status,2+status,0]
 13073                           ;USBHIDCBSetIdleRateHandler@reportID stored from wreg
 13074     1F2D  00F3               	movwf	USBHIDCBSetIdleRateHandler@reportID
 13075                           
 13076                           ;app_device_keyboard.c: 552:     if (reportID == 0) {
 13077     1F2E  0873               	movf	USBHIDCBSetIdleRateHandler@reportID,w
 13078     1F2F  1D03               	btfss	3,2
 13079     1F30  0008               	return
 13080                           
 13081                           ;app_device_keyboard.c: 553:         keyboardIdleRate = newIdleRate;
 13082     1F31  0870               	movf	USBHIDCBSetIdleRateHandler@newIdleRate,w
 13083     1F32  00F1               	movwf	??_USBHIDCBSetIdleRateHandler
 13084     1F33  01F2               	clrf	??_USBHIDCBSetIdleRateHandler+1
 13085     1F34  0871               	movf	??_USBHIDCBSetIdleRateHandler,w
 13086     1F35  0022               	movlb	2	; select bank2
 13087     1F36  00B8               	movwf	_keyboardIdleRate^(0+256)
 13088     1F37  0872               	movf	??_USBHIDCBSetIdleRateHandler+1,w
 13089     1F38  00B9               	movwf	(_keyboardIdleRate+1)^(0+256)
 13090     1F39  0008               	return
 13091     1F3A                     __end_of_USBHIDCBSetIdleRateHandler:
 13092                           
 13093                           	psect	text68
 13094     1561                     __ptext68:	
 13095 ;; *************** function _APP_KeyboardInit *****************
 13096 ;; Defined at:
 13097 ;;		line 311 in file "app_device_keyboard.c"
 13098 ;; Parameters:    Size  Location     Type
 13099 ;;		None
 13100 ;; Auto vars:     Size  Location     Type
 13101 ;;		None
 13102 ;; Return value:  Size  Location     Type
 13103 ;;                  1    wreg      void 
 13104 ;; Registers used:
 13105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13106 ;; Tracked objects:
 13107 ;;		On entry : 1F/0
 13108 ;;		On exit  : 0/0
 13109 ;;		Unchanged: 0/0
 13110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;Total ram usage:        0 bytes
 13116 ;; Hardware stack levels used: 1
 13117 ;; Hardware stack levels required when called: 2
 13118 ;; This function calls:
 13119 ;;		_USBEnableEndpoint
 13120 ;;		i1_GenericQueue_Init
 13121 ;;		i1_USBTransferOnePacket
 13122 ;; This function is called by:
 13123 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13124 ;; This function uses a non-reentrant model
 13125 ;;
 13126                           
 13127     1561                     _APP_KeyboardInit:	
 13128                           ;psect for function _APP_KeyboardInit
 13129                           
 13130                           
 13131                           ;app_device_keyboard.c: 312:     GenericQueue_Init(&keyboard.keys, sizeof (uint8_t));
 13132                           
 13133                           ;incstack = 0
 13134                           ; Regs used in _APP_KeyboardInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13135     1561  3030               	movlw	48
 13136     1562  00F0               	movwf	i1GenericQueue_Init@q
 13137     1563  3023               	movlw	35
 13138     1564  00F1               	movwf	i1GenericQueue_Init@q+1
 13139     1565  3001               	movlw	1
 13140     1566  00F2               	movwf	i1GenericQueue_Init@element_size
 13141     1567  3000               	movlw	0
 13142     1568  00F3               	movwf	i1GenericQueue_Init@element_size+1
 13143     1569  3192  2231  3195   	fcall	i1_GenericQueue_Init
 13144                           
 13145                           ;app_device_keyboard.c: 313:     keyboard.modifiers.value = 0;
 13146     156C  308F               	movlw	143
 13147     156D  0086               	movwf	6
 13148     156E  3023               	movlw	35
 13149     156F  0087               	movwf	7
 13150     1570  0181               	clrf	1
 13151                           
 13152                           ;app_device_keyboard.c: 314:     keyboard.leds.value = 0;
 13153     1571  3090               	movlw	144
 13154     1572  0086               	movwf	6
 13155     1573  3023               	movlw	35
 13156     1574  0087               	movwf	7
 13157     1575  0181               	clrf	1
 13158                           
 13159                           ;app_device_keyboard.c: 317:     keyboard.lastINTransmission = 0;
 13160     1576  302C               	movlw	44
 13161     1577  0086               	movwf	6
 13162     1578  3023               	movlw	35
 13163     1579  0087               	movwf	7
 13164     157A  3000               	movlw	0
 13165     157B  3FC0               	movwi [0]fsr1
 13166     157C  3FC1               	movwi [1]fsr1
 13167                           
 13168                           ;app_device_keyboard.c: 320:     keyboardIdleRate = 250;
 13169     157D  30FA               	movlw	250
 13170     157E  0022               	movlb	2	; select bank2
 13171     157F  00B8               	movwf	_keyboardIdleRate^(0+256)
 13172     1580  3000               	movlw	0
 13173     1581  00B9               	movwf	(_keyboardIdleRate^(0+256)+1)
 13174     1582                     i1l859:	
 13175                           ;app_device_keyboard.c: 327:     }
 13176                           
 13177                           ;app_device_keyboard.c: 325:     while (OldSOFCount != SOFCounter) {
 13178                           
 13179                           
 13180                           ;app_device_keyboard.c: 325:     while (OldSOFCount != SOFCounter) {
 13181     1582  083B               	movf	(_SOFCounter+1)^(0+256),w	;volatile
 13182     1583  0635               	xorwf	(_OldSOFCount+1)^(0+256),w
 13183     1584  1D03               	skipz
 13184     1585  2D88               	goto	u299_25
 13185     1586  083A               	movf	_SOFCounter^(0+256),w	;volatile
 13186     1587  0634               	xorwf	_OldSOFCount^(0+256),w
 13187     1588                     u299_25:
 13188     1588  1903               	btfsc	3,2
 13189     1589  2D8F               	goto	i1l4059
 13190                           
 13191                           ;app_device_keyboard.c: 326:         OldSOFCount = SOFCounter;
 13192     158A  083B               	movf	(_SOFCounter+1)^(0+256),w	;volatile
 13193     158B  00B5               	movwf	(_OldSOFCount+1)^(0+256)
 13194     158C  083A               	movf	_SOFCounter^(0+256),w	;volatile
 13195     158D  00B4               	movwf	_OldSOFCount^(0+256)
 13196     158E  2D82               	goto	i1l859
 13197     158F                     i1l4059:
 13198                           
 13199                           ;app_device_keyboard.c: 330:     USBEnableEndpoint(1, 0x02 | 0x04 | 0x10 | 0x08);
 13200     158F  301E               	movlw	30
 13201     1590  00F7               	movwf	USBEnableEndpoint@options
 13202     1591  3001               	movlw	1
 13203     1592  3192  2211  3195   	fcall	_USBEnableEndpoint
 13204                           
 13205                           ;app_device_keyboard.c: 333:     keyboard.lastOUTTransmission = USBTransferOnePacket(1,0
      +                          ,(uint8_t*) & outputReport,sizeof (outputReport));
 13206     1595  01F0               	clrf	i1USBTransferOnePacket@dir
 13207     1596  3020               	movlw	32
 13208     1597  00F1               	movwf	i1USBTransferOnePacket@data
 13209     1598  3001               	movlw	1
 13210     1599  00F2               	movwf	i1USBTransferOnePacket@data+1
 13211     159A  01F3               	clrf	i1USBTransferOnePacket@len
 13212     159B  0AF3               	incf	i1USBTransferOnePacket@len,f
 13213     159C  3001               	movlw	1
 13214     159D  318B  2361         	fcall	i1_USBTransferOnePacket
 13215     159F  302C               	movlw	44
 13216     15A0  0086               	movwf	6
 13217     15A1  3023               	movlw	35
 13218     15A2  0087               	movwf	7
 13219     15A3  3142               	addfsr 1,2
 13220     15A4  0870               	movf	?i1_USBTransferOnePacket,w
 13221     15A5  3FC0               	movwi [0]fsr1
 13222     15A6  0871               	movf	?i1_USBTransferOnePacket+1,w
 13223     15A7  3FC1               	movwi [1]fsr1
 13224     15A8  0008               	return
 13225     15A9                     __end_of_APP_KeyboardInit:
 13226                           
 13227                           	psect	text69
 13228     0B61                     __ptext69:	
 13229 ;; *************** function i1_USBTransferOnePacket *****************
 13230 ;; Defined at:
 13231 ;;		line 999 in file "usb/usb_device.c"
 13232 ;; Parameters:    Size  Location     Type
 13233 ;;  ep              1    wreg     unsigned char 
 13234 ;;  dir             1    0[COMMON] unsigned char 
 13235 ;;  data            2    1[COMMON] PTR unsigned char 
 13236 ;;		 -> inputReport(8), outputReport(1), 
 13237 ;;  len             1    3[COMMON] unsigned char 
 13238 ;; Auto vars:     Size  Location     Type
 13239 ;;  ep              1    8[COMMON] unsigned char 
 13240 ;;  handle          2    9[COMMON] PTR volatile struct __BD
 13241 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 13242 ;; Return value:  Size  Location     Type
 13243 ;;                  2    0[COMMON] PTR void 
 13244 ;; Registers used:
 13245 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13246 ;; Tracked objects:
 13247 ;;		On entry : 0/2
 13248 ;;		On exit  : 0/0
 13249 ;;		Unchanged: 0/0
 13250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13251 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;Total ram usage:       11 bytes
 13256 ;; Hardware stack levels used: 1
 13257 ;; This function calls:
 13258 ;;		Nothing
 13259 ;; This function is called by:
 13260 ;;		_APP_KeyboardInit
 13261 ;; This function uses a non-reentrant model
 13262 ;;
 13263                           
 13264     0B61                     i1_USBTransferOnePacket:	
 13265                           ;psect for function i1_USBTransferOnePacket
 13266                           
 13267                           
 13268                           ;incstack = 0
 13269                           ; Regs used in i1_USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 13270                           ;i1USBTransferOnePacket@ep stored from wreg
 13271     0B61  00F8               	movwf	i1USBTransferOnePacket@ep
 13272                           
 13273                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
 13274     0B62  0870               	movf	i1USBTransferOnePacket@dir,w
 13275     0B63  1903               	btfsc	3,2
 13276     0B64  2B6D               	goto	i1l3959
 13277                           
 13278                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
 13279     0B65  3578               	lslf	i1USBTransferOnePacket@ep,w
 13280     0B66  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13281     0B67  0086               	movwf	6
 13282     0B68  0187               	clrf	7
 13283     0B69  3F40               	moviw [0]fsr1
 13284     0B6A  00F9               	movwf	i1USBTransferOnePacket@handle
 13285     0B6B  3F41               	moviw [1]fsr1
 13286     0B6C  2B75               	goto	L15
 13287     0B6D                     i1l3959:	
 13288                           ;usb/usb_device.c: 1008:     }
 13289                           
 13290                           
 13291                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
 13292     0B6D  3578               	lslf	i1USBTransferOnePacket@ep,w
 13293     0B6E  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13294     0B6F  0086               	movwf	6
 13295     0B70  3001               	movlw	1	; select bank2/3
 13296     0B71  0087               	movwf	7
 13297     0B72  3F40               	moviw [0]fsr1
 13298     0B73  00F9               	movwf	i1USBTransferOnePacket@handle
 13299     0B74  3F41               	moviw [1]fsr1
 13300     0B75                     L15:
 13301     0B75  00FA               	movwf	i1USBTransferOnePacket@handle+1
 13302                           
 13303                           ;usb/usb_device.c: 1017:     if(handle == 0)
 13304     0B76  0879               	movf	i1USBTransferOnePacket@handle,w
 13305     0B77  047A               	iorwf	i1USBTransferOnePacket@handle+1,w
 13306     0B78  1D03               	btfss	3,2
 13307     0B79  2B7D               	goto	i1l3967
 13308                           
 13309                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
 13310     0B7A  01F0               	clrf	?i1_USBTransferOnePacket
 13311     0B7B  01F1               	clrf	?i1_USBTransferOnePacket+1
 13312     0B7C  0008               	return
 13313     0B7D                     i1l3967:
 13314                           
 13315                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
 13316     0B7D  30FF               	movlw	255
 13317     0B7E  0571               	andwf	i1USBTransferOnePacket@data,w
 13318     0B7F  00F4               	movwf	??i1_USBTransferOnePacket
 13319     0B80  307F               	movlw	127
 13320     0B81  0572               	andwf	i1USBTransferOnePacket@data+1,w
 13321     0B82  00F5               	movwf	??i1_USBTransferOnePacket+1
 13322     0B83  0879               	movf	i1USBTransferOnePacket@handle,w
 13323     0B84  0086               	movwf	6
 13324     0B85  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13325     0B86  0087               	movwf	7
 13326     0B87  3142               	addfsr 1,2
 13327     0B88  0874               	movf	??i1_USBTransferOnePacket,w
 13328     0B89  3FC0               	movwi [0]fsr1
 13329     0B8A  0875               	movf	??i1_USBTransferOnePacket+1,w
 13330     0B8B  3FC1               	movwi [1]fsr1
 13331                           
 13332                           ;usb/usb_device.c: 1034:     handle->CNT = len;
 13333     0B8C  0879               	movf	i1USBTransferOnePacket@handle,w
 13334     0B8D  3E01               	addlw	1
 13335     0B8E  00F4               	movwf	??i1_USBTransferOnePacket
 13336     0B8F  3000               	movlw	0
 13337     0B90  3D7A               	addwfc	i1USBTransferOnePacket@handle+1,w
 13338     0B91  00F5               	movwf	??i1_USBTransferOnePacket+1
 13339     0B92  0874               	movf	??i1_USBTransferOnePacket,w
 13340     0B93  0086               	movwf	6
 13341     0B94  0875               	movf	??i1_USBTransferOnePacket+1,w
 13342     0B95  0087               	movwf	7
 13343     0B96  0873               	movf	i1USBTransferOnePacket@len,w
 13344     0B97  0081               	movwf	1
 13345                           
 13346                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
 13347     0B98  3040               	movlw	64
 13348     0B99  00F4               	movwf	??i1_USBTransferOnePacket
 13349     0B9A  0879               	movf	i1USBTransferOnePacket@handle,w
 13350     0B9B  0086               	movwf	6
 13351     0B9C  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13352     0B9D  0087               	movwf	7
 13353     0B9E  0874               	movf	??i1_USBTransferOnePacket,w
 13354     0B9F  0581               	andwf	1,f
 13355                           
 13356                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
 13357     0BA0  0879               	movf	i1USBTransferOnePacket@handle,w
 13358     0BA1  0086               	movwf	6
 13359     0BA2  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13360     0BA3  0087               	movwf	7
 13361     0BA4  1581               	bsf	1,3
 13362                           
 13363                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
 13364     0BA5  0879               	movf	i1USBTransferOnePacket@handle,w
 13365     0BA6  0086               	movwf	6
 13366     0BA7  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13367     0BA8  0087               	movwf	7
 13368     0BA9  1781               	bsf	1,7
 13369                           
 13370                           ;usb/usb_device.c: 1040:     if(dir != 0)
 13371     0BAA  0870               	movf	i1USBTransferOnePacket@dir,w
 13372     0BAB  1903               	btfsc	3,2
 13373     0BAC  2BC4               	goto	i1l3977
 13374                           
 13375                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
 13376     0BAD  3578               	lslf	i1USBTransferOnePacket@ep,w
 13377     0BAE  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13378     0BAF  0086               	movwf	6
 13379     0BB0  0187               	clrf	7
 13380     0BB1  3F40               	moviw [0]fsr1
 13381     0BB2  00F4               	movwf	??i1_USBTransferOnePacket
 13382     0BB3  3F41               	moviw [1]fsr1
 13383     0BB4  00F5               	movwf	??i1_USBTransferOnePacket+1
 13384     0BB5  3004               	movlw	4
 13385     0BB6  0674               	xorwf	??i1_USBTransferOnePacket,w
 13386     0BB7  00F6               	movwf	??i1_USBTransferOnePacket+2
 13387     0BB8  3000               	movlw	0
 13388     0BB9  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 13389     0BBA  00F7               	movwf	??i1_USBTransferOnePacket+3
 13390     0BBB  3578               	lslf	i1USBTransferOnePacket@ep,w
 13391     0BBC  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13392     0BBD  0086               	movwf	6
 13393     0BBE  0187               	clrf	7
 13394     0BBF  0876               	movf	??i1_USBTransferOnePacket+2,w
 13395     0BC0  3FC0               	movwi [0]fsr1
 13396     0BC1  0877               	movf	??i1_USBTransferOnePacket+3,w
 13397     0BC2  3FC1               	movwi [1]fsr1
 13398                           
 13399                           ;usb/usb_device.c: 1044:     }
 13400     0BC3  2BDC               	goto	i1l3979
 13401     0BC4                     i1l3977:
 13402                           
 13403                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
 13404     0BC4  3578               	lslf	i1USBTransferOnePacket@ep,w
 13405     0BC5  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13406     0BC6  0086               	movwf	6
 13407     0BC7  3001               	movlw	1	; select bank2/3
 13408     0BC8  0087               	movwf	7
 13409     0BC9  3F40               	moviw [0]fsr1
 13410     0BCA  00F4               	movwf	??i1_USBTransferOnePacket
 13411     0BCB  3F41               	moviw [1]fsr1
 13412     0BCC  00F5               	movwf	??i1_USBTransferOnePacket+1
 13413     0BCD  3004               	movlw	4
 13414     0BCE  0674               	xorwf	??i1_USBTransferOnePacket,w
 13415     0BCF  00F6               	movwf	??i1_USBTransferOnePacket+2
 13416     0BD0  3000               	movlw	0
 13417     0BD1  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 13418     0BD2  00F7               	movwf	??i1_USBTransferOnePacket+3
 13419     0BD3  3578               	lslf	i1USBTransferOnePacket@ep,w
 13420     0BD4  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13421     0BD5  0086               	movwf	6
 13422     0BD6  3001               	movlw	1	; select bank2/3
 13423     0BD7  0087               	movwf	7
 13424     0BD8  0876               	movf	??i1_USBTransferOnePacket+2,w
 13425     0BD9  3FC0               	movwi [0]fsr1
 13426     0BDA  0877               	movf	??i1_USBTransferOnePacket+3,w
 13427     0BDB  3FC1               	movwi [1]fsr1
 13428     0BDC                     i1l3979:
 13429                           
 13430                           ;usb/usb_device.c: 1050:     return (void*)handle;
 13431     0BDC  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13432     0BDD  00F1               	movwf	?i1_USBTransferOnePacket+1
 13433     0BDE  0879               	movf	i1USBTransferOnePacket@handle,w
 13434     0BDF  00F0               	movwf	?i1_USBTransferOnePacket
 13435     0BE0  0008               	return
 13436     0BE1                     __end_ofi1_USBTransferOnePacket:
 13437                           
 13438                           	psect	text70
 13439     1231                     __ptext70:	
 13440 ;; *************** function i1_GenericQueue_Init *****************
 13441 ;; Defined at:
 13442 ;;		line 4 in file "generic_queue.c"
 13443 ;; Parameters:    Size  Location     Type
 13444 ;;  q               2    0[COMMON] PTR struct .
 13445 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 13446 ;;  element_size    2    2[COMMON] unsigned int 
 13447 ;; Auto vars:     Size  Location     Type
 13448 ;;		None
 13449 ;; Return value:  Size  Location     Type
 13450 ;;                  1    wreg      void 
 13451 ;; Registers used:
 13452 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13453 ;; Tracked objects:
 13454 ;;		On entry : 1F/0
 13455 ;;		On exit  : 1F/0
 13456 ;;		Unchanged: 1F/0
 13457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13458 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;Total ram usage:        4 bytes
 13463 ;; Hardware stack levels used: 1
 13464 ;; This function calls:
 13465 ;;		Nothing
 13466 ;; This function is called by:
 13467 ;;		_APP_KeyboardInit
 13468 ;; This function uses a non-reentrant model
 13469 ;;
 13470                           
 13471     1231                     i1_GenericQueue_Init:	
 13472                           ;psect for function i1_GenericQueue_Init
 13473                           
 13474                           
 13475                           ;generic_queue.c: 5:     q->element_size = element_size;
 13476                           
 13477                           ;incstack = 0
 13478                           ; Regs used in i1_GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 13479     1231  0870               	movf	i1GenericQueue_Init@q,w
 13480     1232  3E5A               	addlw	90
 13481     1233  0086               	movwf	6
 13482     1234  3000               	movlw	0
 13483     1235  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13484     1236  0087               	movwf	7
 13485     1237  0872               	movf	i1GenericQueue_Init@element_size,w
 13486     1238  3FC0               	movwi [0]fsr1
 13487     1239  0873               	movf	i1GenericQueue_Init@element_size+1,w
 13488     123A  3FC1               	movwi [1]fsr1
 13489                           
 13490                           ;generic_queue.c: 6:     q->front = 0;
 13491     123B  0870               	movf	i1GenericQueue_Init@q,w
 13492     123C  3E5C               	addlw	92
 13493     123D  0086               	movwf	6
 13494     123E  3000               	movlw	0
 13495     123F  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13496     1240  0087               	movwf	7
 13497     1241  0181               	clrf	1
 13498                           
 13499                           ;generic_queue.c: 7:     q->rear = 0;
 13500     1242  0870               	movf	i1GenericQueue_Init@q,w
 13501     1243  3E5D               	addlw	93
 13502     1244  0086               	movwf	6
 13503     1245  3000               	movlw	0
 13504     1246  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13505     1247  0087               	movwf	7
 13506     1248  0181               	clrf	1
 13507                           
 13508                           ;generic_queue.c: 8:     q->size = 0;
 13509     1249  0870               	movf	i1GenericQueue_Init@q,w
 13510     124A  3E5E               	addlw	94
 13511     124B  0086               	movwf	6
 13512     124C  3000               	movlw	0
 13513     124D  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13514     124E  0087               	movwf	7
 13515     124F  0181               	clrf	1
 13516     1250  0008               	return
 13517     1251                     __end_ofi1_GenericQueue_Init:
 13518                           
 13519                           	psect	text71
 13520     1211                     __ptext71:	
 13521 ;; *************** function _USBEnableEndpoint *****************
 13522 ;; Defined at:
 13523 ;;		line 882 in file "usb/usb_device.c"
 13524 ;; Parameters:    Size  Location     Type
 13525 ;;  ep              1    wreg     unsigned char 
 13526 ;;  options         1    7[COMMON] unsigned char 
 13527 ;; Auto vars:     Size  Location     Type
 13528 ;;  ep              1   12[COMMON] unsigned char 
 13529 ;;  p               2   10[COMMON] PTR unsigned char 
 13530 ;;		 -> UEP0(1), 
 13531 ;; Return value:  Size  Location     Type
 13532 ;;                  1    wreg      void 
 13533 ;; Registers used:
 13534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13535 ;; Tracked objects:
 13536 ;;		On entry : 1F/2
 13537 ;;		On exit  : 0/0
 13538 ;;		Unchanged: 0/0
 13539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13540 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13541 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13542 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13543 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13544 ;;Total ram usage:        6 bytes
 13545 ;; Hardware stack levels used: 1
 13546 ;; Hardware stack levels required when called: 1
 13547 ;; This function calls:
 13548 ;;		_USBConfigureEndpoint
 13549 ;; This function is called by:
 13550 ;;		_APP_KeyboardInit
 13551 ;; This function uses a non-reentrant model
 13552 ;;
 13553                           
 13554     1211                     _USBEnableEndpoint:	
 13555                           ;psect for function _USBEnableEndpoint
 13556                           
 13557                           
 13558                           ;incstack = 0
 13559                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13560                           ;USBEnableEndpoint@ep stored from wreg
 13561     1211  00FC               	movwf	USBEnableEndpoint@ep
 13562                           
 13563                           ;usb/usb_device.c: 882: void USBEnableEndpoint(uint8_t ep, uint8_t options);usb/usb_devi
      +                          ce.c: 883: {;usb/usb_device.c: 884:     unsigned char* p;;usb/usb_device.c: 888:     if(
      +                          options & 0x04)
 13564     1212  1D77               	btfss	USBEnableEndpoint@options,2
 13565     1213  2A19               	goto	i1l3935
 13566                           
 13567                           ;usb/usb_device.c: 889:     {;usb/usb_device.c: 890:         USBConfigureEndpoint(ep, 0)
      +                          ;
 13568     1214  01F0               	clrf	USBConfigureEndpoint@direction
 13569     1215  087C               	movf	USBEnableEndpoint@ep,w
 13570     1216  3194  2410  3192   	fcall	_USBConfigureEndpoint
 13571     1219                     i1l3935:
 13572                           
 13573                           ;usb/usb_device.c: 892:     if(options & 0x02)
 13574     1219  1CF7               	btfss	USBEnableEndpoint@options,1
 13575     121A  2A20               	goto	i1l3939
 13576                           
 13577                           ;usb/usb_device.c: 893:     {;usb/usb_device.c: 894:         USBConfigureEndpoint(ep, 1)
      +                          ;
 13578     121B  01F0               	clrf	USBConfigureEndpoint@direction
 13579     121C  0AF0               	incf	USBConfigureEndpoint@direction,f
 13580     121D  087C               	movf	USBEnableEndpoint@ep,w
 13581     121E  3194  2410         	fcall	_USBConfigureEndpoint
 13582     1220                     i1l3939:
 13583                           
 13584                           ;usb/usb_device.c: 903:         p = (unsigned char*)(&UEP0+ep);
 13585     1220  087C               	movf	USBEnableEndpoint@ep,w
 13586     1221  3E98               	addlw	152
 13587     1222  00F8               	movwf	??_USBEnableEndpoint
 13588     1223  01F9               	clrf	??_USBEnableEndpoint+1
 13589     1224  300E               	movlw	14
 13590     1225  3DF9               	addwfc	??_USBEnableEndpoint+1,f
 13591     1226  0878               	movf	??_USBEnableEndpoint,w
 13592     1227  00FA               	movwf	USBEnableEndpoint@p
 13593     1228  0879               	movf	??_USBEnableEndpoint+1,w
 13594     1229  00FB               	movwf	USBEnableEndpoint@p+1
 13595                           
 13596                           ;usb/usb_device.c: 905:     *p = options;
 13597     122A  087A               	movf	USBEnableEndpoint@p,w
 13598     122B  0086               	movwf	6
 13599     122C  087B               	movf	USBEnableEndpoint@p+1,w
 13600     122D  0087               	movwf	7
 13601     122E  0877               	movf	USBEnableEndpoint@options,w
 13602     122F  0081               	movwf	1
 13603     1230  0008               	return
 13604     1231                     __end_of_USBEnableEndpoint:
 13605                           
 13606                           	psect	text72
 13607     1410                     __ptext72:	
 13608 ;; *************** function _USBConfigureEndpoint *****************
 13609 ;; Defined at:
 13610 ;;		line 1547 in file "usb/usb_device.c"
 13611 ;; Parameters:    Size  Location     Type
 13612 ;;  EPNum           1    wreg     unsigned char 
 13613 ;;  direction       1    0[COMMON] unsigned char 
 13614 ;; Auto vars:     Size  Location     Type
 13615 ;;  EPNum           1    5[COMMON] unsigned char 
 13616 ;;  handle          1    6[COMMON] PTR volatile struct __BD
 13617 ;;		 -> BDT(32), 
 13618 ;; Return value:  Size  Location     Type
 13619 ;;                  1    wreg      void 
 13620 ;; Registers used:
 13621 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13622 ;; Tracked objects:
 13623 ;;		On entry : 0/2
 13624 ;;		On exit  : 0/0
 13625 ;;		Unchanged: 0/0
 13626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13627 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13628 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13629 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13630 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13631 ;;Total ram usage:        7 bytes
 13632 ;; Hardware stack levels used: 1
 13633 ;; This function calls:
 13634 ;;		Nothing
 13635 ;; This function is called by:
 13636 ;;		_USBEnableEndpoint
 13637 ;; This function uses a non-reentrant model
 13638 ;;
 13639                           
 13640     1410                     _USBConfigureEndpoint:	
 13641                           ;psect for function _USBConfigureEndpoint
 13642                           
 13643                           
 13644                           ;incstack = 0
 13645                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 13646                           ;USBConfigureEndpoint@EPNum stored from wreg
 13647     1410  00F5               	movwf	USBConfigureEndpoint@EPNum
 13648                           
 13649                           ;usb/usb_device.c: 1547: static void USBConfigureEndpoint(uint8_t EPNum, uint8_t directi
      +                          on);usb/usb_device.c: 1548: {;usb/usb_device.c: 1549:     volatile BDT_ENTRY* handle;;us
      +                          b/usb_device.c: 1553:     handle = (volatile BDT_ENTRY*)&BDT[0];
 13650     1411  3020               	movlw	32
 13651     1412  00F6               	movwf	USBConfigureEndpoint@handle
 13652                           
 13653                           ;usb/usb_device.c: 1554:     handle += (4*EPNum+2*direction+0u);
 13654     1413  0870               	movf	USBConfigureEndpoint@direction,w
 13655     1414  00F1               	movwf	??_USBConfigureEndpoint
 13656     1415  3001               	movlw	1
 13657     1416                     u284_25:
 13658     1416  35F1               	lslf	??_USBConfigureEndpoint,f
 13659     1417  0B89               	decfsz	9,f
 13660     1418  2C16               	goto	u284_25
 13661     1419  0875               	movf	USBConfigureEndpoint@EPNum,w
 13662     141A  00F2               	movwf	??_USBConfigureEndpoint+1
 13663     141B  3001               	movlw	1
 13664     141C                     u285_25:
 13665     141C  35F2               	lslf	??_USBConfigureEndpoint+1,f
 13666     141D  3EFF               	addlw	-1
 13667     141E  1D03               	skipz
 13668     141F  2C1C               	goto	u285_25
 13669     1420  3572               	lslf	??_USBConfigureEndpoint+1,w
 13670     1421  0771               	addwf	??_USBConfigureEndpoint,w
 13671     1422  00F3               	movwf	??_USBConfigureEndpoint+2
 13672     1423  3001               	movlw	1
 13673     1424                     u286_25:
 13674     1424  35F3               	lslf	??_USBConfigureEndpoint+2,f
 13675     1425  3EFF               	addlw	-1
 13676     1426  1D03               	skipz
 13677     1427  2C24               	goto	u286_25
 13678     1428  3573               	lslf	??_USBConfigureEndpoint+2,w
 13679     1429  00F4               	movwf	??_USBConfigureEndpoint+3
 13680     142A  0874               	movf	??_USBConfigureEndpoint+3,w
 13681     142B  07F6               	addwf	USBConfigureEndpoint@handle,f
 13682                           
 13683                           ;usb/usb_device.c: 1556:     handle->STAT.UOWN = 0;
 13684     142C  0876               	movf	USBConfigureEndpoint@handle,w
 13685     142D  0086               	movwf	6
 13686     142E  0187               	clrf	7
 13687     142F  1381               	bcf	1,7
 13688                           
 13689                           ;usb/usb_device.c: 1561:     if(direction == 0)
 13690     1430  0870               	movf	USBConfigureEndpoint@direction,w
 13691     1431  1D03               	btfss	3,2
 13692     1432  2C3D               	goto	i1l3925
 13693                           
 13694                           ;usb/usb_device.c: 1562:     {;usb/usb_device.c: 1563:         pBDTEntryOut[EPNum] = han
      +                          dle;
 13695     1433  3575               	lslf	USBConfigureEndpoint@EPNum,w
 13696     1434  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13697     1435  0086               	movwf	6
 13698     1436  3001               	movlw	1	; select bank2/3
 13699     1437  0087               	movwf	7
 13700     1438  0876               	movf	USBConfigureEndpoint@handle,w
 13701     1439  3FC0               	movwi [0]fsr1
 13702     143A  3000               	movlw	0
 13703     143B  3FC1               	movwi [1]fsr1
 13704                           
 13705                           ;usb/usb_device.c: 1564:     }
 13706     143C  2C45               	goto	i1l3927
 13707     143D                     i1l3925:
 13708                           
 13709                           ;usb/usb_device.c: 1566:     {;usb/usb_device.c: 1567:         pBDTEntryIn[EPNum] = hand
      +                          le;
 13710     143D  3575               	lslf	USBConfigureEndpoint@EPNum,w
 13711     143E  3E63               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13712     143F  0086               	movwf	6
 13713     1440  0187               	clrf	7
 13714     1441  0876               	movf	USBConfigureEndpoint@handle,w
 13715     1442  3FC0               	movwi [0]fsr1
 13716     1443  3000               	movlw	0
 13717     1444  3FC1               	movwi [1]fsr1
 13718     1445                     i1l3927:
 13719                           
 13720                           ;usb/usb_device.c: 1571:         handle->STAT.DTS = 0;
 13721     1445  0876               	movf	USBConfigureEndpoint@handle,w
 13722     1446  0086               	movwf	6
 13723     1447  0187               	clrf	7
 13724     1448  1301               	bcf	1,6
 13725                           
 13726                           ;usb/usb_device.c: 1572:         (handle+1)->STAT.DTS = 1;
 13727     1449  0876               	movf	USBConfigureEndpoint@handle,w
 13728     144A  3E04               	addlw	4
 13729     144B  0086               	movwf	6
 13730     144C  0187               	clrf	7
 13731     144D  1701               	bsf	1,6
 13732     144E  0008               	return
 13733     144F                     __end_of_USBConfigureEndpoint:
 13734                           
 13735                           	psect	text73
 13736     1398                     __ptext73:	
 13737 ;; *************** function _USBCtrlTrfOutHandler *****************
 13738 ;; Defined at:
 13739 ;;		line 2545 in file "usb/usb_device.c"
 13740 ;; Parameters:    Size  Location     Type
 13741 ;;		None
 13742 ;; Auto vars:     Size  Location     Type
 13743 ;;		None
 13744 ;; Return value:  Size  Location     Type
 13745 ;;                  1    wreg      void 
 13746 ;; Registers used:
 13747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13748 ;; Tracked objects:
 13749 ;;		On entry : 1F/0
 13750 ;;		On exit  : 1D/0
 13751 ;;		Unchanged: 0/0
 13752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13755 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13756 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13757 ;;Total ram usage:        4 bytes
 13758 ;; Hardware stack levels used: 1
 13759 ;; Hardware stack levels required when called: 4
 13760 ;; This function calls:
 13761 ;;		_USBCtrlTrfRxService
 13762 ;; This function is called by:
 13763 ;;		_USBCtrlEPService
 13764 ;; This function uses a non-reentrant model
 13765 ;;
 13766                           
 13767     1398                     _USBCtrlTrfOutHandler:	
 13768                           ;psect for function _USBCtrlTrfOutHandler
 13769                           
 13770                           
 13771                           ;usb/usb_device.c: 2547:     if(controlTransferState == 2)
 13772                           
 13773                           ;incstack = 0
 13774                           ; Regs used in _USBCtrlTrfOutHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13775     1398  3002               	movlw	2
 13776     1399  066A               	xorwf	_controlTransferState,w	;volatile
 13777     139A  1D03               	btfss	3,2
 13778     139B  2B9F               	goto	i1l4797
 13779                           
 13780                           ;usb/usb_device.c: 2548:     {;usb/usb_device.c: 2549:         USBCtrlTrfRxService();
 13781     139C  318F  274D         	fcall	_USBCtrlTrfRxService
 13782                           
 13783                           ;usb/usb_device.c: 2550:     }
 13784     139E  0008               	return
 13785     139F                     i1l4797:
 13786                           
 13787                           ;usb/usb_device.c: 2552:     {;usb/usb_device.c: 2555:         controlTransferState = 0;
 13788     139F  01EA               	clrf	_controlTransferState	;volatile
 13789                           
 13790                           ;usb/usb_device.c: 2562:         if(BothEP0OutUOWNsSet == 0)
 13791     13A0  0022               	movlb	2	; select bank2
 13792     13A1  085D               	movf	_BothEP0OutUOWNsSet^(0+256),w	;volatile
 13793     13A2  1D03               	btfss	3,2
 13794     13A3  2BD0               	goto	i1l4809
 13795                           
 13796                           ;usb/usb_device.c: 2563:         {;usb/usb_device.c: 2564:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 13797     13A4  0020               	movlb	0	; select bank0
 13798     13A5  0867               	movf	_pBDTEntryEP0OutNext,w
 13799     13A6  3E01               	addlw	1
 13800     13A7  00FA               	movwf	??_USBCtrlTrfOutHandler
 13801     13A8  3000               	movlw	0
 13802     13A9  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13803     13AA  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 13804     13AB  087A               	movf	??_USBCtrlTrfOutHandler,w
 13805     13AC  0086               	movwf	6
 13806     13AD  087B               	movf	??_USBCtrlTrfOutHandler+1,w
 13807     13AE  0087               	movwf	7
 13808     13AF  3008               	movlw	8
 13809     13B0  0081               	movwf	1
 13810                           
 13811                           ;usb/usb_device.c: 2565:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 13812     13B1  3040               	movlw	64
 13813     13B2  00FA               	movwf	??_USBCtrlTrfOutHandler
 13814     13B3  3000               	movlw	0
 13815     13B4  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 13816     13B5  30FF               	movlw	255
 13817     13B6  057A               	andwf	??_USBCtrlTrfOutHandler,w
 13818     13B7  00FC               	movwf	??_USBCtrlTrfOutHandler+2
 13819     13B8  307F               	movlw	127
 13820     13B9  057B               	andwf	??_USBCtrlTrfOutHandler+1,w
 13821     13BA  00FD               	movwf	??_USBCtrlTrfOutHandler+3
 13822     13BB  0867               	movf	_pBDTEntryEP0OutNext,w
 13823     13BC  0086               	movwf	6
 13824     13BD  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13825     13BE  0087               	movwf	7
 13826     13BF  3142               	addfsr 1,2
 13827     13C0  087C               	movf	??_USBCtrlTrfOutHandler+2,w
 13828     13C1  3FC0               	movwi [0]fsr1
 13829     13C2  087D               	movf	??_USBCtrlTrfOutHandler+3,w
 13830     13C3  3FC1               	movwi [1]fsr1
 13831                           
 13832                           ;usb/usb_device.c: 2566:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 13833     13C4  0867               	movf	_pBDTEntryEP0OutNext,w
 13834     13C5  0086               	movwf	6
 13835     13C6  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13836     13C7  0087               	movwf	7
 13837     13C8  300C               	movlw	12
 13838     13C9  0081               	movwf	1
 13839                           
 13840                           ;usb/usb_device.c: 2567:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 13841     13CA  0867               	movf	_pBDTEntryEP0OutNext,w
 13842     13CB  0086               	movwf	6
 13843     13CC  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13844     13CD  0087               	movwf	7
 13845     13CE  1781               	bsf	1,7
 13846                           
 13847                           ;usb/usb_device.c: 2568:         }
 13848     13CF  0008               	return
 13849     13D0                     i1l4809:
 13850                           
 13851                           ;usb/usb_device.c: 2570:         {;usb/usb_device.c: 2571:             BothEP0OutUOWNsSe
      +                          t = 0;
 13852     13D0  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 13853     13D1  0008               	return
 13854     13D2                     __end_of_USBCtrlTrfOutHandler:
 13855                           
 13856                           	psect	text74
 13857     0F4D                     __ptext74:	
 13858 ;; *************** function _USBCtrlTrfRxService *****************
 13859 ;; Defined at:
 13860 ;;		line 1856 in file "usb/usb_device.c"
 13861 ;; Parameters:    Size  Location     Type
 13862 ;;		None
 13863 ;; Auto vars:     Size  Location     Type
 13864 ;;  byteToRead      1    9[COMMON] unsigned char 
 13865 ;;  i               1    8[COMMON] unsigned char 
 13866 ;; Return value:  Size  Location     Type
 13867 ;;                  1    wreg      void 
 13868 ;; Registers used:
 13869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13870 ;; Tracked objects:
 13871 ;;		On entry : 1F/0
 13872 ;;		On exit  : 1D/0
 13873 ;;		Unchanged: 0/0
 13874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13876 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13878 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13879 ;;Total ram usage:        6 bytes
 13880 ;; Hardware stack levels used: 1
 13881 ;; Hardware stack levels required when called: 3
 13882 ;; This function calls:
 13883 ;;		_USBCtrlEPAllowStatusStage
 13884 ;;		_USBHIDCBSetReportComplete
 13885 ;; This function is called by:
 13886 ;;		_USBCtrlTrfOutHandler
 13887 ;; This function uses a non-reentrant model
 13888 ;;
 13889                           
 13890     0F4D                     _USBCtrlTrfRxService:	
 13891                           ;psect for function _USBCtrlTrfRxService
 13892                           
 13893                           
 13894                           ;usb/usb_device.c: 1858:     uint8_t byteToRead;;usb/usb_device.c: 1859:     uint8_t i;;
      +                          usb/usb_device.c: 1863:     byteToRead = pBDTEntryEP0OutCurrent->CNT;
 13895                           
 13896                           ;incstack = 0
 13897                           ; Regs used in _USBCtrlTrfRxService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13898     0F4D  086B               	movf	_pBDTEntryEP0OutCurrent,w
 13899     0F4E  0086               	movwf	6
 13900     0F4F  0187               	clrf	7
 13901     0F50  3F41               	moviw [1]fsr1
 13902     0F51  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 13903                           
 13904                           ;usb/usb_device.c: 1869:     if(byteToRead > outPipes[0].wCount.Val)
 13905     0F52  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13906     0F53  00F4               	movwf	??_USBCtrlTrfRxService
 13907     0F54  01F5               	clrf	??_USBCtrlTrfRxService+1
 13908     0F55  0875               	movf	??_USBCtrlTrfRxService+1,w
 13909     0F56  0022               	movlb	2	; select bank2
 13910     0F57  0225               	subwf	((_outPipes+1)^(0+256)+3),w	;volatile
 13911     0F58  1D03               	skipz
 13912     0F59  2F5C               	goto	u367_25
 13913     0F5A  0874               	movf	??_USBCtrlTrfRxService,w
 13914     0F5B  0224               	subwf	(_outPipes^(0+256)+3),w	;volatile
 13915     0F5C                     u367_25:
 13916     0F5C  1803               	skipnc
 13917     0F5D  2F60               	goto	i1l544
 13918                           
 13919                           ;usb/usb_device.c: 1870:     {;usb/usb_device.c: 1871:         byteToRead = outPipes[0].
      +                          wCount.Val;
 13920     0F5E  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 13921     0F5F  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 13922     0F60                     i1l544:	
 13923                           ;usb/usb_device.c: 1872:     }
 13924                           
 13925                           
 13926                           ;usb/usb_device.c: 1874:     outPipes[0].wCount.Val -= byteToRead;
 13927     0F60  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13928     0F61  00F4               	movwf	??_USBCtrlTrfRxService
 13929     0F62  01F5               	clrf	??_USBCtrlTrfRxService+1
 13930     0F63  0874               	movf	??_USBCtrlTrfRxService,w
 13931     0F64  02A4               	subwf	(_outPipes^(0+256)+3),f	;volatile
 13932     0F65  0875               	movf	??_USBCtrlTrfRxService+1,w
 13933     0F66  3BA5               	subwfb	((_outPipes+1)^(0+256)+3),f	;volatile
 13934                           
 13935                           ;usb/usb_device.c: 1878:     for(i=0;i<byteToRead;i++)
 13936     0F67  01F8               	clrf	USBCtrlTrfRxService@i
 13937     0F68                     i1l4569:
 13938     0F68  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13939     0F69  0278               	subwf	USBCtrlTrfRxService@i,w
 13940     0F6A  1803               	btfsc	3,0
 13941     0F6B  2F7E               	goto	i1l4571
 13942                           
 13943                           ;usb/usb_device.c: 1879:     {;usb/usb_device.c: 1880:         *outPipes[0].pDst.bRam++ 
      +                          = CtrlTrfData[i];
 13944     0F6C  0821               	movf	_outPipes^(0+256),w	;volatile
 13945     0F6D  0086               	movwf	6
 13946     0F6E  0187               	clrf	7
 13947     0F6F  0878               	movf	USBCtrlTrfRxService@i,w
 13948     0F70  3E48               	addlw	72
 13949     0F71  0084               	movwf	4
 13950     0F72  0185               	clrf	5
 13951     0F73  0800               	movf	0,w
 13952     0F74  0081               	movwf	1
 13953     0F75  3001               	movlw	1
 13954     0F76  00F4               	movwf	??_USBCtrlTrfRxService
 13955     0F77  0874               	movf	??_USBCtrlTrfRxService,w
 13956     0F78  07A1               	addwf	_outPipes^(0+256),f	;volatile
 13957                           
 13958                           ;usb/usb_device.c: 1881:     }
 13959     0F79  3001               	movlw	1
 13960     0F7A  00F4               	movwf	??_USBCtrlTrfRxService
 13961     0F7B  0874               	movf	??_USBCtrlTrfRxService,w
 13962     0F7C  07F8               	addwf	USBCtrlTrfRxService@i,f
 13963     0F7D  2F68               	goto	i1l4569
 13964     0F7E                     i1l4571:
 13965                           
 13966                           ;usb/usb_device.c: 1885:     if(outPipes[0].wCount.Val > 0)
 13967     0F7E  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 13968     0F7F  0425               	iorwf	((_outPipes+1)^(0+256)+3),w	;volatile
 13969     0F80  1903               	btfsc	3,2
 13970     0F81  2FBF               	goto	i1l4583
 13971                           
 13972                           ;usb/usb_device.c: 1886:     {;usb/usb_device.c: 1887:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 13973     0F82  0020               	movlb	0	; select bank0
 13974     0F83  0867               	movf	_pBDTEntryEP0OutNext,w
 13975     0F84  3E01               	addlw	1
 13976     0F85  00F4               	movwf	??_USBCtrlTrfRxService
 13977     0F86  3000               	movlw	0
 13978     0F87  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13979     0F88  00F5               	movwf	??_USBCtrlTrfRxService+1
 13980     0F89  0874               	movf	??_USBCtrlTrfRxService,w
 13981     0F8A  0086               	movwf	6
 13982     0F8B  0875               	movf	??_USBCtrlTrfRxService+1,w
 13983     0F8C  0087               	movwf	7
 13984     0F8D  3008               	movlw	8
 13985     0F8E  0081               	movwf	1
 13986                           
 13987                           ;usb/usb_device.c: 1888:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 13988     0F8F  3048               	movlw	72
 13989     0F90  00F4               	movwf	??_USBCtrlTrfRxService
 13990     0F91  3000               	movlw	0
 13991     0F92  00F5               	movwf	??_USBCtrlTrfRxService+1
 13992     0F93  30FF               	movlw	255
 13993     0F94  0574               	andwf	??_USBCtrlTrfRxService,w
 13994     0F95  00F6               	movwf	??_USBCtrlTrfRxService+2
 13995     0F96  307F               	movlw	127
 13996     0F97  0575               	andwf	??_USBCtrlTrfRxService+1,w
 13997     0F98  00F7               	movwf	??_USBCtrlTrfRxService+3
 13998     0F99  0867               	movf	_pBDTEntryEP0OutNext,w
 13999     0F9A  0086               	movwf	6
 14000     0F9B  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14001     0F9C  0087               	movwf	7
 14002     0F9D  3142               	addfsr 1,2
 14003     0F9E  0876               	movf	??_USBCtrlTrfRxService+2,w
 14004     0F9F  3FC0               	movwi [0]fsr1
 14005     0FA0  0877               	movf	??_USBCtrlTrfRxService+3,w
 14006     0FA1  3FC1               	movwi [1]fsr1
 14007                           
 14008                           ;usb/usb_device.c: 1889:         if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 14009     0FA2  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14010     0FA3  0086               	movwf	6
 14011     0FA4  0187               	clrf	7
 14012     0FA5  1B01               	btfsc	1,6
 14013     0FA6  2FB3               	goto	i1l4581
 14014                           
 14015                           ;usb/usb_device.c: 1890:         {;usb/usb_device.c: 1891:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x40|(0x08 & 0x08);
 14016     0FA7  0867               	movf	_pBDTEntryEP0OutNext,w
 14017     0FA8  0086               	movwf	6
 14018     0FA9  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14019     0FAA  0087               	movwf	7
 14020     0FAB  3048               	movlw	72
 14021     0FAC  0081               	movwf	1
 14022                           
 14023                           ;usb/usb_device.c: 1892:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14024     0FAD  0867               	movf	_pBDTEntryEP0OutNext,w
 14025     0FAE  0086               	movwf	6
 14026     0FAF  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14027     0FB0  0087               	movwf	7
 14028     0FB1  1781               	bsf	1,7
 14029                           
 14030                           ;usb/usb_device.c: 1893:         }
 14031     0FB2  0008               	return
 14032     0FB3                     i1l4581:
 14033                           
 14034                           ;usb/usb_device.c: 1895:         {;usb/usb_device.c: 1896:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x00|(0x08 & 0x08);
 14035     0FB3  0867               	movf	_pBDTEntryEP0OutNext,w
 14036     0FB4  0086               	movwf	6
 14037     0FB5  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14038     0FB6  0087               	movwf	7
 14039     0FB7  3008               	movlw	8
 14040     0FB8  0081               	movwf	1
 14041                           
 14042                           ;usb/usb_device.c: 1897:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14043     0FB9  0867               	movf	_pBDTEntryEP0OutNext,w
 14044     0FBA  0086               	movwf	6
 14045     0FBB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14046     0FBC  0087               	movwf	7
 14047     0FBD  1781               	bsf	1,7
 14048     0FBE  0008               	return
 14049     0FBF                     i1l4583:
 14050                           
 14051                           ;usb/usb_device.c: 1901:     {;usb/usb_device.c: 1905:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 14052     0FBF  0020               	movlb	0	; select bank0
 14053     0FC0  0867               	movf	_pBDTEntryEP0OutNext,w
 14054     0FC1  3E01               	addlw	1
 14055     0FC2  00F4               	movwf	??_USBCtrlTrfRxService
 14056     0FC3  3000               	movlw	0
 14057     0FC4  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 14058     0FC5  00F5               	movwf	??_USBCtrlTrfRxService+1
 14059     0FC6  0874               	movf	??_USBCtrlTrfRxService,w
 14060     0FC7  0086               	movwf	6
 14061     0FC8  0875               	movf	??_USBCtrlTrfRxService+1,w
 14062     0FC9  0087               	movwf	7
 14063     0FCA  3008               	movlw	8
 14064     0FCB  0081               	movwf	1
 14065                           
 14066                           ;usb/usb_device.c: 1906:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0
      +                          x7FFF);
 14067     0FCC  3040               	movlw	64
 14068     0FCD  00F4               	movwf	??_USBCtrlTrfRxService
 14069     0FCE  3000               	movlw	0
 14070     0FCF  00F5               	movwf	??_USBCtrlTrfRxService+1
 14071     0FD0  30FF               	movlw	255
 14072     0FD1  0574               	andwf	??_USBCtrlTrfRxService,w
 14073     0FD2  00F6               	movwf	??_USBCtrlTrfRxService+2
 14074     0FD3  307F               	movlw	127
 14075     0FD4  0575               	andwf	??_USBCtrlTrfRxService+1,w
 14076     0FD5  00F7               	movwf	??_USBCtrlTrfRxService+3
 14077     0FD6  0867               	movf	_pBDTEntryEP0OutNext,w
 14078     0FD7  0086               	movwf	6
 14079     0FD8  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14080     0FD9  0087               	movwf	7
 14081     0FDA  3142               	addfsr 1,2
 14082     0FDB  0876               	movf	??_USBCtrlTrfRxService+2,w
 14083     0FDC  3FC0               	movwi [0]fsr1
 14084     0FDD  0877               	movf	??_USBCtrlTrfRxService+3,w
 14085     0FDE  3FC1               	movwi [1]fsr1
 14086                           
 14087                           ;usb/usb_device.c: 1910:         pBDTEntryEP0OutNext->STAT.Val = 0x04;
 14088     0FDF  0867               	movf	_pBDTEntryEP0OutNext,w
 14089     0FE0  0086               	movwf	6
 14090     0FE1  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14091     0FE2  0087               	movwf	7
 14092     0FE3  3004               	movlw	4
 14093     0FE4  0081               	movwf	1
 14094                           
 14095                           ;usb/usb_device.c: 1911:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14096     0FE5  0867               	movf	_pBDTEntryEP0OutNext,w
 14097     0FE6  0086               	movwf	6
 14098     0FE7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14099     0FE8  0087               	movwf	7
 14100     0FE9  1781               	bsf	1,7
 14101                           
 14102                           ;usb/usb_device.c: 1918:         if(outPipes[0].pFunc != ((void*)0))
 14103     0FEA  0022               	movlb	2	; select bank2
 14104     0FEB  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 14105     0FEC  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 14106     0FED  1903               	btfsc	3,2
 14107     0FEE  2FF9               	goto	i1l4595
 14108                           
 14109                           ;usb/usb_device.c: 1919:         {
 14110     0FEF  3005               	movlw	5
 14111     0FF0  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 14112     0FF1  0086               	movwf	6
 14113     0FF2  3001               	movlw	1	; select bank2/3
 14114     0FF3  0087               	movwf	7
 14115     0FF4  3F41               	moviw [1]fsr1
 14116     0FF5  008A               	movwf	10
 14117     0FF6  3F40               	moviw [0]fsr1
 14118     0FF7  000A               	callw
 14119     0FF8  318F               	pagesel	$
 14120     0FF9                     i1l4595:
 14121     0FF9  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 14122                           
 14123                           ;usb/usb_device.c: 1945:         if(USBDeferStatusStagePacket == 0)
 14124     0FFA  085B               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 14125     0FFB  1D03               	btfss	3,2
 14126     0FFC  0008               	return
 14127                           
 14128                           ;usb/usb_device.c: 1946:         {;usb/usb_device.c: 1947:             USBCtrlEPAllowSta
      +                          tusStage();
 14129     0FFD  318A  2200         	fcall	_USBCtrlEPAllowStatusStage
 14130     0FFF  0008               	return
 14131     1000                     __end_of_USBCtrlTrfRxService:
 14132                           
 14133                           	psect	text75
 14134     0A00                     __ptext75:	
 14135 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 14136 ;; Defined at:
 14137 ;;		line 1420 in file "usb/usb_device.c"
 14138 ;; Parameters:    Size  Location     Type
 14139 ;;		None
 14140 ;; Auto vars:     Size  Location     Type
 14141 ;;		None
 14142 ;; Return value:  Size  Location     Type
 14143 ;;                  1    wreg      void 
 14144 ;; Registers used:
 14145 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14146 ;; Tracked objects:
 14147 ;;		On entry : 0/2
 14148 ;;		On exit  : 1D/0
 14149 ;;		Unchanged: 0/0
 14150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14153 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14154 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14155 ;;Total ram usage:        4 bytes
 14156 ;; Hardware stack levels used: 1
 14157 ;; This function calls:
 14158 ;;		Nothing
 14159 ;; This function is called by:
 14160 ;;		_USBDeviceTasks
 14161 ;;		_USBCtrlEPServiceComplete
 14162 ;;		_USBCtrlTrfRxService
 14163 ;; This function uses a non-reentrant model
 14164 ;;
 14165                           
 14166     0A00                     _USBCtrlEPAllowStatusStage:	
 14167                           ;psect for function _USBCtrlEPAllowStatusStage
 14168                           
 14169                           
 14170                           ;usb/usb_device.c: 1427:     if(USBStatusStageEnabledFlag1 == 0)
 14171                           
 14172                           ;incstack = 0
 14173                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 14174     0A00  0022               	movlb	2	; select bank2
 14175     0A01  085A               	movf	_USBStatusStageEnabledFlag1^(0+256),w	;volatile
 14176     0A02  1D03               	btfss	3,2
 14177     0A03  0008               	return
 14178                           
 14179                           ;usb/usb_device.c: 1428:     {;usb/usb_device.c: 1429:         USBStatusStageEnabledFlag
      +                          1 = 1;
 14180     0A04  3001               	movlw	1
 14181     0A05  00DA               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 14182                           
 14183                           ;usb/usb_device.c: 1430:         if(USBStatusStageEnabledFlag2 == 0)
 14184     0A06  0859               	movf	_USBStatusStageEnabledFlag2^(0+256),w	;volatile
 14185     0A07  1D03               	btfss	3,2
 14186     0A08  0008               	return
 14187                           
 14188                           ;usb/usb_device.c: 1431:         {;usb/usb_device.c: 1432:             USBStatusStageEna
      +                          bledFlag2 = 1;
 14189     0A09  3001               	movlw	1
 14190     0A0A  00D9               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 14191                           
 14192                           ;usb/usb_device.c: 1436:             if(controlTransferState == 2)
 14193     0A0B  3002               	movlw	2
 14194     0A0C  0020               	movlb	0	; select bank0
 14195     0A0D  066A               	xorwf	_controlTransferState,w	;volatile
 14196     0A0E  1D03               	btfss	3,2
 14197     0A0F  2A22               	goto	i1l4177
 14198                           
 14199                           ;usb/usb_device.c: 1437:             {;usb/usb_device.c: 1438:                 pBDTEntry
      +                          In[0]->CNT = 0;
 14200     0A10  0863               	movf	_pBDTEntryIn,w
 14201     0A11  0086               	movwf	6
 14202     0A12  0864               	movf	_pBDTEntryIn+1,w
 14203     0A13  0087               	movwf	7
 14204     0A14  3141               	addfsr 1,1
 14205     0A15  0181               	clrf	1
 14206                           
 14207                           ;usb/usb_device.c: 1439:                 pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 14208     0A16  0863               	movf	_pBDTEntryIn,w
 14209     0A17  0086               	movwf	6
 14210     0A18  0864               	movf	_pBDTEntryIn+1,w
 14211     0A19  0087               	movwf	7
 14212     0A1A  3048               	movlw	72
 14213     0A1B  0081               	movwf	1
 14214                           
 14215                           ;usb/usb_device.c: 1440:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14216     0A1C  0863               	movf	_pBDTEntryIn,w
 14217     0A1D  0086               	movwf	6
 14218     0A1E  0864               	movf	_pBDTEntryIn+1,w
 14219     0A1F  0087               	movwf	7
 14220     0A20  1781               	bsf	1,7
 14221                           
 14222                           ;usb/usb_device.c: 1441:             }
 14223     0A21  0008               	return
 14224     0A22                     i1l4177:
 14225     0A22  036A               	decf	_controlTransferState,w	;volatile
 14226     0A23  1D03               	btfss	3,2
 14227     0A24  0008               	return
 14228                           
 14229                           ;usb/usb_device.c: 1443:             {;usb/usb_device.c: 1444:                 BothEP0Ou
      +                          tUOWNsSet = 0;
 14230     0A25  0022               	movlb	2	; select bank2
 14231     0A26  01DD               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 14232                           
 14233                           ;usb/usb_device.c: 1449:                     pBDTEntryEP0OutCurrent->CNT = 8;
 14234     0A27  0020               	movlb	0	; select bank0
 14235     0A28  0A6B               	incf	_pBDTEntryEP0OutCurrent,w
 14236     0A29  0086               	movwf	6
 14237     0A2A  0187               	clrf	7
 14238     0A2B  3008               	movlw	8
 14239     0A2C  0081               	movwf	1
 14240                           
 14241                           ;usb/usb_device.c: 1450:                     pBDTEntryEP0OutCurrent->ADR = (((uint16_t)(
      +                          &SetupPkt)) & 0x7FFF);
 14242     0A2D  3040               	movlw	64
 14243     0A2E  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14244     0A2F  3000               	movlw	0
 14245     0A30  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14246     0A31  30FF               	movlw	255
 14247     0A32  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 14248     0A33  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 14249     0A34  307F               	movlw	127
 14250     0A35  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 14251     0A36  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 14252     0A37  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14253     0A38  3E02               	addlw	2
 14254     0A39  0086               	movwf	6
 14255     0A3A  0187               	clrf	7
 14256     0A3B  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 14257     0A3C  3FC0               	movwi [0]fsr1
 14258     0A3D  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 14259     0A3E  3FC1               	movwi [1]fsr1
 14260                           
 14261                           ;usb/usb_device.c: 1451:                     pBDTEntryEP0OutCurrent->STAT.Val = 0x04;
 14262     0A3F  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14263     0A40  0086               	movwf	6
 14264     0A41  0187               	clrf	7
 14265     0A42  3004               	movlw	4
 14266     0A43  0081               	movwf	1
 14267                           
 14268                           ;usb/usb_device.c: 1452:                     pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 14269     0A44  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14270     0A45  0086               	movwf	6
 14271     0A46  0187               	clrf	7
 14272     0A47  1781               	bsf	1,7
 14273                           
 14274                           ;usb/usb_device.c: 1453:                     BothEP0OutUOWNsSet = 1;
 14275     0A48  3001               	movlw	1
 14276     0A49  0022               	movlb	2	; select bank2
 14277     0A4A  00DD               	movwf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 14278                           
 14279                           ;usb/usb_device.c: 1457:                 pBDTEntryEP0OutNext->CNT = 8;
 14280     0A4B  0020               	movlb	0	; select bank0
 14281     0A4C  0867               	movf	_pBDTEntryEP0OutNext,w
 14282     0A4D  3E01               	addlw	1
 14283     0A4E  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14284     0A4F  3000               	movlw	0
 14285     0A50  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 14286     0A51  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14287     0A52  0870               	movf	??_USBCtrlEPAllowStatusStage,w
 14288     0A53  0086               	movwf	6
 14289     0A54  0871               	movf	??_USBCtrlEPAllowStatusStage+1,w
 14290     0A55  0087               	movwf	7
 14291     0A56  3008               	movlw	8
 14292     0A57  0081               	movwf	1
 14293                           
 14294                           ;usb/usb_device.c: 1458:                 pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupP
      +                          kt)) & 0x7FFF);
 14295     0A58  3040               	movlw	64
 14296     0A59  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14297     0A5A  3000               	movlw	0
 14298     0A5B  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14299     0A5C  30FF               	movlw	255
 14300     0A5D  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 14301     0A5E  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 14302     0A5F  307F               	movlw	127
 14303     0A60  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 14304     0A61  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 14305     0A62  0867               	movf	_pBDTEntryEP0OutNext,w
 14306     0A63  0086               	movwf	6
 14307     0A64  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14308     0A65  0087               	movwf	7
 14309     0A66  3142               	addfsr 1,2
 14310     0A67  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 14311     0A68  3FC0               	movwi [0]fsr1
 14312     0A69  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 14313     0A6A  3FC1               	movwi [1]fsr1
 14314                           
 14315                           ;usb/usb_device.c: 1459:                 pBDTEntryEP0OutNext->STAT.Val = 0x80;
 14316     0A6B  0867               	movf	_pBDTEntryEP0OutNext,w
 14317     0A6C  0086               	movwf	6
 14318     0A6D  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14319     0A6E  0087               	movwf	7
 14320     0A6F  3080               	movlw	128
 14321     0A70  0081               	movwf	1
 14322     0A71  0008               	return
 14323     0A72                     __end_of_USBCtrlEPAllowStatusStage:	
 14324                           ;usb/usb_device.c: 1461:         }
 14325                           
 14326                           
 14327                           	psect	text76
 14328     0AE6                     __ptext76:	
 14329 ;; *************** function _USBCtrlTrfInHandler *****************
 14330 ;; Defined at:
 14331 ;;		line 2599 in file "usb/usb_device.c"
 14332 ;; Parameters:    Size  Location     Type
 14333 ;;		None
 14334 ;; Auto vars:     Size  Location     Type
 14335 ;;  lastDTS         1    7[COMMON] unsigned char 
 14336 ;; Return value:  Size  Location     Type
 14337 ;;                  1    wreg      void 
 14338 ;; Registers used:
 14339 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14340 ;; Tracked objects:
 14341 ;;		On entry : 1F/0
 14342 ;;		On exit  : 1F/0
 14343 ;;		Unchanged: 0/0
 14344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14346 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14347 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14348 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14349 ;;Total ram usage:        5 bytes
 14350 ;; Hardware stack levels used: 1
 14351 ;; Hardware stack levels required when called: 3
 14352 ;; This function calls:
 14353 ;;		_USBCtrlTrfTxService
 14354 ;;		_USBHIDCBSetReportComplete
 14355 ;; This function is called by:
 14356 ;;		_USBCtrlEPService
 14357 ;; This function uses a non-reentrant model
 14358 ;;
 14359                           
 14360     0AE6                     _USBCtrlTrfInHandler:	
 14361                           ;psect for function _USBCtrlTrfInHandler
 14362                           
 14363                           
 14364                           ;usb/usb_device.c: 2601:     uint8_t lastDTS;;usb/usb_device.c: 2603:     lastDTS = pBDT
      +                          EntryIn[0]->STAT.DTS;
 14365                           
 14366                           ;incstack = 0
 14367                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14368     0AE6  0863               	movf	_pBDTEntryIn,w
 14369     0AE7  0086               	movwf	6
 14370     0AE8  0864               	movf	_pBDTEntryIn+1,w
 14371     0AE9  0087               	movwf	7
 14372     0AEA  3000               	movlw	0
 14373     0AEB  1B01               	btfsc	1,6
 14374     0AEC  3001               	movlw	1
 14375     0AED  00F7               	movwf	USBCtrlTrfInHandler@lastDTS
 14376                           
 14377                           ;usb/usb_device.c: 2606:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 14378     0AEE  3004               	movlw	4
 14379     0AEF  0663               	xorwf	_pBDTEntryIn,w
 14380     0AF0  00E3               	movwf	_pBDTEntryIn
 14381     0AF1  3000               	movlw	0
 14382     0AF2  0664               	xorwf	_pBDTEntryIn+1,w
 14383     0AF3  00E4               	movwf	_pBDTEntryIn+1
 14384                           
 14385                           ;usb/usb_device.c: 2611:     if(USBDeviceState == ADR_PENDING_STATE)
 14386     0AF4  3008               	movlw	8
 14387     0AF5  066C               	xorwf	_USBDeviceState,w
 14388     0AF6  1D03               	btfss	3,2
 14389     0AF7  2B04               	goto	i1l4825
 14390                           
 14391                           ;usb/usb_device.c: 2612:     {;usb/usb_device.c: 2613:         UADDR = (SetupPkt.bDevADR
      +                           & 0x7F);
 14392     0AF8  0842               	movf	66,w	;volatile
 14393     0AF9  397F               	andlw	127
 14394     0AFA  003D               	movlb	29	; select bank29
 14395     0AFB  0096               	movwf	22	;volatile
 14396                           
 14397                           ;usb/usb_device.c: 2614:         if(UADDR != 0u)
 14398     0AFC  0816               	movf	22,w
 14399     0AFD  1903               	btfsc	3,2
 14400     0AFE  2B01               	goto	i1l4823
 14401                           
 14402                           ;usb/usb_device.c: 2615:         {;usb/usb_device.c: 2616:             USBDeviceState=AD
      +                          DRESS_STATE;
 14403     0AFF  3010               	movlw	16
 14404     0B00  2B02               	goto	L16
 14405     0B01                     i1l4823:	
 14406                           ;usb/usb_device.c: 2617:         }
 14407                           
 14408                           
 14409                           ;usb/usb_device.c: 2619:         {;usb/usb_device.c: 2620:             USBDeviceState=DE
      +                          FAULT_STATE;
 14410     0B01  3004               	movlw	4
 14411     0B02                     L16:
 14412     0B02  0020               	movlb	0	; select bank0
 14413     0B03  00EC               	movwf	_USBDeviceState	;volatile
 14414     0B04                     i1l4825:
 14415                           
 14416                           ;usb/usb_device.c: 2625:     if(controlTransferState == 1)
 14417     0B04  036A               	decf	_controlTransferState,w	;volatile
 14418     0B05  1D03               	btfss	3,2
 14419     0B06  2B4C               	goto	i1l630
 14420                           
 14421                           ;usb/usb_device.c: 2626:     {;usb/usb_device.c: 2627:         pBDTEntryIn[0]->ADR = (((
      +                          uint16_t)(CtrlTrfData)) & 0x7FFF);
 14422     0B07  3048               	movlw	72
 14423     0B08  00F3               	movwf	??_USBCtrlTrfInHandler
 14424     0B09  3000               	movlw	0
 14425     0B0A  00F4               	movwf	??_USBCtrlTrfInHandler+1
 14426     0B0B  30FF               	movlw	255
 14427     0B0C  0573               	andwf	??_USBCtrlTrfInHandler,w
 14428     0B0D  00F5               	movwf	??_USBCtrlTrfInHandler+2
 14429     0B0E  307F               	movlw	127
 14430     0B0F  0574               	andwf	??_USBCtrlTrfInHandler+1,w
 14431     0B10  00F6               	movwf	??_USBCtrlTrfInHandler+3
 14432     0B11  0863               	movf	_pBDTEntryIn,w
 14433     0B12  0086               	movwf	6
 14434     0B13  0864               	movf	_pBDTEntryIn+1,w
 14435     0B14  0087               	movwf	7
 14436     0B15  3142               	addfsr 1,2
 14437     0B16  0875               	movf	??_USBCtrlTrfInHandler+2,w
 14438     0B17  3FC0               	movwi [0]fsr1
 14439     0B18  0876               	movf	??_USBCtrlTrfInHandler+3,w
 14440     0B19  3FC1               	movwi [1]fsr1
 14441                           
 14442                           ;usb/usb_device.c: 2628:         USBCtrlTrfTxService();
 14443     0B1A  3196  26CA  318A   	fcall	_USBCtrlTrfTxService
 14444                           
 14445                           ;usb/usb_device.c: 2634:         if(shortPacketStatus == 2)
 14446     0B1D  3002               	movlw	2
 14447     0B1E  0022               	movlb	2	; select bank2
 14448     0B1F  0662               	xorwf	_shortPacketStatus^(0+256),w	;volatile
 14449     0B20  1D03               	btfss	3,2
 14450     0B21  2B2F               	goto	i1l4835
 14451                           
 14452                           ;usb/usb_device.c: 2635:         {;usb/usb_device.c: 2638:             pBDTEntryIn[0]->S
      +                          TAT.Val = 0x04;
 14453     0B22  0020               	movlb	0	; select bank0
 14454     0B23  0863               	movf	_pBDTEntryIn,w
 14455     0B24  0086               	movwf	6
 14456     0B25  0864               	movf	_pBDTEntryIn+1,w
 14457     0B26  0087               	movwf	7
 14458     0B27  3004               	movlw	4
 14459     0B28  0081               	movwf	1
 14460                           
 14461                           ;usb/usb_device.c: 2639:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 14462     0B29  0863               	movf	_pBDTEntryIn,w
 14463     0B2A  0086               	movwf	6
 14464     0B2B  0864               	movf	_pBDTEntryIn+1,w
 14465     0B2C  0087               	movwf	7
 14466     0B2D  1781               	bsf	1,7
 14467                           
 14468                           ;usb/usb_device.c: 2640:         }
 14469     0B2E  0008               	return
 14470     0B2F                     i1l4835:
 14471                           
 14472                           ;usb/usb_device.c: 2642:         {;usb/usb_device.c: 2643:             if(lastDTS == 0)
 14473     0B2F  0877               	movf	USBCtrlTrfInHandler@lastDTS,w
 14474     0B30  1D03               	btfss	3,2
 14475     0B31  2B3F               	goto	i1l4839
 14476                           
 14477                           ;usb/usb_device.c: 2644:             {;usb/usb_device.c: 2645:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x40|(0x08 & 0x08);
 14478     0B32  0020               	movlb	0	; select bank0
 14479     0B33  0863               	movf	_pBDTEntryIn,w
 14480     0B34  0086               	movwf	6
 14481     0B35  0864               	movf	_pBDTEntryIn+1,w
 14482     0B36  0087               	movwf	7
 14483     0B37  3048               	movlw	72
 14484     0B38  0081               	movwf	1
 14485                           
 14486                           ;usb/usb_device.c: 2646:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14487     0B39  0863               	movf	_pBDTEntryIn,w
 14488     0B3A  0086               	movwf	6
 14489     0B3B  0864               	movf	_pBDTEntryIn+1,w
 14490     0B3C  0087               	movwf	7
 14491     0B3D  1781               	bsf	1,7
 14492                           
 14493                           ;usb/usb_device.c: 2647:             }
 14494     0B3E  0008               	return
 14495     0B3F                     i1l4839:
 14496                           
 14497                           ;usb/usb_device.c: 2649:             {;usb/usb_device.c: 2650:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x00|(0x08 & 0x08);
 14498     0B3F  0020               	movlb	0	; select bank0
 14499     0B40  0863               	movf	_pBDTEntryIn,w
 14500     0B41  0086               	movwf	6
 14501     0B42  0864               	movf	_pBDTEntryIn+1,w
 14502     0B43  0087               	movwf	7
 14503     0B44  3008               	movlw	8
 14504     0B45  0081               	movwf	1
 14505                           
 14506                           ;usb/usb_device.c: 2651:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14507     0B46  0863               	movf	_pBDTEntryIn,w
 14508     0B47  0086               	movwf	6
 14509     0B48  0864               	movf	_pBDTEntryIn+1,w
 14510     0B49  0087               	movwf	7
 14511     0B4A  1781               	bsf	1,7
 14512     0B4B  0008               	return
 14513     0B4C                     i1l630:	
 14514                           ;usb/usb_device.c: 2655:  else
 14515                           
 14516                           
 14517                           ;usb/usb_device.c: 2656:  {;usb/usb_device.c: 2660:         if(outPipes[0].info.bits.bus
      +                          y == 1)
 14518     0B4C  0022               	movlb	2	; select bank2
 14519     0B4D  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 14520     0B4E  2B5E               	goto	i1l4847
 14521                           
 14522                           ;usb/usb_device.c: 2661:         {;usb/usb_device.c: 2662:             if(outPipes[0].pF
      +                          unc != ((void*)0))
 14523     0B4F  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 14524     0B50  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 14525     0B51  1903               	btfsc	3,2
 14526     0B52  2B5D               	goto	i1l4845
 14527                           
 14528                           ;usb/usb_device.c: 2663:             {;usb/usb_device.c: 2664:                 outPipes[
      +                          0].pFunc();
 14529     0B53  3005               	movlw	5
 14530     0B54  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 14531     0B55  0086               	movwf	6
 14532     0B56  3001               	movlw	1	; select bank2/3
 14533     0B57  0087               	movwf	7
 14534     0B58  3F41               	moviw [1]fsr1
 14535     0B59  008A               	movwf	10
 14536     0B5A  3F40               	moviw [0]fsr1
 14537     0B5B  000A               	callw
 14538     0B5C  318A               	pagesel	$
 14539     0B5D                     i1l4845:
 14540                           
 14541                           ;usb/usb_device.c: 2666:             outPipes[0].info.bits.busy = 0;
 14542     0B5D  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 14543     0B5E                     i1l4847:
 14544                           
 14545                           ;usb/usb_device.c: 2669:         controlTransferState = 0;
 14546     0B5E  0020               	movlb	0	; select bank0
 14547     0B5F  01EA               	clrf	_controlTransferState	;volatile
 14548     0B60  0008               	return
 14549     0B61                     __end_of_USBCtrlTrfInHandler:
 14550                           
 14551                           	psect	text77
 14552     1E7A                     __ptext77:	
 14553 ;; *************** function _USBHIDCBSetReportComplete *****************
 14554 ;; Defined at:
 14555 ;;		line 528 in file "app_device_keyboard.c"
 14556 ;; Parameters:    Size  Location     Type
 14557 ;;		None
 14558 ;; Auto vars:     Size  Location     Type
 14559 ;;		None
 14560 ;; Return value:  Size  Location     Type
 14561 ;;                  1    wreg      void 
 14562 ;; Registers used:
 14563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14564 ;; Tracked objects:
 14565 ;;		On entry : 1F/2
 14566 ;;		On exit  : 1F/2
 14567 ;;		Unchanged: 0/0
 14568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14573 ;;Total ram usage:        0 bytes
 14574 ;; Hardware stack levels used: 1
 14575 ;; Hardware stack levels required when called: 2
 14576 ;; This function calls:
 14577 ;;		i1_APP_KeyboardProcessOutputReport
 14578 ;; This function is called by:
 14579 ;;		_USBHIDCBSetReportHandler
 14580 ;;		_USBCtrlTrfRxService
 14581 ;;		_USBCtrlTrfInHandler
 14582 ;; This function uses a non-reentrant model
 14583 ;;
 14584                           
 14585     1E7A                     _USBHIDCBSetReportComplete:	
 14586                           ;psect for function _USBHIDCBSetReportComplete
 14587                           
 14588                           
 14589                           ;app_device_keyboard.c: 531:     outputReport.value = CtrlTrfData[0];
 14590                           
 14591                           ;incstack = 0
 14592                           ; Regs used in _USBHIDCBSetReportComplete: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 14593     1E7A  0020               	movlb	0	; select bank0
 14594     1E7B  0848               	movf	72,w	;volatile
 14595     1E7C  0022               	movlb	2	; select bank2
 14596     1E7D  00A0               	movwf	32	;volatile
 14597                           
 14598                           ;app_device_keyboard.c: 534:     APP_KeyboardProcessOutputReport();
 14599     1E7E  3188  2000         	fcall	i1_APP_KeyboardProcessOutputReport
 14600     1E80  0008               	return
 14601     1E81                     __end_of_USBHIDCBSetReportComplete:
 14602                           
 14603                           	psect	text78
 14604     0800                     __ptext78:	
 14605 ;; *************** function i1_APP_KeyboardProcessOutputReport *****************
 14606 ;; Defined at:
 14607 ;;		line 523 in file "app_device_keyboard.c"
 14608 ;; Parameters:    Size  Location     Type
 14609 ;;		None
 14610 ;; Auto vars:     Size  Location     Type
 14611 ;;		None
 14612 ;; Return value:  Size  Location     Type
 14613 ;;                  1    wreg      void 
 14614 ;; Registers used:
 14615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14616 ;; Tracked objects:
 14617 ;;		On entry : 1F/2
 14618 ;;		On exit  : 1F/2
 14619 ;;		Unchanged: 0/0
 14620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14625 ;;Total ram usage:        0 bytes
 14626 ;; Hardware stack levels used: 1
 14627 ;; Hardware stack levels required when called: 1
 14628 ;; This function calls:
 14629 ;;		i1_PS2Keyboard_SendCommand
 14630 ;; This function is called by:
 14631 ;;		_USBHIDCBSetReportComplete
 14632 ;; This function uses a non-reentrant model
 14633 ;;
 14634                           
 14635     0800                     i1_APP_KeyboardProcessOutputReport:	
 14636                           ;psect for function i1_APP_KeyboardProcessOutputReport
 14637                           
 14638                           
 14639                           ;app_device_keyboard.c: 524:     keyboard.leds.value = outputReport.value;
 14640                           
 14641                           ;incstack = 0
 14642                           ; Regs used in i1_APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+p
      +                          clath+cstack]
 14643     0800  3090               	movlw	144
 14644     0801  0086               	movwf	6
 14645     0802  3023               	movlw	35
 14646     0803  0087               	movwf	7
 14647     0804  0820               	movf	32,w	;volatile
 14648     0805  0081               	movwf	1
 14649                           
 14650                           ;app_device_keyboard.c: 525:     PS2Keyboard_SendCommand(0xED);
 14651     0806  30ED               	movlw	237
 14652     0807  3190  20F8         	fcall	i1_PS2Keyboard_SendCommand
 14653     0809  0008               	return
 14654     080A                     __end_ofi1_APP_KeyboardProcessOutputReport:
 14655                           
 14656                           	psect	text79
 14657     10F8                     __ptext79:	
 14658 ;; *************** function i1_PS2Keyboard_SendCommand *****************
 14659 ;; Defined at:
 14660 ;;		line 60 in file "ps2_keyboard.c"
 14661 ;; Parameters:    Size  Location     Type
 14662 ;;  cmd             1    wreg     unsigned char 
 14663 ;; Auto vars:     Size  Location     Type
 14664 ;;  cmd             1    0[COMMON] unsigned char 
 14665 ;; Return value:  Size  Location     Type
 14666 ;;                  1    wreg      void 
 14667 ;; Registers used:
 14668 ;;		wreg, status,2
 14669 ;; Tracked objects:
 14670 ;;		On entry : 1F/2
 14671 ;;		On exit  : 1F/2
 14672 ;;		Unchanged: 0/0
 14673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;Total ram usage:        1 bytes
 14679 ;; Hardware stack levels used: 1
 14680 ;; This function calls:
 14681 ;;		Nothing
 14682 ;; This function is called by:
 14683 ;;		i1_APP_KeyboardProcessOutputReport
 14684 ;; This function uses a non-reentrant model
 14685 ;;
 14686                           
 14687     10F8                     i1_PS2Keyboard_SendCommand:	
 14688                           ;psect for function i1_PS2Keyboard_SendCommand
 14689                           
 14690                           
 14691                           ;incstack = 0
 14692                           ; Regs used in i1_PS2Keyboard_SendCommand: [wreg+status,2]
 14693                           ;i1PS2Keyboard_SendCommand@cmd stored from wreg
 14694     10F8  00F0               	movwf	i1PS2Keyboard_SendCommand@cmd
 14695                           
 14696                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
 14697     10F9  0870               	movf	i1PS2Keyboard_SendCommand@cmd,w
 14698     10FA  00CE               	movwf	_keyboardCommand^(0+256)	;volatile
 14699                           
 14700                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
 14701     10FB  138B               	bcf	11,7	;volatile
 14702     10FC  0021               	movlb	1	; select bank1
 14703     10FD  120C               	bcf	12,4	;volatile
 14704     10FE  0022               	movlb	2	; select bank2
 14705     10FF  120C               	bcf	12,4	;volatile
 14706                           
 14707                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 14708     1100  30F0               	movlw	240
 14709     1101                     u649_27:
 14710     1101  3200               	nop2
 14711     1102  0B89               	decfsz	9,f
 14712     1103  2901               	goto	u649_27
 14713     1104  0021               	movlb	1	; select bank1
 14714     1105  160C               	bsf	12,4	;volatile
 14715                           
 14716                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
 14717     1106  0020               	movlb	0	; select bank0
 14718     1107  01E9               	clrf	_keyboardCommandCount	;volatile
 14719                           
 14720                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
 14721     1108  300C               	movlw	12
 14722     1109  0022               	movlb	2	; select bank2
 14723     110A  00CD               	movwf	_keyboardCommandBits^(0+256)	;volatile
 14724                           
 14725                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
 14726     110B  01CC               	clrf	_keyboardCommandOnes^(0+256)	;volatile
 14727     110C  0021               	movlb	1	; select bank1
 14728     110D  128C               	bcf	12,5	;volatile
 14729     110E  0022               	movlb	2	; select bank2
 14730     110F  128C               	bcf	12,5	;volatile
 14731                           
 14732                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
 14733     1110  178B               	bsf	11,7	;volatile
 14734     1111  0008               	return
 14735     1112                     __end_ofi1_PS2Keyboard_SendCommand:
 14736                           
 14737                           	psect	text80
 14738     16CA                     __ptext80:	
 14739 ;; *************** function _USBCtrlTrfTxService *****************
 14740 ;; Defined at:
 14741 ;;		line 1775 in file "usb/usb_device.c"
 14742 ;; Parameters:    Size  Location     Type
 14743 ;;		None
 14744 ;; Auto vars:     Size  Location     Type
 14745 ;;  byteToSend      1    2[COMMON] unsigned char 
 14746 ;; Return value:  Size  Location     Type
 14747 ;;                  1    wreg      void 
 14748 ;; Registers used:
 14749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 14750 ;; Tracked objects:
 14751 ;;		On entry : 1E/0
 14752 ;;		On exit  : 1C/0
 14753 ;;		Unchanged: 0/0
 14754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;Total ram usage:        3 bytes
 14760 ;; Hardware stack levels used: 1
 14761 ;; This function calls:
 14762 ;;		Nothing
 14763 ;; This function is called by:
 14764 ;;		_USBCtrlEPAllowDataStage
 14765 ;;		_USBCtrlTrfInHandler
 14766 ;; This function uses a non-reentrant model
 14767 ;;
 14768                           
 14769     16CA                     _USBCtrlTrfTxService:	
 14770                           ;psect for function _USBCtrlTrfTxService
 14771                           
 14772                           
 14773                           ;usb/usb_device.c: 1777:     uint8_t byteToSend;;usb/usb_device.c: 1781:     byteToSend 
      +                          = 8;
 14774                           
 14775                           ;incstack = 0
 14776                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 14777     16CA  3008               	movlw	8
 14778     16CB  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 14779                           
 14780                           ;usb/usb_device.c: 1782:     if(inPipes[0].wCount.Val < (uint8_t)8)
 14781     16CC  3000               	movlw	0
 14782     16CD  0021               	movlb	1	; select bank1
 14783     16CE  026D               	subwf	((_inPipes+1)^(0+128)+3),w	;volatile
 14784     16CF  3008               	movlw	8
 14785     16D0  1903               	skipnz
 14786     16D1  026C               	subwf	(_inPipes^(0+128)+3),w	;volatile
 14787     16D2  1803               	skipnc
 14788     16D3  2EE1               	goto	i1l529
 14789                           
 14790                           ;usb/usb_device.c: 1783:     {;usb/usb_device.c: 1784:         byteToSend = inPipes[0].w
      +                          Count.Val;
 14791     16D4  086C               	movf	(_inPipes^(0+128)+3),w	;volatile
 14792     16D5  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 14793                           
 14794                           ;usb/usb_device.c: 1791:         if(shortPacketStatus == 0)
 14795     16D6  0022               	movlb	2	; select bank2
 14796     16D7  0862               	movf	_shortPacketStatus^(0+256),w	;volatile
 14797     16D8  1D03               	btfss	3,2
 14798     16D9  2EDC               	goto	i1l4117
 14799                           
 14800                           ;usb/usb_device.c: 1792:         {;usb/usb_device.c: 1793:             shortPacketStatus
      +                           = 1;
 14801     16DA  3001               	movlw	1
 14802     16DB  2EE0               	goto	L17
 14803     16DC                     i1l4117:	
 14804                           ;usb/usb_device.c: 1794:         }
 14805                           
 14806     16DC  0362               	decf	_shortPacketStatus^(0+256),w	;volatile
 14807     16DD  1D03               	btfss	3,2
 14808     16DE  2EE1               	goto	i1l529
 14809                           
 14810                           ;usb/usb_device.c: 1796:         {;usb/usb_device.c: 1797:             shortPacketStatus
      +                           = 2;
 14811     16DF  3002               	movlw	2
 14812     16E0                     L17:
 14813     16E0  00E2               	movwf	_shortPacketStatus^(0+256)	;volatile
 14814     16E1                     i1l529:	
 14815                           ;usb/usb_device.c: 1799:     }
 14816                           
 14817                           
 14818                           ;usb/usb_device.c: 1803:     inPipes[0].wCount.Val -= byteToSend;
 14819     16E1  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14820     16E2  00F0               	movwf	??_USBCtrlTrfTxService
 14821     16E3  01F1               	clrf	??_USBCtrlTrfTxService+1
 14822     16E4  0870               	movf	??_USBCtrlTrfTxService,w
 14823     16E5  0021               	movlb	1	; select bank1
 14824     16E6  02EC               	subwf	(_inPipes^(0+128)+3),f	;volatile
 14825     16E7  0871               	movf	??_USBCtrlTrfTxService+1,w
 14826     16E8  3BED               	subwfb	((_inPipes+1)^(0+128)+3),f	;volatile
 14827                           
 14828                           ;usb/usb_device.c: 1808:     pBDTEntryIn[0]->CNT = byteToSend;
 14829     16E9  0020               	movlb	0	; select bank0
 14830     16EA  0863               	movf	_pBDTEntryIn,w
 14831     16EB  3E01               	addlw	1
 14832     16EC  00F0               	movwf	??_USBCtrlTrfTxService
 14833     16ED  3000               	movlw	0
 14834     16EE  3D64               	addwfc	_pBDTEntryIn+1,w
 14835     16EF  00F1               	movwf	??_USBCtrlTrfTxService+1
 14836     16F0  0870               	movf	??_USBCtrlTrfTxService,w
 14837     16F1  0086               	movwf	6
 14838     16F2  0871               	movf	??_USBCtrlTrfTxService+1,w
 14839     16F3  0087               	movwf	7
 14840     16F4  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14841     16F5  0081               	movwf	1
 14842                           
 14843                           ;usb/usb_device.c: 1812:     pDst = (volatile uint8_t*)CtrlTrfData;
 14844     16F6  3048               	movlw	72
 14845     16F7  0022               	movlb	2	; select bank2
 14846     16F8  00E1               	movwf	_pDst^(0+256)
 14847                           
 14848                           ;usb/usb_device.c: 1813:     if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 14849     16F9  0021               	movlb	1	; select bank1
 14850     16FA  1C6B               	btfss	(_inPipes^(0+128)+2),0	;volatile
 14851     16FB  2F13               	goto	i1l4137
 14852     16FC  2F2D               	goto	i1l4147
 14853     16FD                     i1l4129:
 14854                           
 14855                           ;usb/usb_device.c: 1816:         {;usb/usb_device.c: 1817:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRom++;
 14856     16FD  0022               	movlb	2	; select bank2
 14857     16FE  0861               	movf	_pDst^(0+256),w
 14858     16FF  0086               	movwf	6
 14859     1700  0187               	clrf	7
 14860     1701  0021               	movlb	1	; select bank1
 14861     1702  0869               	movf	_inPipes^(0+128),w	;volatile
 14862     1703  0084               	movwf	4
 14863     1704  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 14864     1705  0085               	movwf	5
 14865     1706  0800               	movf	0,w	;code access
 14866     1707  0081               	movwf	1
 14867     1708  3001               	movlw	1
 14868     1709  07E9               	addwf	_inPipes^(0+128),f	;volatile
 14869     170A  3000               	movlw	0
 14870     170B  3DEA               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 14871     170C  3001               	movlw	1
 14872     170D  00F0               	movwf	??_USBCtrlTrfTxService
 14873     170E  0870               	movf	??_USBCtrlTrfTxService,w
 14874     170F  0022               	movlb	2	; select bank2
 14875     1710  07E1               	addwf	_pDst^(0+256),f
 14876                           
 14877                           ;usb/usb_device.c: 1818:             byteToSend--;
 14878     1711  3001               	movlw	1
 14879     1712  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 14880     1713                     i1l4137:
 14881                           
 14882                           ;usb/usb_device.c: 1815:         while(byteToSend)
 14883     1713  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14884     1714  1903               	btfsc	3,2
 14885     1715  0008               	return
 14886     1716  2EFD               	goto	i1l4129
 14887     1717                     i1l4139:
 14888                           
 14889                           ;usb/usb_device.c: 1824:         {;usb/usb_device.c: 1825:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRam++;
 14890     1717  0022               	movlb	2	; select bank2
 14891     1718  0861               	movf	_pDst^(0+256),w
 14892     1719  0086               	movwf	6
 14893     171A  0187               	clrf	7
 14894     171B  0021               	movlb	1	; select bank1
 14895     171C  0869               	movf	_inPipes^(0+128),w	;volatile
 14896     171D  0084               	movwf	4
 14897     171E  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 14898     171F  0085               	movwf	5
 14899     1720  0800               	movf	0,w	;code access
 14900     1721  0081               	movwf	1
 14901     1722  3001               	movlw	1
 14902     1723  07E9               	addwf	_inPipes^(0+128),f	;volatile
 14903     1724  3000               	movlw	0
 14904     1725  3DEA               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 14905     1726  3001               	movlw	1
 14906     1727  00F0               	movwf	??_USBCtrlTrfTxService
 14907     1728  0870               	movf	??_USBCtrlTrfTxService,w
 14908     1729  0022               	movlb	2	; select bank2
 14909     172A  07E1               	addwf	_pDst^(0+256),f
 14910                           
 14911                           ;usb/usb_device.c: 1826:             byteToSend--;
 14912     172B  3001               	movlw	1
 14913     172C  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 14914     172D                     i1l4147:
 14915                           
 14916                           ;usb/usb_device.c: 1823:         while(byteToSend)
 14917     172D  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14918     172E  1903               	btfsc	3,2
 14919     172F  0008               	return
 14920     1730  2F17               	goto	i1l4139
 14921     1731                     __end_of_USBCtrlTrfTxService:
 14922                           
 14923                           	psect	text81
 14924     1EFB                     __ptext81:	
 14925 ;; *************** function _TMR2_ISR *****************
 14926 ;; Defined at:
 14927 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 14928 ;; Parameters:    Size  Location     Type
 14929 ;;		None
 14930 ;; Auto vars:     Size  Location     Type
 14931 ;;		None
 14932 ;; Return value:  Size  Location     Type
 14933 ;;                  1    wreg      void 
 14934 ;; Registers used:
 14935 ;;		wreg, status,2, status,0, pclath, cstack
 14936 ;; Tracked objects:
 14937 ;;		On entry : 1F/0
 14938 ;;		On exit  : 0/0
 14939 ;;		Unchanged: 0/0
 14940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14945 ;;Total ram usage:        0 bytes
 14946 ;; Hardware stack levels used: 1
 14947 ;; Hardware stack levels required when called: 1
 14948 ;; This function calls:
 14949 ;;		NULL
 14950 ;;		_SysTimeInterrupt
 14951 ;;		_TMR2_DefaultInterruptHandler
 14952 ;; This function is called by:
 14953 ;;		_INTERRUPT_InterruptManager
 14954 ;; This function uses a non-reentrant model
 14955 ;;
 14956                           
 14957     1EFB                     _TMR2_ISR:	
 14958                           ;psect for function _TMR2_ISR
 14959                           
 14960                           
 14961                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 14962                           
 14963                           ;incstack = 0
 14964                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 14965     1EFB  1091               	bcf	17,1	;volatile
 14966                           
 14967                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
 14968     1EFC  0022               	movlb	2	; select bank2
 14969     1EFD  0846               	movf	_TMR2_InterruptHandler^(0+256),w
 14970     1EFE  0447               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 14971     1EFF  1903               	btfsc	3,2
 14972     1F00  0008               	return
 14973                           
 14974                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
 14975     1F01  0847               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 14976     1F02  008A               	movwf	10
 14977     1F03  0846               	movf	_TMR2_InterruptHandler^(0+256),w
 14978     1F04  000A               	callw
 14979     1F05  319E               	pagesel	$
 14980     1F06  0008               	return
 14981     1F07                     __end_of_TMR2_ISR:
 14982                           
 14983                           	psect	text82
 14984     1ED1                     __ptext82:	
 14985 ;; *************** function _SysTimeInterrupt *****************
 14986 ;; Defined at:
 14987 ;;		line 24 in file "systime.c"
 14988 ;; Parameters:    Size  Location     Type
 14989 ;;		None
 14990 ;; Auto vars:     Size  Location     Type
 14991 ;;		None
 14992 ;; Return value:  Size  Location     Type
 14993 ;;                  1    wreg      void 
 14994 ;; Registers used:
 14995 ;;		wreg
 14996 ;; Tracked objects:
 14997 ;;		On entry : 1F/2
 14998 ;;		On exit  : 1F/2
 14999 ;;		Unchanged: 0/0
 15000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15005 ;;Total ram usage:        0 bytes
 15006 ;; Hardware stack levels used: 1
 15007 ;; This function calls:
 15008 ;;		Nothing
 15009 ;; This function is called by:
 15010 ;;		_SysTime_Init
 15011 ;;		_TMR2_ISR
 15012 ;; This function uses a non-reentrant model
 15013 ;;
 15014                           
 15015     1ED1                     _SysTimeInterrupt:	
 15016                           ;psect for function _SysTimeInterrupt
 15017                           
 15018                           
 15019                           ;systime.c: 26:     ++timeMs;
 15020                           
 15021                           ;incstack = 0
 15022                           ; Regs used in _SysTimeInterrupt: [wreg]
 15023     1ED1  3001               	movlw	1
 15024     1ED2  07A8               	addwf	_timeMs^(0+256),f
 15025     1ED3  3000               	movlw	0
 15026     1ED4  3DA9               	addwfc	(_timeMs+1)^(0+256),f
 15027     1ED5  3000               	movlw	0
 15028     1ED6  3DAA               	addwfc	(_timeMs+2)^(0+256),f
 15029     1ED7  3000               	movlw	0
 15030     1ED8  3DAB               	addwfc	(_timeMs+3)^(0+256),f
 15031     1ED9  0008               	return
 15032     1EDA                     __end_of_SysTimeInterrupt:
 15033                           
 15034                           	psect	text83
 15035     07FF                     __ptext83:	
 15036 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 15037 ;; Defined at:
 15038 ;;		line 136 in file "mcc_generated_files/tmr2.c"
 15039 ;; Parameters:    Size  Location     Type
 15040 ;;		None
 15041 ;; Auto vars:     Size  Location     Type
 15042 ;;		None
 15043 ;; Return value:  Size  Location     Type
 15044 ;;                  1    wreg      void 
 15045 ;; Registers used:
 15046 ;;		None
 15047 ;; Tracked objects:
 15048 ;;		On entry : 1F/2
 15049 ;;		On exit  : 1F/2
 15050 ;;		Unchanged: 1F/0
 15051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15056 ;;Total ram usage:        0 bytes
 15057 ;; Hardware stack levels used: 1
 15058 ;; This function calls:
 15059 ;;		Nothing
 15060 ;; This function is called by:
 15061 ;;		_TMR2_Initialize
 15062 ;;		_TMR2_ISR
 15063 ;; This function uses a non-reentrant model
 15064 ;;
 15065                           
 15066     07FF                     _TMR2_DefaultInterruptHandler:	
 15067                           ;psect for function _TMR2_DefaultInterruptHandler
 15068                           
 15069                           
 15070                           ;incstack = 0
 15071                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 15072     07FF  0008               	return
 15073     0800                     __end_of_TMR2_DefaultInterruptHandler:
 15074                           
 15075                           	psect	text84
 15076     1EDA                     __ptext84:	
 15077 ;; *************** function _PIN_MANAGER_IOC *****************
 15078 ;; Defined at:
 15079 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 15080 ;; Parameters:    Size  Location     Type
 15081 ;;		None
 15082 ;; Auto vars:     Size  Location     Type
 15083 ;;		None
 15084 ;; Return value:  Size  Location     Type
 15085 ;;                  1    wreg      void 
 15086 ;; Registers used:
 15087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15088 ;; Tracked objects:
 15089 ;;		On entry : 0/0
 15090 ;;		On exit  : 1F/7
 15091 ;;		Unchanged: 0/0
 15092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15097 ;;Total ram usage:        0 bytes
 15098 ;; Hardware stack levels used: 1
 15099 ;; Hardware stack levels required when called: 4
 15100 ;; This function calls:
 15101 ;;		_IOCAF4_ISR
 15102 ;;		_IOCAF5_ISR
 15103 ;; This function is called by:
 15104 ;;		_INTERRUPT_InterruptManager
 15105 ;; This function uses a non-reentrant model
 15106 ;;
 15107                           
 15108     1EDA                     _PIN_MANAGER_IOC:	
 15109                           ;psect for function _PIN_MANAGER_IOC
 15110                           
 15111                           
 15112                           ;mcc_generated_files/pin_manager.c: 124:     if(IOCAFbits.IOCAF4 == 1)
 15113                           
 15114                           ;incstack = 0
 15115                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15116     1EDA  0027               	movlb	7	; select bank7
 15117     1EDB  1E13               	btfss	19,4	;volatile
 15118     1EDC  2EE0               	goto	i1l6283
 15119                           
 15120                           ;mcc_generated_files/pin_manager.c: 125:     {;mcc_generated_files/pin_manager.c: 126:  
      +                                 IOCAF4_ISR();
 15121     1EDD  319F  2713  319E   	fcall	_IOCAF4_ISR
 15122     1EE0                     i1l6283:
 15123                           
 15124                           ;mcc_generated_files/pin_manager.c: 129:     if(IOCAFbits.IOCAF5 == 1)
 15125     1EE0  1E93               	btfss	19,5	;volatile
 15126     1EE1  0008               	return
 15127                           
 15128                           ;mcc_generated_files/pin_manager.c: 130:     {;mcc_generated_files/pin_manager.c: 131:  
      +                                 IOCAF5_ISR();
 15129     1EE2  319F  2720         	fcall	_IOCAF5_ISR
 15130     1EE4  0008               	return
 15131     1EE5                     __end_of_PIN_MANAGER_IOC:
 15132                           
 15133                           	psect	text85
 15134     1F20                     __ptext85:	
 15135 ;; *************** function _IOCAF5_ISR *****************
 15136 ;; Defined at:
 15137 ;;		line 168 in file "mcc_generated_files/pin_manager.c"
 15138 ;; Parameters:    Size  Location     Type
 15139 ;;		None
 15140 ;; Auto vars:     Size  Location     Type
 15141 ;;		None
 15142 ;; Return value:  Size  Location     Type
 15143 ;;                  1    wreg      void 
 15144 ;; Registers used:
 15145 ;;		wreg, status,2, status,0, pclath, cstack
 15146 ;; Tracked objects:
 15147 ;;		On entry : 1F/7
 15148 ;;		On exit  : 1F/7
 15149 ;;		Unchanged: 0/0
 15150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;Total ram usage:        0 bytes
 15156 ;; Hardware stack levels used: 1
 15157 ;; Hardware stack levels required when called: 2
 15158 ;; This function calls:
 15159 ;;		NULL
 15160 ;;		_IOCAF5_DefaultInterruptHandler
 15161 ;;		_PS2Keyboard_DataInterrupt
 15162 ;; This function is called by:
 15163 ;;		_PIN_MANAGER_IOC
 15164 ;; This function uses a non-reentrant model
 15165 ;;
 15166                           
 15167     1F20                     _IOCAF5_ISR:	
 15168                           ;psect for function _IOCAF5_ISR
 15169                           
 15170                           
 15171                           ;mcc_generated_files/pin_manager.c: 173:     if(IOCAF5_InterruptHandler)
 15172                           
 15173                           ;incstack = 0
 15174                           ; Regs used in _IOCAF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 15175     1F20  0023               	movlb	3	; select bank3
 15176     1F21  084D               	movf	_IOCAF5_InterruptHandler^(0+384),w
 15177     1F22  044E               	iorwf	(_IOCAF5_InterruptHandler+1)^(0+384),w
 15178     1F23  1903               	btfsc	3,2
 15179     1F24  2F2A               	goto	i1l5073
 15180                           
 15181                           ;mcc_generated_files/pin_manager.c: 174:     {;mcc_generated_files/pin_manager.c: 175:  
      +                                 IOCAF5_InterruptHandler();
 15182     1F25  084E               	movf	(_IOCAF5_InterruptHandler+1)^(0+384),w
 15183     1F26  008A               	movwf	10
 15184     1F27  084D               	movf	_IOCAF5_InterruptHandler^(0+384),w
 15185     1F28  000A               	callw
 15186     1F29  319F               	pagesel	$
 15187     1F2A                     i1l5073:
 15188                           
 15189                           ;mcc_generated_files/pin_manager.c: 177:     IOCAFbits.IOCAF5 = 0;
 15190     1F2A  0027               	movlb	7	; select bank7
 15191     1F2B  1293               	bcf	19,5	;volatile
 15192     1F2C  0008               	return
 15193     1F2D                     __end_of_IOCAF5_ISR:
 15194                           
 15195                           	psect	text86
 15196     0003                     __ptext86:	
 15197 ;; *************** function _IOCAF5_DefaultInterruptHandler *****************
 15198 ;; Defined at:
 15199 ;;		line 190 in file "mcc_generated_files/pin_manager.c"
 15200 ;; Parameters:    Size  Location     Type
 15201 ;;		None
 15202 ;; Auto vars:     Size  Location     Type
 15203 ;;		None
 15204 ;; Return value:  Size  Location     Type
 15205 ;;                  1    wreg      void 
 15206 ;; Registers used:
 15207 ;;		None
 15208 ;; Tracked objects:
 15209 ;;		On entry : 1F/3
 15210 ;;		On exit  : 1F/3
 15211 ;;		Unchanged: 1E/0
 15212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15217 ;;Total ram usage:        0 bytes
 15218 ;; Hardware stack levels used: 1
 15219 ;; This function calls:
 15220 ;;		Nothing
 15221 ;; This function is called by:
 15222 ;;		_PIN_MANAGER_Initialize
 15223 ;;		_IOCAF5_ISR
 15224 ;; This function uses a non-reentrant model
 15225 ;;
 15226                           
 15227     0003                     _IOCAF5_DefaultInterruptHandler:	
 15228                           ;psect for function _IOCAF5_DefaultInterruptHandler
 15229                           
 15230                           
 15231                           ;incstack = 0
 15232                           ; Regs used in _IOCAF5_DefaultInterruptHandler: []
 15233     0003  0008               	return
 15234     0004                     __end_of_IOCAF5_DefaultInterruptHandler:
 15235                           
 15236                           	psect	text87
 15237     1F54                     __ptext87:	
 15238 ;; *************** function _PS2Keyboard_DataInterrupt *****************
 15239 ;; Defined at:
 15240 ;;		line 79 in file "ps2_keyboard.c"
 15241 ;; Parameters:    Size  Location     Type
 15242 ;;		None
 15243 ;; Auto vars:     Size  Location     Type
 15244 ;;		None
 15245 ;; Return value:  Size  Location     Type
 15246 ;;                  1    wreg      void 
 15247 ;; Registers used:
 15248 ;;		wreg, status,2, status,0, pclath, cstack
 15249 ;; Tracked objects:
 15250 ;;		On entry : 1F/3
 15251 ;;		On exit  : 1F/2
 15252 ;;		Unchanged: 0/0
 15253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;Total ram usage:        0 bytes
 15259 ;; Hardware stack levels used: 1
 15260 ;; Hardware stack levels required when called: 1
 15261 ;; This function calls:
 15262 ;;		_SysTime_GetCurrentTimeMs
 15263 ;; This function is called by:
 15264 ;;		_PS2Keyboard_Init
 15265 ;;		_IOCAF5_ISR
 15266 ;; This function uses a non-reentrant model
 15267 ;;
 15268                           
 15269     1F54                     _PS2Keyboard_DataInterrupt:	
 15270                           ;psect for function _PS2Keyboard_DataInterrupt
 15271                           
 15272                           
 15273                           ;ps2_keyboard.c: 80:     if (keyboardState == KeyboardIdle) {
 15274                           
 15275                           ;incstack = 0
 15276                           ; Regs used in _PS2Keyboard_DataInterrupt: [wreg+status,2+status,0+pclath+cstack]
 15277     1F54  0022               	movlb	2	; select bank2
 15278     1F55  0855               	movf	_keyboardState^(0+256),w
 15279     1F56  1D03               	btfss	3,2
 15280     1F57  0008               	return
 15281                           
 15282                           ;ps2_keyboard.c: 81:         keyboardState = KeyboardStart;
 15283     1F58  3001               	movlw	1
 15284     1F59  00D5               	movwf	_keyboardState^(0+256)	;volatile
 15285                           
 15286                           ;ps2_keyboard.c: 82:         prevTimeMs = SysTime_GetCurrentTimeMs();
 15287     1F5A  319E  26C8         	fcall	_SysTime_GetCurrentTimeMs
 15288     1F5C  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 15289     1F5D  00AF               	movwf	(_prevTimeMs+3)^(0+256)	;volatile
 15290     1F5E  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 15291     1F5F  00AE               	movwf	(_prevTimeMs+2)^(0+256)	;volatile
 15292     1F60  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 15293     1F61  00AD               	movwf	(_prevTimeMs+1)^(0+256)	;volatile
 15294     1F62  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 15295     1F63  00AC               	movwf	_prevTimeMs^(0+256)	;volatile
 15296     1F64  0008               	return
 15297     1F65                     __end_of_PS2Keyboard_DataInterrupt:
 15298                           
 15299                           	psect	text88
 15300     1F13                     __ptext88:	
 15301 ;; *************** function _IOCAF4_ISR *****************
 15302 ;; Defined at:
 15303 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
 15304 ;; Parameters:    Size  Location     Type
 15305 ;;		None
 15306 ;; Auto vars:     Size  Location     Type
 15307 ;;		None
 15308 ;; Return value:  Size  Location     Type
 15309 ;;                  1    wreg      void 
 15310 ;; Registers used:
 15311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15312 ;; Tracked objects:
 15313 ;;		On entry : 1F/7
 15314 ;;		On exit  : 1F/7
 15315 ;;		Unchanged: 0/0
 15316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15321 ;;Total ram usage:        0 bytes
 15322 ;; Hardware stack levels used: 1
 15323 ;; Hardware stack levels required when called: 3
 15324 ;; This function calls:
 15325 ;;		NULL
 15326 ;;		_IOCAF4_DefaultInterruptHandler
 15327 ;;		_PS2Keyboard_ClockInterrupt
 15328 ;; This function is called by:
 15329 ;;		_PIN_MANAGER_IOC
 15330 ;; This function uses a non-reentrant model
 15331 ;;
 15332                           
 15333     1F13                     _IOCAF4_ISR:	
 15334                           ;psect for function _IOCAF4_ISR
 15335                           
 15336                           
 15337                           ;mcc_generated_files/pin_manager.c: 143:     if(IOCAF4_InterruptHandler)
 15338                           
 15339                           ;incstack = 0
 15340                           ; Regs used in _IOCAF4_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15341     1F13  0022               	movlb	2	; select bank2
 15342     1F14  086D               	movf	_IOCAF4_InterruptHandler^(0+256),w
 15343     1F15  046E               	iorwf	(_IOCAF4_InterruptHandler+1)^(0+256),w
 15344     1F16  1903               	btfsc	3,2
 15345     1F17  2F1D               	goto	i1l6187
 15346                           
 15347                           ;mcc_generated_files/pin_manager.c: 144:     {;mcc_generated_files/pin_manager.c: 145:  
      +                                 IOCAF4_InterruptHandler();
 15348     1F18  086E               	movf	(_IOCAF4_InterruptHandler+1)^(0+256),w
 15349     1F19  008A               	movwf	10
 15350     1F1A  086D               	movf	_IOCAF4_InterruptHandler^(0+256),w
 15351     1F1B  000A               	callw
 15352     1F1C  319F               	pagesel	$
 15353     1F1D                     i1l6187:
 15354                           
 15355                           ;mcc_generated_files/pin_manager.c: 147:     IOCAFbits.IOCAF4 = 0;
 15356     1F1D  0027               	movlb	7	; select bank7
 15357     1F1E  1213               	bcf	19,4	;volatile
 15358     1F1F  0008               	return
 15359     1F20                     __end_of_IOCAF4_ISR:
 15360                           
 15361                           	psect	text89
 15362     0002                     __ptext89:	
 15363 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
 15364 ;; Defined at:
 15365 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
 15366 ;; Parameters:    Size  Location     Type
 15367 ;;		None
 15368 ;; Auto vars:     Size  Location     Type
 15369 ;;		None
 15370 ;; Return value:  Size  Location     Type
 15371 ;;                  1    wreg      void 
 15372 ;; Registers used:
 15373 ;;		None
 15374 ;; Tracked objects:
 15375 ;;		On entry : 1F/2
 15376 ;;		On exit  : 1F/2
 15377 ;;		Unchanged: 1F/0
 15378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15383 ;;Total ram usage:        0 bytes
 15384 ;; Hardware stack levels used: 1
 15385 ;; This function calls:
 15386 ;;		Nothing
 15387 ;; This function is called by:
 15388 ;;		_PIN_MANAGER_Initialize
 15389 ;;		_IOCAF4_ISR
 15390 ;; This function uses a non-reentrant model
 15391 ;;
 15392                           
 15393     0002                     _IOCAF4_DefaultInterruptHandler:	
 15394                           ;psect for function _IOCAF4_DefaultInterruptHandler
 15395                           
 15396                           
 15397                           ;incstack = 0
 15398                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
 15399     0002  0008               	return
 15400     0003                     __end_of_IOCAF4_DefaultInterruptHandler:
 15401                           
 15402                           	psect	text90
 15403     0514                     __ptext90:	
 15404 ;; *************** function _PS2Keyboard_ClockInterrupt *****************
 15405 ;; Defined at:
 15406 ;;		line 86 in file "ps2_keyboard.c"
 15407 ;; Parameters:    Size  Location     Type
 15408 ;;		None
 15409 ;; Auto vars:     Size  Location     Type
 15410 ;;  bit             1   13[COMMON] _Bool 
 15411 ;;  bitPos          1   12[COMMON] unsigned char 
 15412 ;; Return value:  Size  Location     Type
 15413 ;;                  1    wreg      void 
 15414 ;; Registers used:
 15415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15416 ;; Tracked objects:
 15417 ;;		On entry : 1F/2
 15418 ;;		On exit  : 1F/2
 15419 ;;		Unchanged: 0/0
 15420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15423 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15424 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15425 ;;Total ram usage:        6 bytes
 15426 ;; Hardware stack levels used: 1
 15427 ;; Hardware stack levels required when called: 2
 15428 ;; This function calls:
 15429 ;;		_SysTime_GetCurrentTimeMs
 15430 ;;		i1_GenericQueue_Enqueue
 15431 ;; This function is called by:
 15432 ;;		_PS2Keyboard_Init
 15433 ;;		_IOCAF4_ISR
 15434 ;; This function uses a non-reentrant model
 15435 ;;
 15436                           
 15437     0514                     _PS2Keyboard_ClockInterrupt:	
 15438                           ;psect for function _PS2Keyboard_ClockInterrupt
 15439                           
 15440                           
 15441                           ;ps2_keyboard.c: 88:     if (keyboardCommandBits > 0) {
 15442                           
 15443                           ;incstack = 0
 15444                           ; Regs used in _PS2Keyboard_ClockInterrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15445     0514  084D               	movf	_keyboardCommandBits^(0+256),w	;volatile
 15446     0515  1903               	btfsc	3,2
 15447     0516  2D57               	goto	i1l6121
 15448                           
 15449                           ;ps2_keyboard.c: 89:         if(keyboardCommandCount > 0 && keyboardCommandCount < 9) {
 15450     0517  0020               	movlb	0	; select bank0
 15451     0518  0869               	movf	_keyboardCommandCount,w	;volatile
 15452     0519  1903               	btfsc	3,2
 15453     051A  2D3F               	goto	i1l6113
 15454     051B  3009               	movlw	9
 15455     051C  0269               	subwf	_keyboardCommandCount,w	;volatile
 15456     051D  1803               	skipnc
 15457     051E  2D3F               	goto	i1l6113
 15458                           
 15459                           ;ps2_keyboard.c: 90:             uint8_t bitPos = keyboardCommandCount - 1;
 15460     051F  0869               	movf	_keyboardCommandCount,w	;volatile
 15461     0520  3EFF               	addlw	255
 15462     0521  00FC               	movwf	PS2Keyboard_ClockInterrupt@bitPos
 15463                           
 15464                           ;ps2_keyboard.c: 91:             _Bool bit = (keyboardCommand >> bitPos) & 1;
 15465     0522  0022               	movlb	2	; select bank2
 15466     0523  084E               	movf	_keyboardCommand^(0+256),w	;volatile
 15467     0524  0020               	movlb	0	; select bank0
 15468     0525  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15469     0526  0A7C               	incf	PS2Keyboard_ClockInterrupt@bitPos,w
 15470     0527  2D29               	goto	u572_24
 15471     0528                     u572_25:
 15472     0528  36DC               	lsrf	??_PS2Keyboard_ClockInterrupt,f
 15473     0529                     u572_24:
 15474     0529  0B89               	decfsz	9,f
 15475     052A  2D28               	goto	u572_25
 15476     052B  1C5C               	btfss	??_PS2Keyboard_ClockInterrupt,0
 15477     052C  2D2F               	goto	u573_20
 15478     052D  3001               	movlw	1
 15479     052E  2D30               	goto	u574_20
 15480     052F                     u573_20:
 15481     052F  3000               	movlw	0
 15482     0530                     u574_20:
 15483     0530  00FD               	movwf	PS2Keyboard_ClockInterrupt@bit
 15484                           
 15485                           ;ps2_keyboard.c: 92:             if(bit) {
 15486     0531  087D               	movf	PS2Keyboard_ClockInterrupt@bit,w
 15487     0532  1903               	btfsc	3,2
 15488     0533  2D3D               	goto	i1l1037
 15489                           
 15490                           ;ps2_keyboard.c: 93:                 do { LATAbits.LATA5 = 1; } while(0);
 15491     0534  0022               	movlb	2	; select bank2
 15492     0535  168C               	bsf	12,5	;volatile
 15493                           
 15494                           ;ps2_keyboard.c: 94:                 keyboardCommandOnes += 1;
 15495     0536  3001               	movlw	1
 15496     0537  0020               	movlb	0	; select bank0
 15497     0538  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15498     0539  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15499     053A  0022               	movlb	2	; select bank2
 15500     053B  07CC               	addwf	_keyboardCommandOnes^(0+256),f	;volatile
 15501                           
 15502                           ;ps2_keyboard.c: 95:             } else {
 15503     053C  2D4E               	goto	i1l6119
 15504     053D                     i1l1037:	
 15505                           ;ps2_keyboard.c: 96:                 do { LATAbits.LATA5 = 0; } while(0);
 15506                           
 15507     053D  0022               	movlb	2	; select bank2
 15508     053E  2D46               	goto	i1l1042
 15509     053F                     i1l6113:
 15510     053F  3009               	movlw	9
 15511     0540  0669               	xorwf	_keyboardCommandCount,w	;volatile
 15512     0541  1D03               	btfss	3,2
 15513     0542  2D48               	goto	i1l6117
 15514                           
 15515                           ;ps2_keyboard.c: 99:             if(keyboardCommandOnes & 1) {
 15516     0543  0022               	movlb	2	; select bank2
 15517     0544  1C4C               	btfss	_keyboardCommandOnes^(0+256),0	;volatile
 15518     0545  2D4D               	goto	L18
 15519     0546                     i1l1042:	
 15520                           ;ps2_keyboard.c: 100:                 do { LATAbits.LATA5 = 0; } while(0);
 15521                           
 15522     0546  128C               	bcf	12,5	;volatile
 15523     0547  2D4E               	goto	i1l6119
 15524     0548                     i1l6117:	
 15525                           ;ps2_keyboard.c: 102:                 do { LATAbits.LATA5 = 1; } while(0);
 15526                           
 15527     0548  300A               	movlw	10
 15528     0549  0669               	xorwf	_keyboardCommandCount,w	;volatile
 15529     054A  1D03               	btfss	3,2
 15530     054B  2D4E               	goto	i1l6119
 15531                           
 15532                           ;ps2_keyboard.c: 105:             do { TRISAbits.TRISA5 = 1; } while(0);
 15533     054C  0021               	movlb	1	; select bank1
 15534     054D                     L18:
 15535     054D  168C               	bsf	12,5	;volatile
 15536     054E                     i1l6119:
 15537                           
 15538                           ;ps2_keyboard.c: 107:         keyboardCommandCount += 1;
 15539     054E  3001               	movlw	1
 15540     054F  0020               	movlb	0	; select bank0
 15541     0550  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15542     0551  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15543     0552  07E9               	addwf	_keyboardCommandCount,f	;volatile
 15544                           
 15545                           ;ps2_keyboard.c: 108:         keyboardCommandBits -= 1;
 15546     0553  3001               	movlw	1
 15547     0554  0022               	movlb	2	; select bank2
 15548     0555  02CD               	subwf	_keyboardCommandBits^(0+256),f	;volatile
 15549                           
 15550                           ;ps2_keyboard.c: 109:     } else {
 15551     0556  0008               	return
 15552     0557                     i1l6121:
 15553                           
 15554                           ;ps2_keyboard.c: 110:         if (SysTime_GetCurrentTimeMs() - prevTimeMs >= 250) {
 15555     0557  319E  26C8  3185   	fcall	_SysTime_GetCurrentTimeMs
 15556     055A  082C               	movf	_prevTimeMs^(0+256),w	;volatile
 15557     055B  0270               	subwf	?_SysTime_GetCurrentTimeMs,w
 15558     055C  0020               	movlb	0	; select bank0
 15559     055D  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15560     055E  0022               	movlb	2	; select bank2
 15561     055F  082D               	movf	(_prevTimeMs+1)^(0+256),w	;volatile
 15562     0560  3B71               	subwfb	?_SysTime_GetCurrentTimeMs+1,w
 15563     0561  0020               	movlb	0	; select bank0
 15564     0562  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 15565     0563  0022               	movlb	2	; select bank2
 15566     0564  082E               	movf	(_prevTimeMs+2)^(0+256),w	;volatile
 15567     0565  3B72               	subwfb	?_SysTime_GetCurrentTimeMs+2,w
 15568     0566  0020               	movlb	0	; select bank0
 15569     0567  00DE               	movwf	??_PS2Keyboard_ClockInterrupt+2
 15570     0568  0022               	movlb	2	; select bank2
 15571     0569  082F               	movf	(_prevTimeMs+3)^(0+256),w	;volatile
 15572     056A  3B73               	subwfb	?_SysTime_GetCurrentTimeMs+3,w
 15573     056B  0020               	movlb	0	; select bank0
 15574     056C  00DF               	movwf	??_PS2Keyboard_ClockInterrupt+3
 15575     056D  085F               	movf	??_PS2Keyboard_ClockInterrupt+3,w
 15576     056E  1D03               	btfss	3,2
 15577     056F  2D7A               	goto	i1l6123
 15578     0570  085E               	movf	??_PS2Keyboard_ClockInterrupt+2,w
 15579     0571  1D03               	btfss	3,2
 15580     0572  2D7A               	goto	i1l6123
 15581     0573  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15582     0574  1D03               	btfss	3,2
 15583     0575  2D7A               	goto	i1l6123
 15584     0576  30FA               	movlw	250
 15585     0577  025C               	subwf	??_PS2Keyboard_ClockInterrupt,w
 15586     0578  1C03               	btfss	3,0
 15587     0579  2DE6               	goto	i1l6175
 15588     057A                     i1l6123:
 15589                           
 15590                           ;ps2_keyboard.c: 111:             keyboardState = KeyboardStart;
 15591     057A  3001               	movlw	1
 15592     057B  0022               	movlb	2	; select bank2
 15593     057C  00D5               	movwf	_keyboardState^(0+256)	;volatile
 15594     057D  2DE6               	goto	i1l6175
 15595     057E                     i1l6125:
 15596                           
 15597                           ;ps2_keyboard.c: 115:                 keyboardIndexData = 0;
 15598     057E  0022               	movlb	2	; select bank2
 15599     057F  01D4               	clrf	_keyboardIndexData^(0+256)	;volatile
 15600                           
 15601                           ;ps2_keyboard.c: 116:                 keyboardOnesCount = 0;
 15602     0580  01D3               	clrf	_keyboardOnesCount^(0+256)	;volatile
 15603                           
 15604                           ;ps2_keyboard.c: 117:                 keyboardScanCode.value = 0;
 15605     0581  01E8               	clrf	_keyboardScanCode^(0+256)
 15606     0582                     i1l6127:
 15607                           
 15608                           ;ps2_keyboard.c: 118:                 keyboardState = KeyboardData;
 15609     0582  3002               	movlw	2
 15610     0583  2DBC               	goto	L20
 15611     0584                     i1l6129:	
 15612                           ;ps2_keyboard.c: 119:                 break;
 15613                           
 15614                           
 15615                           ;ps2_keyboard.c: 121:                 keyboardData = PORTAbits.RA5;
 15616     0584  3000               	movlw	0
 15617     0585  1A8C               	btfsc	12,5	;volatile
 15618     0586  3001               	movlw	1
 15619     0587  0022               	movlb	2	; select bank2
 15620     0588  00D1               	movwf	_keyboardData^(0+256)	;volatile
 15621                           
 15622                           ;ps2_keyboard.c: 122:                 keyboardScanCode.value |= keyboardData << keyboard
      +                          IndexData;
 15623     0589  0851               	movf	_keyboardData^(0+256),w	;volatile
 15624     058A  0020               	movlb	0	; select bank0
 15625     058B  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15626     058C  0022               	movlb	2	; select bank2
 15627     058D  0A54               	incf	_keyboardIndexData^(0+256),w	;volatile
 15628     058E  0020               	movlb	0	; select bank0
 15629     058F  2D91               	goto	u580_24
 15630     0590                     u580_25:
 15631     0590  35DC               	lslf	??_PS2Keyboard_ClockInterrupt,f
 15632     0591                     u580_24:
 15633     0591  0B89               	decfsz	9,f
 15634     0592  2D90               	goto	u580_25
 15635     0593  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15636     0594  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 15637     0595  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15638     0596  0022               	movlb	2	; select bank2
 15639     0597  04E8               	iorwf	_keyboardScanCode^(0+256),f
 15640                           
 15641                           ;ps2_keyboard.c: 123:                 keyboardOnesCount += keyboardData;
 15642     0598  0851               	movf	_keyboardData^(0+256),w	;volatile
 15643     0599  0020               	movlb	0	; select bank0
 15644     059A  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15645     059B  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15646     059C  0022               	movlb	2	; select bank2
 15647     059D  07D3               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 15648                           
 15649                           ;ps2_keyboard.c: 124:                 keyboardIndexData += 1;
 15650     059E  3001               	movlw	1
 15651     059F  0020               	movlb	0	; select bank0
 15652     05A0  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15653     05A1  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15654     05A2  0022               	movlb	2	; select bank2
 15655     05A3  07D4               	addwf	_keyboardIndexData^(0+256),f	;volatile
 15656                           
 15657                           ;ps2_keyboard.c: 125:                 if (keyboardIndexData == 8) {
 15658     05A4  3008               	movlw	8
 15659     05A5  0654               	xorwf	_keyboardIndexData^(0+256),w	;volatile
 15660     05A6  1D03               	btfss	3,2
 15661     05A7  2D82               	goto	i1l6127
 15662                           
 15663                           ;ps2_keyboard.c: 126:                     keyboardState = KeyboardParity;
 15664     05A8  3003               	movlw	3
 15665     05A9  2DBC               	goto	L20
 15666     05AA                     i1l6143:	
 15667                           ;ps2_keyboard.c: 127:                 } else {
 15668                           
 15669                           
 15670                           ;ps2_keyboard.c: 132:                 keyboardData = PORTAbits.RA5;
 15671     05AA  3000               	movlw	0
 15672     05AB  1A8C               	btfsc	12,5	;volatile
 15673     05AC  3001               	movlw	1
 15674     05AD  0022               	movlb	2	; select bank2
 15675     05AE  00D1               	movwf	_keyboardData^(0+256)	;volatile
 15676                           
 15677                           ;ps2_keyboard.c: 133:                 keyboardOnesCount += keyboardData;
 15678     05AF  0851               	movf	_keyboardData^(0+256),w	;volatile
 15679     05B0  0020               	movlb	0	; select bank0
 15680     05B1  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15681     05B2  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15682     05B3  0022               	movlb	2	; select bank2
 15683     05B4  07D3               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 15684                           
 15685                           ;ps2_keyboard.c: 134:                 keyboardScanCodeValid = keyboardOnesCount & 0x01;
 15686     05B5  1C53               	btfss	_keyboardOnesCount^(0+256),0	;volatile
 15687     05B6  2DB9               	goto	u582_20
 15688     05B7  3001               	movlw	1
 15689     05B8  2DBA               	goto	u583_20
 15690     05B9                     u582_20:
 15691     05B9  3000               	movlw	0
 15692     05BA                     u583_20:
 15693     05BA  00D2               	movwf	_keyboardScanCodeValid^(0+256)	;volatile
 15694                           
 15695                           ;ps2_keyboard.c: 135:                 keyboardState = KeyboardStop;
 15696     05BB  3004               	movlw	4
 15697     05BC                     L20:
 15698     05BC  00D5               	movwf	_keyboardState^(0+256)	;volatile
 15699                           
 15700                           ;ps2_keyboard.c: 136:                 break;
 15701     05BD  2DFE               	goto	i1l6177
 15702     05BE                     i1l6151:
 15703                           
 15704                           ;ps2_keyboard.c: 138:                 if (keyboardScanCode.value == 0xE0) {
 15705     05BE  30E0               	movlw	224
 15706     05BF  0022               	movlb	2	; select bank2
 15707     05C0  0668               	xorwf	_keyboardScanCode^(0+256),w
 15708     05C1  1D03               	btfss	3,2
 15709     05C2  2DC6               	goto	i1l6155
 15710                           
 15711                           ;ps2_keyboard.c: 139:                     keyboardIsExtend = 1;
 15712     05C3  3001               	movlw	1
 15713     05C4  00D0               	movwf	_keyboardIsExtend^(0+256)	;volatile
 15714                           
 15715                           ;ps2_keyboard.c: 140:                 } else if (keyboardScanCode.value == 0xF0) {
 15716     05C5  2DE3               	goto	i1l6169
 15717     05C6                     i1l6155:
 15718     05C6  30F0               	movlw	240
 15719     05C7  0668               	xorwf	_keyboardScanCode^(0+256),w
 15720     05C8  1D03               	btfss	3,2
 15721     05C9  2DCD               	goto	i1l6159
 15722                           
 15723                           ;ps2_keyboard.c: 141:                     keyboardIsBreak = 1;
 15724     05CA  3001               	movlw	1
 15725     05CB  00CF               	movwf	_keyboardIsBreak^(0+256)	;volatile
 15726                           
 15727                           ;ps2_keyboard.c: 142:                 } else {
 15728     05CC  2DE3               	goto	i1l6169
 15729     05CD                     i1l6159:
 15730                           
 15731                           ;ps2_keyboard.c: 143:                     keyboardScanCode.isBreak = keyboardIsBreak;
 15732     05CD  084F               	movf	_keyboardIsBreak^(0+256),w	;volatile
 15733     05CE  00EA               	movwf	(_keyboardScanCode^(0+256)+2)
 15734                           
 15735                           ;ps2_keyboard.c: 144:                     keyboardScanCode.isExtend = keyboardIsExtend;
 15736     05CF  0850               	movf	_keyboardIsExtend^(0+256),w	;volatile
 15737     05D0  00E9               	movwf	(_keyboardScanCode^(0+256)+1)
 15738                           
 15739                           ;ps2_keyboard.c: 145:                     if (keyboardScanCodeValid) {
 15740     05D1  0852               	movf	_keyboardScanCodeValid^(0+256),w	;volatile
 15741     05D2  1903               	btfsc	3,2
 15742     05D3  2DE0               	goto	i1l6165
 15743                           
 15744                           ;ps2_keyboard.c: 146:                         GenericQueue_Enqueue(&keyboardScanCodeQueu
      +                          e, &keyboardScanCode);
 15745     05D4  3091               	movlw	145
 15746     05D5  0020               	movlb	0	; select bank0
 15747     05D6  00D5               	movwf	i1GenericQueue_Enqueue@q
 15748     05D7  3023               	movlw	35
 15749     05D8  00D6               	movwf	i1GenericQueue_Enqueue@q+1
 15750     05D9  3068               	movlw	low _keyboardScanCode
 15751     05DA  00D7               	movwf	i1GenericQueue_Enqueue@item
 15752     05DB  3001               	movlw	high _keyboardScanCode
 15753     05DC  00D8               	movwf	i1GenericQueue_Enqueue@item+1
 15754     05DD  3197  2798  3185   	fcall	i1_GenericQueue_Enqueue
 15755     05E0                     i1l6165:
 15756                           
 15757                           ;ps2_keyboard.c: 148:                     keyboardIsBreak = 0;
 15758     05E0  0022               	movlb	2	; select bank2
 15759     05E1  01CF               	clrf	_keyboardIsBreak^(0+256)	;volatile
 15760                           
 15761                           ;ps2_keyboard.c: 149:                     keyboardIsExtend = 0;
 15762     05E2  01D0               	clrf	_keyboardIsExtend^(0+256)	;volatile
 15763     05E3                     i1l6169:
 15764                           
 15765                           ;ps2_keyboard.c: 151:                 keyboardState = KeyboardIdle;
 15766     05E3  0022               	movlb	2	; select bank2
 15767     05E4  01D5               	clrf	_keyboardState^(0+256)	;volatile
 15768                           
 15769                           ;ps2_keyboard.c: 152:                 break;
 15770     05E5  2DFE               	goto	i1l6177
 15771     05E6                     i1l6175:
 15772     05E6  0022               	movlb	2	; select bank2
 15773     05E7  0855               	movf	_keyboardState^(0+256),w	;volatile
 15774     05E8  0020               	movlb	0	; select bank0
 15775     05E9  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15776     05EA  01DD               	clrf	??_PS2Keyboard_ClockInterrupt+1
 15777                           
 15778                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15779                           ; Switch size 1, requested type "simple"
 15780                           ; Number of cases is 1, Range of values is 0 to 0
 15781                           ; switch strategies available:
 15782                           ; Name         Instructions Cycles
 15783                           ; simple_byte            4     3 (average)
 15784                           ; direct_byte            8     6 (fixed)
 15785                           ; jumptable            260     6 (fixed)
 15786                           ;	Chosen strategy is simple_byte
 15787     05EB  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15788     05EC  3A00               	xorlw	0	; case 0
 15789     05ED  1903               	skipnz
 15790     05EE  2DF0               	goto	i1l6615
 15791     05EF  2DE3               	goto	i1l6169
 15792     05F0                     i1l6615:
 15793                           
 15794                           ; Switch size 1, requested type "simple"
 15795                           ; Number of cases is 4, Range of values is 1 to 4
 15796                           ; switch strategies available:
 15797                           ; Name         Instructions Cycles
 15798                           ; simple_byte           13     7 (average)
 15799                           ; direct_byte           17     9 (fixed)
 15800                           ; jumptable            263     9 (fixed)
 15801                           ;	Chosen strategy is simple_byte
 15802     05F0  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15803     05F1  3A01               	xorlw	1	; case 1
 15804     05F2  1903               	skipnz
 15805     05F3  2D7E               	goto	i1l6125
 15806     05F4  3A03               	xorlw	3	; case 2
 15807     05F5  1903               	skipnz
 15808     05F6  2D84               	goto	i1l6129
 15809     05F7  3A01               	xorlw	1	; case 3
 15810     05F8  1903               	skipnz
 15811     05F9  2DAA               	goto	i1l6143
 15812     05FA  3A07               	xorlw	7	; case 4
 15813     05FB  1903               	skipnz
 15814     05FC  2DBE               	goto	i1l6151
 15815     05FD  2DE3               	goto	i1l6169
 15816     05FE                     i1l6177:
 15817                           
 15818                           ;ps2_keyboard.c: 157:         prevTimeMs = SysTime_GetCurrentTimeMs();
 15819     05FE  319E  26C8         	fcall	_SysTime_GetCurrentTimeMs
 15820     0600  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 15821     0601  00AF               	movwf	(_prevTimeMs+3)^(0+256)	;volatile
 15822     0602  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 15823     0603  00AE               	movwf	(_prevTimeMs+2)^(0+256)	;volatile
 15824     0604  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 15825     0605  00AD               	movwf	(_prevTimeMs+1)^(0+256)	;volatile
 15826     0606  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 15827     0607  00AC               	movwf	_prevTimeMs^(0+256)	;volatile
 15828     0608  0008               	return
 15829     0609                     __end_of_PS2Keyboard_ClockInterrupt:
 15830                           
 15831                           	psect	text91
 15832     1798                     __ptext91:	
 15833 ;; *************** function i1_GenericQueue_Enqueue *****************
 15834 ;; Defined at:
 15835 ;;		line 19 in file "generic_queue.c"
 15836 ;; Parameters:    Size  Location     Type
 15837 ;;  q               2    5[BANK0 ] PTR struct .
 15838 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 15839 ;;  item            2    7[BANK0 ] PTR const void 
 15840 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateState@usbHidCode_2855(1), 
 15841 ;; Auto vars:     Size  Location     Type
 15842 ;;		None
 15843 ;; Return value:  Size  Location     Type
 15844 ;;                  1    wreg      void 
 15845 ;; Registers used:
 15846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15847 ;; Tracked objects:
 15848 ;;		On entry : 1F/0
 15849 ;;		On exit  : 1F/0
 15850 ;;		Unchanged: 0/0
 15851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15852 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15854 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15855 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15856 ;;Total ram usage:        7 bytes
 15857 ;; Hardware stack levels used: 1
 15858 ;; Hardware stack levels required when called: 1
 15859 ;; This function calls:
 15860 ;;		i1_GenericQueue_IsFull
 15861 ;;		i1___awmod
 15862 ;;		i1___wmul
 15863 ;;		i1_memcpy
 15864 ;; This function is called by:
 15865 ;;		_PS2Keyboard_ClockInterrupt
 15866 ;; This function uses a non-reentrant model
 15867 ;;
 15868                           
 15869     1798                     i1_GenericQueue_Enqueue:	
 15870                           ;psect for function i1_GenericQueue_Enqueue
 15871                           
 15872                           
 15873                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
 15874                           
 15875                           ;incstack = 0
 15876                           ; Regs used in i1_GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15877     1798  0856               	movf	i1GenericQueue_Enqueue@q+1,w
 15878     1799  00F1               	movwf	i1GenericQueue_IsFull@q+1
 15879     179A  0855               	movf	i1GenericQueue_Enqueue@q,w
 15880     179B  00F0               	movwf	i1GenericQueue_IsFull@q
 15881     179C  319F  27AB  3197   	fcall	i1_GenericQueue_IsFull
 15882     179F  0870               	movf	?i1_GenericQueue_IsFull,w
 15883     17A0  0471               	iorwf	?i1_GenericQueue_IsFull+1,w
 15884     17A1  1D03               	btfss	3,2
 15885     17A2  0008               	return
 15886                           
 15887                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
 15888     17A3  0855               	movf	i1GenericQueue_Enqueue@q,w
 15889     17A4  3E5D               	addlw	93
 15890     17A5  0086               	movwf	6
 15891     17A6  3000               	movlw	0
 15892     17A7  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15893     17A8  0087               	movwf	7
 15894     17A9  0801               	movf	1,w
 15895     17AA  00D9               	movwf	??i1_GenericQueue_Enqueue
 15896     17AB  01DA               	clrf	??i1_GenericQueue_Enqueue+1
 15897     17AC  0859               	movf	??i1_GenericQueue_Enqueue,w
 15898     17AD  00F0               	movwf	i1___wmul@multiplier
 15899     17AE  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 15900     17AF  00F1               	movwf	i1___wmul@multiplier+1
 15901     17B0  0855               	movf	i1GenericQueue_Enqueue@q,w
 15902     17B1  3E5A               	addlw	90
 15903     17B2  0086               	movwf	6
 15904     17B3  3000               	movlw	0
 15905     17B4  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15906     17B5  0087               	movwf	7
 15907     17B6  3F40               	moviw [0]fsr1
 15908     17B7  00F2               	movwf	i1___wmul@multiplicand
 15909     17B8  3F41               	moviw [1]fsr1
 15910     17B9  00F3               	movwf	i1___wmul@multiplicand+1
 15911     17BA  3191  2112  3197   	fcall	i1___wmul
 15912     17BD  0870               	movf	?i1___wmul,w
 15913     17BE  0755               	addwf	i1GenericQueue_Enqueue@q,w
 15914     17BF  00F6               	movwf	i1memcpy@d1
 15915     17C0  0871               	movf	?i1___wmul+1,w
 15916     17C1  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15917     17C2  00F7               	movwf	i1memcpy@d1+1
 15918     17C3  0858               	movf	i1GenericQueue_Enqueue@item+1,w
 15919     17C4  00F9               	movwf	i1memcpy@s1+1
 15920     17C5  0857               	movf	i1GenericQueue_Enqueue@item,w
 15921     17C6  00F8               	movwf	i1memcpy@s1
 15922     17C7  0855               	movf	i1GenericQueue_Enqueue@q,w
 15923     17C8  3E5A               	addlw	90
 15924     17C9  0086               	movwf	6
 15925     17CA  3000               	movlw	0
 15926     17CB  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15927     17CC  0087               	movwf	7
 15928     17CD  3F40               	moviw [0]fsr1
 15929     17CE  00FA               	movwf	i1memcpy@n
 15930     17CF  3F41               	moviw [1]fsr1
 15931     17D0  00FB               	movwf	i1memcpy@n+1
 15932     17D1  3192  22DB  3197   	fcall	i1_memcpy
 15933                           
 15934                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
 15935     17D4  300F               	movlw	15
 15936     17D5  00F0               	movwf	i1___awmod@divisor
 15937     17D6  3000               	movlw	0
 15938     17D7  00F1               	movwf	i1___awmod@divisor+1
 15939     17D8  0855               	movf	i1GenericQueue_Enqueue@q,w
 15940     17D9  3E5D               	addlw	93
 15941     17DA  0086               	movwf	6
 15942     17DB  3000               	movlw	0
 15943     17DC  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15944     17DD  0087               	movwf	7
 15945     17DE  0801               	movf	1,w
 15946     17DF  3E01               	addlw	1
 15947     17E0  00F2               	movwf	i1___awmod@dividend
 15948     17E1  3000               	movlw	0
 15949     17E2  1803               	skipnc
 15950     17E3  3001               	movlw	1
 15951     17E4  00F3               	movwf	i1___awmod@dividend+1
 15952     17E5  3194  2490         	fcall	i1___awmod
 15953     17E7  0870               	movf	?i1___awmod,w
 15954     17E8  00D9               	movwf	??i1_GenericQueue_Enqueue
 15955     17E9  0855               	movf	i1GenericQueue_Enqueue@q,w
 15956     17EA  3E5D               	addlw	93
 15957     17EB  00DA               	movwf	??i1_GenericQueue_Enqueue+1
 15958     17EC  3000               	movlw	0
 15959     17ED  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15960     17EE  00DB               	movwf	??i1_GenericQueue_Enqueue+2
 15961     17EF  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 15962     17F0  0086               	movwf	6
 15963     17F1  085B               	movf	??i1_GenericQueue_Enqueue+2,w
 15964     17F2  0087               	movwf	7
 15965     17F3  0859               	movf	??i1_GenericQueue_Enqueue,w
 15966     17F4  0081               	movwf	1
 15967                           
 15968                           ;generic_queue.c: 23:         q->size++;
 15969     17F5  3001               	movlw	1
 15970     17F6  00D9               	movwf	??i1_GenericQueue_Enqueue
 15971     17F7  0855               	movf	i1GenericQueue_Enqueue@q,w
 15972     17F8  3E5E               	addlw	94
 15973     17F9  0086               	movwf	6
 15974     17FA  3000               	movlw	0
 15975     17FB  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15976     17FC  0087               	movwf	7
 15977     17FD  0859               	movf	??i1_GenericQueue_Enqueue,w
 15978     17FE  0781               	addwf	1,f
 15979     17FF  0008               	return
 15980     1800                     __end_ofi1_GenericQueue_Enqueue:
 15981                           
 15982                           	psect	text92
 15983     12DB                     __ptext92:	
 15984 ;; *************** function i1_memcpy *****************
 15985 ;; Defined at:
 15986 ;;		line 4 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/memcpy.c"
 15987 ;; Parameters:    Size  Location     Type
 15988 ;;  d1              2    6[COMMON] PTR void 
 15989 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 15990 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 15991 ;;  s1              2    8[COMMON] PTR const void 
 15992 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2855(1), 
 15993 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 15994 ;;  n               2   10[COMMON] unsigned int 
 15995 ;; Auto vars:     Size  Location     Type
 15996 ;;  s               2    2[BANK0 ] PTR const unsigned char 
 15997 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2864(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2855(1), 
 15998 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 15999 ;;  d               2    0[BANK0 ] PTR unsigned char 
 16000 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 16001 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 16002 ;;  tmp             1    4[BANK0 ] unsigned char 
 16003 ;; Return value:  Size  Location     Type
 16004 ;;                  2    6[COMMON] PTR void 
 16005 ;; Registers used:
 16006 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16007 ;; Tracked objects:
 16008 ;;		On entry : 1F/0
 16009 ;;		On exit  : 1F/0
 16010 ;;		Unchanged: 0/0
 16011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16012 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16013 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16015 ;;      Totals:         6       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16016 ;;Total ram usage:       11 bytes
 16017 ;; Hardware stack levels used: 1
 16018 ;; This function calls:
 16019 ;;		Nothing
 16020 ;; This function is called by:
 16021 ;;		_USBCtrlEPService
 16022 ;;		i1_GenericQueue_Enqueue
 16023 ;; This function uses a non-reentrant model
 16024 ;;
 16025                           
 16026     12DB                     i1_memcpy:	
 16027                           ;psect for function i1_memcpy
 16028                           
 16029                           
 16030                           ;incstack = 0
 16031                           ; Regs used in i1_memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 16032     12DB  0879               	movf	i1memcpy@s1+1,w
 16033     12DC  00D3               	movwf	i1memcpy@s+1
 16034     12DD  0878               	movf	i1memcpy@s1,w
 16035     12DE  00D2               	movwf	i1memcpy@s
 16036     12DF  0877               	movf	i1memcpy@d1+1,w
 16037     12E0  00D1               	movwf	i1memcpy@d+1
 16038     12E1  0876               	movf	i1memcpy@d1,w
 16039     12E2  00D0               	movwf	i1memcpy@d
 16040     12E3                     i1l4497:
 16041     12E3  3001               	movlw	1
 16042     12E4  02FA               	subwf	i1memcpy@n,f
 16043     12E5  3000               	movlw	0
 16044     12E6  3BFB               	subwfb	i1memcpy@n+1,f
 16045     12E7  0A7A               	incf	i1memcpy@n,w
 16046     12E8  1903               	btfsc	3,2
 16047     12E9  0A7B               	incf	i1memcpy@n+1,w
 16048     12EA  1903               	btfsc	3,2
 16049     12EB  0008               	return
 16050     12EC  0852               	movf	i1memcpy@s,w
 16051     12ED  0086               	movwf	6
 16052     12EE  0853               	movf	i1memcpy@s+1,w
 16053     12EF  0087               	movwf	7
 16054     12F0  0801               	movf	1,w
 16055     12F1  00D4               	movwf	i1memcpy@tmp
 16056     12F2  3001               	movlw	1
 16057     12F3  07D2               	addwf	i1memcpy@s,f
 16058     12F4  3000               	movlw	0
 16059     12F5  3DD3               	addwfc	i1memcpy@s+1,f
 16060     12F6  0850               	movf	i1memcpy@d,w
 16061     12F7  0086               	movwf	6
 16062     12F8  0851               	movf	i1memcpy@d+1,w
 16063     12F9  0087               	movwf	7
 16064     12FA  0854               	movf	i1memcpy@tmp,w
 16065     12FB  0081               	movwf	1
 16066     12FC  3001               	movlw	1
 16067     12FD  07D0               	addwf	i1memcpy@d,f
 16068     12FE  3000               	movlw	0
 16069     12FF  3DD1               	addwfc	i1memcpy@d+1,f
 16070     1300  2AE3               	goto	i1l4497
 16071     1301                     __end_ofi1_memcpy:
 16072                           
 16073                           	psect	text93
 16074     1112                     __ptext93:	
 16075 ;; *************** function i1___wmul *****************
 16076 ;; Defined at:
 16077 ;;		line 15 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/Umul16.c"
 16078 ;; Parameters:    Size  Location     Type
 16079 ;;  multiplier      2    0[COMMON] unsigned int 
 16080 ;;  multiplicand    2    2[COMMON] unsigned int 
 16081 ;; Auto vars:     Size  Location     Type
 16082 ;;  product         2    4[COMMON] unsigned int 
 16083 ;; Return value:  Size  Location     Type
 16084 ;;                  2    0[COMMON] unsigned int 
 16085 ;; Registers used:
 16086 ;;		wreg, status,2, status,0
 16087 ;; Tracked objects:
 16088 ;;		On entry : 1F/0
 16089 ;;		On exit  : 1F/0
 16090 ;;		Unchanged: 1F/0
 16091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16092 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16093 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16095 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16096 ;;Total ram usage:        6 bytes
 16097 ;; Hardware stack levels used: 1
 16098 ;; This function calls:
 16099 ;;		Nothing
 16100 ;; This function is called by:
 16101 ;;		i1_GenericQueue_Enqueue
 16102 ;; This function uses a non-reentrant model
 16103 ;;
 16104                           
 16105     1112                     i1___wmul:	
 16106                           ;psect for function i1___wmul
 16107                           
 16108                           
 16109                           ;incstack = 0
 16110                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 16111     1112  01F4               	clrf	i1___wmul@product
 16112     1113  01F5               	clrf	i1___wmul@product+1
 16113     1114                     i1l4439:
 16114     1114  1C70               	btfss	i1___wmul@multiplier,0
 16115     1115  291A               	goto	i1l1231
 16116     1116  0872               	movf	i1___wmul@multiplicand,w
 16117     1117  07F4               	addwf	i1___wmul@product,f
 16118     1118  0873               	movf	i1___wmul@multiplicand+1,w
 16119     1119  3DF5               	addwfc	i1___wmul@product+1,f
 16120     111A                     i1l1231:
 16121     111A  3001               	movlw	1
 16122     111B                     u347_25:
 16123     111B  35F2               	lslf	i1___wmul@multiplicand,f
 16124     111C  0DF3               	rlf	i1___wmul@multiplicand+1,f
 16125     111D  0B89               	decfsz	9,f
 16126     111E  291B               	goto	u347_25
 16127     111F  3001               	movlw	1
 16128     1120                     u348_25:
 16129     1120  36F1               	lsrf	i1___wmul@multiplier+1,f
 16130     1121  0CF0               	rrf	i1___wmul@multiplier,f
 16131     1122  0B89               	decfsz	9,f
 16132     1123  2920               	goto	u348_25
 16133     1124  0870               	movf	i1___wmul@multiplier,w
 16134     1125  0471               	iorwf	i1___wmul@multiplier+1,w
 16135     1126  1D03               	btfss	3,2
 16136     1127  2914               	goto	i1l4439
 16137     1128  0875               	movf	i1___wmul@product+1,w
 16138     1129  00F1               	movwf	?i1___wmul+1
 16139     112A  0874               	movf	i1___wmul@product,w
 16140     112B  00F0               	movwf	?i1___wmul
 16141     112C  0008               	return
 16142     112D                     __end_ofi1___wmul:
 16143                           
 16144                           	psect	text94
 16145     1490                     __ptext94:	
 16146 ;; *************** function i1___awmod *****************
 16147 ;; Defined at:
 16148 ;;		line 5 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/awmod.c"
 16149 ;; Parameters:    Size  Location     Type
 16150 ;;  divisor         2    0[COMMON] int 
 16151 ;;  dividend        2    2[COMMON] int 
 16152 ;; Auto vars:     Size  Location     Type
 16153 ;;  sign            1    6[COMMON] unsigned char 
 16154 ;;  counter         1    5[COMMON] unsigned char 
 16155 ;; Return value:  Size  Location     Type
 16156 ;;                  2    0[COMMON] int 
 16157 ;; Registers used:
 16158 ;;		wreg, status,2, status,0
 16159 ;; Tracked objects:
 16160 ;;		On entry : 1F/0
 16161 ;;		On exit  : 1F/0
 16162 ;;		Unchanged: 1F/0
 16163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16164 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16165 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16166 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;Total ram usage:        7 bytes
 16169 ;; Hardware stack levels used: 1
 16170 ;; This function calls:
 16171 ;;		Nothing
 16172 ;; This function is called by:
 16173 ;;		i1_GenericQueue_Enqueue
 16174 ;; This function uses a non-reentrant model
 16175 ;;
 16176                           
 16177     1490                     i1___awmod:	
 16178                           ;psect for function i1___awmod
 16179                           
 16180                           
 16181                           ;incstack = 0
 16182                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 16183     1490  01F6               	clrf	i1___awmod@sign
 16184     1491  1FF3               	btfss	i1___awmod@dividend+1,7
 16185     1492  2C9A               	goto	i1l4459
 16186     1493  09F2               	comf	i1___awmod@dividend,f
 16187     1494  09F3               	comf	i1___awmod@dividend+1,f
 16188     1495  0AF2               	incf	i1___awmod@dividend,f
 16189     1496  1903               	skipnz
 16190     1497  0AF3               	incf	i1___awmod@dividend+1,f
 16191     1498  01F6               	clrf	i1___awmod@sign
 16192     1499  0AF6               	incf	i1___awmod@sign,f
 16193     149A                     i1l4459:
 16194     149A  1FF1               	btfss	i1___awmod@divisor+1,7
 16195     149B  2CA1               	goto	i1l4463
 16196     149C  09F0               	comf	i1___awmod@divisor,f
 16197     149D  09F1               	comf	i1___awmod@divisor+1,f
 16198     149E  0AF0               	incf	i1___awmod@divisor,f
 16199     149F  1903               	skipnz
 16200     14A0  0AF1               	incf	i1___awmod@divisor+1,f
 16201     14A1                     i1l4463:
 16202     14A1  0870               	movf	i1___awmod@divisor,w
 16203     14A2  0471               	iorwf	i1___awmod@divisor+1,w
 16204     14A3  1903               	btfsc	3,2
 16205     14A4  2CC8               	goto	i1l4481
 16206     14A5  01F5               	clrf	i1___awmod@counter
 16207     14A6  0AF5               	incf	i1___awmod@counter,f
 16208     14A7                     i1l4471:
 16209     14A7  1BF1               	btfsc	i1___awmod@divisor+1,7
 16210     14A8  2CB3               	goto	i1l4473
 16211     14A9  3001               	movlw	1
 16212     14AA                     u353_25:
 16213     14AA  35F0               	lslf	i1___awmod@divisor,f
 16214     14AB  0DF1               	rlf	i1___awmod@divisor+1,f
 16215     14AC  0B89               	decfsz	9,f
 16216     14AD  2CAA               	goto	u353_25
 16217     14AE  3001               	movlw	1
 16218     14AF  00F4               	movwf	??i1___awmod
 16219     14B0  0874               	movf	??i1___awmod,w
 16220     14B1  07F5               	addwf	i1___awmod@counter,f
 16221     14B2  2CA7               	goto	i1l4471
 16222     14B3                     i1l4473:
 16223     14B3  0871               	movf	i1___awmod@divisor+1,w
 16224     14B4  0273               	subwf	i1___awmod@dividend+1,w
 16225     14B5  1D03               	skipz
 16226     14B6  2CB9               	goto	u355_25
 16227     14B7  0870               	movf	i1___awmod@divisor,w
 16228     14B8  0272               	subwf	i1___awmod@dividend,w
 16229     14B9                     u355_25:
 16230     14B9  1C03               	skipc
 16231     14BA  2CBF               	goto	i1l4477
 16232     14BB  0870               	movf	i1___awmod@divisor,w
 16233     14BC  02F2               	subwf	i1___awmod@dividend,f
 16234     14BD  0871               	movf	i1___awmod@divisor+1,w
 16235     14BE  3BF3               	subwfb	i1___awmod@dividend+1,f
 16236     14BF                     i1l4477:
 16237     14BF  3001               	movlw	1
 16238     14C0                     u356_25:
 16239     14C0  36F1               	lsrf	i1___awmod@divisor+1,f
 16240     14C1  0CF0               	rrf	i1___awmod@divisor,f
 16241     14C2  0B89               	decfsz	9,f
 16242     14C3  2CC0               	goto	u356_25
 16243     14C4  3001               	movlw	1
 16244     14C5  02F5               	subwf	i1___awmod@counter,f
 16245     14C6  1D03               	btfss	3,2
 16246     14C7  2CB3               	goto	i1l4473
 16247     14C8                     i1l4481:
 16248     14C8  0876               	movf	i1___awmod@sign,w
 16249     14C9  1903               	btfsc	3,2
 16250     14CA  2CD0               	goto	i1l4485
 16251     14CB  09F2               	comf	i1___awmod@dividend,f
 16252     14CC  09F3               	comf	i1___awmod@dividend+1,f
 16253     14CD  0AF2               	incf	i1___awmod@dividend,f
 16254     14CE  1903               	skipnz
 16255     14CF  0AF3               	incf	i1___awmod@dividend+1,f
 16256     14D0                     i1l4485:
 16257     14D0  0873               	movf	i1___awmod@dividend+1,w
 16258     14D1  00F1               	movwf	?i1___awmod+1
 16259     14D2  0872               	movf	i1___awmod@dividend,w
 16260     14D3  00F0               	movwf	?i1___awmod
 16261     14D4  0008               	return
 16262     14D5                     __end_ofi1___awmod:
 16263                           
 16264                           	psect	text95
 16265     1FAB                     __ptext95:	
 16266 ;; *************** function i1_GenericQueue_IsFull *****************
 16267 ;; Defined at:
 16268 ;;		line 15 in file "generic_queue.c"
 16269 ;; Parameters:    Size  Location     Type
 16270 ;;  q               2    0[COMMON] PTR struct .
 16271 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 16272 ;; Auto vars:     Size  Location     Type
 16273 ;;		None
 16274 ;; Return value:  Size  Location     Type
 16275 ;;                  2    0[COMMON] int 
 16276 ;; Registers used:
 16277 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16278 ;; Tracked objects:
 16279 ;;		On entry : 1F/0
 16280 ;;		On exit  : 1F/0
 16281 ;;		Unchanged: 1F/0
 16282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16283 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16285 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16286 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16287 ;;Total ram usage:        4 bytes
 16288 ;; Hardware stack levels used: 1
 16289 ;; This function calls:
 16290 ;;		Nothing
 16291 ;; This function is called by:
 16292 ;;		i1_GenericQueue_Enqueue
 16293 ;; This function uses a non-reentrant model
 16294 ;;
 16295                           
 16296     1FAB                     i1_GenericQueue_IsFull:	
 16297                           ;psect for function i1_GenericQueue_IsFull
 16298                           
 16299                           
 16300                           ;generic_queue.c: 16:     return (q->size == 15);
 16301                           
 16302                           ;incstack = 0
 16303                           ; Regs used in i1_GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
 16304     1FAB  0870               	movf	i1GenericQueue_IsFull@q,w
 16305     1FAC  3E5E               	addlw	94
 16306     1FAD  0086               	movwf	6
 16307     1FAE  3000               	movlw	0
 16308     1FAF  3D71               	addwfc	i1GenericQueue_IsFull@q+1,w
 16309     1FB0  0087               	movwf	7
 16310     1FB1  300F               	movlw	15
 16311     1FB2  0601               	xorwf	1,w
 16312     1FB3  1D03               	btfss	3,2
 16313     1FB4  2FB7               	goto	u344_20
 16314     1FB5  3001               	movlw	1
 16315     1FB6  2FB8               	goto	u345_20
 16316     1FB7                     u344_20:
 16317     1FB7  3000               	movlw	0
 16318     1FB8                     u345_20:
 16319     1FB8  00F2               	movwf	??i1_GenericQueue_IsFull
 16320     1FB9  01F3               	clrf	??i1_GenericQueue_IsFull+1
 16321     1FBA  0872               	movf	??i1_GenericQueue_IsFull,w
 16322     1FBB  00F0               	movwf	?i1_GenericQueue_IsFull
 16323     1FBC  0873               	movf	??i1_GenericQueue_IsFull+1,w
 16324     1FBD  00F1               	movwf	?i1_GenericQueue_IsFull+1
 16325     1FBE  0008               	return
 16326     1FBF                     __end_ofi1_GenericQueue_IsFull:
 16327                           
 16328                           	psect	text96
 16329     1EC8                     __ptext96:	
 16330 ;; *************** function _SysTime_GetCurrentTimeMs *****************
 16331 ;; Defined at:
 16332 ;;		line 19 in file "systime.c"
 16333 ;; Parameters:    Size  Location     Type
 16334 ;;		None
 16335 ;; Auto vars:     Size  Location     Type
 16336 ;;		None
 16337 ;; Return value:  Size  Location     Type
 16338 ;;                  4    0[COMMON] unsigned long 
 16339 ;; Registers used:
 16340 ;;		wreg
 16341 ;; Tracked objects:
 16342 ;;		On entry : 1F/2
 16343 ;;		On exit  : 1F/2
 16344 ;;		Unchanged: 0/0
 16345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16349 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16350 ;;Total ram usage:        4 bytes
 16351 ;; Hardware stack levels used: 1
 16352 ;; This function calls:
 16353 ;;		Nothing
 16354 ;; This function is called by:
 16355 ;;		_PS2Keyboard_DataInterrupt
 16356 ;;		_PS2Keyboard_ClockInterrupt
 16357 ;; This function uses a non-reentrant model
 16358 ;;
 16359                           
 16360     1EC8                     _SysTime_GetCurrentTimeMs:	
 16361                           ;psect for function _SysTime_GetCurrentTimeMs
 16362                           
 16363                           
 16364                           ;systime.c: 21:     return timeMs;
 16365                           
 16366                           ;incstack = 0
 16367                           ; Regs used in _SysTime_GetCurrentTimeMs: [wreg]
 16368     1EC8  082B               	movf	(_timeMs+3)^(0+256),w
 16369     1EC9  00F3               	movwf	?_SysTime_GetCurrentTimeMs+3
 16370     1ECA  082A               	movf	(_timeMs+2)^(0+256),w
 16371     1ECB  00F2               	movwf	?_SysTime_GetCurrentTimeMs+2
 16372     1ECC  0829               	movf	(_timeMs+1)^(0+256),w
 16373     1ECD  00F1               	movwf	?_SysTime_GetCurrentTimeMs+1
 16374     1ECE  0828               	movf	_timeMs^(0+256),w
 16375     1ECF  00F0               	movwf	?_SysTime_GetCurrentTimeMs
 16376     1ED0  0008               	return
 16377     1ED1                     __end_of_SysTime_GetCurrentTimeMs:
 16378                           
 16379                           	psect	text97
 16380     11D3                     __ptext97:	
 16381 ;; *************** function _EUSART_Transmit_ISR *****************
 16382 ;; Defined at:
 16383 ;;		line 197 in file "mcc_generated_files/eusart.c"
 16384 ;; Parameters:    Size  Location     Type
 16385 ;;		None
 16386 ;; Auto vars:     Size  Location     Type
 16387 ;;		None
 16388 ;; Return value:  Size  Location     Type
 16389 ;;                  1    wreg      void 
 16390 ;; Registers used:
 16391 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16392 ;; Tracked objects:
 16393 ;;		On entry : 1F/2
 16394 ;;		On exit  : 1F/1
 16395 ;;		Unchanged: 0/0
 16396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16399 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16400 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;Total ram usage:        1 bytes
 16402 ;; Hardware stack levels used: 1
 16403 ;; This function calls:
 16404 ;;		Nothing
 16405 ;; This function is called by:
 16406 ;;		_EUSART_Initialize
 16407 ;;		_INTERRUPT_InterruptManager
 16408 ;; This function uses a non-reentrant model
 16409 ;;
 16410                           
 16411     11D3                     _EUSART_Transmit_ISR:	
 16412                           ;psect for function _EUSART_Transmit_ISR
 16413                           
 16414                           
 16415                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 16416                           
 16417                           ;incstack = 0
 16418                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16419     11D3  3008               	movlw	8
 16420     11D4  0021               	movlb	1	; select bank1
 16421     11D5  026F               	subwf	_eusartTxBufferRemaining^(0+128),w
 16422     11D6  1803               	skipnc
 16423     11D7  29F0               	goto	i1l267
 16424                           
 16425                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 16426     11D8  0022               	movlb	2	; select bank2
 16427     11D9  0866               	movf	_eusartTxTail^(0+256),w
 16428     11DA  3EB8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 16429     11DB  0086               	movwf	6
 16430     11DC  3001               	movlw	1	; select bank3/4
 16431     11DD  0087               	movwf	7
 16432     11DE  0801               	movf	1,w
 16433     11DF  0023               	movlb	3	; select bank3
 16434     11E0  009A               	movwf	26	;volatile
 16435     11E1  3001               	movlw	1
 16436     11E2  00F0               	movwf	??_EUSART_Transmit_ISR
 16437     11E3  0870               	movf	??_EUSART_Transmit_ISR,w
 16438     11E4  0022               	movlb	2	; select bank2
 16439     11E5  07E6               	addwf	_eusartTxTail^(0+256),f	;volatile
 16440                           
 16441                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 16442     11E6  3008               	movlw	8
 16443     11E7  0266               	subwf	_eusartTxTail^(0+256),w
 16444     11E8  1803               	btfsc	3,0
 16445                           
 16446                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
 16447     11E9  01E6               	clrf	_eusartTxTail^(0+256)	;volatile
 16448                           
 16449                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
 16450     11EA  3001               	movlw	1
 16451     11EB  00F0               	movwf	??_EUSART_Transmit_ISR
 16452     11EC  0870               	movf	??_EUSART_Transmit_ISR,w
 16453     11ED  0021               	movlb	1	; select bank1
 16454     11EE  07EF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 16455                           
 16456                           ;mcc_generated_files/eusart.c: 209:     }
 16457     11EF  0008               	return
 16458     11F0                     i1l267:	
 16459                           ;mcc_generated_files/eusart.c: 210:     else
 16460                           
 16461                           
 16462                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
 16463     11F0  1211               	bcf	17,4	;volatile
 16464     11F1  0008               	return
 16465     11F2                     __end_of_EUSART_Transmit_ISR:
 16466                           
 16467                           	psect	text98
 16468     135E                     __ptext98:	
 16469 ;; *************** function _EUSART_Receive_ISR *****************
 16470 ;; Defined at:
 16471 ;;		line 216 in file "mcc_generated_files/eusart.c"
 16472 ;; Parameters:    Size  Location     Type
 16473 ;;		None
 16474 ;; Auto vars:     Size  Location     Type
 16475 ;;		None
 16476 ;; Return value:  Size  Location     Type
 16477 ;;                  1    wreg      void 
 16478 ;; Registers used:
 16479 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16480 ;; Tracked objects:
 16481 ;;		On entry : 1F/2
 16482 ;;		On exit  : 0/0
 16483 ;;		Unchanged: 0/0
 16484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16489 ;;Total ram usage:        0 bytes
 16490 ;; Hardware stack levels used: 1
 16491 ;; Hardware stack levels required when called: 2
 16492 ;; This function calls:
 16493 ;;		NULL
 16494 ;;		_EUSART_DefaultErrorHandler
 16495 ;;		_EUSART_DefaultFramingErrorHandler
 16496 ;;		_EUSART_DefaultOverrunErrorHandler
 16497 ;;		_EUSART_RxDataHandler
 16498 ;; This function is called by:
 16499 ;;		_EUSART_Initialize
 16500 ;;		_INTERRUPT_InterruptManager
 16501 ;; This function uses a non-reentrant model
 16502 ;;
 16503                           
 16504     135E                     _EUSART_Receive_ISR:	
 16505                           ;psect for function _EUSART_Receive_ISR
 16506                           
 16507                           
 16508                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 16509                           
 16510                           ;incstack = 0
 16511                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16512     135E  0021               	movlb	1	; select bank1
 16513     135F  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16514     1360  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16515     1361  0086               	movwf	6
 16516     1362  3001               	movlw	1	; select bank3/4
 16517     1363  0087               	movwf	7
 16518     1364  0181               	clrf	1
 16519                           
 16520                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
 16521     1365  0023               	movlb	3	; select bank3
 16522     1366  1D1D               	btfss	29,2	;volatile
 16523     1367  2B75               	goto	i1l5725
 16524                           
 16525                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 16526     1368  0021               	movlb	1	; select bank1
 16527     1369  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16528     136A  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16529     136B  0086               	movwf	6
 16530     136C  3001               	movlw	1	; select bank3/4
 16531     136D  0087               	movwf	7
 16532     136E  1481               	bsf	1,1
 16533                           
 16534                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
 16535     136F  0022               	movlb	2	; select bank2
 16536     1370  0845               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 16537     1371  008A               	movwf	10
 16538     1372  0844               	movf	_EUSART_FramingErrorHandler^(0+256),w
 16539     1373  000A               	callw
 16540     1374  3193               	pagesel	$
 16541     1375                     i1l5725:
 16542                           
 16543                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
 16544     1375  0023               	movlb	3	; select bank3
 16545     1376  1C9D               	btfss	29,1	;volatile
 16546     1377  2B85               	goto	i1l5731
 16547                           
 16548                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 16549     1378  0021               	movlb	1	; select bank1
 16550     1379  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16551     137A  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16552     137B  0086               	movwf	6
 16553     137C  3001               	movlw	1	; select bank3/4
 16554     137D  0087               	movwf	7
 16555     137E  1501               	bsf	1,2
 16556                           
 16557                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
 16558     137F  0022               	movlb	2	; select bank2
 16559     1380  0843               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 16560     1381  008A               	movwf	10
 16561     1382  0842               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 16562     1383  000A               	callw
 16563     1384  3193               	pagesel	$
 16564     1385                     i1l5731:
 16565                           
 16566                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
 16567     1385  0021               	movlb	1	; select bank1
 16568     1386  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16569     1387  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16570     1388  0086               	movwf	6
 16571     1389  3001               	movlw	1	; select bank3/4
 16572     138A  0087               	movwf	7
 16573     138B  0801               	movf	1,w
 16574     138C  1903               	btfsc	3,2
 16575     138D  2B95               	goto	i1l5735
 16576                           
 16577                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
 16578     138E  0022               	movlb	2	; select bank2
 16579     138F  0841               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 16580     1390  008A               	movwf	10
 16581     1391  0840               	movf	_EUSART_ErrorHandler^(0+256),w
 16582     1392  000A               	callw
 16583     1393  3193               	pagesel	$
 16584                           
 16585                           ;mcc_generated_files/eusart.c: 233:     } else {
 16586     1394  0008               	return
 16587     1395                     i1l5735:
 16588                           
 16589                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
 16590     1395  3190  20AF         	fcall	_EUSART_RxDataHandler
 16591     1397  0008               	return
 16592     1398                     __end_of_EUSART_Receive_ISR:
 16593                           
 16594                           	psect	text99
 16595     07FB                     __ptext99:	
 16596 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 16597 ;; Defined at:
 16598 ;;		line 252 in file "mcc_generated_files/eusart.c"
 16599 ;; Parameters:    Size  Location     Type
 16600 ;;		None
 16601 ;; Auto vars:     Size  Location     Type
 16602 ;;		None
 16603 ;; Return value:  Size  Location     Type
 16604 ;;                  1    wreg      void 
 16605 ;; Registers used:
 16606 ;;		None
 16607 ;; Tracked objects:
 16608 ;;		On entry : 1F/2
 16609 ;;		On exit  : 1F/3
 16610 ;;		Unchanged: 0/0
 16611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16616 ;;Total ram usage:        0 bytes
 16617 ;; Hardware stack levels used: 1
 16618 ;; This function calls:
 16619 ;;		Nothing
 16620 ;; This function is called by:
 16621 ;;		_EUSART_Initialize
 16622 ;;		_EUSART_Receive_ISR
 16623 ;; This function uses a non-reentrant model
 16624 ;;
 16625                           
 16626     07FB                     _EUSART_DefaultOverrunErrorHandler:	
 16627                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 16628                           
 16629                           
 16630                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
 16631                           
 16632                           ;incstack = 0
 16633                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 16634     07FB  0023               	movlb	3	; select bank3
 16635     07FC  121D               	bcf	29,4	;volatile
 16636                           
 16637                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
 16638     07FD  161D               	bsf	29,4	;volatile
 16639     07FE  0008               	return
 16640     07FF                     __end_of_EUSART_DefaultOverrunErrorHandler:
 16641                           
 16642                           	psect	text100
 16643     1E67                     __ptext100:	
 16644 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 16645 ;; Defined at:
 16646 ;;		line 250 in file "mcc_generated_files/eusart.c"
 16647 ;; Parameters:    Size  Location     Type
 16648 ;;		None
 16649 ;; Auto vars:     Size  Location     Type
 16650 ;;		None
 16651 ;; Return value:  Size  Location     Type
 16652 ;;                  1    wreg      void 
 16653 ;; Registers used:
 16654 ;;		None
 16655 ;; Tracked objects:
 16656 ;;		On entry : 1F/2
 16657 ;;		On exit  : 1F/2
 16658 ;;		Unchanged: 1F/0
 16659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16664 ;;Total ram usage:        0 bytes
 16665 ;; Hardware stack levels used: 1
 16666 ;; This function calls:
 16667 ;;		Nothing
 16668 ;; This function is called by:
 16669 ;;		_EUSART_Initialize
 16670 ;;		_EUSART_Receive_ISR
 16671 ;; This function uses a non-reentrant model
 16672 ;;
 16673                           
 16674     1E67                     _EUSART_DefaultFramingErrorHandler:	
 16675                           ;psect for function _EUSART_DefaultFramingErrorHandler
 16676                           
 16677                           
 16678                           ;incstack = 0
 16679                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 16680     1E67  0008               	return
 16681     1E68                     __end_of_EUSART_DefaultFramingErrorHandler:
 16682                           
 16683                           	psect	text101
 16684     1E68                     __ptext101:	
 16685 ;; *************** function _EUSART_DefaultErrorHandler *****************
 16686 ;; Defined at:
 16687 ;;		line 260 in file "mcc_generated_files/eusart.c"
 16688 ;; Parameters:    Size  Location     Type
 16689 ;;		None
 16690 ;; Auto vars:     Size  Location     Type
 16691 ;;		None
 16692 ;; Return value:  Size  Location     Type
 16693 ;;                  1    wreg      void 
 16694 ;; Registers used:
 16695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16696 ;; Tracked objects:
 16697 ;;		On entry : 1F/2
 16698 ;;		On exit  : 1F/2
 16699 ;;		Unchanged: 0/0
 16700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16705 ;;Total ram usage:        0 bytes
 16706 ;; Hardware stack levels used: 1
 16707 ;; Hardware stack levels required when called: 1
 16708 ;; This function calls:
 16709 ;;		_EUSART_RxDataHandler
 16710 ;; This function is called by:
 16711 ;;		_EUSART_Initialize
 16712 ;;		_EUSART_Receive_ISR
 16713 ;; This function uses a non-reentrant model
 16714 ;;
 16715                           
 16716     1E68                     _EUSART_DefaultErrorHandler:	
 16717                           ;psect for function _EUSART_DefaultErrorHandler
 16718                           
 16719                           
 16720                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
 16721                           
 16722                           ;incstack = 0
 16723                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16724     1E68  3190  20AF         	fcall	_EUSART_RxDataHandler
 16725     1E6A  0008               	return
 16726     1E6B                     __end_of_EUSART_DefaultErrorHandler:
 16727                           
 16728                           	psect	text102
 16729     10AF                     __ptext102:	
 16730 ;; *************** function _EUSART_RxDataHandler *****************
 16731 ;; Defined at:
 16732 ;;		line 240 in file "mcc_generated_files/eusart.c"
 16733 ;; Parameters:    Size  Location     Type
 16734 ;;		None
 16735 ;; Auto vars:     Size  Location     Type
 16736 ;;		None
 16737 ;; Return value:  Size  Location     Type
 16738 ;;                  1    wreg      void 
 16739 ;; Registers used:
 16740 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16741 ;; Tracked objects:
 16742 ;;		On entry : 1C/1
 16743 ;;		On exit  : 1F/2
 16744 ;;		Unchanged: 0/0
 16745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16748 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16749 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16750 ;;Total ram usage:        1 bytes
 16751 ;; Hardware stack levels used: 1
 16752 ;; This function calls:
 16753 ;;		Nothing
 16754 ;; This function is called by:
 16755 ;;		_EUSART_Receive_ISR
 16756 ;;		_EUSART_DefaultErrorHandler
 16757 ;; This function uses a non-reentrant model
 16758 ;;
 16759                           
 16760     10AF                     _EUSART_RxDataHandler:	
 16761                           ;psect for function _EUSART_RxDataHandler
 16762                           
 16763                           
 16764                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
 16765                           
 16766                           ;incstack = 0
 16767                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 16768     10AF  0021               	movlb	1	; select bank1
 16769     10B0  086E               	movf	_eusartRxHead^(0+128),w
 16770     10B1  3EB0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 16771     10B2  0086               	movwf	6
 16772     10B3  3001               	movlw	1	; select bank3/4
 16773     10B4  0087               	movwf	7
 16774     10B5  0023               	movlb	3	; select bank3
 16775     10B6  0819               	movf	25,w	;volatile
 16776     10B7  0081               	movwf	1
 16777     10B8  3001               	movlw	1
 16778     10B9  00F0               	movwf	??_EUSART_RxDataHandler
 16779     10BA  0870               	movf	??_EUSART_RxDataHandler,w
 16780     10BB  0021               	movlb	1	; select bank1
 16781     10BC  07EE               	addwf	_eusartRxHead^(0+128),f	;volatile
 16782                           
 16783                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16784     10BD  3008               	movlw	8
 16785     10BE  026E               	subwf	_eusartRxHead^(0+128),w
 16786     10BF  1803               	btfsc	3,0
 16787                           
 16788                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
 16789     10C0  01EE               	clrf	_eusartRxHead^(0+128)	;volatile
 16790                           
 16791                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
 16792     10C1  3001               	movlw	1
 16793     10C2  00F0               	movwf	??_EUSART_RxDataHandler
 16794     10C3  0870               	movf	??_EUSART_RxDataHandler,w
 16795     10C4  0022               	movlb	2	; select bank2
 16796     10C5  07E4               	addwf	_eusartRxCount^(0+256),f	;volatile
 16797     10C6  0008               	return
 16798     10C7                     __end_of_EUSART_RxDataHandler:
 16799     007E                     btemp	set	126	;btemp
 16800     007E                     int$flags	set	126
 16801     007E                     wtemp0	set	126
 16802     232C                     
 16803                           	psect	config
 16804                           
 16805                           ;Config register CONFIG1 @ 0x8007
 16806                           ;	Oscillator Selection Bits
 16807                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 16808                           ;	Watchdog Timer Enable
 16809                           ;	WDTE = OFF, WDT disabled
 16810                           ;	Power-up Timer Enable
 16811                           ;	PWRTE = OFF, PWRT disabled
 16812                           ;	MCLR Pin Function Select
 16813                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 16814                           ;	Flash Program Memory Code Protection
 16815                           ;	CP = OFF, Program memory code protection is disabled
 16816                           ;	Brown-out Reset Enable
 16817                           ;	BOREN = OFF, Brown-out Reset disabled
 16818                           ;	Clock Out Enable
 16819                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 16820                           ;	Internal/External Switchover Mode
 16821                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 16822                           ;	Fail-Safe Clock Monitor Enable
 16823                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 16824     8007                     	org	32775
 16825     8007  39E4               	dw	14820
 16826                           
 16827                           ;Config register CONFIG2 @ 0x8008
 16828                           ;	Flash Memory Self-Write Protection
 16829                           ;	WRT = OFF, Write protection off
 16830                           ;	CPU System Clock Selection Bit
 16831                           ;	CPUDIV = NOCLKDIV, NO CPU system divide
 16832                           ;	USB Low Speed Clock Selection bit
 16833                           ;	USBLSCLK = 48MHz, System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
 16834                           ;	PLL Multiplier Selection Bit
 16835                           ;	PLLMULT = 3x, 3x Output Frequency Selected
 16836                           ;	PLL Enable Bit
 16837                           ;	PLLEN = ENABLED, 3x or 4x PLL Enabled
 16838                           ;	Stack Overflow/Underflow Reset Enable
 16839                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 16840                           ;	Brown-out Reset Voltage Selection
 16841                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 16842                           ;	Low-Power Brown Out Reset
 16843                           ;	LPBOR = OFF, Low-Power BOR is disabled
 16844                           ;	Low-Voltage Programming Enable
 16845                           ;	LVP = ON, Low-voltage programming enabled
 16846     8008                     	org	32776
 16847     8008  3FCF               	dw	16335

Data Sizes:
    Strings     0
    Constant    587
    Data        6
    BSS         135
    Persistent  36
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     19      32
    BANK1            72     65      72
    BANK2            79      0      78
    BANK3            80      0      47
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           12      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    APP_KeyboardTasks@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    APP_KeyboardUpdateState@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), NULL(), 

    GenericQueue_Contains@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode_2855(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2864(BANK1[1]), 

    GenericQueue_Contains@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_CopyToArray@array	PTR void  size(1) Largest target is 8
		 -> inputReport(BANK1[8]), 

    GenericQueue_CopyToArray@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_Dequeue@item	PTR void  size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), 

    GenericQueue_Dequeue@q	PTR struct . size(2) Largest target is 95
		 -> keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Enqueue@item	PTR const void  size(2) Largest target is 3
		 -> APP_KeyboardUpdateState@usbHidCode_2855(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2864(BANK1[1]), keyboardScanCode(BANK2[3]), 

    GenericQueue_Enqueue@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Init@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsEmpty@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsFull@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Remove@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2856(BANK1[1]), 

    GenericQueue_Remove@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    inPipes$pSrc$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes$pSrc$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes$pSrc$wRam	PTR unsigned short  size(2) Largest target is 0

    inPipes$pSrc$wRom	PTR const unsigned short  size(2) Largest target is 0

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), NULL(), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), 

    IOCAF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), NULL(), 

    IOCAF5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), 

    keyboard$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    keyboard$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    Log_Message@buf	PTR const unsigned char  size(1) Largest target is 6
		 -> main@scanCodeStr(BANK1[6]), 

    Log_UtilityConvertByteToHex@buf	PTR unsigned char  size(1) Largest target is 6
		 -> main@scanCodeStr(BANK1[6]), 

    main@hndlScanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    memcmp@l	PTR const unsigned char  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@r	PTR const unsigned char  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2855(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2856(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2864(BANK1[1]), 

    memcmp@vl	PTR const void  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@vr	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2855(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2856(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2864(BANK1[1]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    memcpy@d1	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2855(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2864(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK2[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2855(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2864(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK2[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memset@dest	PTR void  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    outPipes$pDst$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes$pDst$wRam	PTR unsigned short  size(2) Largest target is 0

    outPipes$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), NULL(NULL[0]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pDst	PTR volatile unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    PS2Keyboard_GetScanCode@scanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), 

    PS2USB_ScanCodeToUSBHID@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    S2611$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S2611$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S736$bRam	PTR unsigned char  size(2) Largest target is 0

    S736$bRom	PTR const unsigned char  size(2) Largest target is 0

    S736$wRam	PTR unsigned short  size(2) Largest target is 0

    S736$wRom	PTR const unsigned short  size(2) Largest target is 0

    S760$bRam	PTR unsigned char  size(2) Largest target is 0

    S760$wRam	PTR unsigned short  size(2) Largest target is 0

    S770$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    sp__memcpy	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), NULL(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 41
		 -> configDescriptor1(CODE[41]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(2) Largest target is 52
		 -> sd000(CODE[4]), sd001(CODE[52]), sd002(CODE[14]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBTransferOnePacket@data	PTR unsigned char  size(2) Largest target is 8
		 -> inputReport(BANK1[8]), outputReport(BANK2[1]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), USBActiveConfiguration(BANK0[1]), USTATcopy(BANK0[1]), 
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _USBDeviceTasks->_USBSuspend
    _USBDeviceTasks->_USBWakeFromSuspend
    _USBCtrlEPService->_USBCtrlTrfOutHandler
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _USBCheckHIDRequest->_USBHIDCBSetIdleRateHandler
    _APP_KeyboardInit->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    i1_APP_KeyboardProcessOutputReport->i1_PS2Keyboard_SendCommand
    _PS2Keyboard_DataInterrupt->_SysTime_GetCurrentTimeMs
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    i1_GenericQueue_Enqueue->i1_memcpy
    i1_memcpy->i1___wmul
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCtrlTrfSetupHandler->_USBCheckStdRequest
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    _PS2Keyboard_ClockInterrupt->i1_GenericQueue_Enqueue
    i1_GenericQueue_Enqueue->i1_memcpy

Critical Paths under _main in BANK1

    _main->_APP_KeyboardTasks
    _SysTime_Init->_TMR2_SetInterruptHandler
    _SYSTEM_Initialize->_USBDeviceInit
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF5_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _PS2Keyboard_Init->_GenericQueue_Init
    _PS2Keyboard_GetScanCode->_GenericQueue_Dequeue
    _GenericQueue_Dequeue->_memcpy
    _Log_UtilityConvertByteToHex->___bmul
    _Log_Message->_EUSART_Write
    _APP_KeyboardTasks->_APP_KeyboardUpdateState
    _GenericQueue_CopyToArray->_memcpy
    _APP_KeyboardUpdateState->_GenericQueue_Remove
    _GenericQueue_Remove->_memcpy
    _GenericQueue_Enqueue->_memcpy
    _memcpy->___wmul
    _GenericQueue_Contains->_memcmp
    _memcmp->___wmul
    ___wmul->___awmod
    _APP_KeyboardProcessOutputReport->_PS2Keyboard_SendCommand

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   46341
                                             48 BANK1     17    17      0
                  _APP_KeyboardTasks
                        _Log_Message
        _Log_UtilityConvertByteToHex
            _PS2Keyboard_GetScanCode
                   _PS2Keyboard_Init
                  _SYSTEM_Initialize
                       _SysTime_Init
 ---------------------------------------------------------------------------------
 (1) _SysTime_Init                                         0     0      0     200
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1427
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                    _USBDeviceAttach
                      _USBDeviceInit
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        8     8      0     272
                                              0 BANK1      8     8      0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     200
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     400
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     555
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_Init                                     0     0      0     814
                  _GenericQueue_Init
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF5_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Init                                    4     0      4     414
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_GetScanCode                              2     2      0    7991
                                             31 BANK1      2     2      0
               _GenericQueue_Dequeue
               _GenericQueue_IsEmpty
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Dequeue                                 7     4      3    7530
                                             24 BANK1      7     4      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _Log_UtilityConvertByteToHex                          6     4      2     689
                                              4 BANK1      6     4      2
                             ___bmul
                            _hex2str
 ---------------------------------------------------------------------------------
 (2) _hex2str                                              1     1      0      88
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Log_Message                                          4     3      1     259
                                              2 BANK1      4     3      1
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (2) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     2      0      44
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APP_KeyboardTasks                                    7     7      0   34408
                                             41 BANK1      7     7      0
    _APP_KeyboardProcessOutputReport
            _APP_KeyboardUpdateState
           _GenericQueue_CopyToArray
               _USBTransferOnePacket
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     634
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                11     7      4    1099
                                              0 BANK1     11     7      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_CopyToArray                             9     6      3    7445
                                             24 BANK1      9     6      3
                            ___awmod
                             ___bmul
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     245
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardUpdateState                              8     8      0   24869
                                             33 BANK1      8     8      0
              _GenericQueue_Contains
               _GenericQueue_Enqueue
                _GenericQueue_Remove
         _PS2Keyboard_GetLastCommand
            _PS2Keyboard_SendCommand
            _PS2USB_ScanCodeToUSBHID
 ---------------------------------------------------------------------------------
 (3) _PS2USB_ScanCodeToUSBHID                              1     1      0     210
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_GetLastCommand                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Remove                                  9     6      3    8757
                                             24 BANK1      9     6      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Enqueue                                 7     3      4    7720
                                             24 BANK1      7     3      4
                _GenericQueue_IsFull
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6    1400
                                             13 BANK1     11     5      6
                            ___awmod (ARG)
                             ___bmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _GenericQueue_IsFull                                  4     2      2     111
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Contains                                8     5      3    7047
                                             22 BANK1      8     5      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
 ---------------------------------------------------------------------------------
 (4) _memcmp                                               9     4      5     715
                                             13 BANK1      9     4      5
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3656
                                              7 BANK1      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1720
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_IsEmpty                                 4     2      2     378
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardProcessOutputReport                      0     0      0      22
            _PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_SendCommand                              1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0   31710
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
                     _USBDeviceTasks
 ---------------------------------------------------------------------------------
 (6) _USBDeviceTasks                                       2     2      0   30454
                                             17 BANK0      2     2      0
          _USBCtrlEPAllowStatusStage
                   _USBCtrlEPService
      _USBIncrement1msInternalTimers
                    _USBStallHandler
                         _USBSuspend
                 _USBWakeFromSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
                    i1_USBDeviceInit
 ---------------------------------------------------------------------------------
 (7) i1_USBDeviceInit                                      8     8      0     272
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (7) _USBWakeFromSuspend                                   1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USBSuspend                                           1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USBStallHandler                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _USBIncrement1msInternalTimers                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _USBCtrlEPService                                     1     1      0   17881
                                             16 BANK0      1     1      0
                _USBCtrlTrfInHandler
               _USBCtrlTrfOutHandler
             _USBCtrlTrfSetupHandler
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfSetupHandler                               1     1      0   17309
                                             15 BANK0      1     1      0
                 _USBCheckStdRequest
           _USBCtrlEPServiceComplete
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (9) _USBCtrlEPServiceComplete                             4     4      0      92
                                              7 COMMON     4     4      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPAllowDataStage                             4     4      0      92
                                              3 COMMON     4     4      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (9) _USBCheckStdRequest                                   2     2      0   13132
                                             13 BANK0      2     2      0
            _USBStdFeatureReqHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
                _USBStdSetCfgHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (10) _USBStdSetCfgHandler                                 5     5      0    4445
                                             13 COMMON     1     1      0
                                              6 BANK0      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                           i1_memset
 ---------------------------------------------------------------------------------
 (11) i1_memset                                            7     3      4     200
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) _USBStdGetStatusHandler                              4     4      0      46
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (10) _USBStdGetDscHandler                                 3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _USBStdFeatureReqHandler                             7     7      0    4556
                                              6 BANK0      7     7      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USER_USB_CALLBACK_EVENT_HANDLER                      6     0      6    4085
                                              0 BANK0      6     0      6
                   _APP_KeyboardInit
                 _USBCheckHIDRequest
 ---------------------------------------------------------------------------------
 (8) _USBCheckHIDRequest                                   2     2      0     133
                                              4 COMMON     2     2      0
         _USBHIDCBSetIdleRateHandler
           _USBHIDCBSetReportHandler
 ---------------------------------------------------------------------------------
 (9) _USBHIDCBSetReportHandler                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _USBHIDCBSetIdleRateHandler                           4     3      1     133
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (8) _APP_KeyboardInit                                     0     0      0    1260
                  _USBEnableEndpoint
                i1_GenericQueue_Init
             i1_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (9) i1_USBTransferOnePacket                              11     7      4     454
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (9) i1_GenericQueue_Init                                  4     0      4     162
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (9) _USBEnableEndpoint                                    6     5      1     644
                                              7 COMMON     6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (10) _USBConfigureEndpoint                                7     6      1     400
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfOutHandler                                 4     4      0     136
                                             10 COMMON     4     4      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (9) _USBCtrlTrfRxService                                  6     6      0     136
                                              4 COMMON     6     6      0
          _USBCtrlEPAllowStatusStage
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPAllowStatusStage                           4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfInHandler                                  5     5      0     137
                                              3 COMMON     5     5      0
                _USBCtrlTrfTxService
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (10) _USBHIDCBSetReportComplete                           0     0      0      22
  i1_APP_KeyboardProcessOutputReport
 ---------------------------------------------------------------------------------
 (11) i1_APP_KeyboardProcessOutputReport                   0     0      0      22
          i1_PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (12) i1_PS2Keyboard_SendCommand                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBCtrlTrfTxService                                 3     3      0      92
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             0     0      0       0
                                NULL *
                   _SysTimeInterrupt *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SysTimeInterrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0    1256
                         _IOCAF4_ISR
                         _IOCAF5_ISR
 ---------------------------------------------------------------------------------
 (7) _IOCAF5_ISR                                           0     0      0       0
                                NULL *
     _IOCAF5_DefaultInterruptHandler *
          _PS2Keyboard_DataInterrupt *
 ---------------------------------------------------------------------------------
 (8) _PS2Keyboard_DataInterrupt                            0     0      0       0
           _SysTime_GetCurrentTimeMs
 ---------------------------------------------------------------------------------
 (8) _IOCAF5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _IOCAF4_ISR                                           0     0      0    1256
                                NULL *
     _IOCAF4_DefaultInterruptHandler *
         _PS2Keyboard_ClockInterrupt *
 ---------------------------------------------------------------------------------
 (8) _PS2Keyboard_ClockInterrupt                           6     6      0    1256
                                             12 COMMON     2     2      0
                                             12 BANK0      4     4      0
           _SysTime_GetCurrentTimeMs
             i1_GenericQueue_Enqueue
 ---------------------------------------------------------------------------------
 (9) i1_GenericQueue_Enqueue                               7     3      4    1188
                                              5 BANK0      7     3      4
              i1_GenericQueue_IsFull
                          i1___awmod
                           i1___wmul
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (8) i1_memcpy                                            11     5      6     299
                                              6 COMMON     6     0      6
                                              0 BANK0      5     5      0
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) i1___awmod                                           7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) i1_GenericQueue_IsFull                               4     2      2      48
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (9) _SysTime_GetCurrentTimeMs                             4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _IOCAF4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_KeyboardTasks
     _APP_KeyboardProcessOutputReport
       _PS2Keyboard_SendCommand
     _APP_KeyboardUpdateState
       _GenericQueue_Contains
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
           ___awmod (ARG)
         _memcmp
           ___wmul (ARG)
       _GenericQueue_Enqueue
         _GenericQueue_IsFull
         ___awmod
         ___wmul
         _memcpy
           ___awmod (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
       _GenericQueue_Remove
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
         _memcmp
         _memcpy
       _PS2Keyboard_GetLastCommand
       _PS2Keyboard_SendCommand
       _PS2USB_ScanCodeToUSBHID
     _GenericQueue_CopyToArray
       ___awmod
       ___bmul
       ___wmul
       _memcpy
     _USBTransferOnePacket
     _memset
   _Log_Message
     _EUSART_Write
     _EUSART_is_tx_ready
   _Log_UtilityConvertByteToHex
     ___bmul
     _hex2str
   _PS2Keyboard_GetScanCode
     _GenericQueue_Dequeue
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
       _memcpy
     _GenericQueue_IsEmpty
   _PS2Keyboard_Init
     _GenericQueue_Init
     _IOCAF4_SetInterruptHandler
     _IOCAF5_SetInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
       _IOCAF5_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _USBDeviceAttach
     _USBDeviceInit
     _WDT_Initialize
   _SysTime_Init
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       NULL(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       _PS2Keyboard_ClockInterrupt *
         _SysTime_GetCurrentTimeMs
         i1_GenericQueue_Enqueue
           i1_GenericQueue_IsFull
           i1___awmod
           i1___wmul
           i1_memcpy
             i1___wmul (ARG)
     _IOCAF5_ISR
       NULL(Fake) *
       _IOCAF5_DefaultInterruptHandler *
       _PS2Keyboard_DataInterrupt *
         _SysTime_GetCurrentTimeMs
   _TMR2_ISR *
     NULL(Fake) *
     _SysTimeInterrupt *
     _TMR2_DefaultInterruptHandler *
   _USBDeviceTasks *
     _USBCtrlEPAllowStatusStage
     _USBCtrlEPService
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
         _USBHIDCBSetReportComplete *
           i1_APP_KeyboardProcessOutputReport
             i1_PS2Keyboard_SendCommand
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
           _USBHIDCBSetReportComplete *
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _APP_KeyboardInit
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i1_GenericQueue_Init
                 i1_USBTransferOnePacket
               _USBCheckHIDRequest
                 _USBHIDCBSetIdleRateHandler
                 _USBHIDCBSetReportHandler
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
             i1_memset
           _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
         _USER_USB_CALLBACK_EVENT_HANDLER
       i1_memcpy
     _USBIncrement1msInternalTimers
     _USBStallHandler
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USER_USB_CALLBACK_EVENT_HANDLER
     i1_USBDeviceInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     13      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            48      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               48     41      48       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            4F      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               4F      0      4E       9       98.7%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2F      11       58.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      F3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10               C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      F3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Oct 24 09:44:13 2024

                ?_EUSART_SetRxInterruptHandler 00A8               __end_of_TMR2_SetInterruptHandler 1EC8  
                                   _USB_SD_Ptr 18BC                                 ___bmul@product 00AA  
                     __end_of_PS2Keyboard_Init 117E                                  _USBDeviceInit 0EA1  
                          ___wmul@multiplicand 00B1                             _USBCheckHIDRequest 0CE2  
             __end_of_USBHIDCBSetReportHandler 1F47                               i1___wmul@product 0074  
                   PS2Keyboard_SendCommand@cmd 00A8           USER_USB_CALLBACK_EVENT_HANDLER@event 0050  
         USER_USB_CALLBACK_EVENT_HANDLER@pdata 0052                                            l102 1F50  
                                          l261 129D                    __end_of_USBStdGetDscHandler 0CE2  
                                          l491 10EF                                            _BDT 0020  
                                          l868 0319                       _GenericQueue_CopyToArray 1668  
                                          _PR2 001B                                            _UIE 0E92  
                                          _UIR 0E90                         ??_EUSART_RxDataHandler 0070  
                                   _USBSuspend 10C7                 ?_EUSART_SetFramingErrorHandler 00A8  
                                 ___awmod@sign 00AE                           USBStdSetCfgHandler@i 0059  
                         USBStdSetCfgHandler@p 0056                                _TMR2_Initialize 1F87  
                                          wreg 0009                                 _USBDeviceTasks 06FD  
                          ?_USBCheckHIDRequest 0070                            _GenericQueue_IsFull 1084  
                               _USBDeviceState 006C             __end_of_IOCAF5_SetInterruptHandler 1E98  
                   _IOCAF5_SetInterruptHandler 1E90                              main@scanCodeValid 00E4  
                  ??_PS2Keyboard_DataInterrupt 0074                          ??_USBCtrlTrfRxService 0074  
                          _GenericQueue_Remove 0609                       USBEnableEndpoint@options 0077  
                  ?_PS2Keyboard_GetLastCommand 0070                                           l1231 1135  
                                         l1136 1671                     USBConfigureEndpoint@handle 0076  
                                         l5023 1F6D                                           l5019 1F67  
                                         l5153 0EC5                                           l5137 0EAC  
                                         l6203 00B2                                           l5331 0BED  
                                         l6213 00DA                                           l6205 00C0  
                                         l5253 12B3                                           l5229 10F4  
                                         l5165 0EE3                                           l6231 0124  
                                         l6223 010A                                           l5351 0C5C  
                                         l6303 0327                                           l5239 1294  
                                         l4705 14DF                                           l4609 1309  
                                         l6241 014C                                           l6209 00CD  
                                         l6217 00F6                                           l5361 1FED  
                                         l6313 0354                                           l4731 1515  
                                         l4723 1504                                           l6235 0131  
                                         l6227 0117                                           l5339 0BFD  
                                         l5187 0EFC                                           l6411 0AB0  
                                         l6403 0AA4                                           l4717 14EC  
                                         l4709 14E6                                           l5349 0C44  
                                         l6333 0398                                           l6317 036B  
                                         l6309 0342                                           l4719 14F8  
                                         l4727 150D                                           l4671 1345  
                                         l6271 01C3                                           l6263 01A9  
                                         l6239 013E                                           l6343 03B9  
                                         l6351 03E4                                           l6423 0ACA  
                                         l4673 132E                                           l6249 017B  
                                         l6337 03A0                                           l6329 0388  
                                         l6417 0ABB                                           l6409 0AAF  
                                         l4675 1349                                           l6275 01D0  
                                         l6267 01B6                                           l6259 019C  
                                         l6355 03FD                                           l4685 112F  
                                         l5493 1F85                                           l5485 1F7E  
                                         l6429 0AE1                                           l4679 1350  
                                         l6199 00A5                                           l4857 1205  
                                         l4875 06C3                                           l5755 11B3  
                                         l4893 1656                                           l5781 114A  
                                         l5757 11B4                                           l4879 06ED  
                                         l5775 114E                                           l4897 1666  
                                         _LATA 010C                                           _LATC 010E  
                                         u4405 0EC8                                           u4460 1E86  
                                         u6045 016A                                           u6205 034B  
                                         u3750 1FA3                                           u5335 12BE  
                                         u3760 1FA4                                           u3770 1090  
                                         u3915 14FE                                           u3835 1136  
                                         u3780 1091                                           u6420 0AA0  
                                         u3925 1505                                           u3845 113B  
                                         u6280 03C7                                           u6265 03B4  
                                         u6185 0320                                           u3895 14EF  
                        ??_USBCtrlTrfTxService 0070                                           u6477 0A81  
                                         u6487 1189                                           _UCFG 0E91  
                                         _UEP0 0E98                                           _UEP1 0E99  
                                         _UEIE 0E97                                           _UEIR 0E93  
                                         _UCON 0E8E                                           _TMR2 001A  
                                         _WPUA 020C         USBStdFeatureReqHandler@current_ep_data 005A  
                                         _pDst 0161                                           _main 0A72  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                              _USBDeviceAttach 10DF                      ?_SysTime_GetCurrentTimeMs 0070  
                                         btemp 007E                                           start 003D  
                                 _SysTime_Init 1EF0                           _GenericQueue_Dequeue 08BA  
                         _GenericQueue_IsEmpty 1F98                           ??_USBCheckHIDRequest 0074  
                         ?_GenericQueue_IsFull 00A8                     __end_of_USBCheckStdRequest 0A00  
                       ??_USBCtrlTrfOutHandler 007A                              ___bmul@multiplier 00AB  
                                _LocalSOFCount 0136                           _GenericQueue_Enqueue 0852  
              APP_KeyboardUpdateState@scanCode 00D0                            USBDeviceInit@i_1324 00AE  
                    ??_USBStdFeatureReqHandler 0056                           ?_GenericQueue_Remove 00C0  
                                ??_Log_Message 00AB                       ?_APP_KeyboardUpdateState 0070  
                     GenericQueue_Dequeue@item 00C2                       ??_USBStdGetStatusHandler 0070  
                               ?_USBDeviceInit 0070                                  ?_EUSART_Write 0070  
                __end_of_OSCILLATOR_Initialize 1F54                __end_of_PS2Keyboard_GetScanCode 11B6  
                                        ?_main 0070                                __end_of___awmod 151A  
                       __end_of_USBDeviceTasks 07D0                                          _T2CON 001C  
                    ?_USBCtrlEPServiceComplete 0070                                          i1l140 0033  
                                        i1l133 000D                                          i1l136 0019  
                                        i1l145 003B                                          i1l138 0026  
                                   i1memcpy@d1 0076                                          i1l267 11F0  
                                        i1l516 0DBC                                          i1l460 0754  
                                        i1l630 0B4C                                          i1l454 071C  
                                        i1l544 0F60                                          i1l464 077C  
                                        i1l529 16E1                                          i1l465 07CD  
                                        i1l642 09FF                                          i1l466 07CA  
                                        i1l644 0997                                          i1l709 0D6F  
                                        i1l581 15AD                                          i1l653 09BD  
                                        i1l584 15FB                                          i1l585 15B6  
                                        i1l586 15B9                                          i1l763 140F  
                                        i1l678 02CA                                          i1l859 1582  
                                   i1memcpy@s1 0078                                          _UADDR 0E96  
                                        _RCREG 0199                                          _RCSTA 019D  
                                        _TRISA 008C                                          _TRISC 008E  
                                        _USTAT 0E8F                                          _TXREG 019A  
                                 main@scanCode 00E6                                          _TXSTA 019E  
                                 _outputReport 0120                                __end_of_hex2str 1F87  
           __end_of_USBHIDCBSetIdleRateHandler 1F3A                     _USBHIDCBSetIdleRateHandler 1F2D  
              __end_of_USBCtrlEPAllowDataStage 1798                                          _sd000 18C2  
                                        _sd001 183F                                          _sd002 18AE  
                             __end_of_TMR2_ISR 1F07                 ?_USBIncrement1msInternalTimers 0070  
                               i1___awmod@sign 0076                        __end_of_PIN_MANAGER_IOC 1EE5  
                      _PS2USB_ScanCodeToUSBHID 11F2                                 _WDT_Initialize 1E6E  
                                        pclath 000A                               __end_ofi1___wmul 112D  
                                        status 0003                            i1___wmul@multiplier 0070  
                                        wtemp0 007E                               __end_ofi1_memcpy 1301  
                              _TMR2_StartTimer 1E71                               __end_ofi1_memset 1FEA  
                        ?_GenericQueue_Dequeue 00C0                          ?_GenericQueue_IsEmpty 00A8  
                        ??_GenericQueue_IsFull 00AA                           __end_of_ps2ExtUsbMap 0514  
                        _GenericQueue_Contains 1606                PS2USB_ScanCodeToUSBHID@scanCode 00A8  
                        ?_GenericQueue_Enqueue 00C0                          ??_GenericQueue_Remove 00C3  
                    _PS2Keyboard_DataInterrupt 1F54                                __initialization 003F  
                  ?_PS2Keyboard_ClockInterrupt 0070                                   __end_of_main 0AE6  
                               ??_EUSART_Write 00A8                        __end_of_TMR2_Initialize 1F98  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 00AA  
                     _TMR2_SetInterruptHandler 1EC0                                         ??_main 00D8  
                __end_ofi1_GenericQueue_IsFull 1FBF                            __end_of_Log_Message 1163  
                              ?_USBDeviceTasks 0070                       ?_PS2Keyboard_SendCommand 0070  
                GenericQueue_Init@element_size 00AA                                    ?_USBSuspend 0070  
                      _IOCAF4_InterruptHandler 016D                                i1_USBDeviceInit 0DFE  
                     _USBHIDCBSetReportHandler 1F3A                         __end_of_WDT_Initialize 1E71  
    __end_of_EUSART_DefaultFramingErrorHandler 1E68            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 1E67  
                      __end_of_USBDeviceAttach 10F8                     _EUSART_OverrunErrorHandler 0142  
                                       _ACTCON 039B                                         _APFCON 011D  
                                       _ANSELA 018C                                         _ANSELC 018E  
                                       _BORCON 0116                       __end_of_SysTimeInterrupt 1EDA  
                                       i1l1042 0546                                         i1l1037 053D  
                                       i1l1231 111A                                         i1l4003 0CFB  
                                       i1l4011 0D1A                                         i1l4023 0D31  
                                       i1l4015 0D22                                         i1l4033 0D4B  
                                       i1l4017 0D25                                         i1l4009 0D07  
                                       i1l4027 0D3F                                         i1l4117 16DC  
                                       i1l4037 0D53                                         i1l4213 1776  
                                       i1l4303 0CCD                                         i1l4129 16FD  
                                       i1l4137 1713                                         i1l4209 1763  
                                       i1l4139 1717                                         i1l4147 172D  
                                       i1l4059 158F                                         i1l4091 13E5  
                                       i1l4083 13D3                                         i1l4411 02BB  
                                       i1l4323 15CE                                         i1l4333 15E7  
                                       i1l4229 092B                                         i1l5301 128C  
                                       i1l4087 13DF                                         i1l4095 13E8  
                                       i1l4423 02EF                                         i1l4159 1FD7  
                                       i1l4247 094A                                         i1l5303 128E  
                                       i1l6113 053F                                         i1l6121 0557  
                                       i1l5073 1F2A                                         i1l4177 0A22  
                                       i1l4089 13E2                                         i1l4425 02F7  
                                       i1l4409 02B6                                         i1l4281 0C74  
                                       i1l4513 0D85                                         i1l5321 1554  
                                       i1l6123 057A                                         i1l4419 02D0  
                                       i1l4371 022F                                         i1l4355 0200  
                                       i1l4291 0CA6                                         i1l4531 0DC8  
                                       i1l5323 1557                                         i1l6125 057E  
                                       i1l6117 0548                                         i1l4357 0202  
                                       i1l4277 0C6A                                         i1l4269 097D  
                                       i1l4621 09A3                                         i1l4509 0D81  
                                       i1l4471 14A7                                         i1l4463 14A1  
                                       i1l4439 1114                                         i1l6151 05BE  
                                       i1l6143 05AA                                         i1l6127 0582  
                                       i1l6119 054E                                         i1l4383 0261  
                                       i1l4631 09B0                                         i1l5271 11D0  
                                       i1l4473 14B3                                         i1l4481 14C8  
                                       i1l6129 0584                                         i1l4393 027B  
                                       i1l4385 026B                                         i1l4377 024D  
                                       i1l4297 0CC7                                         i1l4289 0CA3  
                                       i1l4633 09B3                                         i1l4617 099D  
                                       i1l4459 149A                                         i1l6155 05C6  
                                       i1l4571 0F7E                                         i1l4395 0282  
                                       i1l4299 0CCA                                         i1l4643 09C7  
                                       i1l4619 09A0                                         i1l4539 0DD1  
                                       i1l5523 0E20                                         i1l5507 0E09  
                                       i1l4485 14D0                                         i1l4477 14BF  
                                       i1l6165 05E0                                         i1l4581 0FB3  
                                       i1l3925 143D                                         i1l4629 09AD  
                                       i1l5269 11C9                                         i1l6159 05CD  
                                       i1l6175 05E6                                         i1l4823 0B01  
                                       i1l4583 0FBF                                         i1l3927 1445  
                                       i1l3935 1219                                         i1l4399 028D  
                                       i1l4647 09D4                                         i1l5535 0E3D  
                                       i1l5631 072C                                         i1l4497 12E3  
                                       i1l6169 05E3                                         i1l6177 05FE  
                                       i1l4825 0B04                                         i1l4569 0F68  
                                       i1l4809 13D0                                         i1l6601 09DC  
                                       i1l5617 0716                                         i1l5609 0709  
                                       i1l5731 1385                                         i1l6187 1F1D  
                                       i1l6283 1EE0                                         i1l4835 0B2F  
                                       i1l4595 0FF9                                         i1l3939 1220  
                                       i1l6611 0D0F                                         i1l6603 15F0  
                                       i1l5643 0746                                         i1l5725 1375  
                                       i1l4845 0B5D                                         i1l6613 0D5B  
                                       i1l6605 0CD6                                         i1l5557 0E53  
                                       i1l5653 075A                                         i1l5637 0732  
                                       i1l5735 1395                                         i1l6615 05F0  
                                       i1l4847 0B5E                                         i1l4839 0B3F  
                                       i1l3967 0B7D                                         i1l3959 0B6D  
                                       i1l6607 13F0                                         i1l3977 0BC4  
                                       i1l6609 140A                                         i1l3979 0BDC  
                                       i1l5667 0775                                         i1l5659 0761  
                                       i1l4797 139F                                         i1l3997 0CEF  
                                       i1l5693 07B2                                         i1l5677 0782  
                                       i1l5695 07C1                                         i1l5687 0799  
                                       u313_25 176D                     __end_of_EUSART_is_tx_ready 1E88  
                                       u344_20 1FB7                                         u345_20 1FB8  
                                       u353_25 14AA                                         u355_25 14B9  
                                       u347_25 111B                                         u356_25 14C0  
                                       u348_25 1120                                         u284_25 1416  
                                       u285_25 141C                                         u286_25 1424  
                                       u367_25 0F5C                                         _OSCCON 0099  
                                       u458_25 1525                                         u299_25 1588  
                                       u580_24 0591                                         u572_24 0529  
                                       u580_25 0590                                         u572_25 0528  
                                       u573_20 052F                                         u582_20 05B9  
                                       u574_20 0530                                         u583_20 05BA  
                                       _PLLRDY 04D6                                         u496_25 0E23  
                                  i1memcpy@tmp 0054                                         u649_27 1101  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097                   i1USBTransferOnePacket@handle 0079  
              __end_of_APP_KeyboardUpdateState 01EC                              _shortPacketStatus 0162  
                             _APP_KeyboardInit 1561                                USBDeviceTasks@i 0062  
                  USBStdFeatureReqHandler@pUEP 0058                       USBTransferOnePacket@data 00A9  
                   USBCtrlTrfInHandler@lastDTS 0077                                ??_USBDeviceInit 00A8  
                                       ___bmul 1F65                                _keyboardIsBreak 014F  
                                       ___wmul 112D                                      ??___awmod 00AC  
                              _keyboardCommand 014E                              _USBEnableEndpoint 1211  
                          _EUSART_Transmit_ISR 11D3                                         _memcmp 1327  
                                       _memcpy 1301                   i1PS2Keyboard_SendCommand@cmd 0070  
                                       _memset 1FEA                                ___awmod@divisor 00A8  
                                       _timeMs 0128                                      ??_hex2str 00A8  
                              ___awmod@counter 00AD                             ?_USBEnableEndpoint 0077  
                            __end_ofi1___awmod 14D5                                   Log_Message@i 00AD  
                    ??_PS2USB_ScanCodeToUSBHID 00A8                                ?_WDT_Initialize 0070  
                                  _OldSOFCount 0134                            ??_USBEnableEndpoint 0078  
                           APP_KeyboardTasks@i 00D7                        __end_of_TMR2_StartTimer 1E74  
     TMR2_SetInterruptHandler@InterruptHandler 00A8     IOCAF5_SetInterruptHandler@InterruptHandler 00A8  
   IOCAF4_SetInterruptHandler@InterruptHandler 00A8                               ?_PIN_MANAGER_IOC 0070  
                                  _CtrlTrfData 0048                                   ??_IOCAF4_ISR 007E  
                                 ??_IOCAF5_ISR 0074                           ?_EUSART_Transmit_ISR 0070  
           USBHIDCBSetIdleRateHandler@reportID 0073                           _controlTransferState 006A  
                PS2Keyboard_ClockInterrupt@bit 007D                              _SYSTEM_Initialize 1FBF  
                      __end_of__initialization 0083                     i1USBTransferOnePacket@data 0071  
                      ?i1_GenericQueue_Enqueue 0055                         ??_GenericQueue_Dequeue 00C3  
                       ??_GenericQueue_IsEmpty 00AA                         ?_GenericQueue_Contains 00BE  
                           ?_SYSTEM_Initialize 0070                         ??_GenericQueue_Enqueue 00C4  
                     GenericQueue_Enqueue@item 00C2           __end_of_EUSART_SetTxInterruptHandler 1EC0  
                 _EUSART_SetTxInterruptHandler 1EB8                            ___bmul@multiplicand 00A8  
                      i1GenericQueue_Enqueue@q 0055                                 __pcstackCOMMON 0070  
                   ??_GenericQueue_CopyToArray 00C3                      __end_of_USBEnableEndpoint 1231  
                                __end_of_sd000 18C6                                  __end_of_sd001 1873  
                                __end_of_sd002 18BC                                   __pidataBANK3 1E74  
                          ??_SYSTEM_Initialize 00B0                                    _Log_Message 1148  
                                    ?_TMR2_ISR 0070                                _active_protocol 016B  
              __end_of_PS2Keyboard_SendCommand 119A         __end_of_IOCAF4_DefaultInterruptHandler 0003  
               _IOCAF4_DefaultInterruptHandler 0002                        __end_ofi1_USBDeviceInit 0EA1  
                  __end_of_USBCtrlTrfInHandler 0B61                               ?_TMR2_Initialize 0070  
                            ?_PS2Keyboard_Init 0070                   ?_Log_UtilityConvertByteToHex 00AC  
                           __end_of_IOCAF4_ISR 1F20                             __end_of_IOCAF5_ISR 1F2D  
                                    ?i1___wmul 0070                    __end_ofi1_GenericQueue_Init 1251  
                           ??_PS2Keyboard_Init 00AC                                 _OPTION_REGbits 0095  
                                    ?i1_memcpy 0076                                      ?i1_memset 0070  
                         _eusartRxStatusBuffer 01A8                    ?_IOCAF5_SetInterruptHandler 00A8  
              ??_EUSART_SetOverrunErrorHandler 00AA                       ??_USBCtrlTrfSetupHandler 005F  
                      _USBTicksSinceSuspendEnd 0156                     ?i1_PS2Keyboard_SendCommand 0070  
              i1GenericQueue_Init@element_size 0072                                  _keyboardState 0155  
                             ?_USBDeviceAttach 0070                      __end_of_SYSTEM_Initialize 1FD4  
                        ??_EUSART_Transmit_ISR 0070                         _USBStdGetStatusHandler 15A9  
                   i1GenericQueue_Enqueue@item 0057                 __end_ofi1_GenericQueue_Enqueue 1800  
                                   __pbssBANK0 0063                                     __pbssBANK1 00E9  
                                   __pbssBANK2 0121                                     __pbssBANK3 01A0  
                         __end_of_EUSART_Write 12B6               ??_IOCAF5_DefaultInterruptHandler 0070  
              ?_IOCAF5_DefaultInterruptHandler 0070                                    _pBDTEntryIn 0063  
                      _IOCAF5_InterruptHandler 01CD                            _keyboardCommandBits 014D  
             __end_of_USBCtrlEPServiceComplete 0DFE                            _keyboardCommandOnes 014C  
             PS2Keyboard_ClockInterrupt@bitPos 007C             Log_UtilityConvertByteToHex@bufSize 00AD  
                                   __pmaintext 0A72              APP_KeyboardUpdateState@usbHidCode 00CC  
       APP_KeyboardUpdateState@usbHidCode_2855 00CE         APP_KeyboardUpdateState@usbHidCode_2864 00CF  
       APP_KeyboardUpdateState@usbHidCode_2856 00CD                           USBCtrlTrfRxService@i 0078  
               Log_UtilityConvertByteToHex@buf 00AC                                        ?___bmul 00A8  
                ?_EUSART_SetTxInterruptHandler 00A8               _EUSART_TxDefaultInterruptHandler 014A  
                                      ?___wmul 00AF                                     ??_TMR2_ISR 0070  
                                   __pintentry 0004                                        ?_memcmp 00B5  
                                      ?_memcpy 00B5                                        _BAUDCON 019F  
                                      ?_memset 00A8                                     _device_dsc 189C  
                             _USBCtrlEPService 151A                   ??_EUSART_DefaultErrorHandler 0071  
                                   _ep_data_in 013E                                     ??i1___wmul 0074  
                  __end_of_USBCtrlTrfRxService 1000                             _USBCheckStdRequest 098F  
                                _eusartRxCount 0164                              _configDescriptor1 1873  
                ??_Log_UtilityConvertByteToHex 00AE                                     ??i1_memcpy 007C  
                                   ??i1_memset 0074                                   _ps2ExtUsbMap 0415  
       APP_KeyboardTasks@TimeDeltaMilliseconds 00D5                    __end_of_USBCtrlTrfTxService 1731  
                          _USBStdSetCfgHandler 0923                    ?_USBHIDCBSetIdleRateHandler 0070  
                             main@hndlScanCode 00E5                                        _OSCTUNE 0098  
                Log_UtilityConvertByteToHex@d0 00AF                  Log_UtilityConvertByteToHex@d1 00B1  
                     ??_EUSART_SetErrorHandler 00AA                            ?_USBCheckStdRequest 0070  
                             ?_TMR2_StartTimer 0070                                        _UIEbits 0E92  
            __end_ofi1_PS2Keyboard_SendCommand 1112                                        _UIRbits 0E90  
                        GenericQueue_Dequeue@q 00C0                    APP_KeyboardUpdateState@leds 00CB  
                                 i1memset@dest 0075                       ??i1_USBTransferOnePacket 0074  
                        GenericQueue_IsEmpty@q 00A8                              __end_of_ps2UsbMap 1084  
              ??_USBIncrement1msInternalTimers 0070                           ?_USBStdSetCfgHandler 0070  
                            _APP_KeyboardTasks 030C                     ??_TMR2_SetInterruptHandler 00AA  
                            __end_of_hid_rpt01 183F                             Log_Message@bufSize 00AA  
                         ??_USBCheckStdRequest 005D                             ?_APP_KeyboardTasks 0070  
                                      ___awmod 14D5                          GenericQueue_Enqueue@q 00C0  
                         i1GenericQueue_Init@q 0070                               ??_USBDeviceTasks 0061  
                   ??_USBHIDCBSetReportHandler 0070                              ??_USBStallHandler 0070  
                             _keyboardIdleRate 0138                               ?i1_USBDeviceInit 0070  
                    __end_of_configDescriptor1 189C                               _keyboardIsExtend 0150  
                                      _hex2str 1F76                                        __ptext1 1EF0  
                                      __ptext2 1E71                                        __ptext3 1FBF  
                                      __ptext4 1E6E                                        __ptext5 0EA1  
                                      __ptext6 10DF                                        __ptext7 1F87  
                                      __ptext8 1EC0                                        __ptext9 07D0  
                                      _inPipes 00E9                    _USBDeferOUTDataStagePackets 0157  
                          ??_APP_KeyboardTasks 00D1                          _OSCILLATOR_Initialize 1F47  
                                 ??_USBSuspend 007D                                      _T2CONbits 001C  
                             _keyboardScanCode 0168                               ___awmod@dividend 00AA  
                     ??_PIN_MANAGER_Initialize 00AA                                      _IOCAFbits 0393  
                     __end_of_APP_KeyboardInit 15A9                                      _IOCANbits 0392  
                                    _IOCAPbits 0391                             __end_of_USB_CD_Ptr 18C8  
                                      clrloop0 1F08                       _SysTime_GetCurrentTimeMs 1EC8  
                         end_of_initialization 0083                    __end_of_GenericQueue_IsFull 1098  
                           __end_of_USB_SD_Ptr 18C2                                        memcmp@l 00BB  
                                      memcmp@n 00B8                                        memcmp@r 00BD  
                            ?_SysTimeInterrupt 0070          __end_of_EUSART_SetOverrunErrorHandler 1EB0  
                _EUSART_SetOverrunErrorHandler 1EA8                                        memcpy@d 00BB  
                                      memcpy@n 00B9                                        memcpy@s 00BD  
                          _pBDTEntryEP0OutNext 0067                    __end_of_GenericQueue_Remove 06FD  
                                      memset@c 00A8                                        memset@n 00AA  
                                      memset@p 00AD                                _USB1msTickCount 01C0  
                      _PS2Keyboard_GetScanCode 119A                       ?_USBStdFeatureReqHandler 0070  
                           ??_SysTimeInterrupt 0070                      __end_of_APP_KeyboardTasks 0415  
                            _EUSART_Initialize 144F                          ??_USBStdSetCfgHandler 007D  
                                   hex2str@val 00A8                             ?_EUSART_Initialize 0070  
                           __end_of_USBSuspend 10DF                        _USBCtrlEPAllowDataStage 1731  
                                    _RCSTAbits 019D                             _EUSART_is_tx_ready 1E81  
                                   _prevTimeMs 012C                       _USBCtrlEPServiceComplete 0D70  
                        i1___wmul@multiplicand 0072                     _USBStatusStageEnabledFlag1 015A  
                   _USBStatusStageEnabledFlag2 0159                            ??_EUSART_Initialize 00AA  
                             ??_WDT_Initialize 00A8                 ??_EUSART_SetTxInterruptHandler 00AA  
                           USBEnableEndpoint@p 007A                                      _PORTAbits 000C  
                          ?_EUSART_is_tx_ready 0070                          i1_GenericQueue_IsFull 1FAB  
                                    _TRISAbits 008C                             _BothEP0OutUOWNsSet 015D  
                    USBStdSetCfgHandler@i_2020 0058                                      i1___awmod 1490  
                 ??_IOCAF4_SetInterruptHandler 00AA                      USBConfigureEndpoint@EPNum 0075  
                            _GenericQueue_Init 1251                     ?_USBCtrlEPAllowStatusStage 0070  
                      ??_GenericQueue_Contains 00C1            USER_USB_CALLBACK_EVENT_HANDLER@size 0054  
                                    _USTATcopy 006D                             ?_GenericQueue_Init 00A8  
                    __end_of_EUSART_Initialize 1490                       i1USBTransferOnePacket@ep 0078  
                 __end_of_USBTransferOnePacket 0C61                           ??_EUSART_is_tx_ready 00A8  
                          ??_GenericQueue_Init 00AC                          i1USBDeviceInit@i_1324 0076  
                       _USBCtrlTrfSetupHandler 080A                                   ?_Log_Message 00AA  
         __end_of_TMR2_DefaultInterruptHandler 0800                   _TMR2_DefaultInterruptHandler 07FF  
                               __end_of___bmul 1F76                          __end_of_USBDeviceInit 0F4D  
        __end_of_USBIncrement1msInternalTimers 10AF                  _USBIncrement1msInternalTimers 1098  
           __end_of_EUSART_DefaultErrorHandler 1E6B                     _EUSART_DefaultErrorHandler 1E68  
                                    i1memcpy@d 0050                                      i1memcpy@n 007A  
                                    i1memcpy@s 0052                                 __end_of___wmul 1148  
                                    i1memset@c 0070                                      i1memset@n 0072  
                                    i1memset@p 0076                                   _EUSART_Write 1293  
                               __end_of_memcmp 135E                                 __end_of_memcpy 1327  
                       ?_OSCILLATOR_Initialize 0070                                 __end_of_memset 2000  
                   ?_USBHIDCBSetReportComplete 0070                              _USBBusIsSuspended 015F  
                          start_initialization 003F                        _APP_KeyboardUpdateState 0087  
                      ?_USBStdGetStatusHandler 0070                  USBCtrlTrfRxService@byteToRead 0079  
                    __end_of_GenericQueue_Init 1271                                     ?i1___awmod 0070  
                               _oldInputReport 01A0   EUSART_SetRxInterruptHandler@interruptHandler 00A8  
 EUSART_SetTxInterruptHandler@interruptHandler 00A8                    ??i1_PS2Keyboard_SendCommand 0070  
                 __end_of_USBConfigureEndpoint 144F                __end_of_USBStdFeatureReqHandler 030C  
                    ??_PS2Keyboard_GetScanCode 00C7                   ??_PS2Keyboard_GetLastCommand 00A8  
            __end_of_USBCtrlEPAllowStatusStage 0A72                       __end_of_USBCtrlEPService 1561  
                                ?_SysTime_Init 0070                      ??_USBCtrlEPAllowDataStage 0073  
                               USBDeviceInit@i 00AF                                 USBDeviceInit@p 00AC  
               ?_EUSART_SetOverrunErrorHandler 00A8                         _pBDTEntryEP0OutCurrent 006B  
                      USBTransferOnePacket@dir 00A8                        USBTransferOnePacket@len 00AB  
                   _EUSART_FramingErrorHandler 0144                                       ??___bmul 00A9  
                                     ??___wmul 00B3                         _EUSART_SetErrorHandler 1E98  
                          _USBStdGetDscHandler 0C61                                    __pdataBANK3 01C7  
                           i1___awmod@dividend 0072                                       ??_memcmp 00BA  
                                     ??_memcpy 00BB                                       ??_memset 00AC  
                ?_TMR2_DefaultInterruptHandler 0070                       ?_PS2USB_ScanCodeToUSBHID 0070  
                                   memset@dest 00AE                PS2Keyboard_GetScanCode@scanCode 00C7  
                       i1_USBTransferOnePacket 0B61         __end_of_IOCAF5_DefaultInterruptHandler 0004  
               _IOCAF5_DefaultInterruptHandler 0003                         ?i1_GenericQueue_IsFull 0070  
                       i1GenericQueue_IsFull@q 0070                         _USBActiveConfiguration 006F  
               __end_of_USBStdGetStatusHandler 1606                      i1USBTransferOnePacket@dir 0070  
                                  __pbssBIGRAM 232C                    __end_of_EUSART_Transmit_ISR 11F2  
                    i1USBTransferOnePacket@len 0073              __end_of_USBHIDCBSetReportComplete 1E81  
                                    ___latbits 0002                                  __pcstackBANK0 0050  
                                __pcstackBANK1 00A8                      ?_GenericQueue_CopyToArray 00C0  
                         ?_USBStdGetDscHandler 0070                        _PS2Keyboard_SendCommand 117E  
    __end_ofi1_APP_KeyboardProcessOutputReport 080A        __end_of_APP_KeyboardProcessOutputReport 1EF0  
          ??i1_APP_KeyboardProcessOutputReport 0071             ?i1_APP_KeyboardProcessOutputReport 0070  
             ?_APP_KeyboardProcessOutputReport 0070              ??_APP_KeyboardProcessOutputReport 00A9  
            i1_APP_KeyboardProcessOutputReport 0800                _APP_KeyboardProcessOutputReport 1EE5  
                   __end_of_EUSART_Receive_ISR 1398                                   _keyboardData 0151  
                   __end_of_USBWakeFromSuspend 11D3               _EUSART_RxDefaultInterruptHandler 0148  
                               ??_SysTime_Init 00AA                                _USBStallHandler 1271  
                                 _pBDTEntryOut 0130                                      __pnvBANK2 016D  
                                    __pnvBANK3 01CD                           _keyboardCommandCount 0069  
                 __end_of_EUSART_RxDataHandler 10C7                                      _main$2580 00E2  
                                    _main$2579 00E0                         _PIN_MANAGER_Initialize 07D0  
                    i1_PS2Keyboard_SendCommand 10F8                                      __ptext100 1E67  
                                    __ptext101 1E68                                      __ptext102 10AF  
              Log_UtilityConvertByteToHex@byte 00B0                                       ?___awmod 00A8  
                                    _ps2UsbMap 1000                   ??_PS2Keyboard_ClockInterrupt 005C  
                           GenericQueue_Init@q 00A8                                   _eusartRxHead 00EE  
                                 _eusartTxHead 0167                                      _hid_rpt01 1800  
                                 _eusartRxTail 0165                                   _eusartTxTail 0166  
                                    _idle_rate 016C                   ??_INTERRUPT_InterruptManager 007E  
                        _keyboardScanCodeValid 0152                                       ?_hex2str 0070  
                        _keyboardScanCodeQueue 2391                      ??_APP_KeyboardUpdateState 00C9  
                      _eusartTxBufferRemaining 00EF                     ??_SysTime_GetCurrentTimeMs 0074  
                         _USBTransferOnePacket 0BE1                           GenericQueue_IsFull@q 00A8  
           __end_of_IOCAF4_SetInterruptHandler 1E90                     _IOCAF4_SetInterruptHandler 1E88  
                 __end_of_USBCtrlTrfOutHandler 13D2                              ?_APP_KeyboardInit 0070  
                                  ??i1___awmod 0074                          ??_USBStdGetDscHandler 0070  
                                  _ep_data_out 013C                  USBConfigureEndpoint@direction 0070  
                           ??_APP_KeyboardInit 007D                                 _eusartRxBuffer 01B0  
                               _eusartTxBuffer 01B8                           GenericQueue_Remove@i 00C7  
                         GenericQueue_Remove@j 00C8                           GenericQueue_Remove@q 00C0  
                               ___wmul@product 00B3                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 00A8                     __end_of_USBCheckHIDRequest 0D70  
                   ??_USBCtrlEPServiceComplete 0077                                      clear_ram0 1F07  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 0163                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 00AA                                       _PIR2bits 0012  
              __end_of_PS2USB_ScanCodeToUSBHID 1211                                       _UEP0bits 0E98  
                                    main@F3300 01C4                                      main@F3304 01C7  
                   _USBDeferINDataStagePackets 0158      __end_of_EUSART_DefaultOverrunErrorHandler 07FF  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 07FB                                       _TMR2_ISR 1EFB  
                                     _UCONbits 0E8E                              ??_PIN_MANAGER_IOC 007E  
                         _USBConfigureEndpoint 1410            __end_of_Log_UtilityConvertByteToHex 12DB  
                  _Log_UtilityConvertByteToHex 12B6                        GenericQueue_Remove@item 00C2  
                    APP_KeyboardTasks@scanCode 00D3                              ___wmul@multiplier 00AF  
                        ?_USBTransferOnePacket 00A8                                       i1___wmul 1112  
                              main@scanCodeStr 00DA                                       i1_memcpy 12DB  
                                     i1_memset 1FD4                       ??i1_GenericQueue_Enqueue 0059  
                                 _RemoteWakeup 0160                 ??_TMR2_DefaultInterruptHandler 0070  
                    ?_TMR2_SetInterruptHandler 00A8                     ?_PS2Keyboard_DataInterrupt 0070  
                    ??_PS2Keyboard_SendCommand 00A8                        __end_of_USBStallHandler 1293  
           __end_of_PS2Keyboard_GetLastCommand 1E6E                     _PS2Keyboard_GetLastCommand 1E6B  
                    ?_USBHIDCBSetReportHandler 0070                               _PS2Keyboard_Init 1163  
                  ??_USBCtrlEPAllowStatusStage 0070                    __end_of_USBStdSetCfgHandler 098F  
                            ??_TMR2_Initialize 00AA                  __end_of_GenericQueue_Contains 1668  
                           __end_of_device_dsc 18AE                         GenericQueue_Contains@i 00C5  
                       GenericQueue_Contains@q 00BE                        ?_USBCtrlTrfSetupHandler 0070  
                      USBStdGetStatusHandler@p 0072                                      memcpy@tmp 00BF  
                       USBTransferOnePacket@ep 00B0                                       _SetupPkt 0040  
                            i1___awmod@divisor 0070                        ??_OSCILLATOR_Initialize 00A8  
                          _EUSART_ErrorHandler 0140                          ?_USBConfigureEndpoint 0070  
                            i1___awmod@counter 0075                              ??_USBDeviceAttach 00A8  
                  ?_EUSART_DefaultErrorHandler 0070                           __end_of_SysTime_Init 1EFB  
                  ??_USBHIDCBSetReportComplete 0071                           _EUSART_RxDataHandler 10AF  
                                     __ptext10 1F47                                       __ptext11 144F  
                                     __ptext20 1251                                       __ptext12 1EB8  
                                     __ptext21 119A                                       __ptext13 1EB0  
                                     __ptext30 0BE1                                       __ptext22 08BA  
                                     __ptext14 1EA8                                       __ptext31 1668  
                                     __ptext23 12B6                                       __ptext15 1EA0  
                                     __ptext40 1606                                       __ptext32 1F65  
                                     __ptext24 1F76                                       __ptext16 1E98  
                                     __ptext41 1327                                       __ptext33 0087  
                                     __ptext25 1148                                       __ptext17 1163  
                                     __ptext50 11B6                                       __ptext42 112D  
                                     __ptext34 11F2                                       __ptext26 1E81  
                                     __ptext18 1E90                                       __ptext51 10C7  
                                     __ptext43 14D5                                       __ptext35 1E6B  
                                     __ptext27 1293                                       __ptext19 1E88  
                                     __ptext60 1FD4                                       __ptext52 1271  
                                     __ptext44 1F98                                       __ptext36 0609  
                                     __ptext28 030C                                       __ptext61 15A9  
                                     __ptext53 1098                                       __ptext45 1EE5  
                                     __ptext37 0852                                       __ptext29 1FEA  
                                     __ptext70 1231                                       __ptext62 0C61  
                                     __ptext54 151A                                       __ptext46 117E  
                                     __ptext38 1301                                       __ptext71 1211  
                                     __ptext63 01EC                                       __ptext55 080A  
                                     __ptext39 1084                                       __ptext80 16CA  
                                     __ptext72 1410                                       __ptext64 13D2  
                                     __ptext56 0D70                                       __ptext48 06FD  
                                     __ptext81 1EFB                                       __ptext73 1398  
                                     __ptext65 0CE2                                       __ptext57 1731  
                                     __ptext49 0DFE                                       __ptext90 0514  
                                     __ptext82 1ED1                                       __ptext74 0F4D  
                                     __ptext66 1F3A                                       __ptext58 098F  
                                     __ptext91 1798                                       __ptext83 07FF  
                                     __ptext75 0A00                                       __ptext67 1F2D  
                                     __ptext59 0923                                       __ptext92 12DB  
                                     __ptext84 1EDA                                       __ptext76 0AE6  
                                     __ptext68 1561                                       __ptext93 1112  
                                     __ptext85 1F20                                       __ptext77 1E7A  
                                     __ptext69 0B61                                       __ptext94 1490  
                                     __ptext86 0003                                       __ptext78 0800  
                                     __ptext95 1FAB                                       __ptext87 1F54  
                                     __ptext79 10F8                                       __ptext96 1EC8  
                                     __ptext88 1F13                                       __ptext97 11D3  
                                     __ptext89 0002                                       __ptext98 135E  
                                     __ptext99 07FB                   ??_IOCAF5_SetInterruptHandler 00AA  
            __end_of_PS2Keyboard_DataInterrupt 1F65                              _keyboardIndexData 0154  
                                   _IOCAF4_ISR 1F13                  GenericQueue_CopyToArray@array 00C2  
                                   _IOCAF5_ISR 1F20                  GenericQueue_CopyToArray@count 00C8  
                GenericQueue_CopyToArray@index 00C7                                       _keyboard 232C  
               __end_of_USBCtrlTrfSetupHandler 0852                              ?_USBCtrlEPService 0070  
                           ??_USBCtrlEPService 0060                        ?_EUSART_SetErrorHandler 00A8  
                          _USBCtrlTrfInHandler 0AE6  EUSART_SetOverrunErrorHandler@interruptHandler 00A8  
                                  _inputReport 00A0             __end_of_PS2Keyboard_ClockInterrupt 0609  
                   _PS2Keyboard_ClockInterrupt 0514                              _keyboardOnesCount 0153  
                                     _outPipes 0121                           _USBCtrlTrfOutHandler 1398  
                                     int$flags 007E                            i1_GenericQueue_Init 1231  
                      ?i1_USBTransferOnePacket 0070               __end_of_GenericQueue_CopyToArray 16CA  
                    _USBCtrlEPAllowStatusStage 0A00                              ??_TMR2_StartTimer 00A8  
           __end_of_INTERRUPT_InterruptManager 003D                     _INTERRUPT_InterruptManager 0004  
                      ??i1_GenericQueue_IsFull 0072          __end_of_EUSART_SetFramingErrorHandler 1EA8  
                _EUSART_SetFramingErrorHandler 1EA0                         ??_USBTransferOnePacket 00AC  
             __end_of_SysTime_GetCurrentTimeMs 1ED1                   __end_of_GenericQueue_Dequeue 0923  
                 __end_of_GenericQueue_IsEmpty 1FAB                      _USBDeferStatusStagePacket 015B  
                             i1USBDeviceInit@i 0077                               i1USBDeviceInit@p 0074  
                                   _INTCONbits 000B                   __end_of_GenericQueue_Enqueue 08BA  
                         ?_USBCtrlTrfInHandler 0070                                       memcmp@vl 00B5  
                                     memcmp@vr 00B7                          ?_EUSART_RxDataHandler 0070  
                                     memcpy@d1 00B5                                       memcpy@s1 00B7  
                USBCtrlTrfTxService@byteToSend 0072                                 Log_Message@buf 00AC  
                               __pstringtext10 18C2                   ??_USBHIDCBSetIdleRateHandler 0071  
                             ?_USBStallHandler 0070                           ?i1_GenericQueue_Init 0070  
                     USBStdFeatureReqHandler@p 005B                                       intlevel1 0000  
      __end_of_USER_USB_CALLBACK_EVENT_HANDLER 1410               ?_USER_USB_CALLBACK_EVENT_HANDLER 0050  
            ??_USER_USB_CALLBACK_EVENT_HANDLER 007D                _USER_USB_CALLBACK_EVENT_HANDLER 13D2  
                            ??i1_USBDeviceInit 0070                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 1EA0                      _USBHIDCBSetReportComplete 1E7A  
         __end_of_EUSART_SetRxInterruptHandler 1EB8                   _EUSART_SetRxInterruptHandler 1EB0  
                    GenericQueue_CopyToArray@q 00C0                      GenericQueue_Contains@item 00C0  
               __end_ofi1_USBTransferOnePacket 0BE1                         ??_USBConfigureEndpoint 0071  
                        ?_USBCtrlTrfOutHandler 0070                             _EUSART_Receive_ISR 135E  
                          _USBCtrlTrfRxService 0F4D  EUSART_SetFramingErrorHandler@interruptHandler 00A8  
                           _USBWakeFromSuspend 11B6                               _SysTimeInterrupt 1ED1  
                      _USBStdFeatureReqHandler 01EC                     PS2Keyboard_GetScanCode@ret 00C8  
                          _USBCtrlTrfTxService 16CA                                  __pstringtext1 0415  
                                __pstringtext2 1000                                  __pstringtext3 18BC  
                                __pstringtext4 18C6                                  __pstringtext5 1800  
                                __pstringtext6 183F                                  __pstringtext7 1873  
                                __pstringtext8 189C                                  __pstringtext9 18AE  
                          ?_EUSART_Receive_ISR 0070                            ?_USBWakeFromSuspend 0070  
                        ??_USBCtrlTrfInHandler 0073                          _USBAlternateInterface 006E  
                     ?_PS2Keyboard_GetScanCode 0070                    ?_IOCAF4_SetInterruptHandler 00A8  
        USBHIDCBSetIdleRateHandler@newIdleRate 0070                            USBEnableEndpoint@ep 007C  
                              _endpoint_number 015E                          ??i1_GenericQueue_Init 0074  
                         ?_USBCtrlTrfRxService 0070                                    ?_IOCAF4_ISR 0070  
                                  ?_IOCAF5_ISR 0070                             EUSART_Write@txData 00A9  
               __end_of_PIN_MANAGER_Initialize 07FB                       ?_USBCtrlEPAllowDataStage 0070  
                         ?_USBCtrlTrfTxService 0070                                     _SOFCounter 013A  
             ??_IOCAF4_DefaultInterruptHandler 0070                ?_IOCAF4_DefaultInterruptHandler 0070  
                 _USBStatusStageTimeoutCounter 015C                                _PIN_MANAGER_IOC 1EDA  
                         ??_EUSART_Receive_ISR 0071                          _TMR2_InterruptHandler 0146  
                         ??_USBWakeFromSuspend 007D                     USBTransferOnePacket@handle 00B1  
   APP_KeyboardTasks@needToSendNewReportPacket 00D4                         i1_GenericQueue_Enqueue 1798  
                                   _USB_CD_Ptr 18C6  
